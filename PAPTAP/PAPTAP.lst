Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2021.01.24 - 16:23:25]

PAPTAP.ASM
Errors: 0

       1   00:9000                      ;NAM PAPTAP
       2   00:9000                      ; * HIGH SPEED PAPER TAPE LOADER PROGRAM
       3   00:9000                      ; * DEVELOPED BY DR. CHARLES ADAMS
       4   00:9000                      ; * TEXAS A&M UNIVERSITY
       5   00:9000                      ; *
       6   00:9000                      ; * MODIFIED BY CHRISTOPHER MALLERY
       7   00:9000                      ; * - Ported to RC2014
       8   00:9000                      ; *
       9   00:9000                       		    ORG		$9000
      10   00:9000                                 
      11   00:9000  (00:0068)           PIOADPORT 	EQU 	0x68			; PIO port A data register
      12   00:9000  (00:0069)           PIOBDPORT 	EQU 	0x69			; PIO port B data register
      13   00:9000  (00:006A)           PIOACPORT 	EQU 	0x6A			; PIO port A control register
      14   00:9000  (00:006B)           PIOBCPORT 	EQU 	0x6B			; PIO port B control register
      15   00:9000                      
      16   00:9000  (00:0080)           SERDEV      EQU     0x80            ; OUTPUT CHARACTER ROUTINE
      17   00:9000                      
      18   00:9000  CD 48 90            ENTER       CALL    PIASUP          ; INIT PIA
      19   00:9003  CD 61 90            START       CALL    PIADAT          ; GET 1ST BYTE
      20   00:9006  FE 3A                           CP      ':'            ; IS IT AN :?
      21   00:9008  C2 03 90                        JP      NZ, START       ; IF NOT, START OVER
      22   00:900B  3E 00                           LD      A, 0x00
      23   00:900D  32 BF 90                        LD      (CHKSUM), A
      24   00:9010  CD 80 90                        CALL     GETBYTE        ; GET THE BYTE COUNT
      25   00:9013  32 BB 90                        LD      (NUMBYT), A
      26   00:9016  CD 9E 90                        CALL    GETADDR         ; GET ADDRESS AND LOAD IX
      27   00:9019  CD 80 90                        CALL    GETBYTE         ; GET RECORD TYPE
      28   00:901C  FE 00                           CP      0x00            ; IF NOT ZERO START OVER
      29   00:901E  C2 03 90                        JP      NZ, START       
      30   00:9021  CD 80 90            LOOP        CALL    GETBYTE        ; READ THE BYTES
      31   00:9024  3A BB 90                        LD      A, (NUMBYT)
      32   00:9027  3D                              DEC     A
      33   00:9028  32 BB 90                        LD      (NUMBYT), A
      34   00:902B  CA 36 90                        JP      Z, CHKCHK      ; LAST BYTE IS CHECKSUM
      35   00:902E  DD 77 00                        LD      (IX+0), A 
      36   00:9031  DD 23                           INC     IX
      37   00:9033  C3 21 90                        JP      LOOP
      38   00:9036                      
      39   00:9036  CD 8D 90            CHKCHK      CALL    GBNOCHK         ; CHECK THE CHECKSUM
      40   00:9039  47                              LD      B, A
      41   00:903A  3A BF 90                        LD      A, (CHKSUM)
      42   00:903D  80                              ADD     A, B            
      43   00:903E  CA 03 90                        JP      Z, START        ; GO TO NEXT LINE
      44   00:9041  1E 21                           LD      E, '!'               
      45   00:9043  06 01                           LD      B, 0x01
      46   00:9045  0E 80                           LD      C, SERDEV       ; FAILED CHECK SUM, SO INTERRUPT
      47   00:9047  C7                              RST     0x00                   
      48   00:9048                      
      49   00:9048                      ;*********** PIASUP - PIA SETUP ROUTINE
      50   00:9048  3E CF               PIASUP      LD		A, 11001111B	    ; Set PIO B to control mode
      51   00:904A  D3 6B               			OUT		(PIOBCPORT), A
      52   00:904C  3E FE               			LD		A, 11111110B	    ; PB7-PB1 input, PB-0 output
      53   00:904E  D3 6B               			OUT		(PIOBCPORT), A
      54   00:9050  3E 00                           LD      A, 0x00
      55   00:9052  D3 69                           OUT     (PIOBDPORT), A      ; ACK = 0
      56   00:9054  3E CF                           LD		A, 11001111B	    ; Set PIO A to control mode
      57   00:9056  D3 6A               			OUT		(PIOACPORT), A
      58   00:9058  3E FF               			LD		A, 11111111B	    ; PA7-PA0 input
      59   00:905A  D3 6A               			OUT		(PIOACPORT), A
      60   00:905C  3E 01                           LD      A, 0x01
      61   00:905E  D3 69                           OUT     (PIOBDPORT), A      ; ACK = 1
      62   00:9060  C9                              RET
      63   00:9061                      
      64   00:9061                      ;*********** PIADAT - GET DATA FROM PIA
      65   00:9061  3E 00               PIADAT      LD      A, 0x00             ; ACK = 0
      66   00:9063  D3 69                           OUT     (PIOBDPORT), A      
      67   00:9065  DB 69               DATLOP      IN      A, (PIOBDPORT)      ; GET RDY ON PORT B
      68   00:9067  FA 6D 90                        JP      M, GETDAT           ; DATA PRESENT? (BIT 7 == 1)
      69   00:906A  C3 65 90                        JP      DATLOP              ; NOT YET. KEEP TRYING.
      70   00:906D  DB 68               GETDAT      IN      A, (PIOADPORT)      ; YES. GET THE DATA,
      71   00:906F  32 BE 90                        LD      (TMPBYTE), A        ; SAVE IT
      72   00:9072  5F                              LD      E, A                ; PRINT IT
      73   00:9073  06 01                           LD      B, 0x01
      74   00:9075  0E 80                           LD      C, SERDEV
      75   00:9077  CF                              RST     0x08
      76   00:9078  3E 01                           LD      A, 0x01             ; ACK = 1
      77   00:907A  D3 69                           OUT     (PIOBDPORT), A
      78   00:907C  3A BE 90                        LD      A, (TMPBYTE)        ; PUT DATA BACK IN REGISTER
      79   00:907F  C9                              RET                         ; AND LEAVE...
      80   00:9080                      
      81   00:9080                      ;*********** GETBYTE - READ ASCII HEX BYTE (2 digits)
      82   00:9080  CD 8D 90            GETBYTE     CALL    GBNOCHK
      83   00:9083  47                              LD      B, A        ; SAVE THE BYTE
      84   00:9084  3A BF 90                        LD      A, (CHKSUM) ; ADD TO CHECKSUM
      85   00:9087  80                              ADD     A, B
      86   00:9088  32 BF 90                        LD     (CHKSUM), A
      87   00:908B  78                              LD      A, B        ; RESTORE THE BYTE
      88   00:908C  C9                              RET
      89   00:908D                      
      90   00:908D  CD AF 90            GBNOCHK     CALL    A2H         ; GET FIRST CHARACTER TO HEX
      91   00:9090  CB 17                           RL      A           ; MOVE IT UP 4 BITS
      92   00:9092  CB 17                           RL      A
      93   00:9094  CB 17                           RL      A
      94   00:9096  CB 17                           RL      A
      95   00:9098  47                              LD      B, A
      96   00:9099  CD AF 90                        CALL    A2H         ; GET SECOND CHARACTER TO HEX
      97   00:909C  80                              ADD     A, B        ; ADD THEM TOGETHER
      98   00:909D  C9                              RET
      99   00:909E                      
     100   00:909E                      ;*********** GETADDR - READ ADDRESS AND LOAD X
     101   00:909E  CD 80 90            GETADDR     CALL    GETBYTE
     102   00:90A1  32 BD 90                        LD      (TMPADDR1), A
     103   00:90A4  CD 80 90                        CALL    GETBYTE
     104   00:90A7  32 BC 90                        LD      (TMPADDR2), A
     105   00:90AA  DD 2A BD 90                     LD      IX, (TMPADDR1)
     106   00:90AE  C9                              RET
     107   00:90AF                      
     108   00:90AF                      ;*********** A2H - READ SINGLE ASCII BYTE AND CONVERT TO HEX
     109   00:90AF  CD 61 90            A2H         CALL    PIADAT      
     110   00:90B2  D6 30                           SUB     0x30        
     111   00:90B4  FE 09                           CP      0x09
     112   00:90B6  D8                              RET     C
     113   00:90B7  C8                              RET     Z
     114   00:90B8  D6 07                           SUB     0x07
     115   00:90BA  C9                              RET
     116   00:90BB                      
     117   00:90BB  01                  NUMBYT      DB     1           ; BYTES LEFT TO READ
     118   00:90BC  01                  TMPADDR2    DB     1           ; TEMP ADDRESS POINTER
     119   00:90BD  01                  TMPADDR1    DB     1           
     120   00:90BE  01                  TMPBYTE     DB     1
     121   00:90BF  01                  CHKSUM      DB     1           ; RUNNING CHECKSUM
     122   00:90C0                      
     123   00:90C0                                  END

    LABELS
-------------------------------------------------
00:00000068   PIOADPORT
00:00000069   PIOBDPORT
00:0000006A   PIOACPORT
00:0000006B   PIOBCPORT
00:00000080   SERDEV
00:00009000 X ENTER
00:00009003   START
00:00009021   LOOP
00:00009036   CHKCHK
00:00009048   PIASUP
00:00009061   PIADAT
00:00009065   DATLOP
00:0000906D   GETDAT
00:00009080   GETBYTE
00:0000908D   GBNOCHK
00:0000909E   GETADDR
00:000090AF   A2H
00:000090BB   NUMBYT
00:000090BC   TMPADDR2
00:000090BD   TMPADDR1
00:000090BE   TMPBYTE
00:000090BF   CHKSUM


 Output: PAPTAP.OUT
-------------------------------------------------

 Page: 00
  Org: 00009000  Size: *  Used: 000000C0

   Address   Length Align   Label
   00009000     192         ENTER
