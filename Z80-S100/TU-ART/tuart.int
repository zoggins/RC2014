	SUBTTL Interrupt Routines
;
;	**********************
;	* INTERRUPT ROUTINES *
;	**********************
;
;	INTERRUPT SERVICE ROUTINES
;
DAT1	DI		;DEVICE A TIMER 1
	PUSH	AF
	PUSH	HL		;TIME
	LD	HL,MDAT1
	LD	A,0C7H		;EXPECTED INTERRUPT
	JR	TAOUT
DAT2	DI		;DEVICE A TIMER 2
	PUSH	AF
	PUSH	HL
	LD	HL,MDAT2
	LD	A,0CFH
	JR	TAOUT
DAT3	DI		;DEVICE A TIMER 3
	PUSH	AF
	PUSH	HL
	LD	HL,MDAT3
	LD	A,0DFH
	JR	TAOUT
DAT4	DI		;DEVICE A TIMER 4
	PUSH	AF
	PUSH	HL
	LD	HL,MDAT4
	LD	A,0F7H
	JR	TAOUT
DAT5	DI		;DEVICE A TIMER 5
	PUSH	AF
	PUSH	HL
	LD	HL,MDAT5
	LD	A,0FFH
TAOUT	LD	($INTMSG),HL
	LD	(INTFLG),A
	POP	HL
	LD	(TIME),HL
	POP	AF
	RETI
;
DBT1	DI		;DEVICE B TIMER 1
	PUSH	HL
	LD	HL,MDBT1
	JR	TBOUT
DBT2	DI		;DEVICE B TIMER 2
	PUSH	HL
	LD	HL,MDBT2
	JR	TBOUT
DBT3	DI		;DEVICE B TIMER 3
	PUSH	HL
	LD	HL,MDBT3
	JR	TBOUT
DBT4	DI		;DEVICE B TIMER 4
	PUSH	HL
	LD	HL,MDBT4
	JR	TBOUT
DBT5	DI		;DEVICE B TIMER 5
	PUSH	HL
	LD	HL,MDBT5
TBOUT	PUSH	AF
	LD	A,0D7H
	LD	(INTFLG),A
	LD	($INTMSG),HL
	POP	AF
	POP	HL
	LD	(TIME),HL
	RETI
;
TBE	DI
	CALL	PUSHEM		;SAVE REGS
	LD	HL,$TDA
	LD	C,(HL)
	INC	C
	LD	A,(BYTE)	;OUTPUT CHAR AND
	OUT	(C),A		;INCREMENT IT
	INC	A		;FOR NEXT TIME
	LD	(BYTE),A
	OR	A		;LAST CHAR ?
	JR	NZ,IRET		;NO ->
	INC	C
	INC	C
	XOR	A
	OUT	(C),A		;DISABLE TBE
;	LD	HL,$TDB
;	LD	A,(HL)
;	ADD	3
;	LD	C,A
;	LD	A,10H
;	OUT	(C),A		;ENABLE RDA
IRET	CALL	POPEM		;RESTORE REGS
	EI
	RETI
;
;
RDA	DI			;DISABLE INTERRUPTS
	CALL	PUSHEM		;SAVE REGS
	LD	HL,$TDB		;GET DEV B ADDR
	LD	C,(HL)
	INC	C		;DATA PORT
	IN	A,(C)		;GET BYTE FROM PORT
	LD	B,A		;SAVE IN B
	LD	A,(BYTE2)	;BYTE SENT BY TBE
	CP	B		;COMPARE
	CALL	NZ,LOGERR
	JR	C,ENDS		;TOO MANY ERRORS
	LD	HL,BYTE2
	INC	(HL)		;LAST CHAR?
	JR	NZ,IRET		;NO ->
ENDS	INC	C
	INC	C
	XOR	A		;COMMAND PORT
	OUT	(C),A		;DISABLE RDA
;	LD	HL,$TDA
;	LD	A,(HL)		;GET DEV A COMMAND PORT
;	ADD	3
;	LD	C,A
;	LD	A,20H
;	OUT	(C),A		;TBE ENABLE
;
	LD	A,0FFH
	LD	(INTFLG),A
	CALL	POPEM		;RESTORE REGS
	RETI
;
;
;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
DBSENSB	DI		;DEVICE B SENSE
	LD	HL,MDBSB
DBOUT	LD	A,0D7H
	LD	(INTFLG),A
	LD	($INTMSG),HL
	RETI
DASENSA	DI		;DEVICE A SENSA
	LD	HL,MDASA
	JR	DBOUT
;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
;
;
INTERR	DI		;SPURIOUS INTERRUPT
	EX	(SP),HL
	LD	(INTADDR),HL
	EX	(SP),HL
	CALL	PUSHEM
	LD	HL,MIERR
	LD	($INTMSG),HL
	LD	A,2
	LD	(INTFLG),A
	CALL	POPEM
	RETI
;
;
;	VECTOR TABLE INITIALISATION
;
INITVSPC
	LD	DE,INTERR	;ERROR ROUTINE
	LD	HL,VSPCE	;VECTOR SPACE.
	LD	B,80H		;NO. OF WORDS.
	LD	L,0
	INC	H
	LD	($VTAB),HL
	LD	A,H
	LD	I,A		;SET INTERRUPT REG.
IV1	LD	(HL),E		;FILL TABLE WITH
	INC	HL		;VECTORS TO ERROR
	LD	(HL),D		;ROUTINE.
	INC	HL
	DJNZ	IV1
	LD	HL,($VTAB)
	LD	A,($TDA)	;GET DEVICE A ADDR.
	AND	0E0H
	LD	E,A
	LD	D,0
	ADD	HL,DE		;ADD TO TABLE START
	EX	DE,HL
	LD	HL,JTABL
	LD	BC,20H		;TABLE LENGTH
	LDIR			;RELOCATE TABLE
	RET
;
;	WAIT FOR INTERRUPT
;
WAIT	IM2			;SET INT MODE 2
	XOR	A		;CLEAR INTERRUPT
	LD	(ICHAR),A
	LD	(INTFLG),A	;FLAG.
	LD	H,A
	LD	L,A
	LD	(TIME),HL
	LD	HL,BLANK
	LD	($INTMSG),HL
	EI			;ENABLE INTERRUPTS
W1	CALL	CHKIN
	LD	A,(ICHAR)
	CP	ESC
	JR	Z,W2
	LD	A,(INTFLG)	;GET FLAG AND SEE
	LD	(TIME),HL
	INC	HL
	OR	A		;IF IT HAS CHANGED.
	JR	Z,W1		;IF SO RETURN WITH
W2	DI			;A=EXPECTED INTERRUPT
	RET			;AND HL-> MESSAGE	
;
IFLG	DS	1		;
INTFLG	DS	1		;INTERRUPT FLAG
INTADDR	DS	2		;INTERRUPT VECTOR ADDRESS
$INTMSG	DS	2		;INTERRUPT MESSAGE ADDRESS
;
$VTAB	DS	2		;VECTOR TABLE ADDRESS
VSPCE	DS	200H		;VECTOR TABLE SPACE
;
;
;	INTERRUPT MESSAGES
;
BLANK	DM	12,3,'                        '
DMESS	DM	12,3,'Device '
MDAT1	DM	12,10,'A timer 1'
MDAT2	DM	12,10,'A timer 2'
MDASA	DM	12,10,'A Sense  '
MDAT3	DM	12,10,'A timer 3'
MDAT4	DM	12,10,'A timer 4'
MDAT5	DM	12,10,'A timer 5'
MDBT1	DM	12,10,'B timer 1'
MDBT2	DM	12,10,'B timer 2'
MDBSB	DM	12,10,'B Sense  '
MDBT3	DM	12,10,'B timer 3'
MDBT4	DM	12,10,'B timer 4'
MDBT5	DM	12,10,'B timer 5'
MIERR	DM	12,3,'Spurious Interrupt'
;
;
;	INTERRUPT VECTOR JUMP TABLE
;	WHEN AN INTERRUPT OCCURS
;	IN INTERRUPT MODE 2, THE DATA
;	BUS AND INTERRUPT REGISTER ARE
;	USED TO COMPUTE THE ADDRESS OF
;	THE POSITION IN THIS TABLE
;	AND THE PROCESSOR JUMPS TO
;	THE RELEVANT SERVICE ROUTINE.
;	THIS TABLE IS RELOCATED TO
;	AN ABSOLUTE ADDRESS, WHICH
;	DEPENDS ON THE ACTUAL ADDRESS
;	THAT THE TUART DEVICE A IS
;	SET.
;
JTABL	DW	DAT1		;DEV A TIMER 1
	DW	DAT2		;
	DW	DASENSA
	DW	DAT3
	DW	RDA
	DW	TBE
	DW	DAT4
	DW	DAT5
	DW	DBT1
	DW	DBT2
	DW	DBSENSB
	DW	DBT3
	DW	RDA
	DW	TBE
	DW	DBT4
	DW	DBT5		;DEV B TIMER 5 (PI7)
;
