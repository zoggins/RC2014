Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   1
MASTER1 Z80

    1                   ;
    2                   ;	MASTER.Z80  This is the Z80 CPU main monitor program for my system. 
    3                   ;	Assemble and SLR's Z80ASM Assembler (Can also use the Cromemco Assembler)
    4                   ;	Use:- Z80ASM MASTER FH
    5                   ;
    6                   ;	Since V5.4, this monitor is now split into two sections.
    7                   ;	IF you have the V2 Z80 CPU S100 Board, the 4K monitor can reside in two 4K "Pages" in an 
    8                   ;	8K 28C64 EEPROM (or 27C64 UV-ROM).  There is the "normal" lower 4K monitor where the A12 
    9                   ;	address line is low. This is the "normal" state upon reset (pin 16 of U17 is low which 
   10                   ;	via P39, 7-8 will pull A12 of the EEPROM low, thereby selecting the lower 4K half
   11                   ;	of the 8K ROM. If you are using the original S100Computers Z80 CPU board this
   12                   ;	this is the setup.
   13                   
   14                   ;	If you have the newer V2 board, outputting to port D3H with bit 1 high, will raise the A12 line 
   15                   ;	thereby selecting the top 4K of the EEPROM. Outputting to port D3H with bit 1 low, will bring back 
   16                   ;	the lower 4K section again.  
   17                   ;
   18                   ;	Code for the two "versions" of the monitor are: MASTER0 & MASTER1. The LOW version (MASTER0)will
   19                   ;	reside from 0-FFFH in a 28C64 EEPROM. The HIGH (MASTER1)version will reside from 1000H-1FFFFH
   20                   ;	in the same 28C64 EEPROM.  Clearly there must be code common to both sections. 
   21                   ;	The page switching code is near the start of the monitor.  It is 
   22                   ;	at the location "ACTIVATE_HIGH_PAGE:" and "ACTIVATE_LOW_PAGE". (See below)
   23                   ;
   24                   ;	Currently almost all menu options are in the LOW PAGE of the ROM.  However because of its 
   25                   ;	size, the XModem routine (Menu "C") to download files directly into RAM from another computer 
   26                   ;	(over a serial port) resides in the HIGH PAGE. Almost half of the HIGH PAGE is now free for
   27                   ;	further routines. 
   28                   ;
   29                   ;	BTW, within the LOW PAGE code (which normally starts at F000H), there is a small jump table fixed at
   30                   ;	F800H for old CPM V1.4 floppy disk BIOS boot routines. My old CPM V1.4 software counts on
   31                   ;	these locations and (for me) they should not be changed. You can ignore them if you like. To do so
   32                   ;	set the equate "RUN_CPM14" below to FALSE.
   33                   ;	
   34                   ;	To assemble under windows...
   35                   ;	Load Altair.EXE in the Windows CMD box
   36                   ;	do cpm3
   37                   ;	I:
   38                   ;	I:>Submit master0
   39                   ;	I:>Submit master1
   40                   ;
   41                   ;	Master.HEX  is written back to the same windows folder that the PC file "altair.exe" is in.
   42                   ;       If this is not clear see here:- (http://s100computers.com/Software%20Index%20Page.htm)
   43                   ;
   44                   ;	Programming an EEPROM for the V2-Z80 Board with a PROM burner is a little tricky. 
   45                   ;	Using a 28C64 EEPROM and a Wellon VP-290 or VP299 Programmer
   46                   ;	For a monitor at F000H-FFFFH:-
   47                   ;	Load the MASTER0.HEX file, (Make sure the ORG is F000H).
   48                   ;
   49                   ;	Clear Buffer Options:- 00
   50                   ;	Load Buffer Address : 0000
   51                   ;	From File address use:- F000H
   52                   ;	File Size use:- 1000H
   53                   
   54                   ;	This will put the code (4K) in the lower half of the 8K EEPROM, (usually a 28C64). It can be seen/edited 
   55                   ;	at 0000H in the ROM with the Wellon software. You can run this ROM on the S100Computers V2 Z80 CPU board 
   56                   ;	just make sure P39 is jumpered just 3-4 (PROM address line A12 always low).  You can also run it on our earlier 
   57                   ;	Z80 CPU Boards.  You can use all your Z80 monitor commands except (currently) the X Command.
   58                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   2
MASTER1 Z80

   59                   ;	To burn an EEPROM that adds code to the upper half of the PROM (and has the XModem command):
   60                   ;	Load the MASTER1.HEX file, Make sure the ORG is F000H. Carefully set the following burner settings
   61                   ;
   62                   ;	Clear Buffer Options:- Disable <-------- Note
   63                   ;	Load Buffer Address : 1000
   64                   ;	From File address use:- F000H
   65                   ;	File Size use:- 1000H
   66                   ;
   67                   ;	Examine the code to be burnt to the EEPROM, It should start at 0H and Run to 1FFFH with the
   68                   ;	early code at 0h the same as at 1000H.
   69                   ;
   70                   ;
   71                   ;	Recent History...
   72                   
   73                   ;		26/2/09		Added ability to switch CO/CI to ACIA serial from PC.
   74                   ;		5/3/09 		Adjust RTS/CTS levels for Modem
   75                   ;	V3.5	6/3/09		Set talker messages for new V-Stamp chip.
   76                   ;		12/09/09	Add SD Systems IO-8 board Serial ports.
   77                   ;	V3.52	16/9/09		Add SD Systems IO-8 Board clock display on signon
   78                   ;	v3.6	21/9/09		Add display command for greater than 64K RAM, removed
   79                   ;	V4.0	10/26/09	Switched in 8255 driven IDE HD Controller (Removed XComp)
   80                   ;				some old commands to make more room.
   81                   ;	V4.1	11/7/09		Added input ports scan/diagnostic
   82                   ;	V4.2	11/14/09	Remove Date (keep time) from Clock (Chip is messed up by CPM3 routine)
   83                   ;				also modified to switch from the SD System assembler to the SLR one.
   84                   ;	V4.21	11/17/09	Removed 8086 jump far setting code
   85                   ;	V4.3	11/18/09	Implement movement of 8086 Monitor code (EPROM) to correct location in RAM space
   86                   ;	V4.31	11/19/09	Check 8086 Monitor ROM->ROM went OK. Added W command.
   87                   ;	V4.32	12/7/09		Turn off any SD Systems 8024 video screen enhancements (flashing, underline etc).
   88                   ;	V4.33	12/25/09	Correct High/Low byte Sector read for IDE board
   89                   ;	V4.34	2/23/10		"O" command, 8086 Far jump to 500H (IF RAM @ FFFF0H), W command boots 8086 from reset at FFFF0H.
   90                   ;	V4.35	3/25/10		"O" command just puts 8086 Far JMP to 500H (IF RAM @ FFFF0H). Done also at each reset.
   91                   ;	V4.4	7/29/10		Removed all SD Systems IO-8. Added S-100Computers I/O board drivers.
   92                   ;	V4.41	7/29/10		Initilization of V-Stamp chip done. Cleaned up Serial port names etc
   93                   ;	V4.42	7/31/10		Switched RTC over to S-100Computers board (Ports A4,A5)
   94                   ;	V4.50	2/7/11		Added Floppy Boot loader for ZFDC board. Still have the Versafloppy loader but no BIOS functions
   95                   ;	V4.51	2/13/11		Check IDE if Boot sector is valid
   96                   ;	V4.52	2/15/11		Pulse CF/IDE cards twice to reset (some) cards properly
   97                   ;	V4.53	2/16/11		Initilize IDE board with IDE RD/WR lines inactive on power-up.
   98                   ;	V4.54	2/28/11		Incoporated new fast multi-sector boot for CPM floppy loading with ZFDC board
   99                   ;	V4.55	2/28/11		"O" command now jumps to SWITCH_8086 (activates 8086) when done
  100                   ;	V4.55a	3/1/11		"O" cmd will just put 33 on Console (temporary 8086 board test)
  101                   ;	V4.56   3/15/11		Re-did IDE drive hardware reset pulse to one (delayed) pulse, then wait for drive ready status.
  102                   ;	V4.57	6/3/11		Set up an equate for IDE drive reset pulse, Fixed Z command (Last version using MM58167 RTC chip)
  103                   ;	V4.6	11/27/11	Switched to Dallas Semiconductor/IBM-PC CMOS-RTC chip & MSDOS Support board for time & dates
  104                   ;	V4.7	3/26/12		Cleaned up IOBYTE options. Added 68000 CPU, I/O to serial port. 
  105                   ;	V4.8	10/27/12	Corrected SERIAL_STAT: error. Further cleaned up info on IOBYTE
  106                   ;	V4.9	11/3/12		Added ability (XH, XL) Command to switch to low/high pages in 28C64 EEPROMS (for V2 Z80 Board)
  107                   ;	V5.0	12/18/13	Add "C" menu option to download a ZModem file from a PC/Serial/USB port directly to RAM
  108                   ;	V5.01	12/30/13	Add PC-Printer routines for new parallel Port Board with ST8C34 chip (ST8C4 = TRUE)
  109                   ;	V5.02	1/31/14		Allow output to port EEH 01h activate TMA0* (8086,80286,80386 Boards) and 02h TMA1* (68000 Board)
  110                   ;	V5.03	7/25/2014	Removed error in Z memu command
  111                   ;	V5.04	7/29/2014	Patched date to show correct century
  112                   ;	V5.1	3/18/2015	Added to test module to output "3" on console with 8986 reset (UP8086:) in High RAM section
  113                   ;	V5.2	12/17/2016	Change master/slave signon message  ("O" commamd) for more general use (multiple slave CPU boards)
  114                   ;       V5.3    11/27/2017      Fix bug for console I/O to serial port if no Propeller Console I/O board is present
  115                   ;	V5.4    12/20/2017	Completely re-did HIGH/LOW ROM page approach. Page menus are now completely transparent to user
  116                   ;	V5.5    7/26/2019	Corrected Monitor Print Signon with printer active. (Was sending continous 0's, Printer LO: inbalance)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   3
MASTER1 Z80

  117                   ;	V5.6    2/23/2021	Added IDE Menu for FPGA_DC Board
  118                   
  119                   ;
  120                   ;
  121                   ;
  122         0000      FALSE		EQU	0
  123         FFFF      TRUE		EQU	NOT FALSE
  124                   
  125         F000      BASE		EQU	0F000H		;Start or EPROM Location (Assume a 2732 or half of a 28C64)
  126                   					;Note can test running in CPM (set ORG to 100H), BUT disable setting the stack
  127                   					;by commenting out the 4 lines below SETUP_STACK:
  128                   					
  129         F000      		ORG	BASE		;<--------<<<<<< LOCATION OF START OF MONITOR (HIGH PAGE) 
  130                   					
  131         FFFF      ST8C4		EQU	TRUE		;TRUE if S100_Parallel_IO Board.  False if IMSAI PIO Board	
  132                   
  133         0001      SCROLL		EQU	01H			;Set scrool direction UP.
  134         0007      BELL		EQU	07H
  135         0020      SPACE		EQU	20H
  136         0009      TAB		EQU	09H			;TAB ACROSS (8 SPACES FOR SD-BOARD)
  137         000D      CR		EQU	0DH
  138         000A      LF		EQU	0AH
  139         000C      FF		EQU	0CH
  140         0011      QUIT		EQU	11H			;Turns off any screen enhancements (flashing, underline etc).
  141         0017      NO_ENHANCEMENT	EQU 17H			;Turns off whatever is on
  142         0010      FAST		EQU	10H			;High speed scrool
  143         001B      ESC		EQU	1BH
  144         007F      DELETE		EQU	7FH
  145         0008      BACKS		EQU	08H
  146         001A      CLEAR		EQU	1AH			;TO CLEAR SCREEN
  147         0038      RST7		EQU	38H			;RST 7 (LOCATION FOR TRAP)
  148         0000      NN		EQU	0H			;[I] INITIAL VALUE
  149         0001      SOH		EQU	1			; For XModem etc.
  150         0004      EOT		EQU	4
  151         0006      ACK		EQU	6
  152         0015      NAK		EQU	15H
  153                   
  154                   
  155         0100      STARTCPM	EQU	100H			;LOCATION WHERE CPM WILL BE PLACED FOR COLD BOOT
  156         0100      STARTDOS	EQU	100H			;LOCATION WHERE MSDOS WILL BE PLACED FOR COLD BOOT
  157         0048      FFILE_SIZE	EQU	9000h/512		;SIZE OF 5MSDOS20.COM IN 512 BYTE SECTORS
  158                   ;
  159                   ;
  160                   ;IOBYTE = SENSE SWITCHES AT PORT 0EFH
  161                   ;
  162                   ; BIT MAP OF PORT 0EFH:- X X X X  X X X X      (11111111=NORMAL CONFIG)
  163                   ;			 | | | |  | | | |..For Z80 Monitor,	0=CONSOLE DATA TO PRINTER ALSO
  164                   ;			 | | | |  | | |....For 8086 Monitor,	0=Force MSDOS Consol output to CGA/VGA Board instead of Propeller board
  165                   ;			 | | | |  | |......For 8086 Monitor,	0=Do not initilize MSDOS extra ROMS
  166                   ;			 | | | |  |........Unused
  167                   ;			 | | | |...........Unused			
  168                   ;			 | | |.............For Z80 Monitor,	0=ALL Consol I/O via ACIA Serial port on S100Computers Serial-IO Board
  169                   ;			 | | 					Remember the serial port is currently set for 38.4K, 1 Stop,NP
  170                   ;			 | |...............For CPM3,		0=Force reformat of Memory disk upon any CPM3 cold re-boot
  171                   ;			 |.................For CPM3,		0=Write protect Memory disk for CPM3
  172                   ;					   For 8086 Monitor,	0=Prevent doing a JMPF to 500H after 8086 reset (to CPM86 boot)
  173                   ;								Normally a test is made to see if the CPM86 Boot is already in RAM at 500H
  174                   ;								If it is, a 8086 reset will bypass the monitor and go directly there. 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   4
MASTER1 Z80

  175                   ;								(see Init: in 8086 Monitor)
  176                   ;					Note if 00xxxxxx,	This will force hardware diagnostic test. (See code at FFFF0H in the 8086 monitor)
  177                   ;
  178                   ;
  179                   ;-------------- PROPELLER CONSOLE_IO (OR SD SYSTEMS VIDIO BOARD) FOR CONSOLE INPUT & OUTPUT
  180         0000      CONSOL_STATUS	EQU	0H	
  181         0001      CONSOL_IN	EQU	01H
  182         0001      CONSOL_OUT	EQU	01H
  183                   
  184                   
  185                   
  186                   ;-------------- THIS IS MY PORT TO OUTPUT DATA TO HP 4050T LASAR PRINTER  (IMSAI 8PIO Board)
  187                   
  188         FFFF      IF	ST8C4				;If S100_Parallel_IO Board for Printer output
  189         00C2      PRINTER_CTRL	EQU	0C2H		;ST8C4 Control Port
  190         00C1      PRINTER_STATUS	EQU	0C1H		;ST8C4 Status port
  191         00C0      PRINTER_OUT	EQU	0C0H		;ST8C4 Data port
  192         000D      PRINTER_ST_LOW	EQU	0DH		;OUT STROBE LOW
  193         000C      PRINTER_ST_HIGH	EQU	0CH		;OUT STROBE HIGH
  194                   ELSE
  198                   ENDIF
  199                   
  200         0005      DIAG_LEDS	EQU	5		;OUT, Will use this port (either board) initially for diagnostic LED display.
  201                   
  202                   
  203                   ;-------------- S100Computers I/O BOARD PORT ASSIGNMENTS  (A0-AC)
  204                   
  205         00A0      BCTL		EQU	0A0H		;CHANNEL B CONTROL PORT ASSIGNMENTS OF THE ZILOG SCC CHIP ;<--- Adjust as necessary, 
  206         00A2      BDTA		EQU	0A2H		;CHANNEL B DATA
  207         00A1      ACTL		EQU	0A1H		;CHANNEL A CONTROL (MODEM_CTL_PORT)		
  208         00A3      ADTA		EQU	0A3H		;CHANNEL A DATA (MODEM_DATA_PORT)
  209                   
  210         00A8      PortA_8255	EQU	0A8H		;A port of 8255 ;<--- Adjust as necessary
  211         00A9      PortB_8255	EQU	0A9H		;B port of 8255
  212         00AA      PortC_8255	EQU	0AAH		;C Port of 8255
  213         00AB      PortCtrl_8255	EQU	0ABH		;8255 configuration port
  214         0098      AinBout8255cfg	EQU	10011000b	;Set 8255 ports:- A input, B output, 
  215                   
  216         00AC      USB_DATA	EQU	0ACH		;PORT ASSIGNEMENT FOR DLP-USB Controller chip
  217         00AA      USB_STATUS	EQU	0AAH		;Status port for USB port (Port C of 8255, bits 6,7)
  218         0080      USB_RXE		EQU	80H		;If Bit 7 = 0, data available to recieve by S-100 Computer	
  219         0040      USB_TXE		EQU	40H		;If Bit 6 = 0 data CAN be written for transmission to PC
  220                   
  221         00A1      BASE_PORT	EQU	0A1H		;For XModem communication routines
  222         00A1      MODEM_CTL_PORT	EQU	BASE_PORT 	;A1H (Note modem I/O will be on CHANNEL A. Speaker on CHANNEL B
  223         00A3      MODEM_DATA_PORT	EQU	BASE_PORT+2	;A3H 
  224                   
  225         0004      MODEM_SEND_MASK	EQU	4
  226         0004      SEND_READY	EQU	4		;VALUE WHEN READY
  227         0001      MODEM_RECV_MASK	EQU	1
  228         0001      RECV_READY	EQU	1		;BIT ON WHEN READY
  229         0008      MODEM_ERR_LIMIT	EQU	8		;Max number of Modem serial port re-reads aborting
  230         0001      MODEM_RTS_DELAY	EQU	1		;Time to check Modem RTS line (See XMODEM_LOAD & P_XMODEM_LOAD). Not critical.
  231                   
  232         0000      RECVD_SECT_NO	EQU	0H		;IX Offset for XModem Recieved Sector Number
  233         0001      SECTNO		EQU	1H		;IX Offset for XModem CURRENT SECTOR NUMBER 
  234         0002      ERRCT		EQU	2H		;IX Offset for XModem ERROR COUNT
  235                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   5
MASTER1 Z80

  236                   
  237                   ;-------------- S100Computers MSDOS Support Board PORT ASSIGNMENTS 
  238                    
  239         0070      CMOS_PORT	EQU	70H		;Base Port for CMOS Clock/Date Chip on MSDOS Support Board
  240         0020      MASTER_PIC_PORT	EQU	20h		;Hardware port the 8259A (two ports 20H & 21H)
  241                   
  242         0017      MasterICW1	equ	00010111B	;EDGE triggered, 4 bytes, single Master,ICW4 needed
  243         0008      MasterICW2	equ	8H		;Base address for 8259A Int Table (IBM-PC uses 8X4 = 20H)
  244         0000      MasterICW3	equ	0H		;No slave
  245         0003      MasterICW4	equ	00000011B	;No special mode, non buffer, Auto EOI, 8086.  ;<<<<,
  246                   
  247                   
  248                   ;--------------- PORTS FOR FOR Z80/WD2793 FDC Board
  249                   
  250         0010      S100_DATA_A	EQU	10H		;IN,  S100 Data port to GET data to from FDC Board
  251         0010      S100_DATA_B	EQU	10H		;OUT, S100 Data port to SEND data to FDC Board
  252         0011      S100_STATUS_A	EQU	11H		;Status port for A
  253         0011      S100_STATUS_B	EQU	11H		;Status port for B
  254         0013      RESET_ZFDC_PORT EQU	13H		;Port to reset ZFDC Z80 CPU.
  255                   
  256         0005      STATUS_DELAY	EQU	5		;Time-out for waiting for ZFDC Board handshake signal (~0.5 seconds @ 10MHz)
  257         0007      DIRECTION_BIT	EQU	7		;Bits for the ZFDC flags 0 = IN, 1 = OUT
  258         0000      DATA_IN_RDY	EQU	0		;Bit for data available from ZFDC board
  259         0001      DATA_OUT_RDY	EQU	1		;Bit for data can be sent to ZFDC board
  260         0001      STD8IBM		EQU	1		;IBM 8" SDSS Diak
  261         0000      NO_ERRORS_FLAG	EQU	0		;No Errors flag for previous cmd, sent back to S-100 BIOS
  262                   
  263                   
  264                   ;	Commands to the FPGA_DC Board:-
  265                   ;	Note these commands are a sub-set of the old ZFDC and ZFDC_II Board commands
  266                   
  267         0005      CMD$SEL$DRIVE		EQU	5H		;**** (Re)select an already initilized drive
  268         0008      CMD$SET$SIDE		EQU	8H		;**** This will set the active side for a floppy disk
  269         0035      CMD$SET$TRK$SEC		EQU	35H		;Set new current TRACK+SECTOR on current drive (new)
  270         0010      CMD$READ$SECTOR		EQU	10H		;**** Read data from the CURRENT sector (on current track,drive).
  271         0011      CMD$WRITE$SECTOR	EQU	11H		;**** Write data to the CURRENT sector (on current track,drive).
  272         0021      CMD$HANDSHAKE		EQU	21H		;**** Handshake command only sent during board initilization/testing 
  273         0038      CMD$SET$IDE$MODE	EQU	38H		;Set IDE drive hardware mode on FPG_DC Board (Internal or External)
  274                   						;Second Byte 0 = External IDE mode + Interrupt driven info (Default Mode). 
  275                   						;Second Byte 1 = External IDE mode + CMD driven info
  276                   						;Second Byte 2 = Local FPGA Board IDE mode + CMD driven info
  277                   
  278         0039      CMD$FAST$COPY$AB	EQU	39H		;Special CMD to fast copy CF Card A:->B: (All within FPGA_DC Board software)
  279                   
  280         000A      CMD$SET$HOME		EQU	0AH		;This will set floppy disk head request to Track 0 of CURRENT drive
  281         000F      CMD$GET$TRACK$ID	EQU	0FH		;Read the CURRENT TRACK ID
  282         000B      CMD$STEP$IN		EQU	0BH		;Step head in one track of CURRENT drive
  283         000C      CMD$STEP$OUT		EQU	0CH		;Step head out one track of CURRENT drive
  284         000D      CMD$SEEK$NV		EQU	0DH		;Seek to track with NO verify of CURRENT drive
  285         000E      CMD$SEEK$TRACK		EQU	0EH		;Seek to track to (IY+DRIVE_TRACK) with the track verify bit set on CURRENT drive/format
  286         0015      CMD$TRACK$DUMP		EQU	15H		;Dump complete CURRENT track to S-100 system
  287                   						
  288         0042      INFO$READ$SECTOR	EQU	42H		;Send info, read sector (Actual Sec Read done externally)
  289         0043      INFO$WRITE$SECTOR	EQU	43H		;Send info, write sector
  290         0044      CMD$FORMAT$DISK		EQU	44H		;Format the disk in the of the CURRENT drive
  291         0045      CMD$FDC$COPY		EQU	45H		;Fast Copy Disk C:->D:
  292                   
  293                   ;INFO$SEL$DRIVE		EQU	40H		;Send info, drive select
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   6
MASTER1 Z80

  294                   ;INFO$SET$TRK$SEC	EQU	41H		;Send info, set track,sector
  295         0041      INFO$POST$MSG		EQU	41H		;Post a message on the USB Port Terminal
  296                   
  297         0080      CMD$GET$TIME		EQU	80H		;Get Time and Data from FPGA DC Board RTC
  298         0081      CMD$SET$TIME		EQU	81H		;Set Time and Data on FPGA DC Board RTC
  299                   
  300         0082      CMD$BOARD$CONFIG	EQU	82H		;Get FPGA_DC Board hardware configuration
  301                   						;Bits 7&6 contain IDE & FDC circuit flags 
  302                   						;Bits 1&0 contain IDE Mode (0,1,2) 
  303                   
  304         00FF      CMD$FAILED		EQU	0FFH		;CMD failed to exicute completely
  305         00F0      CMD$COMPLETE		EQU	0F0H		;Flag returned by DC board to signal the previous CMD was completed OK
  306         00E0      CMD$ABORT		EQU	0E0H		;CMD to abort the current process
  307                   
  308                   
  309                   
  310                   ;-------------- PORT(S) TO SWITCH MASTER/SLAVE(S)
  311                   
  312         00D0      Z80PORT	EQU	0D0H			;4 PORTS ON Z80 BOARD FOR MEMORY MANAGEMENT (& INT Controller on IA Z80 CPU Board)
  313                   
  314         00EF      IOBYTE	EQU	0EFH			;IOBYTE (SEE ABOVE)
  315         00EE      SW_TMAX	EQU	0EEH			;OUTPUT BIT 0 HIGH FROM THIS PORT LOWERS DMA0* ON THE SMB_V2 (SWITCH IN THE 8086 FAMILY of boards)
  316                   					;OUTPUT BIT 1 HIGH FROM THIS PORT LOWERS DMA1* ON THE SMB_V2 (SWITCH IN THE 68000 CPU Board)
  317                   					;OUTPUT BIT 2 HIGH FROM THIS PORT LOWERS DMA2* ON THE SMB_V2 
  318                   					;OUTPUT BIT 3 HIGH FROM THIS PORT LOWERS DMA3* ON THE SMB_V2 
  319         00ED      SW_TMA0	EQU	0EDH			;INPUT FROM THIS PORT LOWERS DMA0* (SWITCHES IN THE 8088,8086,80286 or 80386 boards)
  320                   
  321                   
  322                   
  323                   ;-------------- VERSAFLOPPY-II	FLOPPY DISK CONTROLLER COMMANDS ETC.
  324                   
  325         0050      X	EQU	50H			;BASE PORT FOR 1791
  326         0050      RSET	EQU	X+0			;CONTROLLER RESET ADDRESS
  327         0053      SELECT	EQU	X+3			;DRIVE SELECT PORT
  328         0054      STATUS	EQU	X+4			;STATUS PORT
  329         0055      TRACK	EQU	X+5			;TRACK PORT
  330         0056      SECTOR	EQU	X+6			;SECTOR PORT
  331         0057      DATA	EQU	X+7			;DATA PORT
  332         0054      CMD	EQU	X+4			;COMMAND PORT
  333                   
  334         0003      CIOBYTE	EQU	03H
  335         0004      CDISK	EQU	04H
  336         0008      ZERO_L	EQU	08H			;Some of my CPM Loader's needs these to be zero!
  337         0009      ZERO_H	EQU	09H			;(The Non Banked version of CPM3). Need to later see why 
  338         0040      @TADDR	EQU	40H
  339         0042      @UNIT	EQU	42H			;NEW @UNIT BYTE
  340         0043      @SCTR	EQU	43H			;SECTOR         (compatible with my old CPM2.2 Versafloppy BIOS)
  341         0044      @TRK	EQU	44H			;TRACK
  342         0045      @NREC	EQU	45H			;# OF SECTORS
  343         0046      @ERMASK	EQU	46H			;ERROR MASK
  344         0047      @ERSTAT	EQU	47H			;ERROR FLAG STORE
  345         0048      @IDSV	EQU	48H			;6 BYTES (USED FOR TRACK ID COMMAND)
  346         004E      @CMDSV	EQU	4EH			;COMMAND SAVE 
  347         004F      @SPSV	EQU	4FH			;SP SAVE 
  348         0051      TEMP2	EQU	51H			;2 BYTE TEMP RECORD
  349         0051      @SIDE	EQU	51H			;SIDE STORE FOR MSDOS DISK
  350         0053      @COUNT	EQU	53H			;SECTORS/TRACK for BOOT (Currently unused)
  351         0055      @UNITCK	EQU	55H			;OLD @UNIT BYTE
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   7
MASTER1 Z80

  352         0056      @RSEEK	EQU	56H			;NBR OF RESEEKS
  353         0057      @RTRY	EQU	57H			;NBR OF RTRYS
  354         0058      ADRIVE	EQU	58H			;STORE OF A: DRIVE DENSITY ETC TYPE
  355         0059      BDRIVE	EQU	59H			;STORE OF B: DRIVE TYPE
  356         005B      @FDCTYPE EQU	5BH			;0FFH = ZFDC FDC Board Boot, else Versafloppy II FDC Boot,  
  357         005C      @SEC_SIZE EQU	5CH			;Byte count of a sector fot loader
  358         0080      @SSTACK	EQU	80H			;SYSTEM STACK
  359                   
  360         0080      COLD	EQU	80H			;COLD START ADDRESS FOR CPM FLOPPY (ONLY) BOOT LOADER
  361                   
  362         00C0      RDACMD	EQU	0C0H			;READ ADDRESS CODE
  363         0088      RDCMD	EQU	088H			;READ SECTOR CODE
  364         00A8      WRCMD	EQU	0A8H			;WRITE SECTOR CODE
  365         00F4      WRTCMD	EQU	0F4H			;WRITE TRACK CODE
  366         0008      RSCMD	EQU	008H			;RESTORE COMMAND (Note 3 Ms seek)
  367         0018      SKNCMD	EQU	018H			;SEEK NO VERIFY
  368         001C      FSKCMD	EQU	01CH			;FLOPPY SEEK COMAND
  369         000C      RSVCMD	EQU	00CH			;RESTORE WITH VERIFY COMMAND
  370         001F      MSKCMD	EQU	01FH			;MINI FLOPPY SEEK COMMAND
  371                   
  372         00FE      SRMASK	EQU	0FEH			;SECTOR READ ERROR BITS MASK
  373                   
  374         001A      STDSDT	EQU	26			;STANDARD 8" 26 SECTORS/TRACK
  375         0032      STDDDT	EQU	50			;STANDARD DD 8" 50 SECTORS/TRACK
  376         0080      NBYTES	EQU	128			;BYTES/SECTOR 
  377         004D      NTRKS	EQU	77			;TRACKS/DISK
  378                   
  379                   ;-------------- S100Computers IDE HARD DISK CONTROLLER COMMANDS ETC. 
  380                   
  381         0030      IDEAport	EQU	030H		;lower 8 bits of IDE interface
  382         0031      IDEBport	EQU	031H		;upper 8 bits of IDE interface
  383         0032      IDECport	EQU	032H		;control lines for IDE interface
  384         0033      IDECtrl		EQU	033H		;8255 configuration port
  385         0034      IDEDrivePort	EQU	034H		;To select the 1st or 2nd CF card/drive (Not used with this monitor)
  386                   
  387         0020      IDE_Reset_Delay	EQU	020H		;Time delay for reset/initilization (~60 uS, with 10MHz Z80, 2 I/O wait states)
  388                   
  389         0000      EXT$IDE$MODE	EQU	00H		;FPGA IDE mode set to external IDE ports etc. 
  390         0001      LOCAL$IDE$MODE	EQU	01H		;FPGA IDE mode set to Local IDE ports etc. 
  391                   					
  392         0100      CPM_ADDRESS	EQU	100H		;Will place the CPMLDR.COM Loader here with 
  393                   					;CPMLDR.COM will ALWAYS be on TRK 0,SEC2, (LBA Mode)
  394         000C      CPM_SEC_COUNT	EQU	12		;CPMLDR.COM requires (currently) 10, 512 byte sectors
  395                   					;Add extra just in case
  396         0092      RDcfg8255	EQU	10010010B	;Set 8255 IDECport out, IDEAport/B input
  397         0080      WRcfg8255	EQU	10000000B	;Set all three 8255 ports output
  398                   ;
  399         0001      IDEa0line	EQU	01H		;direct from 8255 to IDE interface
  400         0002      IDEa1line	EQU	02H		;direct from 8255 to IDE interface
  401         0004      IDEa2line	EQU	04H		;direct from 8255 to IDE interface
  402         0008      IDEcs0line	EQU	08H		;inverter between 8255 and IDE interface
  403         0010      IDEcs1line	EQU	10H		;inverter between 8255 and IDE interface
  404         0020      IDEwrline	EQU	20H		;inverter between 8255 and IDE interface
  405         0040      IDErdline	EQU	40H		;inverter between 8255 and IDE interface
  406         0080      IDEreset	EQU	80H		;inverter between 8255 and IDE interface
  407                   ;
  408                   ;Symbolic constants for the IDE Drive registers, which makes the
  409                   ;code more readable than always specifying the address pins
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   8
MASTER1 Z80

  410                   ;
  411         0008      REGdata		EQU	08H		;IDEcs0line
  412         0009      REGerr		EQU	09H		;IDEcs0line + IDEa0line
  413         000A      REGcnt		EQU	0AH		;IDEcs0line + IDEa1line
  414         000B      REGsector	EQU	0BH		;IDEcs0line + IDEa1line + IDEa0line
  415         000C      REGcyLSB	EQU	0CH		;IDEcs0line + IDEa2line
  416         000D      REGcyMSB	EQU	0DH		;IDEcs0line + IDEa2line + IDEa0line
  417         000E      REGshd		EQU	0EH		;IDEcs0line + IDEa2line + IDEa1line		;(0EH)
  418         000F      REGCMD		EQU	0FH		;IDEcs0line + IDEa2line + IDEa1line + IDEa0line	;(0FH)
  419         000F      REGstatus	EQU	0FH		;IDEcs0line + IDEa2line + IDEa1line + IDEa0line
  420         0016      REGcontrol	EQU	16H		;IDEcs1line + IDEa2line + IDEa1line
  421         0017      REGastatus	EQU	17H		;IDEcs1line + IDEa2line + IDEa1line + IDEa0line
  422                   
  423                   ;IDE CMD Constants.  These should never change.
  424         0010      CMDrecal	EQU	10H
  425         0020      CMDread		EQU	20H
  426         0030      CMDwrite	EQU	30H
  427         0091      CMDinit		EQU	91H
  428         00EC      CMDid		EQU	0ECH
  429         00E0      CMDdownspin	EQU	0E0H
  430         00E1      CMDupspin	EQU	0E1H
  431                   ;
  432                   ; IDE Status Register:
  433                   ;  bit 7: Busy	1=busy, 0=not busy
  434                   ;  bit 6: Ready 1=ready for CMD, 0=not ready yet
  435                   ;  bit 5: DF	1=fault occured insIDE drive
  436                   ;  bit 4: DSC	1=seek complete
  437                   ;  bit 3: DRQ	1=data request ready, 0=not ready to xfer yet
  438                   ;  bit 2: CORR	1=correctable error occured
  439                   ;  bit 1: IDX	vendor specific
  440                   ;  bit 0: ERR	1=error occured
  441                   ;
  442                   ;
  443                   ;
  444                   ;--------------- PORTS FOR FOR S100 Bus interface to FPGA_DC Board -----------------------------------------
  445                   
  446         0080      S100_STATUS_PORT	EQU	80H		;STATUS port to send/get data to/from S100 bus.
  447         0081      S100_DATA_PORT		EQU	81H		;DATA port to send/get data to/from S100 bus.
  448         0082      RELEASE_ERROR_PORT	EQU	82H		;A pulse out to this port will reset the SET_FLAG_GATE on the FPGA Z80
  449         0083      SOFT_RESET_PORT		EQU	83H		;Reset Handshake status port bits (80H)
  450                   
  451         0001      FPGA_RTS		EQU	01H		;01H if DC Board HAS send data
  452         0080      S100_RTS		EQU	80H		;80H if S100 Bus HAS sent data
  453                   ;
  454                   ;
  455         E000      @SECTOR_BUFFER		EQU	0E000H		;Location for FPGA_DC Controller DMA sector data buffer in RAM 
  456                   
  457         00FF      NSCTRS			EQU	0FFH		;>>>>>>>>>>> MAX sectors/track <<<<<<<<<<<<<<<<<<<
  458         000C      CPM_SEC_COUNT		EQU	12		;Allow up to 12 CPM sectors for CPMLDR
  459         0100      CPMLDR_ADDRESS		EQU	100H		;Load the CPMLDR at 100H in RAM 
  460                   
  461         EE00      @DRIVE1			EQU	0EE00H		;Storage for current Drive 1
  462         EE02      @TRK1			EQU	0EE02H		;Current Track 1
  463         EE04      @SEC1			EQU	0EE04H		;Current Sector 1
  464         EE06      @SIDE1			EQU	0EE06H		;Current Side 1
  465         EE08      @DISK_TYPE1		EQU	0EE08H		;SD/CF/Floppy etc.
  466         EE0A      @FIRST_SEC		EQU	0EE0AH		;First sector number on a track. 0 for SD/CF cards. 1 for Floppies
  467         EE0C      @SEC_TRACK		EQU	0EE0CH		;;Store for MAX sectors/track
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   9
MASTER1 Z80

  468         EE0E      @MAX_TRACKS		EQU	0EE0EH		;Max tracks/disk (for floppies)
  469         EE10      @CURRENT_DRIVE		EQU	0EE10H		;Current selected drive
  470         EE12      @SEC_SIZE_FLAG		EQU	0EE12H		;0=128, 1=256, 2=512 Bytes/Sector
  471                   
  472         EE20      @DMA			EQU	0EE20H		;RAM Pointer for sector writes
  473         EE22      @DMA_STORE		EQU	0EE22H		;RAM Pointer for sector writes
  474         EE24      @BOARD_CONFIG		EQU	0EE24H		;IDE +/- FDC Flag
  475                   
  476         00FF      CFCARD			EQU	0FFH		;All CF & CF Card types 
  477         0080      IBM3740			EQU	080H		;Disk hardware type 8" SS DD 128 Byte sectors
  478         0060      IBM34			EQU	060H		;Disk hardware type 8" DS DD 256 byte Sectors
  479         0040      IBM144			EQU	040H		;Disk hardware type 2.5" DS DD 512 byte Sectors
  480                   
  481                   ;----------------------------------------------------------------------------
  482                   ;
  483                   ;JUMP TABLE TO ROUTINES WITHIN THE MONITOR1.Z80 :-
  484                   
  485                   ;PROGRAM CODE BEGINS HERE
  486                   ;FIRST A JUMP TABLE FOR KEY JUMPS INTO THE MONITOR. NOTE THESE SHOULD NOT BE CHANGED BECAUSE
  487                   ;SOME OF MY OLDER SOFTWARE JUMPS DIRECTLY TO THEM. (WHERE POSSIBLE, TDL's ZAPPLE MONITOR FORMAT IS USED).
  488                   
  489 F000  C3 F07F     ZAPPLE:		JP	ACTIVATE_LOW_PAGE	;INITILIZATION
  490 F003  C3 F116     ZCI:		JP	HIGH_CI			;CONSOL INPUT
  491 F006  C3 F0A6     ZRI:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  492 F009  C3 F0AF     ZCO:		JP	HIGH_CO			;CONSOL OUTPUT
  493 F00C  C3 F0A6     ZPOO:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  494 F00F  C3 F0A6     ZLO:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  495 F012  C3 F0FC     ZCSTS:		JP	HIGH_CSTS		;CONSOL STATUS
  496 F015  C3 F0A6     ZMEMCK:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  497 F018  C3 F0A6     ZTRAP:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  498 F01B  C3 F07F     ZSTART:		JP	ACTIVATE_LOW_PAGE	;JUMP BACK TO LOW PAGE MONITOR START
  499 F01E  C3 F0A6     ZTALK:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  500 F021  C3 F0A6     ZTALKS:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  501 F024  C3 F0A6     ZDELAY:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  502 F027  C3 F0A6     ZLSTAT:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  503 F02A  C3 F0A6     ZONLIST:	JP	NoHighPageError			;This routine resides on the LOW page ROM
  504 F02D  C3 F0A6     ZOFFLIST:	JP	NoHighPageError			;This routine resides on the LOW page ROM
  505 F030  C3 F0A6     ZTIME:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  506 F033  C3 F0A6     ZDATE:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  507 F036  C3 F0A6     ZSPEAK:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  508 F039  C3 F0A6     ZSERIAL_OUT:	JP	NoHighPageError			;This routine resides on the LOW page ROM
  509 F03C  C3 F0A6     ZSERIAL_IN:	JP	NoHighPageError			;This routine resides on the LOW page ROM
  510 F03F  C3 F0A6     ZSERIAL_STA:	JP	NoHighPageError			;This routine resides on the LOW page ROM
  511 F042  C3 F0A6     ZLOADER:	JP	NoHighPageError			;This routine resides on the LOW page ROM 
  512 F045  C3 F0A6     ZPMSG0:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  513 F048  C3 F21B     ZPMSG$:		JP	HIGH_PRINT_STRING	;DISPLAY STRING ON CONSOL [HL]=START ADD. '$'=END
  514 F04B  C3 F0A6     ZHLSP:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  515 F04E  C3 F0A6     ZBITS:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  516 F051  C3 F238     ZLBYTE:		JP	HIGH_LBYTE		;DISPLAY [A] ON CONSOL
  517 F054  C3 F1D2     ZHEXSP:		JP	HIGH_HEXSP		;PUT 16 BIT PARAMETERS ON STACK FROM CONSOL, [C]=PARAMETER #
  518 F057  C3 F226     ZCRLF:		JP	HIGH_CRLF		;SEND CRLF TO CONSOL
  519 F05A  C3 F0A6     ZHILO:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  520 F05D  C3 F0A6     ZCONV:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  521 F060  C3 F0A6     ZDOS		JP	NoHighPageError			;This routine resides on the LOW page ROM
  522 F063  C3 F0A6     ZPCHK:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  523 F066  C3 F0A6     ZVBOOT		JP	NoHighPageError			;This routine resides on the LOW page ROM
  524 F069  C3 F0A6     ZHARD:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  525 F06C  C3 F0A6     ZPRDY:		JP	NoHighPageError			;This routine resides on the LOW page ROM
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  10
MASTER1 Z80

  526 F06F  C3 F0A6     ZRSTAT:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  527 F072  C3 F0A6     ZCCHK:		JP	NoHighPageError			;This routine resides on the LOW page ROM
  528 F075  C3 F0A6     ZZBOOT		JP	NoHighPageError			;This routine resides on the LOW page ROM
  529                   
  530                   
  531                   ;----------------->>> THIS CODE MUST BE AT THE SAME LOCATION AS FOR THE LOW PAGE ROM CODE <<<---------
  532                   ;
  533 F078              ACTIVATE_HIGH_PAGE:				; SWITCH TO HIGH PAGE of ROM 
  534 F078  00          	NOP
  535 F079  00          	NOP
  536 F07A  00          	NOP
  537 F07B  00          	NOP
  538 F07C  C3 F086     	JP	HIGH_MENU_OPTION
  539                   	
  540 F07F              ACTIVATE_LOW_PAGE:				; RETURN BACK TO LOW PAGE OF ROM
  541 F07F  3E 04       	LD	A,04H				; 04H for MEMORY MANAGEMENT TO OVERLAP + Bit 1 = HIGH PAGE
  542 F081  D3 D3       	OUT	(Z80PORT+3),A	
  543 F083  C3 F0A6     	JP	NoHighPageError			; Will arrive here only IF no address line switch. 
  544                   ;
  545                   ;----------------------->>> END OF COMMON CODE LOACTIONS <<<----------------------------------
  546                   ;
  547                   ;
  548 F086              HIGH_MENU_OPTION:
  549 F086  7A          	LD	A,D				; HIGH PAGE code with 1 in [D] for XMODEM
  550 F087  FE 01       	CP	A,1
  551 F089  CA F25E     	JP	Z,HIGH_XMODEM
  552 F08C  FE 02       	CP	A,2
  553 F08E  CA F406     	JP	Z,HIGH_FPGA_DRIVES_MENU
  554 F091  C3 F094     	JP	INVALID_MENU_ERROR		; The only menu option so far
  555                   	
  556 F094              INVALID_MENU_ERROR:
  557 F094  21 FA3D     	LD      HL,INVALID_PARM_MSG		; Point Error Message
  558 F097  CD F21B     	CALL	HIGH_PRINT_STRING		; Print string
  559 F09A  C3 F07F     	JP	ACTIVATE_LOW_PAGE
  560                   
  561 F09D              MENU_ERROR:
  562 F09D  21 FA1A     	LD      HL,M_ERROR_MSG			; Point Error Message
  563 F0A0  CD F21B     	CALL	HIGH_PRINT_STRING		; Print string
  564 F0A3  C3 F07F     	JP	ACTIVATE_LOW_PAGE
  565                   
  566 F0A6              NoHighPageError:
  567 F0A6  21 FA28     	LD	HL,NoHighPageMsg		; "No address line LA13 switch active" 
  568 F0A9  CD F21B     	CALL	HIGH_PRINT_STRING		; Print string
  569 F0AC  C3 F07F     	JP	ACTIVATE_LOW_PAGE
  570                   ;
  571                   ;
  572                   ;<<<<<<<<<<<<<<<<<<<<<< MAIN CONSOL OUTPUT ROUTINE >>>>>>>>>>>>>>>>>>>>>>>>>
  573                   
  574 F0AF  DB EF       HIGH_CO:	IN	A,(IOBYTE)
  575 F0B1  CB 6F       	BIT	5,A			;SEE IF SERIAL PORT INPUT IS REQ
  576 F0B3  CA F137     	JP	Z,CSO
  577 F0B6  DB EF       	IN	A,(IOBYTE)		;NOTE CHARACTER IS IN [C]
  578 F0B8  CB 47       	BIT	0,A			;CHECK IF OUTPUT TO PRINTER IS ALSO REQ
  579 F0BA  CA F0D8     	JP	Z,LOX
  580 F0BD  DB 00       SDCONO:	IN	A,(CONSOL_STATUS)	;SD SYSTEMS VIDIO BOARD PORT
  581 F0BF  E6 04       	AND	4H
  582 F0C1  28 FA       	JR	Z,SDCONO
  583 F0C3  79          	LD	A,C
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  11
MASTER1 Z80

  584 F0C4  FE 07       	CP	07H			;IS IT A BELL
  585 F0C6  28 14       	JR	Z,BELL1
  586 F0C8  FE 00       	CP	0H			;SD BOARD CANNOT TAKE A NULL!
  587 F0CA  C8          	RET	Z
  588 F0CB  D3 01       	OUT	(CONSOL_OUT),A
  589 F0CD  DB EF       	IN	A,(IOBYTE)
  590 F0CF  CB 6F       	BIT	5,A			;SEE IF SERIAL PORT OUTPUT IS REQ
  591 F0D1  20 03       	JR	NZ,SDCON5		;MAKE SURE TO RETURN CHARACTER SENT IN [A]
  592 F0D3  CD F149     	CALL 	SERIAL_OUT		;Send data in [C] to Serial Port
  593 F0D6  79          SDCON5:	LD	A,C
  594 F0D7  C9          	RET				;RETURN CHARACTER SENT IN [A]
  595                   
  596 F0D8  CD F0BD     LOX:	CALL	SDCONO			;OUTPUT TO BOTH PRINTER & CONSOLE
  597                   ;		CALL	LO				;EXCEPT THE PRINTER CODE ISN'T IN HIPAGE
  598 F0DB  C9          		RET
  599                   
  600 F0DC  3E 06       BELL1:	LD	A,06H			;SEND A BELL
  601 F0DE  D3 01       	OUT	(CONSOL_OUT),A
  602 F0E0  3E 0F       	LD	A,0FH
  603 F0E2  CD F0EB     	CALL	DELAY
  604 F0E5  3E 07       	LD	A,07H
  605 F0E7  D3 01       	OUT	(CONSOL_OUT),A
  606 F0E9  18 EB       	JR	SDCON5
  607                   
  608                   
  609 F0EB  3D          DELAY:	DEC	A			;GENERAL COUNT DOWN TIME DELAY
  610 F0EC  C8          	RET	Z			;LENGTH SET IN [A]
  611 F0ED  F5          	PUSH	AF
  612 F0EE  3E 05       	LD	A,05H
  613 F0F0  3D          MORE:	DEC	A
  614 F0F1  F5          	PUSH	AF
  615 F0F2  AF          	XOR	A
  616 F0F3  3D          MORE2:	DEC	A
  617 F0F4  20 FD       	JR	NZ,MORE2
  618 F0F6  F1          	POP	AF
  619 F0F7  20 F7       	JR	NZ,MORE
  620 F0F9  F1          	POP	AF
  621 F0FA  18 EF       	JR	DELAY
  622                   
  623                   
  624                   ;<<<<<<<<<<<<<<<<<<< MAIN CONSOL STATUS ROUTINE >>>>>>>>>>>>>>>>>>>>>>
  625                   
  626 F0FC  DB EF       HIGH_CSTS:	IN	A,(IOBYTE)
  627 F0FE  CB 6F       	BIT	5,A			;SEE IF SERIAL PORT INPUT IS REQ
  628 F100  CA F13B     	JP	Z,STS
  629 F103  DB 00       	IN	A,(CONSOL_STATUS)
  630 F105  E6 02       	AND	02H
  631 F107  CA F10D     	JP	Z,TRYSER		;See if input from Serial Port is req
  632 F10A  AF          	XOR	A
  633 F10B  3D          	DEC	A			;RETURN WITH 0FFH IN [A] IF SOMETHING
  634 F10C  C9          	RET
  635 F10D  DB EF       TRYSER:	IN	A,(IOBYTE)
  636 F10F  CB 6F       	BIT	5,A			;SEE IF SERIAL PORT INPUT IS REQ
  637 F111  CA F16B     	JP	Z,SERIAL_STAT		;Check if anything at Modem IN status routine
  638 F114  AF          	XOR	A			;IF IOBYTE bit 1 then skip modem input
  639 F115  C9          	RET				;RETURN WITH 0 IN A IF NOTHING THERE
  640                   
  641                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  12
MASTER1 Z80

  642                   ;<<<<<<<<<<<<<<<<<<<< MAIN CONSOL INPUT ROUTINE >>>>>>>>>>>>>>>>>>>>
  643                   
  644 F116  DB EF       HIGH_CI:	IN	A,(IOBYTE)
  645 F118  CB 6F       	BIT	5,A			;SEE IF SERIAL PORT INPUT IS REQ
  646 F11A  CA F140     	JP	Z,CIS
  647 F11D  DB 00       	IN 	A,(CONSOL_STATUS)	;NEED CONSTAT TO CLEAN UP SHIFT KEYS ETC
  648 F11F  E6 02       	AND	02H
  649 F121  28 05       	JR	Z,CHKSERIAL
  650 F123  DB 01       	IN	A,(CONSOL_IN)
  651 F125  E6 7F       	AND	7FH
  652 F127  C9          	RET
  653 F128              CHKSERIAL:
  654 F128  DB EF       	IN	A,(IOBYTE)
  655 F12A  CB 6F       	BIT	5,A			;SEE IF SERIAL PORT INPUT IS REQ
  656 F12C  20 E8       	JR	NZ,HIGH_CI			;NO, then do normal CI
  657 F12E  CD F16B     	CALL	SERIAL_STAT		;See if anything at Modem input
  658 F131  CA F116     	JP	Z,HIGH_CI
  659 F134  C3 F15B     	JP	SERIAL_IN
  660                   
  661                   
  662                   
  663                   ;<<<<<<<<<<<<<<<<<<< SERIAL CONSOL ROUTINE >>>>>>>>>>>>>>>>>>>>>>
  664                   
  665 F137  CD F149     CSO:	CALL 	SERIAL_OUT		;Send data in [C] to Serial Port
  666 F13A  C9          	RET
  667                   
  668                   
  669                   ;<<<<<<<<<<<<<<<<<<< SERIAL CONSOL STATUS ROUTINE >>>>>>>>>>>>>>>>>>>>>>
  670                   
  671 F13B  CA F16B     STS:	JP	Z,SERIAL_STAT		;Check if anything at Modem IN status routine
  672 F13E  AF          	XOR	A			;IF IOBYTE bit 1 then skip modem input
  673 F13F  C9          	RET				;RETURN WITH 0 IN A IF NOTHING THERE
  674                   
  675                   
  676                   ;<<<<<<<<<<<<<<<<<<<< SERIAL CONSOL INPUT ROUTINE >>>>>>>>>>>>>>>>>>>>
  677                   
  678 F140  CD F16B     CIS:	CALL	SERIAL_STAT		;See if anything at Modem input
  679 F143  CA F140     	JP	Z,CIS
  680 F146  C3 F15B     	JP	SERIAL_IN
  681                   
  682                   ;>>>>>>>>>>>>>>>>>> S100Computers SERIAL I/O Board <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  683                   ; Note the S100Computers I/O board will have the SSC-B set initially to 19,200 Baud 
  684                   ;
  685 F149              SERIAL_OUT:	
  686 F149  AF          	XOR	A,A			;Will try 256 times, then timeout
  687 F14A  F5          MODXXX:	PUSH	AF
  688 F14B  DB A1       	IN	A,(ACTL)		;MODEM/SERIAL OUT
  689 F14D  E6 04       	AND	04H			;Are we ready for a character
  690 F14F  20 05       	JR	NZ,SENDM		;NZ if ready to recieve character
  691 F151  F1          	POP	AF
  692 F152  3D          	DEC	A
  693 F153  20 F5       	JR	NZ,MODXXX
  694 F155  C9          	RET
  695 F156  F1          SENDM:	POP	AF
  696 F157  79          	LD	A,C
  697 F158  D3 A3       	OUT	(ADTA),A		;Send it
  698 F15A  C9          	RET
  699                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  13
MASTER1 Z80

  700 F15B              SERIAL_IN:	
  701 F15B  AF          	XOR	A,A			;Will try 256 times, then timeout
  702 F15C              SERIAL_INX:	
  703 F15C  F5          	PUSH	AF	
  704 F15D  CD F16B     	CALL	SERIAL_STAT		;MODEN/SERIAL IN
  705 F160  20 05       	JR	NZ,GETMOD
  706 F162  F1          	POP	AF
  707 F163  3D          	DEC	A
  708 F164  20 F6       	JR	NZ,SERIAL_INX
  709 F166  C9          	RET
  710 F167  F1          GETMOD:	POP	AF	
  711 F168  DB A3       	IN	A,(ADTA)
  712 F16A  C9          	RET
  713                   	
  714 F16B              SERIAL_STAT:
  715 F16B  DB A1       	IN	A,(ACTL)
  716 F16D  E6 01       	AND	01H
  717 F16F  C8          	RET	Z			;Ret Z if nothing
  718 F170  AF          	XOR	A
  719 F171  3D          	DEC	A
  720 F172  C9          	RET				;Ret FF/NZ if something
  721                   
  722                   
  723                   ;S100Computers Serial I/O Board Initilization
  724                   ;Note Zilog SCC serial port A will be set to 19,200 Baud initially (for speech synthesizer).
  725                   ;Note Zilog SCC serial port B will be set to 38,400 Baud initially (for XModem etc).
  726                   
  727 F173              HIGH_INIT_SCC_A:				
  728 F173  3E A1       	LD	A,ACTL			;Program Channel A
  729 F175  4F          	LD	C,A
  730 F176  06 0E       	LD	B,0EH			;Byte count for OTIR below
  731 F178  21 F189     	LD	HL,HIGH_SCCINIT_A
  732 F17B  ED B3       	OTIR
  733 F17D  C9          	RET
  734                   	
  735 F17E              HIGH_INIT_SCC_B:
  736 F17E  3E A0       	LD	A,BCTL			;Program Channel B
  737 F180  4F          	LD	C,A
  738 F181  06 0E       	LD	B,0EH			;Byte count for OTIR below
  739 F183  21 F199     	LD	HL,HIGH_SCCINIT_B
  740 F186  ED B3       	OTIR
  741 F188  C9          	RET
  742                   ;
  743                   ;	
  744 F189              HIGH_SCCINIT_A:
  745 F189  04          	DB	04H			;Point to WR4
  746 F18A  44          	DB	44H			;X16 clock,1 Stop,NP
  747 F18B  03          	DB	03H			;Point to WR3
  748 F18C  C1          	DB	0C1H			;Enable reciever, Auto Enable, Recieve 8 bits	
  749                   ;	DB	0E1H			;Enable reciever, No Auto Enable, Recieve 8 bits (for CTS bit)	
  750 F18D  05          	DB	05H			;Point to WR5
  751 F18E  EA          	DB	0EAH			;Enable, Transmit 8 bits
  752 F18F  0B          	DB	0BH			;Set RTS,DTR, Enable. Point to WR11
  753 F190  56          	DB	56H			;Recieve/transmit clock = BRG
  754 F191  0C          	DB	0CH			;Point to WR12
  755                   ;	DB	40H			;Low Byte 2400 Baud 
  756                   ;	DB	1EH			;Low Byte 4800 Baud 
  757                   ;	DB	0EH			;Low Byte 9600 Baud 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  14
MASTER1 Z80

  758                   ;	DB	06H			;Low byte 19,200 Baud 
  759 F192  02          	DB	02H			;Low byte 38,400 Baud <<<<<<<<<<< XModem I/O
  760                   ;	DB	00H			;Low byte 76,800 Baud  
  761 F193  0D          	DB	0DH			;Point to WR13
  762 F194  00          	DB	00H			;High byte for Baud
  763 F195  0E          	DB	0EH			;Point to WR14
  764 F196  01          	DB	01H			;Use 4.9152 MHz Clock. Note SD Systems uses a 2.4576 MHz clock, enable BRG
  765 F197  0F          	DB	0FH			;Point to WR15
  766 F198  00          	DB	00H			;Generate Int with CTS going high
  767                   
  768 F199              HIGH_SCCINIT_B:
  769 F199  04          	DB	04H			;Point to WR4
  770 F19A  44          	DB	44H			;X16 clock,1 Stop,NP
  771 F19B  03          	DB	03H			;Point to WR3
  772 F19C  C1          	DB	0C1H			;Enable reciever, Auto Enable, Recieve 8 bits	
  773 F19D  05          	DB	05H			;Point to WR5
  774 F19E  EA          	DB	0EAH			;Enable, Transmit 8 bits
  775 F19F  0B          	DB	0BH			;Set RTS,DTR, Enable. Point to WR11
  776 F1A0  56          	DB	56H			;Recieve/transmit clock = BRG
  777 F1A1  0C          	DB	0CH			;Point to WR12
  778 F1A2  06          	DB	06H			;Low byte 19,200 Baud <<<<<<<<<<< Note Speech synthizer defaults to this value
  779 F1A3  0D          	DB	0DH			;Point to WR13
  780 F1A4  00          	DB	00H			;High byte for Baud
  781 F1A5  0E          	DB	0EH			;Point to WR14
  782 F1A6  01          	DB	01H			;Use 4.9152 MHz Clock. Note SD Systems uses a 2.4576 MHz clock, enable BRG
  783 F1A7  0F          	DB	0FH			;Point to WR15
  784 F1A8  00          	DB	00H			;Generate Int with CTS going high
  785                   ;
  786                   ;
  787                   ;
  788                   ;---------------WE NEED A FEW ROUTINES (ALSO IN THE LOW PAGE) TO PROCESS COMMNADS--------------
  789                   ; 
  790 F1A9              HIGH_QCHK:				;TEST FOR DELIMITERS
  791 F1A9  FE 20       	CP	SPACE
  792 F1AB  C8          	RET	Z
  793 F1AC  FE 2C       	CP	','
  794 F1AE  C8          	RET	Z
  795 F1AF  FE 0D       	CP	CR
  796 F1B1  37          	SCF
  797 F1B2  C8          	RET	Z
  798 F1B3  3F          	CCF
  799 F1B4  C9          	RET 
  800                   
  801                   ;KEYBOARD HANDELING ROUTINE (WILL NOT ECHO CR/LF)
  802                   ;IT CONVERTS LOWER CASE TO UPPER CASE FOR LOOKUP COMMANDS
  803                   ;ALSO ^C WILL FORCE A JUMP TO BOOT IN CP/M
  804                   ;ALL OTHERE CHARACTERS ARE ECHOED ON CONSOL
  805                   
  806 F1B5              HIGH_TI:
  807 F1B5  CD F116     	CALL	HIGH_CI
  808 F1B8  FE 0D       	CP	CR
  809 F1BA  C8          	RET	Z
  810 F1BB  FE 03       	CP	'C'-40H			;^C TO BOOT IN CP/M
  811 F1BD  CA F0A6     	JP	Z,NoHighPageError
  812 F1C0  C5          	PUSH	BC
  813 F1C1  4F          	LD	C,A
  814 F1C2  CD F0AF     	CALL	HIGH_CO
  815 F1C5  79          	LD	A,C
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  15
MASTER1 Z80

  816 F1C6  C1          	POP	BC
  817 F1C7  FE 40       	CP	40H			;LC->UC
  818 F1C9  D8          	RET	C
  819 F1CA  FE 7B       	CP	7BH
  820 F1CC  D0          	RET	NC
  821 F1CD  E6 5F       SF754:	AND	5FH
  822 F1CF  C9          	RET 
  823                   
  824 F1D0  0E 01       EXPR1:	LD	C,01H			;GET ONE PARAMETER
  825 F1D2              HIGH_HEXSP:	
  826 F1D2  21 0000     	LD	HL,0000
  827 F1D5  CD F1B5     EX0:	CALL	HIGH_TI
  828 F1D8  47          EX1:	LD	B,A
  829 F1D9  CD F20B     	CALL	HIGH_NIBBLE
  830 F1DC  38 08       	JR	C,EX2X
  831 F1DE  29          	ADD	HL,HL
  832 F1DF  29          	ADD	HL,HL
  833 F1E0  29          	ADD	HL,HL
  834 F1E1  29          	ADD	HL,HL
  835 F1E2  B5          	OR	L
  836 F1E3  6F          	LD	L,A
  837 F1E4  18 EF       	JR	EX0
  838 F1E6  E3          EX2X:	EX	(SP),HL
  839 F1E7  E5          	PUSH	HL
  840 F1E8  78          	LD	A,B
  841 F1E9  CD F1A9     	CALL	HIGH_QCHK
  842 F1EC  30 02       	JR	NC,SF560
  843 F1EE  0D          	DEC	C
  844 F1EF  C8          	RET	Z
  845 F1F0  C2 F256     SF560:	JP	NZ,HIGH_ERROR
  846 F1F3  0D          	DEC	C
  847 F1F4  20 DC       	JR	NZ,HIGH_HEXSP
  848 F1F6  C9          	RET 
  849 F1F7  0E 01       EXF:	LD	C,01H
  850 F1F9  21 0000     	LD	HL,0000H
  851 F1FC  18 DA       	JR	EX1
  852                   
  853                   ;CONVERT HEX TO ASCII
  854                   
  855 F1FE              HIGH_CONV:
  856 F1FE  E6 0F       	AND	0FH
  857 F200  C6 90       	ADD	A,90H
  858 F202  27          	DAA 
  859 F203  CE 40       	ADC	A,40H
  860 F205  27          	DAA 
  861 F206  4F          	LD	C,A
  862 F207  CD F0AF     	CALL	HIGH_CO
  863 F20A  C9          	RET
  864                   
  865                   
  866 F20B              HIGH_NIBBLE:	
  867 F20B  D6 30       	SUB	30H
  868 F20D  D8          	RET	C
  869 F20E  FE 17       	CP	17H
  870 F210  3F          	CCF
  871 F211  D8          	RET	C
  872 F212  FE 0A       	CP	LF
  873 F214  3F          	CCF
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  16
MASTER1 Z80

  874 F215  D0          	RET	NC
  875 F216  D6 07       	SUB	07H
  876 F218  FE 0A       	CP	LF
  877 F21A  C9          	RET
  878                   
  879 F21B              HIGH_PRINT_STRING:				;A ROUTINE TO PRINT OUT A STRING @ [HL]
  880 F21B  7E          	LD	A,(HL)				;UP TO THE FIRST '$'.
  881 F21C  23          	INC	HL			
  882 F21D  FE 24       	CP	'$'
  883 F21F  C8          	RET	Z
  884 F220  4F          	LD	C,A
  885 F221  CD F0AF     	CALL	HIGH_CO
  886 F224  18 F5       	JR	HIGH_PRINT_STRING
  887                   
  888                   
  889                   ;SEND TO CONSOL CR/LF
  890                   
  891 F226              HIGH_CRLF:
  892 F226  C5          	PUSH	BC
  893 F227  0E 0A       	LD	C,LF
  894 F229  CD F0AF     	CALL	HIGH_CO
  895 F22C  0E 0D       	LD	C,CR
  896 F22E  CD F0AF     	CALL	HIGH_CO
  897 F231  C1          	POP	BC
  898 F232  C9          	RET
  899                   
  900                   
  901                   ;PRINT [HL] ON CONSOL
  902                   
  903 F233              HIGH_LADR:
  904 F233  7C          	LD	A,H
  905 F234  CD F238     	CALL	HIGH_LBYTE
  906 F237  7D          	LD	A,L
  907 F238              HIGH_LBYTE:
  908                   
  909 F238  F5          HEXOUT:	PUSH	AF				;PRINT HEX in A on CONSOLE		
  910 F239  C5          	PUSH	BC
  911                   
  912 F23A  F5          	PUSH	AF
  913 F23B  0F          	RRCA
  914 F23C  0F          	RRCA
  915 F23D  0F          	RRCA
  916 F23E  0F          	RRCA
  917 F23F  CD F249     	CALL	CONV_CO
  918 F242  F1          	POP	AF
  919 F243  CD F249     	CALL	CONV_CO
  920                   	
  921 F246  C1          	POP	BC
  922 F247  F1          	POP	AF
  923 F248  C9          	RET
  924                   
  925 F249              CONV_CO:	
  926 F249  E6 0F       	AND	A,0FH			;HEX to ASCII
  927 F24B  C6 90       	ADD	90H
  928 F24D  27          	DAA
  929 F24E  CE 40       	ADC	40H
  930 F250  27          	DAA
  931 F251  4F          	LD	C,A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  17
MASTER1 Z80

  932 F252  CD F0AF     	CALL	HIGH_CO
  933 F255  C9          	RET			
  934                   
  935 F256              HIGH_ERROR:				;RESTORE SYSTEM AFTER ERROR (Back to low page)
  936 F256  0E 2A       	LD	C,'*'
  937 F258  CD F0AF     	CALL	HIGH_CO
  938 F25B  C3 F07F     	JP	ACTIVATE_LOW_PAGE
  939                   
  940                   ;---------------------------------------------------------------------------------------------------------------
  941                   ;This code will read a download file from another computer (usually a PC) sent via a serial port and place
  942                   ;it in RAM at a specified location.  The file must be sent via the XModem protocol. On PC's there are
  943                   ;many programs that do this. The "Absolute Telnet" program (by Celestial Software) is what I use.
  944                   
  945 F25E              HIGH_XMODEM:
  946 F25E  21 F8A9     	LD	HL,MODEM_SIGNON		;Send Modem signon message
  947 F261  CD F21B     	CALL	HIGH_PRINT_STRING
  948                   					
  949 F264  21 0000     	LD	HL,0			;SP to HL
  950 F267  39          	ADD	HL,SP			
  951 F268  11 0040     	LD	DE,40H			;Drop 40H bytes below to be safe
  952 F26B  ED 52       	SBC	HL,DE
  953 F26D  E5          	PUSH	HL
  954 F26E  DD E1       	POP	IX			;Will store data  below in RAM 40H bytes below SP to be safe
  955                   					
  956 F270  AF          	XOR	A,A			;Initilize flags
  957 F271  DD 77 00    	LD	(IX+RECVD_SECT_NO),A
  958 F274  DD 77 01    	LD	(IX+SECTNO),A
  959 F277  DD 77 02    	LD	(IX+ERRCT),A
  960                   					
  961 F27A  21 F9F7     	LD	HL,MODEM_RAM_LOC	;Get RAM location for where to place code
  962 F27D  CD F21B     	CALL	HIGH_PRINT_STRING
  963 F280  0E 01       	LD	C,1
  964 F282  CD F054     	CALL	ZHEXSP			;Get 16 bit value, put on stack
  965 F285  FD E1       	POP	IY			;DMA Value now in IY
  966 F287  CD F057     	CALL	ZCRLF
  967                   					
  968 F28A  CD F173     	CALL	HIGH_INIT_SCC_A		;INITITIALIZE THE SCC SERIAL PORT A
  969                   				
  970 F28D  06 01       	LD	B,1			;TIMEOUT DELAY
  971 F28F  CD F36F     	CALL	RECV			;GOBBLE UP GARBAGE CHARS FROM THE LINE
  972                   
  973 F292              RECV_LOOP:				; ---- MAIN RECIEVE LOOP ----
  974 F292  AF          	XOR	A,A			;GET 0
  975 F293  DD 77 02    	LD	(IX+ERRCT),A		;INITIAL ERROR COUNT SET TO 0
  976 F296              RECV_HDR:
  977 F296  21 F91C     	LD	HL,RMSG
  978 F299  CD F21B     	CALL	HIGH_PRINT_STRING
  979 F29C  DD 7E 01    	LD	A,(IX+SECTNO)		;Get current sector number
  980 F29F  3C          	INC	A
  981 F2A0  CD F238     	CALL	HIGH_LBYTE			;Show Sector Number on Console
  982                   
  983 F2A3  21 F9D8     	LD	HL,MODEM_RAM_MSG	;"H.  IF OK, will write to RAM location"
  984 F2A6  CD F21B     	CALL	HIGH_PRINT_STRING
  985 F2A9  FD E5       	PUSH	IY
  986 F2AB  E1          	POP	HL			;IY to HL
  987 F2AC  CD F233     	CALL	HIGH_LADR			;Show DMA Address
  988 F2AF  CD F057     	CALL	ZCRLF
  989                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  18
MASTER1 Z80

  990 F2B2  06 05       	LD	B,5			;5 SEC TIMEOUT
  991 F2B4  CD F36F     	CALL	RECV
  992 F2B7  D2 F2E5     	JP	NC,RHNTO		;IF ALL OK (NO TIMEOUT), THEN DROP DOWN TO RHNTO TO GET DATA
  993                   
  994 F2BA              RECV_HDR_TIMEOUT:
  995 F2BA  CD F3B6     	CALL	TOUT			;PRINT TIMEOUT
  996                   
  997 F2BD              RECV_SECT_ERR:				;PURGE THE LINE OF INPUT CHARS
  998 F2BD  06 01       				LD	B,1			;1 SEC W/NO CHARS
  999 F2BF  CD F36F     	CALL	RECV
 1000 F2C2  D2 F2BD     	JP	NC,RECV_SECT_ERR	;LOOP UNTIL SENDER DONE
 1001 F2C5  3E 15       	LD	A,NAK
 1002 F2C7  CD F39E     	CALL	SEND			;SEND NAK
 1003                   
 1004 F2CA  DD 7E 02    	LD	A,(IX+ERRCT)
 1005 F2CD  3C          	INC	A
 1006 F2CE  DD 77 02    	LD	(IX+ERRCT),A
 1007 F2D1  FE 08       	CP	A,MODEM_ERR_LIMIT
 1008 F2D3  DA F296     	JP	C,RECV_HDR
 1009                   			
 1010 F2D6  CD F3CF     	CALL	CHECK_FOR_QUIT
 1011 F2D9  CA F296     	JP	Z,RECV_HDR
 1012 F2DC  21 F9C4     	LD	HL,BAD_HEADER_MSG
 1013 F2DF  CD F21B     	CALL	HIGH_PRINT_STRING
 1014 F2E2  C3 F403     	JP	EXIT
 1015                   
 1016                   								
 1017 F2E5  FE 01       RHNTO:	CP	A,SOH			;GOT CHAR - MUST BE SOH
 1018 F2E7  CA F2FF     	JP	Z,GOT_SOH		;Z IF OK
 1019 F2EA  B7          	OR	A,A			;00 FROM SPEED CHECK?
 1020 F2EB  CA F296     	JP	Z,RECV_HDR
 1021 F2EE  FE 04       	CP	A,EOT
 1022 F2F0  CA F367     	JP	Z,GOT_EOT
 1023                   					;DIDN'T GET SOH - 
 1024 F2F3  CD F238     	CALL	HIGH_LBYTE
 1025 F2F6  21 F931     	LD	HL,ERRSOH
 1026 F2F9  CD F21B     	CALL	HIGH_PRINT_STRING
 1027 F2FC  C3 F2BD     	JP	RECV_SECT_ERR
 1028                   
 1029 F2FF              GOT_SOH:
 1030 F2FF  06 01       	LD	B,1
 1031 F301  CD F36F     	CALL	RECV
 1032 F304  DA F2BA     	JP	C,RECV_HDR_TIMEOUT
 1033 F307  57          	LD	D,A			;D=BLK #
 1034 F308  06 01       	LD	B,1
 1035 F30A  CD F36F     	CALL	RECV			;GET CMA'D SECT #
 1036 F30D  DA F2BA     	JP	C,RECV_HDR_TIMEOUT
 1037 F310  2F          	CPL
 1038 F311  BA          	CP	A,D			;GOOD SECTOR #?
 1039 F312  CA F31E     	JP	Z,RECV_SECTOR
 1040                   								
 1041 F315  21 F947     	LD	HL,ERR2			;GOT BAD SECTOR #
 1042 F318  CD F21B     	CALL	HIGH_PRINT_STRING
 1043 F31B  C3 F2BD     	JP	RECV_SECT_ERR
 1044                   
 1045                   
 1046 F31E              RECV_SECTOR:				;Sector is OK, so read data and place in RAM
 1047 F31E  7A          	LD	A,D			;GET SECTOR #
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  19
MASTER1 Z80

 1048 F31F  DD 77 00    	LD	(IX+RECVD_SECT_NO),A
 1049 F322  0E 00       	LD	C,0			;INIT CKSUM
 1050 F324  1E 80       	LD	E,80H			;Sector Byte Count
 1051 F326  FD E5       	PUSH	IY
 1052 F328  E1          	POP	HL			;DMA address (IY) to HL
 1053                   					
 1054 F329              RECV_CHAR:
 1055 F329  06 01       	LD	B,1			;1 SEC TIMEOUT
 1056 F32B  CD F36F     	CALL	RECV			;GET CHAR
 1057 F32E  DA F2BA     	JP	C,RECV_HDR_TIMEOUT
 1058 F331  77          	LD	(HL),A			;STORE CHAR
 1059 F332  23          	INC	HL		
 1060 F333  1D          	DEC	E			;Next sector byte
 1061 F334  C2 F329     	JP	NZ,RECV_CHAR
 1062                   
 1063                   					;VERIFY CHECKSUM
 1064 F337  51          	LD	D,C			;SAVE CHECKSUM
 1065 F338  06 01       	LD	B,1			;TIMEOUT
 1066 F33A  CD F36F     	CALL	RECV			;GET CHECKSUM
 1067 F33D  DA F2BA     	JP	C,RECV_HDR_TIMEOUT
 1068 F340  BA          	CP	A,D			;CHECK
 1069 F341  C2 F35E     	JP	NZ,RECV_CKSUM_ERR
 1070                   
 1071                   					;GOT A SECTOR, WRITE IF = 1+PREV SECTOR
 1072 F344  DD 7E 00    	LD	A,(IX+RECVD_SECT_NO)
 1073 F347  47          	LD	B,A			;SAVE IT
 1074 F348  DD 7E 01    	LD	A,(IX+SECTNO)		;GET PREV
 1075 F34B  3C          	INC	A			;CALC NEXT SECTOR #
 1076 F34C  B8          	CP	B			;MATCH?
 1077 F34D  C2 F353     	JP	NZ,DO_ACK
 1078 F350  DD 77 01    	LD	(IX+SECTNO),A		;UPDATE SECTOR #
 1079 F353  3E 06       DO_ACK:	LD	A,ACK
 1080 F355  CD F39E     	CALL	SEND
 1081                   				
 1082 F358  E5          	PUSH	HL			;ALL OK SO SAVE DMA Address in IY
 1083 F359  FD E1       	POP	IY			
 1084 F35B  C3 F292     	JP	RECV_LOOP		;Back to Top recieve loop
 1085                   
 1086 F35E              RECV_CKSUM_ERR:
 1087 F35E  21 F95F     	LD	HL,ERR3
 1088 F361  CD F21B     	CALL	HIGH_PRINT_STRING
 1089 F364  C3 F2BD     	JP	RECV_SECT_ERR
 1090                   
 1091 F367              GOT_EOT:
 1092 F367  3E 06       	LD	A,ACK			;ACK THE EOT
 1093 F369  CD F39E     	CALL	SEND
 1094 F36C  C3 F3FD     	JP	XFER_CPLT
 1095                   
 1096                   ;----------------------------------------------------
 1097                   ;   XMODEM SERIAL PORT GET CHARACTER ROUTINE
 1098                   ;----------------------------------------------------
 1099                   
 1100 F36F  D5          RECV:	PUSH	DE			;SAVE D,E
 1101 F370  3E 05       	LD	A,5H			;Lower RTS line
 1102 F372  D3 A1       	OUT	MODEM_CTL_PORT,A	;Sel Reg 5
 1103 F374  3E EA       	LD	A,11101010B		;EAH
 1104 F376  D3 A1       	OUT	MODEM_CTL_PORT,A
 1105 F378  00          	NOP
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  20
MASTER1 Z80

 1106 F379  00          	NOP
 1107 F37A  11 BBBB     MSEC:	LD	DE,0BBBBH		;1 SEC DCR COUNT
 1108 F37D  DB A1       MWTI:	IN	A,MODEM_CTL_PORT
 1109 F37F  E6 01       	AND	A,MODEM_RECV_MASK
 1110 F381  FE 01       	CP	A,RECV_READY
 1111 F383  CA F395     	JP	Z,MCHAR			;GOT CHAR
 1112 F386  1D          	DEC	E			;COUNT DOWN
 1113 F387  C2 F37D     	JP	NZ,MWTI			;FOR TIMEOUT
 1114 F38A  15          	DEC	D
 1115 F38B  C2 F37D     	JP	NZ,MWTI
 1116 F38E  05          	DEC	B			;DCR # OF SECONDS
 1117 F38F  C2 F37A     	JP	NZ,MSEC			;MODEM TIMED OUT RECEIVING
 1118 F392  D1          	POP	DE			;RESTORE D,E
 1119 F393  37          	SCF				;CARRY SHOWS TIMEOUT
 1120 F394  C9          	RET
 1121                   								;GOT MODEM CHAR
 1122 F395  DB A3       MCHAR:	IN	A,MODEM_DATA_PORT
 1123 F397  D1          	POP	DE			;RESTORE DE
 1124 F398  F5          	PUSH	AF			;CALC CHECKSUM
 1125 F399  81          	ADD	A,C
 1126 F39A  4F          	LD	C,A
 1127 F39B  F1          	POP	AF
 1128 F39C  B7          	OR	A,A			;TURN OFF CARRY TO SHOW NO TIMEOUT
 1129 F39D  C9          	RET
 1130                   					
 1131                   ;----------------------------------------------------
 1132                   ;   XMODEM SERIAL PORT SEND CHARACTER ROUTINE
 1133                   ;----------------------------------------------------
 1134                   				
 1135 F39E  F5          SEND:	PUSH	AF			;CHECK IF MONITORING OUTPUT
 1136 F39F  81          	ADD	A,C			;CALC CKSUM
 1137 F3A0  4F          	LD	C,A
 1138 F3A1  DB A1       SENDW:	IN	A,MODEM_CTL_PORT	;Don't worry PC is always fast enough!
 1139 F3A3  E6 04       	AND	A,MODEM_SEND_MASK
 1140 F3A5  FE 04       	CP	A,SEND_READY
 1141 F3A7  C2 F3A1     	JP	NZ,SENDW
 1142 F3AA  F1          	POP	AF			;GET CHAR
 1143 F3AB  D3 A3       	OUT	MODEM_DATA_PORT,A
 1144                   				
 1145                   								;Raise RTS line to prevent the next character arriving
 1146 F3AD  3E 05       	LD	A,5H			;while the Z80 is busy processing info
 1147 F3AF  D3 A1       	OUT	MODEM_CTL_PORT,A	;Sel Reg 5
 1148 F3B1  3E E8       	LD	A,11101000B		;E8H
 1149 F3B3  D3 A1       	OUT	MODEM_CTL_PORT,A
 1150 F3B5  C9          	RET
 1151                   
 1152                   ;---------------- SUPPORT ROUTINES -----------------------------
 1153                   
 1154 F3B6  21 F977     TOUT:	LD	HL,TOUTM		;PRINT TIMEOUT MESSAGE
 1155 F3B9  CD F21B     	CALL	HIGH_PRINT_STRING
 1156 F3BC  DD 7E 02    	LD	A,(IX+ERRCT)
 1157 F3BF  CD F238     	CALL	HIGH_LBYTE		
 1158 F3C2  CD F057     	CALL	ZCRLF
 1159 F3C5  C9          	RET
 1160                   
 1161 F3C6  F5          CO_A:	PUSH	AF			;PRINT VALUE of [A] on CRT
 1162 F3C7  C5          	PUSH	BC
 1163 F3C8  4F          	LD	C,A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  21
MASTER1 Z80

 1164 F3C9  CD F0AF     	CALL	HIGH_CO
 1165 F3CC  C1          	POP	BC
 1166 F3CD  F1          	POP	AF
 1167 F3CE  C9          	RET
 1168                   
 1169 F3CF              CHECK_FOR_QUIT:				;MULTIPLE ERRORS, ASK IF TIME TO QUIT
 1170 F3CF  AF          	XOR	A,A			;GET 0
 1171 F3D0  DD 77 02    	LD	(IX+ERRCT),A		;RESET ERROR COUNT
 1172 F3D3  21 F980     	LD	HL,QUITM
 1173 F3D6  CD F21B     	CALL	HIGH_PRINT_STRING
 1174                   
 1175 F3D9  DB 00       CI3:	IN 	A,CONSOL_STATUS		;NEED CONSTAT TO CLEAN UP SHIFT KEYS ETC
 1176 F3DB  E6 02       	AND	A,02H
 1177 F3DD  CA F3D9     	JP	Z,CI3
 1178 F3E0  DB 01       	IN	A,CONSOL_IN
 1179 F3E2  E6 7F       	AND	A,7FH
 1180 F3E4  F5          	PUSH	AF			;SAVE CHAR
 1181 F3E5  CD F057     	CALL	ZCRLF
 1182 F3E8  F1          	POP	AF
 1183 F3E9  FE 52       	CP	A,'R'
 1184 F3EB  C8          	RET	Z			;RETURN IF RETRY
 1185 F3EC  FE 72       	CP	A,'r'
 1186 F3EE  C8          	RET	Z
 1187 F3EF  FE 51       	CP	A,'Q'			;QUIT?
 1188 F3F1  C2 F3F6     	JP	NZ,LCQ
 1189 F3F4  B7          	OR	A,A			;TURN OFF ZERO FLAG
 1190 F3F5  C9          	RET
 1191 F3F6  FE 71       LCQ:	CP	A,'q'
 1192 F3F8  C2 F3CF     	JP	NZ,CHECK_FOR_QUIT
 1193 F3FB  B7          	OR	A,A			;TURN OFF ZERO FLAG
 1194 F3FC  C9          	RET
 1195                   
 1196 F3FD              XFER_CPLT:				;DONE - CLOSE UP SHOP
 1197 F3FD  21 F9B0     	LD	HL,MODEM_DONE_MSG
 1198 F400  CD F21B     	CALL	HIGH_PRINT_STRING
 1199 F403  C3 F01B     EXIT:	JP	ZSTART
 1200                   						
 1201                   ;
 1202                   ;--------------------------------------------------------------------------------------------------------
 1203                   ;---------------------------------------------- FPGA DC Board IDE MENU ----------------------------------
 1204                   ;--------------------------------------------------------------------------------------------------------
 1205                   
 1206 F406              HIGH_FPGA_DRIVES_MENU:
 1207 F406  DB 80       	IN	A,(S100_STATUS_PORT)	;If FPGA_DC is active this will be X000000X
 1208 F408  FE FF       	CP	A,0FFH
 1209 F40A  CA F499     	JP	Z,NO_RESPONSE
 1210                   	
 1211 F40D  3E 82       	LD	A,CMD$BOARD$CONFIG	;Get FPGA_DC Board hardware configuration
 1212 F40F  CD F882     	CALL	DATA_TO_FPGA		;Bits 7&6 contain IDE & FDC circuit flags 
 1213                   					;Bits 1&0 contain IDE Mode (0,1,2)
 1214                   	
 1215 F412  CD F893     	CALL	GET_FPGA_TO_S100	;Get data back [A] back to S100 
 1216 F415  32 EE24     	LD	(@BOARD_CONFIG),A
 1217 F418  E6 C0       	AND	A,11000000B
 1218 F41A  CA F499     	JP	Z,NO_RESPONSE
 1219                   	
 1220 F41D  CB 7F       	BIT	7,A				
 1221 F41F  CA F438     	JP	Z,NO_IDE_CIRCUIT	;No IDE, must be FDC
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  22
MASTER1 Z80

 1222                   	
 1223 F422  21 FB90     	LD	HL,IDE_CIRCUIT_MSG	;FPGA_DC Board, IDE/CF Card Circuit detected.$'
 1224 F425  CD F21B     	CALL	HIGH_PRINT_STRING
 1225                   	
 1226 F428  3E 38       	LD	A,CMD$SET$IDE$MODE	;38H set IDE to local IDE mode 
 1227 F42A  CD F882     	CALL	DATA_TO_FPGA
 1228 F42D  3E 01       	LD	A,LOCAL$IDE$MODE	;1H, IDE to local mode 
 1229 F42F  CD F882     	CALL	DATA_TO_FPGA
 1230 F432  21 FB3B     	LD	HL,LOCAL_IDE_MODE_MSG	;FPGA_DC Board, Set to local IDE ports mode.$ 
 1231 F435  CD F21B     	CALL	HIGH_PRINT_STRING
 1232                   
 1233 F438              NO_IDE_CIRCUIT:
 1234 F438  CB 77       	BIT	6,A				
 1235 F43A  CA F450     	JP	Z,NO_FDC_CIRCUIT	;NO FDC Board detected
 1236                   
 1237 F43D  21 FB69     	LD	HL,FDC_CIRCUIT_MSG	;FPGA_DC Board FDC Citcuit detected.$'
 1238 F440  CD F21B     	CALL	HIGH_PRINT_STRING
 1239                   
 1240 F443  3E 43       	LD	A,'C'			;Start off with floppy Drive C:
 1241 F445  CD F61C     	CALL	SEL_DRIVE		;Drive letter returned in A
 1242                   
 1243 F448  3A EE24     	LD	A,(@BOARD_CONFIG)	;If IDE citrcuit present always start with IDE
 1244 F44B  CB 7F       	BIT	7,A				
 1245 F44D  CA F455     	JP	Z,FPGA_DRIVES_LOOP	;NO IDE Circuit detected, then always start with FDC
 1246                   
 1247 F450              NO_FDC_CIRCUIT:				;NO FPGA_DC FDC circuit detected
 1248 F450  3E 41       	LD	A,'A'			;Always start off with drive A:
 1249 F452  CD F61C     	CALL	SEL_DRIVE		;Drive letter returned in A
 1250                   
 1251                   ;--------------------------------------------------------------------------------------------	
 1252                   
 1253 F455              FPGA_DRIVES_LOOP:
 1254 F455  21 FA54     	LD	HL,FPGA_DC_SIGNON	;Post the (limited) FPGA_DC Board menu
 1255 F458  CD F21B     	CALL	HIGH_PRINT_STRING
 1256                   
 1257 F45B              FPGA_LOOP1:
 1258 F45B  CD F75B     	CALL	SHOW_DMA_TRK_SEC	;Display current Track,sector,head#
 1259 F45E  CD F226     	CALL	HIGH_CRLF
 1260                   						
 1261 F461  0E 3E       	LD	C,'>'
 1262 F463  CD F0AF     	CALL	HIGH_CO
 1263                   
 1264 F466  CD F1B5     	CALL	HIGH_TI			;Simple UC character Input + echo (Note, no fancy checking)
 1265 F469  FE 1B       	CP	A,ESC			;Abort if ESC
 1266 F46B  CA F403     	JP	Z,EXIT
 1267                   
 1268 F46E  F5          	PUSH	AF
 1269 F46F  CD F057     	CALL	ZCRLF
 1270 F472  F1          	POP	AF
 1271                   
 1272 F473  FE 44       	CP	A,'D'
 1273 F475  CA F49F     	JP	Z,DO_DRIVE_SELECT
 1274 F478  FE 52       	CP	A,'R'
 1275 F47A  CA F4A5     	JP	Z,DO_SEC_READ
 1276 F47D  FE 57       	CP	A,'W'
 1277 F47F  CA F50E     	JP	Z,DO_SEC_WRITE
 1278 F482  FE 4E       	CP	A,'N'
 1279 F484  CA F5D8     	JP	Z,DRIVE_NEXT_SEC
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  23
MASTER1 Z80

 1280 F487  FE 50       	CP	A,'P'
 1281 F489  CA F5EF     	JP	Z,DRIVE_PREV_SEC
 1282 F48C  FE 54       	CP	A,'T'
 1283 F48E  CA F594     	JP	Z,SET_TRK_SEC
 1284                   
 1285 F491  0E 07       	LD	C,BELL
 1286 F493  CD F0AF     	CALL	HIGH_CO
 1287 F496  C3 F406     	JP	HIGH_FPGA_DRIVES_MENU	;Bad Menu item
 1288                   ;
 1289 F499              NO_RESPONSE:				;NO FPGA_DC Board detected
 1290 F499  21 FAE0     	LD	HL,NO_FPGA_BOARD
 1291 F49C  C3 F403     	JP	EXIT
 1292                   ;
 1293                   ;--------------------------------------- SELECT DRIVE ------------------------------------------
 1294                   
 1295 F49F              DO_DRIVE_SELECT:
 1296 F49F  CD F5F4     	CALL	SELECT_CURRENT_DRIVE	;New drive in (@CURRENT_DRIVE)
 1297 F4A2  C3 F455     	JP	FPGA_DRIVES_LOOP
 1298                   ;
 1299                   ;
 1300                   ;
 1301                   ;-------------------------------------- SECTOR READ -----------------------------------------------------------
 1302                   ;
 1303 F4A5              DO_SEC_READ:
 1304 F4A5  3E 10       	LD	A,CMD$READ$SECTOR	;10H,  Send CMD_READ_IDE_SECTOR command 
 1305 F4A7  CD F882     	CALL	DATA_TO_FPGA
 1306                   
 1307 F4AA  21 E000     	LD	HL,@SECTOR_BUFFER	;@SECTOR_BUFFER->HL
 1308 F4AD  7C          	LD	A,H
 1309 F4AE  CD F882     	CALL	DATA_TO_FPGA
 1310 F4B1  7D          	LD	A,L
 1311 F4B2  CD F882     	CALL	DATA_TO_FPGA
 1312                   
 1313 F4B5  3A EE02     	LD	A,(@TRK1)		;Track	
 1314 F4B8  CD F882     	CALL	DATA_TO_FPGA
 1315                   
 1316 F4BB  3A EE04     	LD	A,(@SEC1)		;Note: no check data is < MAXSEC, sectors start 0,1,2,3.... for SD cards
 1317 F4BE  CD F882     	CALL	DATA_TO_FPGA
 1318                   
 1319 F4C1  21 E000     	LD	HL,@SECTOR_BUFFER	;@SECTOR_BUFFER->HL
 1320 F4C4  22 EE20     	LD	(@DMA),HL
 1321 F4C7  CD F6D8     	CALL	GET_SEC_BYTE_COUNT	;Return Bytes/sec in DE
 1322                   
 1323 F4CA              GET_SECTOR:				;<<<< LOOP Sector READ >>>>
 1324 F4CA  CD F893     	CALL	GET_FPGA_TO_S100	;Get data in [A] back to S100 
 1325 F4CD  DA F502     	JP	C,GLOBAL_SEC_RD_ERROR	;Set carry flag if error on s100 bus side
 1326 F4D0  77          	LD	(HL),A
 1327 F4D1  23          	INC	HL
 1328 F4D2  1B          	DEC	DE
 1329 F4D3  7B          	LD	A,E
 1330 F4D4  B2          	OR	A,D
 1331 F4D5  20 F3       	JR	NZ,GET_SECTOR
 1332                   
 1333 F4D7  CD F893     	CALL	GET_FPGA_TO_S100	;Get ERROR FLAG
 1334 F4DA  DA F502     	JP	C,GLOBAL_SEC_RD_ERROR	;Set carry flag if error on s100 bus side
 1335 F4DD  FE F0       	CP	A,CMD$COMPLETE		;0F0H, Flag returned by DC board to signal the previous CMD was completed OK
 1336 F4DF  C2 F502     	JP	NZ,GLOBAL_SEC_RD_ERROR	
 1337                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  24
MASTER1 Z80

 1338 F4E2  CD F226     	CALL	HIGH_CRLF
 1339 F4E5  CD F7F4     	CALL	SEC_DUMP		;Show contents of RAM at (@DMA) (Registers changed)
 1340 F4E8  CD F75B     	CALL	SHOW_DMA_TRK_SEC	;Display current Track,sector,head#
 1341 F4EB  CD F226     	CALL	HIGH_CRLF
 1342                   
 1343 F4EE  21 FC11     	LD	HL,CONTINUE_MSG		;Any keyboard character for next sector. Esc to Main Menu
 1344 F4F1  CD F21B     	CALL	HIGH_PRINT_STRING
 1345 F4F4  CD F116     	CALL	HIGH_CI
 1346 F4F7  FE 1B       	CP	A,ESC
 1347 F4F9  CA F455     	JP	Z,FPGA_DRIVES_LOOP
 1348                   	
 1349 F4FC  CD F79F     	CALL	SEC_BUMP		;Point to next sector. Note this updates LBA also
 1350 F4FF  C3 F4A5     	JP	DO_SEC_READ		;Read another sector
 1351                   ;
 1352                   ;
 1353 F502              GLOBAL_SEC_RD_ERROR:
 1354 F502  21 FC00     	LD	HL,SEC_RD_ERR1_MSG	;Sect RD Error 
 1355 F505  CD F21B     	CALL	HIGH_PRINT_STRING
 1356 F508  CD F75B     	CALL	SHOW_DMA_TRK_SEC	;Display current Track,sector
 1357 F50B  C3 F455     	JP	FPGA_DRIVES_LOOP
 1358                   ;
 1359                   ; 
 1360                   ;
 1361                   ;---------------------------------- SECTOR WRITE ---------------------------------------------------------
 1362                   ;
 1363 F50E              DO_SEC_WRITE:
 1364 F50E  21 FCFF     	LD	HL,WR_RAM_MENU_MSG	;Write to disk from From RAM at:- (XXXXH):$'
 1365 F511  CD F21B     	CALL	HIGH_PRINT_STRING
 1366                   	
 1367 F514  CD F6EF     	CALL	GETHEX_NO_ECHO
 1368 F517  DA F455     	JP	C,FPGA_DRIVES_LOOP
 1369 F51A  67          	LD	H,A
 1370                   	
 1371 F51B  CD F6EF     	CALL	GETHEX_NO_ECHO
 1372 F51E  DA F455     	JP	C,FPGA_DRIVES_LOOP
 1373 F521  6F          	LD	L,A
 1374 F522  22 EE20     	LD	(@DMA),HL
 1375 F525  22 EE22     	LD	(@DMA_STORE),HL
 1376                   
 1377 F528              DO_MORE_SEC_WRITE:	
 1378 F528  22 EE20     	LD	(@DMA),HL
 1379 F52B  22 EE22     	LD	(@DMA_STORE),HL
 1380                   
 1381 F52E  3E 11       	LD	A,CMD$WRITE$SECTOR	;11H, Send CMD_WRITE_SECTOR
 1382 F530  CD F882     	CALL	DATA_TO_FPGA
 1383                   	
 1384 F533  7C          	LD	A,H
 1385 F534  CD F882     	CALL	DATA_TO_FPGA
 1386 F537  7D          	LD	A,L
 1387 F538  CD F882     	CALL	DATA_TO_FPGA
 1388                   
 1389                   	
 1390 F53B  3A EE02     	LD	A,(@TRK1)		;Track	
 1391 F53E  CD F882     	CALL	DATA_TO_FPGA
 1392                   
 1393 F541  3A EE04     	LD	A,(@SEC1)		;Note: no check data is < MAXSEC, sectors start 0,1,2,3.... for SD cards
 1394 F544  CD F882     	CALL	DATA_TO_FPGA
 1395                   	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  25
MASTER1 Z80

 1396 F547  2A EE20     	LD	HL,(@DMA)		;RAM->HL
 1397 F54A  CD F6D8     	CALL	GET_SEC_BYTE_COUNT	;Return Bytes/sec in DE
 1398                   
 1399 F54D              PUT_SECTOR:				;<<<< LOOP Sector WRITE >>>>
 1400 F54D  7E          	LD	A,(HL)
 1401 F54E  CD F882     	CALL	DATA_TO_FPGA		;Get data in [A] back to S100 
 1402 F551  23          	INC	HL
 1403 F552  1B          	DEC	DE
 1404 F553  7B          	LD	A,E
 1405 F554  B2          	OR	A,D
 1406 F555  20 F6       	JR	NZ,PUT_SECTOR
 1407                   
 1408 F557  22 EE22     	LD	(@DMA_STORE),HL		;Store for next sector
 1409                   	
 1410 F55A  CD F893     	CALL	GET_FPGA_TO_S100	;Get ERROR FLAG
 1411 F55D  FE F0       	CP	A,CMD$COMPLETE		;Flag returned by DC board to signal the previous CMD was completed OK
 1412 F55F  C2 F588     	JP	NZ,GLOBAL_SEC_WR_ERROR	
 1413                   		
 1414                   
 1415 F562  CD F226     	CALL	HIGH_CRLF
 1416 F565  CD F7F4     	CALL	SEC_DUMP		;Show contents of RAM at SECTOR_BUFFER (Registers changed)
 1417 F568  CD F75B     	CALL	SHOW_DMA_TRK_SEC	;Display current Track,sector,head#
 1418 F56B  CD F226     	CALL	HIGH_CRLF
 1419                   
 1420 F56E  2A EE22     	LD	HL,(@DMA_STORE)		;Store for next sector
 1421 F571  22 EE20     	LD	(@DMA),HL
 1422                   	
 1423 F574  21 FC11     	LD	HL,CONTINUE_MSG		;Any keyboard character for next sector. Esc to Main Menu
 1424 F577  CD F21B     	CALL	HIGH_PRINT_STRING
 1425 F57A  CD F116     	CALL	HIGH_CI
 1426 F57D  FE 1B       	CP	A,ESC
 1427 F57F  CA F455     	JP	Z,FPGA_DRIVES_LOOP
 1428                   	
 1429 F582  CD F79F     	CALL	SEC_BUMP		;Point to next sector. Note this updates LBA also
 1430 F585  C3 F528     	JP	DO_MORE_SEC_WRITE	;Read another sector
 1431                   					;<<<<< SECTOR WRITE LOOP >>>>>>>>>>>>>>>>>>
 1432                   					
 1433 F588              GLOBAL_SEC_WR_ERROR:
 1434 F588  21 FC5E     	LD	HL,SEC_WRD_ERR1_MSG	;Sect RD Error 
 1435 F58B  CD F21B     	CALL	HIGH_PRINT_STRING
 1436 F58E  CD F75B     	CALL	SHOW_DMA_TRK_SEC	;Display current Track,sector,head#
 1437 F591  C3 F455     	JP	FPGA_DRIVES_LOOP
 1438                   ;
 1439                   ; 
 1440                   ;	
 1441                   ;---------------------------------- SET TRACK & SECTOR ---------------------------------------------------------
 1442                   
 1443 F594              SET_TRK_SEC:				;Keyboard entry of new IDE drive track/sector data FORMAT:- (XX,XX+CR)
 1444 F594  21 FC3C     	LD	HL,ENTER_TS_DATA
 1445 F597  CD F21B     	CALL	HIGH_PRINT_STRING
 1446                   
 1447 F59A  CD F6EF     	CALL	GETHEX_NO_ECHO
 1448 F59D  DA F5CC     	JP	C,ABORT_SET_TRK_SEC
 1449                   	
 1450 F5A0  32 EE02     	LD	(@TRK1),A
 1451                   
 1452 F5A3  CD F116     	CALL	HIGH_CI			;Format must be xx,xx
 1453 F5A6  FE 2C       	CP	A,','
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  26
MASTER1 Z80

 1454 F5A8  20 25       	JR	NZ,DR_TRK_SEC_ERR
 1455 F5AA  0E 2C       	LD	C,','
 1456 F5AC  CD F0AF     	CALL	HIGH_CO
 1457                   
 1458 F5AF  CD F6EF     	CALL	GETHEX_NO_ECHO
 1459 F5B2  DA F5CC     	JP	C,ABORT_SET_TRK_SEC
 1460                   	
 1461 F5B5  32 EE04     	LD	(@SEC1),A
 1462                   	
 1463 F5B8  3E 35       	LD	A,CMD$SET$TRK$SEC	;31H, Now update board, Send CMD_SET_TRK_SEC
 1464 F5BA  CD F882     	CALL	DATA_TO_FPGA
 1465                   	
 1466 F5BD  3A EE02     	LD	A,(@TRK1)
 1467 F5C0  CD F882     	CALL	DATA_TO_FPGA
 1468                   
 1469 F5C3  3A EE04     	LD	A,(@SEC1)
 1470 F5C6  CD F882     	CALL	DATA_TO_FPGA
 1471 F5C9  C2 F5CF     	JP	NZ,DR_TRK_SEC_ERR	;Error setting track/sector
 1472                   
 1473 F5CC              ABORT_SET_TRK_SEC:
 1474 F5CC  C3 F455     	JP	FPGA_DRIVES_LOOP
 1475                   
 1476 F5CF              DR_TRK_SEC_ERR;
 1477 F5CF  21 FB1E     	LD	HL,TRK_SEC_ERR		;Error setting track/sector
 1478 F5D2  CD F21B     	CALL	HIGH_PRINT_STRING
 1479 F5D5  C3 F455     	JP	FPGA_DRIVES_LOOP
 1480                   
 1481                   ;---------------------------------- POINTS TO NEXT SECTOR ---------------------------------------------------------
 1482                   
 1483 F5D8              DRIVE_NEXT_SEC:				;Generalized routine to point to the next sector/track
 1484 F5D8  CD F79F     	CALL	SEC_BUMP		;Do it locally
 1485                   
 1486 F5DB              ADJUST_TRK_SEC:	
 1487 F5DB  3E 35       	LD	A,CMD$SET$TRK$SEC	;35H ;Set new current TRACK+SECTOR on current drive (new)
 1488 F5DD  CD F882     	CALL	DATA_TO_FPGA
 1489                   
 1490 F5E0  3A EE02     	LD	A,(@TRK1)		;Track	
 1491 F5E3  CD F882     	CALL	DATA_TO_FPGA
 1492                   	
 1493 F5E6  3A EE04     	LD	A,(@SEC1)		;Note: no check data is < MAXSEC, sectors start 0,1,2,3....
 1494 F5E9  CD F882     	CALL	DATA_TO_FPGA
 1495                   	
 1496 F5EC  C3 F455     	JP	FPGA_DRIVES_LOOP
 1497                   ;
 1498                   ;
 1499                   ;---------------------------------- POINTS TO PREVIOUS SECTOR ---------------------------------------------------
 1500                   
 1501 F5EF              DRIVE_PREV_SEC:
 1502 F5EF  CD F7CC     	CALL	SEC_BACK		;Do it locally 
 1503 F5F2  18 E7       	JR	ADJUST_TRK_SEC	
 1504                   ;
 1505                   ;
 1506                   ;-----------------------------------------------------------------------------------------------	
 1507                   ;--------------------------------------- IDE SUPPORT ROUTINES ----------------------------------
 1508                   ;-----------------------------------------------------------------------------------------------
 1509                   ;
 1510 F5F4              SELECT_CURRENT_DRIVE:			;Select a drive (A---F)
 1511 F5F4  21 FAFE     	LD	HL,CURRENT_DR_MSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  27
MASTER1 Z80

 1512 F5F7  CD F21B     	CALL	HIGH_PRINT_STRING
 1513                   
 1514 F5FA  CD F1B5     	CALL	HIGH_TI			;Simple UC character Input  + echo(Note, no fancy checking)
 1515 F5FD  FE 1B       	CP	A,ESC			;Abort if ESC
 1516 F5FF  CA F403     	JP	Z,EXIT
 1517 F602  FE 41       	CP	A,'A'
 1518 F604  28 16       	JR	Z,SEL_DRIVE
 1519 F606  FE 42       	CP	A,'B'
 1520 F608  28 12       	JR	Z,SEL_DRIVE
 1521 F60A  FE 43       	CP	A,'C'
 1522 F60C  28 0E       	JR	Z,SEL_DRIVE
 1523 F60E  FE 44       	CP	A,'D'
 1524 F610  28 0A       	JR	Z,SEL_DRIVE
 1525 F612  FE 45       	CP	A,'E'
 1526 F614  28 06       	JR	Z,SEL_DRIVE
 1527 F616  FE 46       	CP	A,'F'
 1528 F618  28 02       	JR	Z,SEL_DRIVE
 1529 F61A  18 16       	JR	BAD_DRIVE
 1530                   
 1531 F61C              SEL_DRIVE:				;Arrive here with selecetd drive in A
 1532 F61C  F5          	PUSH	AF			;Save selected drive for below
 1533 F61D  CD F63A     	CALL	INITILIZE_DRIVE		;Initilize drive in [A]
 1534                   	
 1535 F620  3E 05       	LD	A,CMD$SEL$DRIVE		;05H,  Select Drive CMD
 1536 F622  CD F882     	CALL	DATA_TO_FPGA
 1537                   
 1538 F625  F1          	POP	AF
 1539 F626  5F          	LD	E,A			;Store in E
 1540 F627  CD F882     	CALL	DATA_TO_FPGA
 1541                   	
 1542 F62A  CD F893     	CALL	GET_FPGA_TO_S100	;Wait for returned ACK signal 
 1543 F62D  BB          	CP	A,E 
 1544 F62E  20 02       	JR	NZ,BAD_DRIVE
 1545 F630  B7          	OR	A,A			;Ret NZ with ASCII in A
 1546 F631  C9          	RET				;Returns with drive in A and Z if OK
 1547                   
 1548                   
 1549 F632              BAD_DRIVE:
 1550 F632  21 FCE6     	LD	HL,BAD_SEL_DR_MSG	;Error selecting a new drive
 1551 F635  CD F21B     	CALL	HIGH_PRINT_STRING
 1552 F638  AF          	XOR	A,A
 1553 F639  C9          	RET				;RET Z if a problem
 1554                   
 1555                   
 1556 F63A              INITILIZE_DRIVE:			;Initilize drive in A
 1557 F63A  FE 41       	CP	A,'A'
 1558 F63C  28 12       	JR	Z,INIT_CF_CARD
 1559 F63E  FE 42       	CP	A,'B'
 1560 F640  28 0E       	JR	Z,INIT_CF_CARD
 1561 F642  FE 43       	CP	A,'C'
 1562 F644  38 33       	JR	C,INIT_FLOPPY1
 1563 F646  FE 44       	CP	A,'D'
 1564 F648  38 2F       	JR	C,INIT_FLOPPY2
 1565 F64A  FE 45       	CP	A,'E'
 1566 F64C  38 42       	JR	C,INIT_FLOPPY3
 1567 F64E  18 57       	JR	INIT_FLOPPY4
 1568 F650              INIT_CF_CARD:	
 1569 F650  32 EE00     	LD	(@DRIVE1),A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  28
MASTER1 Z80

 1570 F653  D6 41       	SUB	A,41H			;A or B - A
 1571 F655  32 EE10     	LD	(@CURRENT_DRIVE),A	;0 or 1
 1572 F658  3E 00       	LD	A,0			;Initilize Local Track/sec info
 1573 F65A  32 EE02     	LD	(@TRK1),A
 1574 F65D  32 EE04     	LD	(@SEC1),A
 1575 F660  32 EE06     	LD	(@SIDE1),A
 1576 F663  32 EE0A     	LD	(@FIRST_SEC),A		;First sector number on a track. 0 for SD/CF cards. 
 1577 F666  3E FF       	LD	A,CFCARD		;All CF cards = 0FFH	
 1578 F668  32 EE08     	LD	(@DISK_TYPE1),A
 1579 F66B  3E FF       	LD	A,0FFH
 1580 F66D  32 EE0C     	LD	(@SEC_TRACK),A		;Store for MAX sectors/track
 1581 F670  32 EE0E     	LD	(@MAX_TRACKS),A		;Max tracks/disk (for floppies)
 1582 F673  3E 02       	LD	A,2
 1583 F675  32 EE12     	LD	(@SEC_SIZE_FLAG),A	;0=128, 1=256, 2=512 Bytes/Sector
 1584 F678  C9          	RET
 1585                   
 1586 F679              INIT_FLOPPY1:
 1587 F679              INIT_FLOPPY2:
 1588 F679  F5          	PUSH	AF
 1589 F67A  3E 80       	LD	A,IBM3740		;SSSD Floppy IBM 3740
 1590 F67C  32 EE08     	LD	(@DISK_TYPE1),A
 1591 F67F  3E 1B       	LD	A,26+1
 1592 F681  32 EE0C     	LD	(@SEC_TRACK),A		;Store for MAX sectors/track +1
 1593 F684  3E 4C       	LD	A,76
 1594 F686  32 EE0E     	LD	(@MAX_TRACKS),A		;Max tracks/disk (for floppies)
 1595 F689  3E 00       	LD	A,0
 1596 F68B  32 EE12     	LD	(@SEC_SIZE_FLAG),A	;0=128, 1=256, 2=512 Bytes/Sector
 1597 F68E  18 2E       	JR	COMMON_FLOPPY
 1598                   
 1599 F690              INIT_FLOPPY3:
 1600 F690  F5          	PUSH	AF
 1601 F691  3E 60       	LD	A,IBM34			;DSDD Floppy IBM 34
 1602 F693  32 EE08     	LD	(@DISK_TYPE1),A
 1603 F696  3E 1B       	LD	A,26+1
 1604 F698  32 EE0C     	LD	(@SEC_TRACK),A		;;tore for MAX sectors/track +1
 1605 F69B  3E 4C       	LD	A,76
 1606 F69D  32 EE0E     	LD	(@MAX_TRACKS),A		;Max tracks/disk (for floppies)
 1607 F6A0  3E 01       	LD	A,1
 1608 F6A2  32 EE12     	LD	(@SEC_SIZE_FLAG),A	;0=128, 1=256, 2=512 Bytes/Sector
 1609 F6A5  18 17       	JR	COMMON_FLOPPY
 1610                   	
 1611 F6A7              INIT_FLOPPY4:
 1612 F6A7  F5          	PUSH	AF
 1613 F6A8  3E 40       	LD	A,IBM144		;SSSD Floppy IBM 3740
 1614 F6AA  32 EE08     	LD	(@DISK_TYPE1),A
 1615 F6AD  3E 13       	LD	A,18+1
 1616 F6AF  32 EE0C     	LD	(@SEC_TRACK),A		;;tore for MAX sectors/track +1
 1617 F6B2  3E 50       	LD	A,80
 1618 F6B4  32 EE0E     	LD	(@MAX_TRACKS),A		;Max tracks/disk (for floppies)
 1619 F6B7  3E 02       	LD	A,2
 1620 F6B9  32 EE12     	LD	(@SEC_SIZE_FLAG),A	;0=128, 1=256, 2=512 Bytes/Sector
 1621 F6BC  18 00       	JR	COMMON_FLOPPY
 1622                   
 1623 F6BE              COMMON_FLOPPY:
 1624 F6BE  F1          	POP	AF
 1625 F6BF  32 EE00     	LD	(@DRIVE1),A
 1626 F6C2  D6 41       	SUB	A,41H			
 1627 F6C4  32 EE10     	LD	(@CURRENT_DRIVE),A	;0 or 1
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  29
MASTER1 Z80

 1628 F6C7  3E 00       	LD	A,0			;Initilize Local Track/sec info
 1629 F6C9  32 EE02     	LD	(@TRK1),A
 1630 F6CC  32 EE06     	LD	(@SIDE1),A
 1631 F6CF  3E 01       	LD	A,1
 1632 F6D1  32 EE0A     	LD	(@FIRST_SEC),A		;First sector number on a track. 1 for Floppys 
 1633 F6D4  32 EE04     	LD	(@SEC1),A
 1634 F6D7  C9          	RET
 1635                   
 1636                   
 1637                   ;
 1638                   ;----------------------------------------
 1639 F6D8              GET_SEC_BYTE_COUNT:			;Return Bytes/sec in DE
 1640 F6D8  3A EE12     	LD	A,(@SEC_SIZE_FLAG)	;0=128, 1=256, 2=512 Bytes/Sector
 1641 F6DB  FE 02       	CP	A,2
 1642 F6DD  20 04       	JR	NZ,NOT_RD_512
 1643 F6DF  11 0200     	LD	DE,512
 1644 F6E2  C9          	RET
 1645 F6E3              NOT_RD_512:
 1646 F6E3  FE 01       	CP	A,1
 1647 F6E5  20 04       	JR	NZ,NOT_RD_256
 1648 F6E7  11 0100     	LD	DE,256
 1649 F6EA  C9          	RET
 1650 F6EB              NOT_RD_256:
 1651 F6EB  11 0080     	LD	DE,128
 1652 F6EE  C9          	RET
 1653                   
 1654                   
 1655                   		
 1656                   ;
 1657                   ;----------------------------------------
 1658 F6EF              GETHEX_NO_ECHO:
 1659 F6EF  C5          	PUSH	BC	
 1660 F6F0  CD F116     	call	HIGH_CI			;GET A CHARACTER, convert to UC, ECHO it
 1661 F6F3  CD F752     	call	UCASE	
 1662 F6F6  FE 1B       	CP	A,ESC
 1663 F6F8  CA F73E     	JP	Z,HEXABORT_NO_ECHO
 1664 F6FB  FE 2F       	CP	A,'/'			;check 0-9, A-F
 1665 F6FD  DA F73E     	JP	C,HEXABORT_NO_ECHO
 1666 F700  FE 47       	CP	A,'F'+1
 1667 F702  D2 F73E     	JP	NC,HEXABORT_NO_ECHO
 1668 F705  C5          	PUSH	BC
 1669 F706  F5          	PUSH	AF
 1670 F707  4F          	LD	C,A
 1671 F708  CD F0AF     	CALL	HIGH_CO
 1672 F70B  F1          	POP	AF
 1673 F70C  C1          	POP	BC
 1674 F70D  CD F74A     	call	ASBIN			;Convert to binary
 1675 F710  07          	rlca				;Shift to high nibble
 1676 F711  07          	rlca
 1677 F712  07          	rlca
 1678 F713  07          	rlca
 1679 F714  47          	LD	B,A			;Store it
 1680                   	
 1681 F715  CD F116     	call	HIGH_CI			;GET second CHARACTER, convert to UC, ECHO it
 1682 F718  CD F752     	call	UCASE
 1683 F71B  FE 1B       	CP	A,ESC
 1684 F71D  CA F73E     	JP	Z,HEXABORT_NO_ECHO
 1685 F720  FE 0D       	CP	A,CR
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  30
MASTER1 Z80

 1686 F722  CA F741     	JP	Z,ONE_DIGIT
 1687                   	
 1688 F725  FE 2F       	CP	A,'/'			;check 0-9, A-F
 1689 F727  DA F73E     	JP	C,HEXABORT_NO_ECHO
 1690 F72A  FE 47       	CP	A,'F'+1
 1691 F72C  D2 F73E     	JP	NC,HEXABORT_NO_ECHO
 1692 F72F  C5          	PUSH	BC
 1693 F730  F5          	PUSH	AF
 1694 F731  4F          	LD	C,A
 1695 F732  CD F0AF     	CALL	HIGH_CO
 1696 F735  F1          	POP	AF
 1697 F736  C1          	POP	BC
 1698 F737  CD F74A     	call	ASBIN			;Convert to binary
 1699 F73A  B0          	OR	A,B			;add in the first digit
 1700 F73B  C1          	POP	BC
 1701 F73C  B7          	OR	A			;To return NC
 1702 F73D  C9          	RET
 1703                   	
 1704 F73E              HEXABORT_NO_ECHO:
 1705 F73E  C1          	POP	BC
 1706 F73F  37          	SCF				;Set CF if a problem
 1707 F740  C9          	RET	
 1708                   ;
 1709 F741              ONE_DIGIT:				;A CR wase ntered after only 1 digit
 1710 F741  78          	LD	A,B
 1711 F742  1F          	RRA				;Shift to high nibble back down
 1712 F743  1F          	RRA
 1713 F744  1F          	RRA
 1714 F745  1F          	RRA
 1715 F746  E6 0F       	AND	A,0FH
 1716 F748  B7          	OR	A
 1717 F749  C9          	RET
 1718                   
 1719                   
 1720                   
 1721                   
 1722                   ; ASCII TO BINARY CONVERSION ROUTINE
 1723 F74A  D6 30       ASBIN:	SUB	30H 
 1724 F74C  FE 0A       	CP	0AH 
 1725 F74E  F8          	RET	M
 1726 F74F  D6 07       	SUB	07H 
 1727 F751  C9          	RET
 1728                   
 1729                   ;					;Convert LC to UC
 1730 F752  FE 61       UCASE:	CP	A,'a'			;must be >= lowercase a
 1731 F754  D8          	RET	C			; else go back...
 1732 F755  FE 7B       	CP	A,'z'+1			;must be <= lowercase z
 1733 F757  D0          	RET	NC			; else go back...
 1734 F758  D6 20       	SUB	A,'a'-'A'		;subtract lowercase bias
 1735 F75A  C9          	RET
 1736                   
 1737                   
 1738                   ;-------------------------------------------
 1739                   
 1740 F75B              SHOW_DMA_TRK_SEC:
 1741 F75B  21 FBBF     	LD	HL,DMA_MSG
 1742 F75E  CD F21B     	CALL	HIGH_PRINT_STRING
 1743 F761  21 E000     	LD	HL,@SECTOR_BUFFER	;@SECTOR_BUFFER->HL
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  31
MASTER1 Z80

 1744 F764  CD F233     	CALL	HIGH_LADR
 1745                   
 1746 F767  21 FBC7     	LD	HL,DRIVE_MSG
 1747 F76A  CD F21B     	CALL	HIGH_PRINT_STRING
 1748 F76D  3A EE00     	LD	A,(@DRIVE1)		;Show Drive A,B....
 1749 F770  4F          	LD	C,A	
 1750 F771  CD F0AF     	CALL	HIGH_CO
 1751                   	
 1752 F774  21 FBD1     	LD	HL,TRK_SEC_MSG
 1753 F777  CD F21B     	CALL	HIGH_PRINT_STRING
 1754 F77A  3A EE02     	LD	A,(@TRK1)		;Get track	
 1755 F77D  CD F238     	CALL	HEXOUT
 1756                   	
 1757 F780  21 FBDB     	LD	HL,TRK_SEC1_MSG
 1758 F783  CD F21B     	CALL	HIGH_PRINT_STRING
 1759 F786  3A EE04     	LD	A,(@SEC1)		;Get Sector
 1760 F789  CD F238     	CALL	HEXOUT
 1761                   	
 1762 F78C  21 FBE6     	LD	HL,SEC_TRK_MSG		;Sectors/track = $'
 1763 F78F  CD F21B     	CALL	HIGH_PRINT_STRING
 1764 F792  3A EE0C     	LD	A,(@SEC_TRACK)
 1765 F795  CD F238     	CALL	HEXOUT
 1766 F798  21 FBF8     	LD	HL,HCRLF_MSG
 1767 F79B  CD F21B     	CALL	HIGH_PRINT_STRING
 1768 F79E  C9          	RET
 1769                   
 1770                   
 1771                   ;--------------------------------------------
 1772                   
 1773 F79F              SEC_BUMP:				;Generalized routine to point to the next sector/track
 1774 F79F  C5          	PUSH	BC
 1775 F7A0  3A EE0C     	LD	A,(@SEC_TRACK)		;Is it the last sector on track
 1776 F7A3  4F          	LD	C,A
 1777 F7A4  3A EE04     	LD	A,(@SEC1)		
 1778 F7A7  B9          	CP	A,C
 1779 F7A8  28 06       	JR	Z,SEC_BUMP_TRK
 1780 F7AA  3C          	INC	A
 1781 F7AB  32 EE04     	LD	(@SEC1),A
 1782 F7AE  C1          	POP	BC
 1783 F7AF  C9          	RET
 1784                   					
 1785 F7B0              SEC_BUMP_TRK:
 1786 F7B0  3A EE0A     	LD	A,(@FIRST_SEC)		;SEC back to first sector on the next tarck
 1787 F7B3  32 EE04     	LD	(@SEC1),A
 1788 F7B6  3A EE02     	LD	A,(@TRK1)	
 1789 F7B9  3C          	INC	A
 1790 F7BA  B7          	OR	A,A			;Last track if SD/CF card
 1791 F7BB  28 0C       	JR	Z,AT_END		;RET Z if at end
 1792 F7BD  4F          	LD	C,A
 1793 F7BE  3A EE0E     	LD	A,(@MAX_TRACKS)
 1794 F7C1  4F          	LD	C,A
 1795 F7C2  28 05       	JR	Z,AT_END		;RET Z if at end
 1796 F7C4  32 EE02     	LD	(@TRK1),A
 1797 F7C7  C1          	POP	BC
 1798 F7C8  C9          	RET
 1799 F7C9              AT_END:	
 1800 F7C9  C1          	POP	BC
 1801 F7CA  AF          	XOR	A,A			;Ret Z if at end of disk
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  32
MASTER1 Z80

 1802 F7CB  C9          	RET
 1803                   
 1804                   
 1805                   ;
 1806 F7CC              SEC_BACK:				;Generalized routine to point to the previous sector/track
 1807 F7CC  C5          	PUSH	BC
 1808 F7CD  3A EE0A     	LD	A,(@FIRST_SEC)		;Is it SEC back to first sector on the next tarck
 1809 F7D0  4F          	LD	C,A			;Is it at set 0
 1810 F7D1  3A EE04     	LD	A,(@SEC1)
 1811 F7D4  B9          	CP	A,C
 1812 F7D5  28 06       	JR	Z,PREV_TRACK
 1813 F7D7  3D          	DEC	A
 1814 F7D8  32 EE04     	LD	(@SEC1),A
 1815 F7DB  C1          	POP	BC
 1816 F7DC  C9          	RET
 1817                   					
 1818 F7DD              PREV_TRACK: 
 1819 F7DD  3A EE0C     	LD	A,(@SEC_TRACK)		;Store for MAX sectors/track + 1
 1820 F7E0  3D          	DEC	A
 1821 F7E1  32 EE04     	LD	(@SEC1),A
 1822 F7E4  3A EE02     	LD	A,(@TRK1)
 1823 F7E7  FE 00       	CP	A,0			;On first track
 1824 F7E9  28 06       	JR	Z,AT_START		;RET Z if at end
 1825 F7EB  3D          	DEC	A
 1826 F7EC  32 EE02     	LD	(@TRK1),A
 1827 F7EF  C1          	POP	BC
 1828 F7F0  C9          	RET
 1829 F7F1              AT_START:	
 1830 F7F1  C1          	POP	BC
 1831 F7F2  AF          	XOR	A,A
 1832 F7F3  C9          	RET
 1833                   
 1834                   ;
 1835                   ;------------------------------------------
 1836 F7F4              SEC_DUMP:				;Print a SEC_DUMP of the data in the 512 byte buffer @[HL]
 1837 F7F4  CD F6D8     	CALL	GET_SEC_BYTE_COUNT	;Return Bytes/sec in DE
 1838 F7F7  2A EE20     	LD	HL,(@DMA)		;Normally @SECTOR_BUFFER->HL (Except sec writes)
 1839 F7FA  19          	ADD	HL,DE
 1840 F7FB  E5          	PUSH	HL
 1841 F7FC  D1          	POP	DE			;DE = SECTOR BUFFER + SEC SIZE
 1842 F7FD  1B          	DEC	DE
 1843 F7FE  2A EE20     	LD	HL,(@DMA)		;@SECTOR_BUFFER->HL
 1844                   
 1845 F801  7D          	LD	A,L			;ROUND OFF ADDRESSES TO XXX0H
 1846 F802  E6 F0       	AND	0F0H
 1847 F804  6F          	LD	L,A
 1848 F805  7B          	LD	A,E			;FINAL ADDRESS LOWER HALF
 1849 F806  E6 F0       	AND	0F0H
 1850 F808  C6 10       	ADD	A,10H			;FINISH TO END 0F LINE
 1851                   	
 1852 F80A  CD F86C     SF172A:	CALL	LF_PRINT_HL		;Do LF + Print value in [HL]
 1853 F80D  CD F87C     SF175A:	CALL	BLANK
 1854                   	
 1855 F810  7E          	LD	A,(HL)
 1856 F811  CD F238     	CALL	HEXOUT
 1857 F814  CD F862     	CALL	HILO			;<--- Set C flag when HL=DE
 1858 F817  DA F850     	JP	C,FINAL_ASCII
 1859 F81A  7D          	LD	A,L
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  33
MASTER1 Z80

 1860 F81B  E6 0F       	AND	0FH
 1861 F81D  20 EE       	JR	NZ,SF175A
 1862 F81F  0E 09       	LD	C,TAB			;INSERT A TAB BETWEEN DATA
 1863 F821  CD F009     	CALL	ZCO
 1864 F824  06 04       	LD	B,4H			;ALSO 1 SPACE
 1865 F826  0E 20       TA11:	LD	C,SPACE
 1866 F828  CD F0AF     	CALL	HIGH_CO
 1867 F82B  10 F9       	DJNZ	TA11
 1868 F82D  CD F832     	CALL	SHOW_ASCII
 1869 F830  18 D8       	JR	SF172A
 1870                   	
 1871 F832              SHOW_ASCII:
 1872 F832  06 10       	LD	B,16			;NOW PRINT ASCII (16 CHARACTERS)
 1873 F834  D5          	PUSH	DE			;TEMPORLY SAVE [DE]
 1874 F835  11 0010     	LD	DE,0010H
 1875 F838  ED 52       	SBC	HL,DE
 1876 F83A  D1          	POP	DE
 1877 F83B  7E          T11:	LD	A,(HL)
 1878 F83C  E6 7F       	AND	7FH
 1879 F83E  FE 20       	CP	' ' 			;FILTER OUT CONTROL CHARACTERS'
 1880 F840  30 02       	JR	NC,T33
 1881 F842  3E 2E       T22:	LD	A,'.'
 1882 F844  FE 7C       T33:	CP	07CH
 1883 F846  30 FA       	JR	NC,T22
 1884 F848  4F          	LD	C,A			;SET UP TO SEND
 1885 F849  CD F0AF     	CALL	HIGH_CO
 1886 F84C  23          	INC	HL
 1887 F84D  10 EC       	DJNZ	T11			;REPEAT FOR WHOLE LINE
 1888 F84F  C9          	RET
 1889                   
 1890 F850              FINAL_ASCII:				;Special case to show final ASCII line
 1891 F850  0E 09       	LD	C,TAB			;INSERT A TAB BETWEEN DATA
 1892 F852  CD F0AF     	CALL	HIGH_CO
 1893 F855  06 04       	LD	B,4H			;ALSO 1 SPACE
 1894 F857  0E 20       TA11A:	LD	C,SPACE
 1895 F859  CD F0AF     	CALL	HIGH_CO
 1896 F85C  10 F9       	DJNZ	TA11A
 1897 F85E  CD F832     	CALL	SHOW_ASCII
 1898 F861  C9          	RET
 1899                   ;
 1900                   ;
 1901 F862  23          HILO:	INC	HL			;>>>>>>>>>>>> RANGE CHECK SET CARRY IF [DE]=[HL]
 1902 F863  7C          	LD	A,H
 1903 F864  B5          	OR	L
 1904 F865  37          	SCF
 1905 F866  C8          	RET	Z
 1906 F867  7B          	LD	A,E
 1907 F868  95          	SUB	L
 1908 F869  7A          	LD	A,D
 1909 F86A  9C          	SBC	A,H
 1910 F86B  C9          	RET 
 1911                   
 1912                   ;
 1913 F86C              LF_PRINT_HL:	
 1914 F86C  CD F226     	CALL	HIGH_CRLF
 1915                   ;					;>>>>>>>>>>>>PRINT [HL] AND A SPACE
 1916 F86F              SP_PRINT_HL:	
 1917 F86F  E5          	PUSH	HL
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  34
MASTER1 Z80

 1918 F870  C5          	PUSH	BC
 1919 F871  CD F233     	CALL	HIGH_LADR
 1920 F874  0E 20       	LD	C,SPACE
 1921 F876  CD F0AF     	CALL	HIGH_CO
 1922 F879  C1          	POP	BC
 1923 F87A  E1          	POP	HL
 1924 F87B  C9          	RET
 1925                   ;
 1926                   ;
 1927 F87C  0E 20       BLANK:	LD	C,SPACE
 1928 F87E  CD F0AF     	CALL	HIGH_CO
 1929 F881  C9          	RET
 1930                   
 1931                   ;----------------------------------------------------------------------------
 1932                   ;		CORE INTERFACE BETWEEN S100 BUS and FPGA_DC BOARD
 1933                   ;    The only hardware port links for the above FPGA_DC board. 
 1934                   ;----------------------------------------------------------------------------
 1935                   ;
 1936 F882              DATA_TO_FPGA:				;Send CMD/data to FPGA_DC Z80
 1937 F882  F5          	PUSH	AF
 1938 F883              DATA_TO_FPGA1:
 1939 F883  DB 80       	IN	A,(S100_STATUS_PORT)	
 1940 F885  E6 80       	AND	A,80H
 1941 F887  20 FA       	JR	NZ,DATA_TO_FPGA1	;Wait until bit 7 is 0 (ie. any previous data has been read by FPGA_DC board Z80)
 1942 F889  F1          	POP	AF
 1943 F88A  D3 81       	OUT	(S100_DATA_PORT),A	;This will cause the FPGA_DC board to set the S100$RTS bit
 1944 F88C              DATA_TO_FPGA2:
 1945 F88C  DB 80       	IN	A,(S100_STATUS_PORT)	
 1946 F88E  E6 80       	AND	A,80H
 1947 F890  20 FA       	JR	NZ,DATA_TO_FPGA2	;Wait until bit 7 is 0 
 1948 F892  C9          	RET				;Ret NZ if error
 1949                   
 1950                   
 1951                   
 1952                   
 1953 F893              GET_FPGA_TO_S100:			;Get data from FPGA
 1954 F893  DB 80       	IN	A,(S100_STATUS_PORT)	;Get S100 Status Port - Bit 0, 1 = FPGA data present, 0, no data present
 1955 F895  CB 57       	BIT	2,A			;04H, Bit 2
 1956 F897  20 0C       	JR	NZ,CLR_ERROR_FLAG	;Return carry flag set if error
 1957 F899  DB 80       	IN	A,(S100_STATUS_PORT)	;Get S100 Status Port - Bit 0, 1 = FPGA data present, 0, no data present
 1958 F89B  E6 01       	AND	A,01H			;01H, Bit 0
 1959 F89D  28 F4       	JR	Z,GET_FPGA_TO_S100	;wait for DC Board to present data 
 1960 F89F  AF          	XOR	A,A
 1961 F8A0  DB 81       	IN	A,(S100_DATA_PORT)	;Return Data in [A], FPGA "hardware" will lower bit 7 of S100 Bus port 80H
 1962 F8A2  37          	SCF
 1963 F8A3  3F          	CCF
 1964 F8A4  C9          	RET
 1965                   	
 1966 F8A5              CLR_ERROR_FLAG:
 1967 F8A5  D3 82       	OUT	(RELEASE_ERROR_PORT),A	;This will release the Error flag gate 43H on the FPGA side
 1968 F8A7  37          	SCF				;Set carry flag if error on s100 bus side
 1969 F8A8  C9          	RET
 1970                   
 1971                   
 1972                   ;---------------------------------------------------------------------------------------------------------------
 1973 F8A9  0D 0A 47 65 MODEM_SIGNON:	DB	CR,LF,'Get a File from a PC',CR,LF
 1974 F8C1  5A 69 6C 6F 		DB	'Zilog SCC Ports A1H & A3H. Requires RTS & CTS, 38,400 Baud.',CR,LF,'$'
 1975 F8FF  53 43 43 20 MODEM_SCC_MSG:	DB	'SCC Port A to 38,400 Baud.',CR,LF,'$'
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  35
MASTER1 Z80

 1976 F91C  57 41 49 54 RMSG:		DB	'WAITING FOR SECTOR #$'
 1977 F931  48 20 52 45 ERRSOH:		DB	'H RECEIVED, NOT SOH',0DH,0AH,'$'
 1978 F947  2B 2B 42 41 ERR2:		DB	'++BAD SECTOR # IN HDR',0DH,0AH,'$'
 1979 F95F  2B 2B 42 41 ERR3:		DB	'++BAD CKSUM ON SECTOR',0DH,0AH,'$'
 1980 F977  54 49 4D 45 TOUTM:		DB	'TIMEOUT $'
 1981 F980  0D 0A 4D 55 QUITM:		DB	0DH,0AH,'MULTIPLE ERRORS.'
 1982 F992  0D 0A 54 59 		DB	0DH,0AH,'TYPE Q TO QUIT, R TO RETRY:$'
 1983 F9B0  0D 0A 54 52 MODEM_DONE_MSG:	DB	13,10,'TRANSFER COMPLETE$'
 1984 F9C4  0D 0A 49 4E BAD_HEADER_MSG:	DB	CR,LF,'INVALID HEADER.',0DH,0AH,'$'
 1985 F9D8  48 2E 20 49 MODEM_RAM_MSG:	DB	'H. If OK will write to RAM at $'
 1986                   
 1987 F9F7  0D 0A 45 6E MODEM_RAM_LOC:	DB	CR,LF,'Enter RAM location (xxxxH +CR): $'
 1988 FA1A  4D 65 6E 75 M_ERROR_MSG:	DB	'Menu Error'CR,LF,BELL,'$'
 1989 FA28  4E 6F 20 52 NoHighPageMsg:	DB	'No ROM HigH Page!',CR,LF,BELL,'$'
 1990 FA3D  0D 0A 49 6E INVALID_PARM_MSG: DB	CR,LF,'Invalid paramater',CR,LF,BELL,'$'
 1991                   
 1992 FA54  0D 0A 0A 46 FPGA_DC_SIGNON:	DB	CR,LF,LF,'FPGA_DC Board MENU',CR,LF,LF
 1993 FA6C  52 20 52 65 	        DB      'R Read Sec       W Write Sec     N Next Sec     P Previous Sec',CR,LF
 1994 FAAC  54 20 53 65                 DB	'T Set Trk & Sec  D Select Drive  ESC Main Monitor',CR,LF,'$'
 1995                                   
 1996 FAE0  0D 0A 07 46 NO_FPGA_BOARD	DB	CR,LF,BELL,'FPGA_DC Board not detected$'
 1997 FAFE  0D 0A 53 65 CURRENT_DR_MSG	DB	CR,LF,'Select Drive(A,B,C,D,E or F) $'
 1998 FB1E  0D 0A 45 72 TRK_SEC_ERR	DB	CR,LF,'Error setting track/sector$'
 1999 FB3B  0D 0A 46 50 LOCAL_IDE_MODE_MSG DB	CR,LF,'FPGA_DC Board, Set to local IDE ports mode.$'
 2000 FB69  0D 0A 46 50 FDC_CIRCUIT_MSG	DB	CR,LF,'FPGA_DC Board, FDC Circuit detected.$'
 2001 FB90  0D 0A 46 50 IDE_CIRCUIT_MSG	DB	CR,LF,'FPGA_DC Board, IDE/CF Card Citcuit detected.$'
 2002                   
 2003 FBBF  0D 0A 0A 44 DMA_MSG		DB	CR,LF,LF,'DMA=$'
 2004 FBC7  48 20 20 44 DRIVE_MSG	DB	'H  Drive=$'
 2005 FBD1  3A 20 20 54 TRK_SEC_MSG	DB	':  Track=$'
 2006 FBDB  48 20 20 53 TRK_SEC1_MSG	DB	'H  Sector=$'
 2007 FBE6  48 20 20 53 SEC_TRK_MSG	DB      'H  Sectors/Track=$'
 2008 FBF8  48 0D 0A 24 HCRLF_MSG	DB	'H',CR,LF,'$'
 2009                   
 2010 FBFC  3A 0D 0A 24 COLON_CRLF_MSG	DB	':',CR,LF,'$'
 2011 FC00  0D 0A 07 53 SEC_RD_ERR1_MSG	DB	CR,LF,BELL,'Sect RD Error$'
 2012 FC11  0D 0A 41 6E CONTINUE_MSG	DB	CR,LF,'Any character for next Sec. Esc to abort$'
 2013 FC3C  0D 0A 45 6E ENTER_TS_DATA	DB	CR,LF,'Enter Track,Sec data (XXH,XXH) $'
 2014 FC5E  0D 0A 07 53 SEC_WRD_ERR1_MSG DB	CR,LF,BELL,'Sect WR Error$'
 2015 FC6F  0D 0A 07 41 SURE_MSG	DB	CR,LF,BELL,'Are you sure (Y/N) $'
 2016 FC86  0D 0A 07 43 COPY_OK_MSG	DB	CR,LF,BELL,'Copying card complete$'
 2017 FC9F  0D 0A 59 6F ESC_ABORT_MSG	DB	CR,LF,'You can Hit ESC to stop/abort the process',CR,LF,'$'
 2018 FCCD  20 20 45 6E END_OF_ROM_PAGE: DB	'  End of ROM HIGH PAGE-->'
 2019 FCE6  0D 0A 07 45 BAD_SEL_DR_MSG	DB	CR,LF,BELL,'Error selecting drive$'
 2020 FCFF  0D 0A 57 72 WR_RAM_MENU_MSG	DB	CR,LF,'Write to disk from RAM at:- (XXXXH):$'
 2021                   ;END
 0 Error(s) Detected.
 3366 Absolute Bytes. 439 Symbols Detected.
