


TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 1




                        ;********************************************************
                        ;*                     V2BIOS.ASM                       *
                        ;*               FLOPPY CBIOS FOR CP/M 2.XX             *
                        ;*                     DEC 15  2003                     * 
                        ;********************************************************
                        
                        ; WRITTEN BY B. Y. TASHCHUK 1980
                        ;==================================================
                        ; MANY THANKS TO BOHDAN TASHCHUK FOR THIS CODE
                        ; AND HIS QUALITY SUPPORT OF THOSE WHO USED IT
                        ;==================================================
                        ;
                        ; B. JONES 1981
                        ; - ADDED SUPPORT FOR 9, 512 BYTE SECTORS ON
                        ;   SYSTEM TRACKS TO SUPPORT LARGER BIOS TYPES
                        ;   (MORE DRIVES, HARD DISKS, SPECIAL FUNCTIONS ETC.)
                        ; - ADDED 1024 BYTE SECTOR SUPPORT
                        ;   THIS SPEEDS UP DISK OPERATIONS BY 70% AND
                        ;   ADDS 220K MORE USEABLE SPACE
                        ; - ADDED MULTIPLE ALLOCATION BLOCK SIZE SUPPORT
                        ; - ADDED VERBOSE ASSEMBLY-TIME STRUCTURE INFORMATION
                        ;   RAM AND SECTOR USEAGE, MOVCPM VALUE AND DDT R VALUE
                        ;   END-OF-CODE/STATIC DATA AND TOTAL SIZE INFO
                        ; - ADDED 'CONTINUE' FOR HARD MEDIA DEFECTS
                        ;   THIS FEATURE ALLOWS ONE TO CONTINUE DISK
                        ;   OPERATIONS, EVEN THOUGH THE MEDIA HAS PERMINANT
                        ;   BAD SPOTS. LETS YOU RECOVER FILES YOU REALLY WANT!
                        ; - ADDED REMOTE SYSTEM CONTROL VIA MODEM
                        ; - ADDED SIMULTANEOUS TARBELL DD DMA FDC SUPPORT
                        ; - ADDED SPINWRITER SHIFT TESTING
                        ; - ADDED MULTI 'FOREIGN' DISK FORMAT SUPPORT
                        ;
                        ; B. JONES SEPT 2003
                        ; - ADDED Z80 DMA SUPPORT
                        ; - ADDED FULL FDC E.O.O. INTERRUPT SUPPORT
                        ;
                        ; B.JONES NOV. 2003
                        ; - ADDED VERSAFLOPPY II SUPPORT
                        ; - ADDED SUPPORT FOR FOUR DRIVES, UP TO 1.66 MBYTES EACH
                        ; - REMOVED REMOTE SYSTEM CONTROL
                        ; - REMOVED TARBELL DD DMA FDC SUPPORT
                        ; - REMOVED SPINWRITER SHIFT TESTING
                        ; - REMOVED Z80 DMA SUPPORT, THIS VERSION
                        ; - REMOVED FDC E.O.O. INTERRUPT SUPPORT, THIS VERSION
                        ; - REMOVED 'FOREIGN' FORMAT SUPPORT, THIS VERSION
                        ; - ADDED Z3S & VF II TEST & CONFIGURE AT STARTUP  
                        ;
                        ; C. MALLERY MAR. 2022
                        ; - Changed to use FD1791 instead of FD1795
                        ; - Merged in some of Glitch Works Cleanup
                        
                                .PABS
                                .PHEX
                                .XLINK
                                .Z80






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 2




                        
   0022                 CPVERS  ==      22H             ;CP/M VERSION NUMBER
   0000                 BIVERS  ==      0H              ;BIOS VERSION NUMBER
   FFFF                 TRUE    ==      -1              ;TRUE AND FALSE VALUES
   0000                 FALSE   ==      #TRUE
   FFFF                 VF2     ==      TRUE            ;THIS VERSION FOR PIO
                        
                        ;********************************************************
                        ; CP/M System Sizes and Options
                        ;********************************************************
                        ; DISK DRIVE OPTIONS FIRST
                        
   0004                 NODSK   ==      4       ;NUMBER OF DISKS ALLOWED
   0000                 HLDOPT  ==      0       ;1 KEEP HEADS LOADED, 0 FOR UNLOADS
                        
                        ; CP/M MEMORY CALCULATIONS AND CONSTANTS
                        
                        ;================= NOTE ====================
                        ;*******************************************
                        ;BIOS SIZE FUNCTION (* 1024 BYTES)  NEXT
                        ;*******************************************
                        ;================= NOTE ====================
                        
   0003                 BIOSIZ  ==      3       ;THIS BIOS FITS WITHIN 3K
                                                ;IF YOU ENLARGE THE BIOS, YOU WILL INCREASE
                                                ;BIOSIZ BY 1 FOR EACH ADDITIONAL KILOBYTE, OR
                                                ;PART THEREOF.
                        
   0040                 MSIZ    =\      \ENTER TOTAL MEMORY SIZE IN KILOBYTES EG: 48 OR 64 \
                        
                        ;MSIZ   ==      64              ;ACTUAL AVAILABLE MEMORY SIZE
   003D                 MSIZE   ==      MSIZ-BIOSIZ     ;SUBTRACT BIOS SIZE
   A400                 BIAS    ==      (MSIZE-20)*1024 ;THE DRI BIAS FACTOR
   D800                 CCP     ==      3400H+BIAS      ;BASE OF CCP
   E006                 BDOS    ==      CCP+806H        ;BASE OF BDOS
   EE00                 BIOS    ==      CCP+1600H       ;BASE OF BIOS
   F406                 MOVECP  ==      BDOS+1400H      ;MOVECPM ADJUST
   003D                 MOVEIT  ==      MOVECP/1024
   002C                 NSECTS  ==      (BIOS-CCP)/128  ;WARM START SECTOR CNT, 128 BYTES SECTORS
   001A                 NSBIOS  ==      70-NSECTS       ;MAX SECTORS FOR CBIOS & CP/M
                                                        ;BASED ON HAVING 9, 512 BYTE SECTORS
                                                        ;ON THE SYSTEM TRACKS (0 & 1)
                                                        ;WITH 70 OF THOSE 128 BYTE LOGICAL
                                                        ;SECTORS BEING USEABLE FOR CP/M USE
                                                        ;72 LOGICAL SECTORS IS ACTUAL, BUT
                                                        ;ONE IS THE SYSTEM LOADER, AND ONE IS
                                                        ;A DISK DESCRIPTER BLOCK (DDB), THUS
                                                        ;70 ARE AVAILABLE FOR CP/M & BIOS
   0004                 CPMDSK  ==      0004H           ;CURRENT DISK NUMBER ADDR
   0003                 IOBYTE  ==      0003H           ;INTEL I/O BYTE ADDR
                        
                        ;********************************************************
                        ; Control Character Equates
                        ;********************************************************
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 3




   000D                 CR      ==      13
   000A                 LF      ==      10
   0007                 BELL    ==      7
                        
                        ;********************************************************
                        ; Masks for IOBYTE 
                        ;********************************************************
                        
                        ;                KEYBOARD & SCREEN
                        
                        ; MAIN CONSOLE IS SD SYSTEMS VDB-8024
                        
   0000                 CSTAT           ==      0
   0000                 KBSTAT          ==      0
   0001                 CIO                     ==      1
   0001                 KBIO            ==      1
   0004                 COUT            ==      4
   0002                 KIN                     ==      2
   0003                 CMSK    ==      00000011B       ;IOBYTE MASK FOR CONSOLE
   00C0                 LMSK    ==      11000000B       ;IOBYTE MASK FOR LIST
                        
                        ;********************************************************
                        ; Floppy Disk Equates
                        ;********************************************************
                        
                        ;********************************************************
                        ;              PIO CONTROLLER PORTS
                        ;********************************************************
                        
   0053                 DCMD    ==      53H             ;VF2 COMMAND/CONTROL PORT
   0054                 W               ==      54H             ;WDC 179X ADDRESS
   0054                 WCMD    ==      W+0             ;COMMAND PORT
   0054                 WSTAT   ==      W+0             ;STATUS PORT
   0055                 WTRACK  ==      W+1             ;TRACK REG
   0056                 WSECT   ==      W+2             ;SECTOR REG
   0057                 WDATA   ==      W+3             ;DATA I/O REG
                        
                        ;********************************************************
                        ;            COMMON 179X CONTROLLER COMMANDS
                        ;********************************************************
                        
   0008                 WHOME   ==      00001000B       ;HOME COMMAND
   0080                 WREAD   ==      10000000B       ;READ SECTOR COMMAND
   00A0                 WWRITE  ==      10100000B       ;WRITE SECTOR COMMAND
   0018                 WSEEK   ==      00011000B       ;SEEK TO GIVEN TRACK COMMAND
   0010                 WUNLD   ==      00010000B       ;SEEK AND UNLOAD HEAD COMMAND
   0018                 WLOAD   ==      00011000B       ;SEEK AND LOAD HEAD COMMAND
                        
                        
                        ;********************************************************
                        ;             COMMON 179X CONTROLLER STATUS
                        ;********************************************************
                        
   0000                 WBBUSY  ==      0               ;179X BUSY STATUS BIT
   0001                 WBSID1  ==      1               ;SIDE SELECT FLAG COMMAND BIT






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 4




   0002                 WBDEL   ==      2               ;HEAD SETTLE DELAY COMMAND BIT
   0003                 WBSIDE  ==  3           ;EXPECT SIDE BIT
   0005                 WBWRIT  ==      5               ;READ/WRITE DISTINGUISHING BIT
   0004                 WBRNF   ==      4               ;RECORD NOT FOUND STATUS BIT
   009C                 WSREAD  ==      10011100B       ;READ SECTOR STATUS MASK
   00FC                 WSWRIT  ==      11111100B       ;WRITE SECTOR STATUS MASK
   0098                 WSSEEK  ==      10011000B       ;SEEK STATUS MASK
   00D0                 WFCINT  ==      11010000B       ;FORCE INTERRUPT COMMAND
                        
                        
                        ;********************************************************
                        ; PRIMARY JUMP TABLE. ALL CALLS FROM CP/M TO THE CBIOS
                        ; COME THROUGH THIS TABLE.
                        ;********************************************************
                        
   EE00                         .LOC    BIOS
                        
                        
   EE00    C3 EE52              JMP     CBOOT           ;COLD BOOT
   EE03    C3 EE63      WBOOTE: JMP     WBOOT           ;WARM BOOT
   EE06    C3 F506              JMP     CONST           ;CONSOLE STATUS
   EE09    C3 F509              JMP     CONIN           ;CONSOLE CHARACTER IN
   EE0C    C3 F50C      BIOOUT: JMP     CONOUT          ;CONSOLE CHARACTER OUT,
   EE0F    C3 F50C              JMP     LIST            ;LIST CHARACTER OUT
   EE12    C3 F50C              JMP     PUNCH           ;PUNCH CHARACTER OUT
   EE15    C3 F509              JMP     READER          ;READER CHARACTER IN
   EE18    C3 EFFF              JMP     HOME            ;MOVE HEAD TO HOME POSITION
   EE1B    C3 EF11              JMP     SELDSK          ;SELECT DISK
   EE1E    C3 F00E              JMP     SETTRK          ;SET TRACK NUMBER
   EE21    C3 F013              JMP     SETSEC          ;SET SECTOR NUMBER
   EE24    C3 F018              JMP     SETDMA          ;SET DMA ADDRESS
   EE27    C3 F028              JMP     READ            ;READ DISK
   EE2A    C3 F03B              JMP     WRITE           ;WRITE DISK
   EE2D    C3 F506              JMP     LISTST          ;RETURN LIST STATUS
   EE30    C3 F01D              JMP     SECTRA          ;SECTOR TRANSLATE
                        
                        
                        
                        ;********************************************************
                        ; STEP SPEED TABLE. THIS TABLE TELLS THE BIOS WHAT SIZE
                        ; OF DRIVE IS AT EACH ADDRESS AND WHAT TRACK TO TRACK
                        ; STEPPING SPEED TO USE FOR THAT DRIVE. THE BITS MEAN
                        ; THE FOLLOWING:
                        ;********************************************************
                        
                        ;       1000 0011
                        ;       ^      ^
                        ;       :      +- THE 179X STEP SPEED BITS. THESE ARE:
                        ;       :               VALUE   8"      5"
                        ;       :               00      3 MS    6 MS
                        ;       :               01      6 MS    12 MS
                        ;       :               10      10 MS   20 MS
                        ;       :               11      15 MS   30 MS
                        ;       :
                        ;       +-------- 0=8 INCH DISK AT THIS ADDRESS,






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 5




                        ;                 1=5 INCH DISK AT THIS ADDRESS.
                        
   EE33                 SPDTAB:
   EE33    00                   .BYTE   00H             ;DRIVE A
   EE34    00                   .BYTE   00H             ;DRIVE B
   EE35    80                   .BYTE   80H             ;DRIVE C
   EE36    80                   .BYTE   80H             ;DRIVE D
                        
                        ; Initial parameters on startup
   EE37    00           INITIO: .BYTE   00000000B       ;Initial IOBYTE, everything to TTY
   EE38    00                           .BYTE   0H                      ;INITIAL DISK AFTER COLD BOOT
                        
   EE39    04           HOMER:  .BYTE   4               ;ALLOW 3 USER DISK FIXES
   EE3A    0A           RETRYIT:.BYTE   10              ;RETRY 10 TIMES EACH
                        
                        ;********************************************************
                        ; VersaFloppy II control table: this table contains those
                        ; bits in the VF2 control by te which select the
                        ; operating mode. These bits are combined with address
                        ; control bits to form a complete VF2 control byte. The
                        ; bits are defined as follows:
                        ;********************************************************
                        
                        ;       1111 0000
                        ;       ^^^^ ^
                        ;       :::: +- THESE BITS IN ADDRESS CONTROL TABLE
                        ;       ::::
                        ;       :::+--- 0=SIDE 1, 1=SIDE 0
                        ;   ::+---- 1=8 INCH DISK, 0=5 INCH DISK
                        ;       :+----- 1=SINGLE DENSITY (FM), 0=DOUBLE (MFM)
                        ;       +------ 0=ENABLE HARDWARE WAIT, 1=DISABLE
                        
   EE3B                 OPRTAB:
                        
                        ; FOR VERSAFLOPPY II
                        ; SIZE &         
                        ; DENSITY        
                        
   EE3B                 C8S:    
   EE3B    F0                   .BYTE   11110000B       ;SIDE 0, NO WAIT
   EE3C    70                   .BYTE   01110000B       ;SIDE 0, WAIT
   EE3D    E0                   .BYTE   11100000B       ;SIDE 1, NO WAIT
   EE3E    60                   .BYTE   01100000B       ;SIDE 1, WAIT
                        
   EE3F                 C5S:    
   EE3F    D0                   .BYTE   11010000B
   EE40    50                   .BYTE   01010000B
   EE41    C0                   .BYTE   11000000B
   EE42    40                   .BYTE   01000000B
                        
   EE43                 C8D:    
   EE43    B0                   .BYTE   10110000B       ;SIDE 0, NO WAIT
   EE44    30                   .BYTE   00110000B       ;SIDE 0, WAIT
   EE45    A0                   .BYTE   10100000B       ;SIDE 1, NO WAIT
   EE46    20                   .BYTE   00100000B       ;SIDE 1, WAIT






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 6




                        
   EE47                 C5D:    
   EE47    90                   .BYTE   10010000B
   EE48    10                   .BYTE   00010000B
   EE49    80                   .BYTE   10000000B
   EE4A    00                   .BYTE   00000000B
                        
                        ;********************************************************
                        ; VersaFloppy II address control table. This table
                        ; contains those bits in the VF2 byte which select the
                        ; active disk. These bits are combined with operating
                        ; control bits to form a complete VF2 control byte.
                        ;********************************************************
                        
   EE4B                 ADRTAB: 
   EE4B    0E                   .BYTE   1110B           ;DRIVE A
   EE4C    0D                   .BYTE   1101B           ;DRIVE B
   EE4D    0B                   .BYTE   1011B           ;DRIVE C
   EE4E    07                   .BYTE   0111B           ;DRIVE D
                        
                        ;********************************************************
                        ; System Configuration Option Bytes
                        ;********************************************************
                        
   EE4F                 CFGOPT:
   EE4F    04                   ACTDSK: .BYTE   NODSK   ;NUMBER OF DISKS SUPPORTED
                                                                                ;NORMALLY 2 DRIVES
   EE50    00                   HLOPT:  .BYTE   HLDOPT  ;SINGLE OR DUAL HEAD LOAD
   EE51    04                   KBIT:   .BYTE   4               ;AUTO-RECAL COUNTER
                        
                        ;********************************************************
                        ; COLD BOOT ENTRY POINT. THE FIRST FOUR INSTRUCTIONS
                        ; SHOULD NOT BE CHANGED.
                        ;********************************************************
                        
   EE52                 CBOOT:  
   EE52    31 0080              LXI     SP,80H                  ;VALIDATE THE STACK POINTER
   EE55    2A EE37              LHLD    INITIO          ;SET INITIAL I/O BYTE
   EE58    22 0003              SHLD    IOBYTE
                        
   EE5B    CD F5AF              CALL    SYSNIT          ;ROUTINE IN HOST BUFFER SPACE
                                                                        ;IS DISCARDED AFTER THIS CALL
                        
   EE5E    CD EEE2              CALL    BCOMM           ;Common setup steps
   EE61    1844                 JMPR    GOCPM           ;PREPARE TO GO TO CCP
                        
                        ;********************************************************
                        ; WARM BOOT ENTRY POINT. IN ORDER TO WARM BOOT FROM
                        ; A FLOPPY DISK, CP/M MUST BE READ FROM TRACKS 0 AND 1.
                        ; THE PHYSICAL SECTORS ON THE SYSTEM TRACKS ARE ALWAYS
                        ; 512 BYTES LONG, BUT CP/M DOES NOT ALWAYS OCCUPY THE
                        ; ENTIRE SECTOR. THE SECTOR LAYOUT FOR BOTH 8" AND 5"
                        ; DISKS IS:
                        ;
                        ;       TRACK 0, SECTOR 1, BYTES 0 THRU 127 - COLD






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 7




                        ;          START LOADER
                        ;       TRACK 0, SECTOR 1, BYTES 128 THRU 511 - CP/M
                        ;       TRACK 0, SECTOR 2 THRU SECTOR 7 - CP/M
                        ;       TRACK 0, SECTOR 8, BYTES 0 THRU 383 - CP/M
                        ;       TRACK 0, SECTOR 8, BYTES 384 THRU 511 - DDB
                        ;       TRACK 1, SECTOR 1 THRU SECTOR 9 - CP/M,
                        ;          FOLLOWED BY THE CBIOS
                        ;
                        ; THE SYSTEM TRACKS ON 8" DISKS ARE RECORDED IN SINGLE
                        ; DENSITY, WHILE THE SYSTEM TRACKS ON 5" DISKS ARE
                        ; RECORDED IN DOUBLE DENSITY. ONLY SIDE 0 OF A 
                        ; DISK IS USED FOR THE SYSTEM.
                        ;********************************************************
                        
   EE63                 WBOOT:  
   EE63    F3                   DI
   EE64    31 0080              LXI     SP,80H                  ;VALIDATE THE STACK POINTER
   EE67    CD F12D              CALL    CLOSE
   EE6A                 EEXIT:  
   EE6A    CD EEE2              CALL    BCOMM           ;Common setup steps
                        
   E700                 ..JOG   ==      CCP+(30*128)    ;LAST GOOD ADDRESS
                                                        ;= 32 -(LOADER + DDB)
                        
   EE6D    AF                   XRA     A               ;READ FROM TRACK 0
   EE6E    01 0901              LXI     B,9<8+1         ;READ 9 SECTORS STARTING AT #1
   EE71    21 D780              LXI     H,CCP-128       ;START HERE TO SKIP LOADER
   EE74    CD EEC8              CALL    READM
                        
                        ;NOW COPY DOWN SECTOR #9
                        
   EE77    21 E780              LXI     H,CCP+(31*128)  ;LAST GOOD SECTOR STARTS HERE
   EE7A    11 E700              LXI     D,CCP+(30*128)  ;AND GOES OVER DDB HERE
   EE7D    01 0200              LXI     B,4*128         ;4 CPM RECORDS
   EE80    EDB0                 LDIR                    ;MOVE IT NOW
                        
   000A                 ..LEFT  ==      NSECTS-34
   0002                 ..PART  ==      ..LEFT@4
   0002                 ..FULL  ==      ..LEFT/4
   E900                 ..ADDR  ==      CCP+(128*(NSECTS-..LEFT))
   ED00                 ..LAST  ==      ..ADDR+(..FULL*512)
                        
   EE82    3E01                 MVI     A,1             ;READ FROM TRACK 1
   EE84    01 0201              LXI     B,..FULL <8+1   ;READ FULL SECTORS
   EE87    21 E900              LXI     H,CCP+(34*128)  ;STARTING AFTER 34 CP/M RECORDS
   EE8A    CD EEC8              CALL    READM
                        
                                .IFN    ..PART,[
                        
   EE8D    3E01                 MVI     A,1             ;READ FROM TRACK 1
   EE8F    01 0103              LXI     B,1<8+(1+..FULL);READ ONE LAST SECTOR
   EE92    21 F5AF              LXI     H,RDBUFF        ;INTO READ BUFFER FOR NOW
   EE95    CD EEC8              CALL    READM
                        
   EE98    01 0100              LXI     B,..PART*128






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 8




   EE9B    11 ED00              LXI     D,..LAST        ;SECTOR GOES HERE
   EE9E    21 F5AF              LXI     H,RDBUFF        ;SECTOR COMES FROM READ BUFFER
   EEA1    EDB0                 LDIR                    ;MOVE THE SECTOR
                        
                                ]
                        
                        ;********************************************************
                        ;THE FOLLOWING RESETS THE CCP BUFFER ON WARMBOOT
                        ;TO KILL AUTO-START ROUTINES
                        ;********************************************************
                        
   EEA3    AF                   XRA     A               ;CLEAR ACC.
   EEA4    32 D807              STA     CCP+7           ;STORE A CHAR. COUNTER LOCATION
                        
                        ;********************************************************
                        ; Common code before entering CP/M
                        ;********************************************************
                        
   EEA7                 GOCPM:  
   EEA7    3EC3                 MVI     A,JMP           ;PATCH WARM START JUMP
   EEA9    32 0000              STA     0
   EEAC    21 EE03              LXI     H,WBOOTE
   EEAF    22 0001              SHLD    1
                        
   EEB2    32 0005              STA     5               ;PATCH JUMP TO BDOS
   EEB5    21 E006              LXI     H,BDOS
   EEB8    22 0006              SHLD    6
                        
   EEBB    21 0080              LXI     H,80H           ;SET DEFAULT DMA ADDR
   EEBE    22 F9B2              SHLD    DMAADD
                        
   EEC1    3A 0004              LDA     CPMDSK          ;PASS CURRENT DISK
   EEC4    4F                   MOV     C,A             ;NUMBER TO THE CCP
   EEC5    C3 D800              JMP     CCP             ;GO TO THE CCP
                        
                        ;********************************************************
                        ; READ MULTIPLE SECTORS. USED BY THE FLOPPY DISK WARM
                        ; BOOT.
                        ;********************************************************
                        
   EEC8    32 F9B6      READM:  STA     PTRACK          ;SET TRACK
                        
   EECB    C5           LOOP:   PUSH    B               ;SAVE COUNT, SECTOR
   EECC    79                   MOV     A,C
   EECD    32 F9B8              STA     PSECT           ;SET SECTOR
   EED0    E5                   PUSH    H               ;SAVE DMA ADDRESS
   EED1    22 F9BA              SHLD    PDMA            ;SET DMA ADDRESS
   EED4    CD F1BC              CALL    PREAD           ;READ THE SECTOR
   EED7    DA F4A5              JC      FATERR          ;FATAL ERROR
   EEDA    E1                   POP     H
   EEDB    24                   INR     H               ;POINT TO NEXT DMA ADDRESS
   EEDC    24                   INR     H               ;INCREMENT BY 2 PAGES (512 BYTES)
   EEDD    C1                   POP     B
   EEDE    0C                   INR     C               ;POINT TO NEXT PHYSICAL SECTOR
   EEDF    10EA                 DJNZ    LOOP            ;REPEAT UNTIL DONE






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 9




   EEE1    C9                   RET
                        
                        ;********************************************************
                        ; BOOT COMMON ROUTINE. USED BY COLD BOOT AND WARM BOOT.
                        ;********************************************************
                        
   EEE2                 BCOMM:  
   EEE2    CD EEF0              CALL    DSKRST          ;RESET DISK SYSTEM
   EEE5    0E00                 MVI     C,0             ;SELECT DISK 0, GET DDB
   EEE7    CD EF11              CALL    SELDSK
   EEEA    7C                   MOV     A,H             ;TEST FOR SUCCESSFUL SELECT
   EEEB    B5                   ORA     L
   EEEC    C0                   RNZ                     ;SUCCESSFUL
   EEED    C3 F4A5              JMP     QUIT            ;FATAL ERROR
                        
                        ;********************************************************
                        ; RESET DISK SYSTEM. INVALIDATE CERTAIN FLOPPY DISK
                        ; TABLES AND BYTES TO ALLOW CHANGING DISKS. CALLED BY
                        ; COLD BOOT, WARM BOOT, AND SOME EXTERNAL ROUTINES.
                        ;********************************************************
                        
   EEF0    AF           DSKRST: XRA     A
   EEF1    21 F9DC              LXI     H,UNACNT        ;INVALIDATE UNALLOCATED COUNT
   EEF4    0616                 MVI     B,UNALEN
   EEF6    77           LOP:    MOV     M,A
   EEF7    23                   INX     H
   EEF8    10FC                 DJNZ    LOP
   EEFA    21 EE4F              LXI     H,ACTDSK        ;POINT TO # DISKS       
   EEFD    46                   MOV     B,M             ;GET NUMBER INTO B
   EEFE    11 0078              LXI     D,APBDIS        ;GET DISTANCE BETWEEN FD APBS
                        
   EF01    21 FA10              LXI     H,APB0+(FLAG-ATABLE) ;POINT TO FLAG
                        
   EF04    77           LOOP1:  MOV     M,A             ;INVALIDATE ALL FLOPPY DISK
   EF05    19                   DAD     D               ;APBS BY CLEARING FLAGS
   EF06    10FC                 DJNZ    LOOP1
                        
   EF08    3D                   DCR     A
   EF09    32 F9C3              STA     OLDFLO          ;FORCE HEAD UNLOAD/LOAD
   EF0C    32 F9C2              STA     ADISK           ;INVALIDATE ATABLE
   EF0F    C9                   RET
                        
                        ;********************************************************
                        ;            LOAD HEAD ON CURRENT DISK
                        ;********************************************************
                        
   EF10    C9           HEADLD: RET
                        
                        
                        ;********************************************************
                        ; LOGICALLY SELECT THE DISK DRIVE FOR FUTURE READS AND
                        ; WRITES TO THAT PASSED IN REGISTER C. IF THE DDB FOR
                        ; THE DRIVE HAS NOT YET BEEN READ, THEN READ IT IN FROM
                        ; THE DISK. OTHERWISE, DON'T PERFORM A PHYSICAL SELECT
                        ; UNTIL A READ OR WRITE SECTOR CALL IS MADE. NOTE THAT






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 10




                        ; THE DPH, APB, DPB, AND TRANSLATE TABLE FOR THE DRIVE
                        ; ARE ALL VALID AT THE COMPLETION OF THIS CALL.
                        ;********************************************************
                        
   EF11                 SELDSK:
   EF11    79                   MOV     A,C
   EF12    21 EE4F              LXI     H,ACTDSK        ;POINT TO ACTUAL DISK #
   EF15    BE                   CMP     M               ;IN RANGE(y/n)
   EF16    D2 EFF8              JNC     BAD             ;NO
   EF19    32 F9ED              STA     SEKDSK          ;D.R. HOST DISK
   EF1C    32 F9B5              STA     PDISK
                        
   EF1F    D5                   PUSH    D               ;SAVE DISK RESET FLAG
                        
   EF20    69                   MOV     L,C             ;GET APB, DPH ADDRESSES
   EF21    CD F493              CALL    GETDPH          ;GET RAM LOCATION FOR DPH
   EF24    ED53 F9C8            SDED    APBADR          ;SAVE APB ADDRESS
   EF28    22 F9C6              SHLD    DPHADR          ;SAVE DPH ADDRESS
   EF2B    CD F45D              CALL    GETAPB          ;GET ATABLE FOR THIS DISK
                        
   EF2E    D1                   POP     D
   EF2F    CB43                 BIT     0,E
   EF31    2807                 JRZ     FRST            ;MAY HAVE BEEN RESET
                        
   EF33    3A F9FC              LDA     FLAG
   EF36    B7                   ORA     A               ;DDB PROCESSED(y/n)
   EF37    C2 EFF1              JNZ     OK              ;YES
                        
   EF3A                 FRST:   
   EF3A    CD F12D              CALL    CLOSE           ;ELSE CLEAR ANY PENDING WRITE
                                                        ;AND READ DDB FROM DISK
                        
   EF3D    AF                   XRA     A               ;WE WILL READ FROM TRACK 0
   EF3E    32 F9B6              STA     PTRACK
   EF41    3E08                 MVI     A,8             ;AND SECTOR 8
   EF43    32 F9B8              STA     PSECT
   EF46    21 F5AF              LXI     H,RDBUFF        ;INTO THE READ BUFFER
   EF49    22 F9BA              SHLD    PDMA
                        
   EF4C    3A F9B5              LDA     PDISK           ;GET DISK NUMBER
   EF4F    21 EE33              LXI     H,SPDTAB        ;POINT TO STEP SPEED TABLE
   EF52    5F                   MOV     E,A
   EF53    1600                 MVI     D,0
   EF55    19                   DAD     D
   EF56    7E                   MOV     A,M             ;GET SPEED BYTE FOR THIS DISK
   EF57    47                   MOV     B,A             ;SAVE IN B
   EF58    E603                 ANI     3               ;ISOLATE SPEED BITS
   EF5A    67                   MOV     H,A             ;PUT IN H FOR DOUBLE STORE NEXT
   EF5B    2EFF                 MVI     L,0FFH          ;CURRENT TRACK - UNKNOWN
   EF5D    22 F9FA              SHLD    TRACK           ;UPDATE ATABLE TRACK AND SPEED
                        
                        
                        ;********************************************************
                        ;          ASSUME 8" S.S.S.D. DISK NEXT
                        ;********************************************************






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 11




                        
   EF60    3E01                 MVI     A,00000001B     ;INITIAL FLAG FOR 8" DRIVE
   EF62    21 F557              LXI     H,STDDDB        ;STANDARD 8" DDB ADDRESS
                        
                        
                        ;TEST IF 5" OR 8" DISK IN SPEED TABLE
                        
   EF65    CB78                 BIT     7,B             ;8" DISK(y/n)
   EF67    2805                 JRZ     EIG             ;IF YES GO DO 8"
   EF69    3E15                 MVI     A,00010101B     ;INITIAL 5" FLAG
   EF6B    21 F587              LXI     H,ALTDDB
                        
   EF6E    32 F9FC      EIG:    STA     FLAG
   EF71    22 F9CD              SHLD    SAVADR
                        
   EF74    21 0001              LXI     H,1             ;AT LEAST 1 SYSTEM TRACK
   EF77    22 F9FD              SHLD    OFF
   EF7A    21 2002              LXI     H,2+32 < 8      ;512 BYTE SECTOR & 32 LOGICAL SECTORS
   EF7D    22 F9FF              SHLD    SSLEN
                        
   EF80    CD F328              CALL    GETD3S          ;GET VF2 CTRL BYTES INTO ATABLE
   EF83    CD F1BC              CALL    PREAD           ;GET THE DDB
   EF86    3020                 JRNC    YUP             ;WE GOT SOMETHING
                        
                        
                        ;********************************************************
                        ; IF ERROR IS R.N.F. THEN SHOW DISK READ FAILED
                        ; ELSE TEST IT FOR GOOD DISK TYPE
                        ;********************************************************
                        
   EF88    CB67                 BIT     WBRNF,A         ;RNF ERROR(y/n)
   EF8A    2869                 JRZ     ERR             ;NOPE, GIVE UP
                        
                        
                        ;********************************************************
                        ;    SET UP FOR STANDARD 8" S.S.S.D.  DISK HERE
                        ;********************************************************
                        
   EF8C                 NOV:    
   EF8C    CD F4B0              CALL    MSG     ;WARN THE USER AND
   EF8F    0D0A                 .BYTE   CR,LF   ;   HOPE FOR THE BEST
   EF91    535444204469         .ASCIZ  \STD Disk?\
   EF9B    2A F9CD              LHLD    SAVADR  ;POINT TO STANDARD DDB
   EF9E    01 0076              LXI     B,128-10
   EFA1    11 F739              LXI     D,RDBUFF+384+10
   EFA4    EDB0                 LDIR                    ;FIX RD BUFFER TO BE A STD DDB
   EFA6    1819                 JMPR    COMP
                        
   EFA8    2A F72F      YUP:    LHLD    RDBUFF+384      ;GET VALIDITY BYTES FROM DDB
   EFAB    11 FDDD              LXI     D,0DDH+0FDH < 8 ;EXPECTED VALUE OF BYTES
   EFAE    B7                   ORA     A
   EFAF    ED52                 DSBC    D               ;DDB VALID(y/n)
   EFB1    20D9                 JRNZ    NOV             ;NOPE
   EFB3    2A F731              LHLD    RDBUFF+384+2    ;MORE VALIDITY BYTES
   EFB6    ED52                 DSBC    D               ;DDB VALID(y/n)






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 12




   EFB8    20D2                 JRNZ    NOV             ;NOPE
                        
   EFBA    3A F733              LDA     RDBUFF+384+4    ;TEST FOR COMPATIBILITY
   EFBD    E6FE                 ANI     11111110B
   EFBF    2037                 JRNZ    BAD             ;GIVE UP ON THIS DISK
                        
   EFC1    CD F454      COMP:   CALL    PUTAPB          ;UPDATE TRACK, SPEED IN APB
                        
   EFC4    2A F9C8              LHLD    APBADR          ;GET APB ADDR FOR THIS DISK
   EFC7    11 000A              LXI     D,FLAG-ATABLE   ;POINT TO WHERE FLAG GOES
   EFCA    19                   DAD     D
   EFCB    EB                   XCHG                    ;MAKE THIS THE DESTINATION ADDR
   EFCC    21 F739              LXI     H,RDBUFF+384+10 ;FROM FLAG IN RD BUFFER
                        
   EFCF    01 006E              LXI     B,ALEN-(FLAG-ATABLE)+DPBLEN+TRALEN
                        
   EFD2    EDB0                 LDIR                    ;MOVE DDB, DPB, TRANS INTO APB
                        
                        
                        ;********************************************************
                        ;*           NOW SET UP ALLOCATION SIZE
                        ;*           FOR THE DISK JUST SELECTED
                        ;* GET THE ALLOCATION SIZE FROM THE DSM VALUE IN THE DPB
                        ;********************************************************
                        
   EFD4                 GALV:   
   EFD4    3A F742              LDA     RDBUFF+384+19   ;GET DSM
   EFD7    4F                   MOV     C,A             ;SAVE VALUE
   EFD8    3A F9ED              LDA     SEKDSK
   EFDB    5F                   MOV     E,A
   EFDC    1600                 MVI     D,0
   EFDE    21 F9D7              LXI     H,ALOCSZ
   EFE1    19                   DAD     D
   EFE2    71                   MOV     M,C             ;SAVE FOR THIS DISK
                        
   EFE3    3EFF                 MVI     A,0FFH          ;UPDATE ATABLE FROM APB
   EFE5    32 F9C2              STA     ADISK
   EFE8    CD F45D              CALL    GETAPB
   EFEB    CD F328              CALL    GETD3S          ;PUT VALID VF2 BYTES IN ATABLE
   EFEE    CD F454              CALL    PUTAPB          ;UPDATE APB FROM FULLY VALID ATABLE
                        
   EFF1    2A F9C6      OK:     LHLD    DPHADR          ;RETURN DPH ADDRESS
   EFF4    C9                   RET
                        
   EFF5                 ERR:
   EFF5    CD F3AB              CALL    EPRINT          ;PRINT ERROR IN READING DDB
                        
   EFF8    AF           BAD:    XRA     A               ;DESELECT INVALID DRIVE
   EFF9    32 0004              STA     CPMDSK
   EFFC    67                   MOV     H,A             ;ERROR RETURN CODE
   EFFD    6F                   MOV     L,A
   EFFE    C9                   RET
                        
                        ;********************************************************
                        ; SET TRACK FOR FUTURE READS OR WRITES TO TRACK 0. ALSO






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 13




                        ; PARTIALLY RESET THE DISK SYSTEM TO ALLOW FOR CHANGED
                        ; DISKS.
                        ;********************************************************
                        
   EFFF                 HOME:   
   EFFF    CD F12D              CALL    CLOSE
   F002    3A F9E7              LDA     HSTWRT          ;TEST FOR PENDING WRITE
   F005    B7                   ORA     A
   F006    2003                 JRNZ    HOMED
   F008    32 F9E6              STA     HSTACT          ;CLEAR HOST ACTIVE FLAG
   F00B                 HOMED:  
   F00B    01 0000              LXI     B,0             ;DROP THRU TO SET TRACK TO 0
                        
                        ;********************************************************
                        ; SET TRACK FOR FUTURE READS OR WRITES TO THAT PASSED
                        ; IN REGISTER PAIR BC.
                        ;********************************************************
                        
   F00E    ED43 F9EE    SETTRK: SBCD    SEKTRK
   F012    C9                   RET
                        
                        ;********************************************************
                        ; SET SECTOR FOR FUTURE READS OR WRITES TO THAT PASSED
                        ; IN REGISTER PAIR BC.
                        ;********************************************************
                        
   F013    ED43 F9B0    SETSEC: SBCD    SEKSEC
   F017    C9                   RET
                        
                        
                        ;********************************************************
                        ; SET DMA ADDRESS FOR FUTURE READS OR WRITES TO THAT
                        ; PASSED IN REGISTER PAIR BC.
                        ;********************************************************
                        
   F018    ED43 F9B2    SETDMA: SBCD    DMAADD
   F01C    C9                   RET
                        
                        
                        ;********************************************************
                        ; SECTOR TRANSLATION ROUTINE. THE ROUTINE ONLY
                        ; TRANSLATES SECTORS ON THE USER TRACKS, SINCE CP/M
                        ; ACCESSES THE SYSTEM TRACKS WITHOUT CALLING FOR
                        ; TRANSLATION.
                        ;********************************************************
                        
   F01D                 SECTRA: 
                        
   F01D    EB                   XCHG                    ;HL GETS TRANS TABLE ADDRESS
                                                        ;CP/M PASSED IT IN DE
   F01E    79                   MOV     A,C             ;GET SECTOR #
   F01F    ED43 F9E2            SBCD    NEWSEC          ;SAVE FOR UNALLOC TEST
   F023    09                   DAD     B               ;INDEX INTO TABLE, LOGICAL SECTOR
                                                        ;IS PASSED IN BC
   F024    6E                   MOV     L,M             ;GET THE TRANSLATED BYTE






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 14




   F025    2600                 MVI     H,0
   F027    C9                   RET
                        
                        ;********************************************************
                        ; CP/M ENTRY POINT FOR SECTOR READS. BUFFERED SECTOR
                        ; READS ARE DONE HERE. BUFFERED READ OPERATIONS REQUIRE
                        ; READING THE SECTOR FROM DISK INTO THE READ BUFFER,
                        ; AND THEN PROVIDING 128 BYTE LOGICAL SECTORS TO THE
                        ; CALLING PROGRAM ON REQUEST.
                        ;********************************************************
                        
   F028                 READ:   
   F028    AF                   XRA     A
   F029    32 F9DC              STA     UNACNT          ;UNACNT=0, WE WON'T WRITE WITHOUT
                                                        ;PRE-READS FOR NOW
   F02C    3C                   INR     A       
   F02D    32 F9E5              STA     READOP          ;SHOW WE ARE DOING A READ OPERATION
   F030    32 F9E4              STA     RSFLAG          ;MUST READ DATA
   F033    3E02                 MVI     A,2
   F035    32 F9CA              STA     WRTYPE          ;TREAT AS UNALLOCATED
                        
   F038    C3 F0A4              JMP     RWOPER          ;DO THE READ
                        
                        ;********************************************************
                        ; CP/M ENTRY POINT FOR SECTOR WRITES. BUFFERED SECTOR
                        ; WRITES ARE DONE HERE. BUFFERED WRITE OPERATIONS
                        ; REQUIRE ACCEPTING 128 BYTE LOGICAL SECTORS FROM THE
                        ; CALLING PROGRAM, ACCUMULATING THEM IN A WRITE BUFFER,
                        ; THEN WRITING THE BUFFER WHEN IT BECOMES FULL. THE
                        ; BUFFER IS IMMEDIATELY WRITTEN OUT IF THE LOGICAL
                        ; SECTOR IS PART OF THE DISK DIRECTORY.
                        ;********************************************************
                        
                        
   F03B                 WRITE:  
                        
   F03B    AF                   XRA     A
   F03C    32 F9E5              STA     READOP          ;SET TO WRITE
                        
   F03F    79                   MOV     A,C
   F040    32 F9CA              STA     WRTYPE          ;SAVE TYPE OF WRITE
                        
   F043    FE02                 CPI     2               ;WRITE UNALLOCATED(y/n)
   F045    2018                 JRNZ    CKUN            ;GO SEE IF O.K. ANYWAY
                        
   F047    3A F9DB              LDA     ALOCA           ;GET MAXIMUM UNALLOCATED RECORD COUNT
   F04A    32 F9DC              STA     UNACNT          ;AND PUT HERE FOR WRITING
   F04D    3A F9ED              LDA     SEKDSK          ;GET CURRENT DISK
   F050    32 F9DD              STA     UNADSK
   F053    2A F9EE              LHLD    SEKTRK          ;GET CURRENT TRACK
   F056    22 F9DE              SHLD    UNATRK
   F059    3A F9E2              LDA     NEWSEC          ;GET CURRENT CP/M SECTOR
   F05C    32 F9E0              STA     UNASEC
                        
   F05F                 CKUN:                           ;SEE IF UNALLOCATED RECORDS REMAIN






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 15




                        
   F05F    3A F9DC              LDA     UNACNT          ;GET UNALLOCATED RECORDS LEFT
   F062    B7                   ORA     A
   F063    CA F09C              JZ      ALOC            ;NO UNALLOCATED LEFT
                        
                        
                        ;WE STILL HAVE UNALLOCATED RECORDS LEFT
                        
   F066    3D                   DCR     A               ;UPDATE UNALLOCATED RECORD COUNT
   F067    32 F9DC              STA     UNACNT
                        
                        
                        ;NOW CHECK FOR CORRECT DISK, TRACK & SECTOR
                        
   F06A    3A F9ED              LDA     SEKDSK          ;COMPARE DISKS FIRST
   F06D    21 F9DD              LXI     H,UNADSK
   F070    BE                   CMP     M
   F071    C2 F09C              JNZ     ALOC
                        
                        
                        ;DISKS ARE SAME, NOW CHECK FOR TRACK
                        
   F074    21 F9DE              LXI     H,UNATRK
   F077    3A F9EE              LDA     SEKTRK
   F07A    BE                   CMP     M
   F07B    201F                 JRNZ    ALOC
                        
                        
                        ;TRACKS ARE SAME, NOW TEST FOR SECTOR
                        
   F07D    3A F9E2              LDA     NEWSEC          ;COMPARE SECTORS NOW
   F080    21 F9E0              LXI     H,UNASEC
   F083    BE                   CMP     M
   F084    2016                 JRNZ    ALOC
                        
                        
                        ;SECTORS ARE SAME, NOW UPDATE PARAMETERS
                        
   F086    34                   INR     M               ;MAKE NEXT EXPECTED SECTOR
   F087    7E                   MOV     A,M             ;GET NEXT EXPECTED SECTOR
   F088    21 FA02              LXI     H,ULRPS         ;POINT TO SECTORS/USER TRACK
   F08B    BE                   CMP     M               ;TEST FOR END OF TRACK
   F08C    3808                 JRC     NOVR            ;NO OVERFLOW
                        
                        
                        ;HERE WE ALLOW FOR NEXT UNALLOCATED RECORD ON A NEW TRACK
                        
   F08E    AF                   XRA     A               ;SET SECTOR AS FIRST
   F08F    32 F9E0              STA     UNASEC
   F092    21 F9DE              LXI     H,UNATRK        ;POINT TO UNALLOCATED TRACK #
   F095    34                   INR     M               ;MAKE IT NEXT ONE
                        
                        
                        ;WRITE PARAMETERS MATCH, DON'T PRE-READ
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 16




   F096                 NOVR:   
   F096    AF                   XRA     A
   F097    32 F9E4              STA     RSFLAG          ;SHOW WE DON'T READ A SECTOR
   F09A    1808                 JMPR    RWOPER
                        
                        
                        ;NOT AN UNALLOCATED RECORD, DO A PRE-READ
                        
   F09C                 ALOC:   
   F09C    AF                   XRA     A
   F09D    32 F9DC              STA     UNACNT          ;SET UNALLOCATED = 0
   F0A0    3C                   INR     A
   F0A1    32 F9E4              STA     RSFLAG          ;RSFLAG = 1, WE MUST READ THE SECTOR
                        
                        
                        ;DO READ OR WRITE OPERATION NEXT
                        
   F0A4                 RWOPER:
                        
   F0A4    CD F16D              CALL    GETTRK          ;COMPUTE PHYSICAL TRACK & SECTOR
                        
   F0A7    21 F9E6              LXI     H,HSTACT        ;GET HOST ACTIVE FLAG
   F0AA    7E                   MOV     A,M     
   F0AB    3601                 MVI     M,1             ;SET IT ACTIVE FOR SURE
   F0AD    B7                   ORA     A               ;SEE IF IT WAS ACTIVE
   F0AE    CA F0D3              JZ      FILHST          ;IF NOT FILL IT
                                
                        
                        ;********************************************************
                        ;* CHECK TO SEE IF SECTOR IN HOST BUFFER IS CORRECT ONE
                        ;* IF NOT WRITE TO HOST BUFFER IF NEEDED & PREPARE FOR 
                        ;* CORRECT HOST BUFFER
                        ;********************************************************
                        
                        ;SEE IF DISKS ARE SAME
                        
   F0B1    3A F9ED              LDA     SEKDSK          ;COMPARE DISKS FIRST
   F0B4    21 F9E8              LXI     H,HSTDSK
   F0B7    BE                   CMP     M
   F0B8    2012                 JRNZ    NOMAT
                        
                        
                        ;SEE IF TRACKS ARE SAME
                        
   F0BA    21 F9E9              LXI     H,HSTTRK
   F0BD    3A F9BC              LDA     CTRACK
   F0C0    BE                   CMP     M
   F0C1    2009                 JRNZ    NOMAT
                                
                        
                        ;SEE IF SECTORS ARE SAME
                        
   F0C3    3A F9F0              LDA     SEKHST          ;COMPARE SECTORS NOW
   F0C6    21 F9EB              LXI     H,HSTSEC
   F0C9    BE                   CMP     M






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 17




   F0CA    2824                 JRZ     MATCH
                        
                        
                        ;HOST PARAMETERS DO NOT MATCH CURRENT R/W PARAMETERS
                        ;SEE IF WE HAVE TO FLUSH THE HOST BUFFER
                        
   F0CC                 NOMAT:  
   F0CC    3A F9E7              LDA     HSTWRT          ;SEE IF HOST BUFFER WAS WRITTEN
   F0CF    B7                   ORA     A
   F0D0    C4 F132              CNZ     FLUSH           ;WRITE OUT THE BUFFER IF NOT
                        
                        
                        ;MAY HAVE TO FILL HOST BUFFER
                        ;SEET UP NEW PARAMETERS
                        
   F0D3                 FILHST: 
                        
   F0D3    3A F9ED              LDA     SEKDSK
   F0D6    32 F9E8              STA     HSTDSK
   F0D9    2A F9BC              LHLD    CTRACK
   F0DC    22 F9E9              SHLD    HSTTRK
   F0DF    3A F9F0              LDA     SEKHST          ;THE PHYSICAL SECTOR
   F0E2    32 F9EB              STA     HSTSEC
                        
   F0E5    3A F9E4              LDA     RSFLAG          ;SEE IF WE NEED TO READ
   F0E8    B7                   ORA     A
   F0E9    C4 F151              CNZ     RDHST           ;IF SO READ IT
   F0EC    AF                   XRA     A
   F0ED    32 F9E7              STA     HSTWRT          ;SHOW NO PENDING WRITE
                        
                        ;WE HAVE CORRECT SECTOR SO COPY DATA TO/FROM DMA BUFFER
                        
   F0F0                 MATCH:
                        
   F0F0    3A F9B4              LDA     CREC            ;GET RECORD #
   F0F3    47                   MOV     B,A             ;COMPUTE RECORD IN HOST BUFFER
   F0F4    0E00                 MVI     C,0
   F0F6    CB38                 SRLR    B
   F0F8    CB19                 RARR    C
   F0FA    21 F5AF              LXI     H,HSTBUF
   F0FD    09                   DAD     B               ;HL IS NOW HOST BUFFER
   F0FE    ED5B F9B2            LDED    DMAADD          ;DE HAS DMA ADDRESS
   F102    01 0080              LXI     B,128           ;BYTES TO MOVE
   F105    3A F9E5              LDA     READOP
   F108    B7                   ORA     A               ;SEE IF WE ARE READING OR WRITING
   F109    2009                 JRNZ    RWMOVE          ;SKIP ON READ
   F10B    3E01                 MVI     A,1             ;IF A WRITE THEN MARK & COPY TO BUFFER
   F10D    32 F9E7              STA     HSTWRT          ;HSTWRT = 1
   F110    EB                   XCHG                    ;DE IS NOW DESTINATION,= HOST ON WRITE
   F111    2A F9B2              LHLD    DMAADD          ;HL IS SOURCE, = USER AREA TO GET       
                        
   F114                 RWMOVE:
                        
   F114    EDB0                 LDIR                    ;MOVE DATA
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 18




                        
                        ;NOW CHECK WRITE TYPE FOR DIRECTORY UPDATE
                        
   F116    3A F9CA              LDA     WRTYPE          ;GET TYPE OF WRITE
   F119    3D                   DCR     A               ;IS IT TO THE DIRECTORY
   F11A    2802                 JRZ     WRITIT          ;IF SO WRITE IT OUT
                        
   F11C    1806                 JMPR    GOODOP          ;IF NOT SHOW A SUCCESSFUL R/W OPERATION 
                        
                        ;CLEAR HOST BUFFER FOR DIRECTORY WRITE
                        
   F11E                 WRITIT: 
                        
   F11E    32 F9E7              STA     HSTWRT
   F121    CD F132              CALL    WRTHST
                                
   F124                 GOODOP:
   F124    3A F9CF              LDA     MRML            ;GET RETRY BYTE
   F127    B7                   ORA     A               ;TEST FOR ZERO
   F128    3E01                 MVI     A,1             ;JUST IN CASE OF FAILURE
   F12A    C8                   RZ                      ;IF FAILED SHOW IT TO BDOS
   F12B    AF                   XRA     A               ;ELSE SET AS O.K.
   F12C    C9                   RET                     ;SHOW BDOS SUCCESSFUL READ/WRITE
                        
   F12D                 CLOSE:  
   F12D    3A F9E7              LDA     HSTWRT          ;SEE IF WE HAVE A PENDING WRITE
   F130    B7                   ORA     A
   F131    C8                   RZ                      ;IF NOT RETURN NOW
                        
                        ;WRITE FROM THE HOST BUFFER
                        
   F132                 FLUSH:
   F132                 WRTHST: 
   F132    3A F9E8              LDA     HSTDSK          ;GET ACTUAL WRITE DISK
   F135    32 F9B5              STA     PDISK           ;MAKE IT THE PHYSICAL DISK
   F138    CD F45D              CALL    GETAPB          ;GET APB FOR THE DISK
   F13B    3A F9EB              LDA     HSTSEC
   F13E    32 F9B8              STA     PSECT
   F141    3A F9E9              LDA     HSTTRK
   F144    32 F9B6              STA     PTRACK
   F147    21 F5AF              LXI     H,WRBUFF        ;POINT TO WRITE BUFFER
   F14A    22 F9BA              SHLD    PDMA            ;MAKE IT THE PHYSICAL DMA ADDRESS
                                
   F14D    CD F1B8              CALL    PWRITE          ;WRITE BACK THE COMBINED SECTOR
   F150    C9                   RET
                        
   F151                 RDHST:  
   F151    3A F9E8              LDA     HSTDSK
   F154    32 F9B5              STA     PDISK
   F157    21 F5AF              LXI     H,RDBUFF        ;POINT TO READ BUFFER
   F15A    22 F9BA              SHLD    PDMA            ;MAKE IT PHYSICAL DMA ADDRESS
   F15D    3A F9BC              LDA     CTRACK
   F160    32 F9B6              STA     PTRACK
   F163    3A F9BE              LDA     CSECT
   F166    32 F9B8              STA     PSECT






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 19




                        
   F169    CD F1BC              CALL    PREAD           ;READ SECTOR INTO READ BUFFER
   F16C    C9                   RET
                        
                        ;GET ACTUAL TRACK TO SEEK
                        
   F16D                 GETTRK: 
   F16D    3A F9EE              LDA     SEKTRK          ;GET CP/M TRACK NUMBER
   F170    21 F9FD              LXI     H,OFF           ;GET NUMBER OF SYSTEM TRACKS
   F173    5E                   MOV     E,M
   F174    0E00                 MVI     C,0             ;ASSUME SINGLE SIDED DISK
   F176    21 F9FF              LXI     H,SSLEN         ;POINT TO SYSTEM SECTOR LENGTH
   F179    BB                   CMP     E
   F17A    380F                 JRC     SYST            ;IT WAS A SYSTEM TRACK
   F17C    21 F9FC              LXI     H,FLAG          ;POINT TO FLAG BYTE
   F17F    CB4E                 BIT     1,M             ;TEST SIDES BIT
   F181    2805                 JRZ     SING            ;SINGLE SIDED DISK
   F183    83                   ADD     E               ;ADD IN OFFSET
   F184    CB3F                 SRLR    A               ;COMPUTE PHYSICAL TRACK NUMBER
   F186    CB19                 RARR    C               ;GET SIDE NUMBER BIT
   F188    21 FA01      SING:   LXI     H,USLEN
   F18B                 SYST:   
   F18B    32 F9BC              STA     CTRACK          ;SAVE ACTUAL TRACK NUMBER
                                        
                        
                        ;GET ACTUAL SECTOR TO READ/WRITE
                        
   F18E                 PYSEC:  
   F18E    7E                   MOV     A,M             ;GET LENGTH BYTE
   F18F    47                   MOV     B,A
   F190    FE03                 CPI     3
   F192    2004                 JRNZ    LRG
   F194    2607                 MVI     H,7
   F196    1806                 JMPR    GSEC
   F198    FE02         LRG:    CPI     2               ;512 BYTE SECTOR(y/n)
   F19A    2001                 JRNZ    NO              ;NOPE, ACC HAS RECORD MASK
   F19C    3C                   INR     A               ;FIND MASK FOR 512 BYTE SECTOR
   F19D    67           NO:     MOV     H,A             ;SAVE RECORD MASK
                        
   F19E    3A F9B0      GSEC:   LDA     SEKSEC          ;GET CP/M SECTOR NUMBER
   F1A1    3D                   DCR     A               ;ADJUST DOWN TO START AT ZERO
   F1A2    6F                   MOV     L,A             ;SAVE FOR LATER
   F1A3    04                   INR     B               ;ADJUST FOR EASY LOOP
   F1A4    1802                 JMPR    JOIN
   F1A6    CB3F         LOOP2:  SRLR    A               ;PLACE SECTOR NUMBER IN LSB'S
   F1A8    10FC         JOIN:   DJNZ    LOOP2           ;REPEAT UNTIL ALIGNED IN LSB'S
   F1AA    3C                   INR     A               ;ADJUST TO MAKE PHYSICAL SECTOR
   F1AB    B1                   ORA     C               ;GET SIDE BIT   
   F1AC    32 F9F0              STA     SEKHST          ;HOST SECTOR
   F1AF    32 F9BE              STA     CSECT           ;SAVE COMBINED SECTOR
   F1B2    7D                   MOV     A,L             ;GET CP/M SECTOR NUMBER
   F1B3    A4                   ANA     H               ;MASK ALL BUT RECORD NUMBER
   F1B4    32 F9B4              STA     CREC            ;SAVE RECORD NUMBER
   F1B7    C9                   RET
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 20




                        
                        ;********************************************************
                        ; FLOPPY DISK PHYSICAL READ AND WRITE ROUTINE. ALL
                        ; FLOPPY DISK I/O IS PERFORMED BY CALLS TO THIS
                        ; ROUTINE. ON ENTRY PDISK, PTRACK, PSECT, AND PDMA
                        ; MUST BE VALID.
                        ;********************************************************
                        
   F1B8    3EA0         PWRITE: MVI     A,WWRITE        ;SET WRITE COMMAND
   F1BA    1802                 JMPR    PCOM            ;JOIN COMMON CODE
                        
   F1BC    3E80         PREAD:  MVI     A,WREAD         ;SET READ COMMAND
                        
   F1BE    32 F9C4      PCOM:   STA     PCMD            ;REMEMBER WHETHER READ OR WRITE
   F1C1    CD F45D              CALL    GETAPB          ;MAKE SURE ATABLE IS RIGHT ONE
                        
                        
                        ;********************************************************       
                        ;       IF LAST I/O WAS ON DIFFERENT DISK, TELL THE
                        ;       179X TO UNLOAD ITS HEAD. THE HEAD LOAD ONE-SHOT
                        ;       WILL THEN BE RETRIGERED ON THE NEXT COMMAND.
                        ;********************************************************
                        
   F1C4    21 F9C3              LXI     H,OLDFLO        ;POINT TO OLD FLOPPY NUMBER
   F1C7    3A F9B5              LDA     PDISK           ;GET NEW NUMBER
   F1CA    BE                   CMP     M               ;SAME DISK(y/n)
   F1CB    2807                 JRZ     SADS            ;YES
                        
   F1CD    77                   MOV     M,A             ;NO, UPDATE OLD NUMBER TO NEW
   F1CE    CD F35B              CALL    TRIMWT          ;WAIT FOR TRIM ERASE TO END
   F1D1    CD F302              CALL    SETD3S          ;SET VF2 CONTROL BYTE
                        
                        ;********************************************************
                        ;       INITIALIZE RETRY LIMITS. INSURE VF2 BYTE IS
                        ;       SET. SEEK TO CORRECT TRACK.
                        ;********************************************************
                        
   F1D4                 SADS:   
   F1D4    3A EE39              LDA     HOMER           ;NUMBER OF HOME OPERATIONS
   F1D7    32 F9CF              STA     MRML
   F1DA    32 EE51              STA     KBIT
   F1DD                 MAC:    
   F1DD    3A EE3A              LDA     RETRYIT         ;RETRIES BETWEEN HOME OPERATIONS
   F1E0    32 F9C1              STA     RMACRO
                        
   F1E3    CD F302              CALL    SETD3S          ;SET VF2 CONTROL BYTE
   F1E6    21 F9FA              LXI     H,TRACK         ;GET OLD TRACK NUMBER
   F1E9    7E                   MOV     A,M
   F1EA    D355                 OUT     WTRACK          ;UPDATE 179X TRACK REG
   F1EC    3A F9B6              LDA     PTRACK          ;GET DESIRED TRACK NUMBER
   F1EF    BE                   CMP     M               ;SAME AS BEFORE(y/n)
   F1F0    2823                 JRZ     SATR            ;YES
                        
   F1F2    77                   MOV     M,A             ;UPDATE TRACK NUMBER
   F1F3    CD F35B              CALL    TRIMWT          ;WAIT FOR TRIM ERASE TO END






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 21




   F1F6    3A F9B6              LDA     PTRACK          ;GET DESIRED TRACK
   F1F9    B7                   ORA     A               ;TRACK 0 DESIRED(y/n)
   F1FA    2008                 JRNZ    NOZE            ;NOPE
                        
   F1FC    CD F366              CALL    FHOME           ;SEEK TO TRACK 0 BY HOME CMD
   F1FF    DA F4A5              JC      FATERR
   F202    1806                 JMPR    ENDS            ;DONE SEEKING
                        
   F204    CD F36A      NOZE:   CALL    FSEEK           ;NORMAL SEEK TO DESIRED TRACK
   F207    DA F4A5              JC      FATERR
                        
   F20A    CD F454      ENDS:   CALL    PUTAPB          ;UPDATE APB FROM ATABLE
   F20D    3A F9C4              LDA     PCMD            ;GET READ/WRITE COMMAND
   F210    CBD7                 SET     WBDEL,A         ;INSURE HEAD IS SETTLED
   F212                 NOMIL:  
   F212    32 F9C4              STA     PCMD            ;BY SETTING DELAY BIT IN CMD
                        
                        
                        ;********************************************************
                        ;       SET UP DMA ADDRESS, SECTOR REGISTER. ISSUE
                        ;       THE READ OR WRITE COMMAND. SET HARDWARE WAIT.
                        ;********************************************************
                        
   F215                 SATR:
   F215                 MIC:    
   F215    3A F9B8              LDA     PSECT           ;GET DESIRED SECTOR NUMBER
   F218    47                   MOV     B,A             ;SAVE SIDE BIT
   F219    CB7F                 BIT     7,A             ;TEST SIDE BIT
   F21B    3E30                 MVI     A,'0'
   F21D    2802                 JRZ     SIDEZERO
   F21F    3E31                 MVI     A,'1'
   F221                 SIDEZERO:
   F221    32 F9D6              STA     SIDEID
                        
   F224    CB78                 BIT             7,B
   F226    CA F232              JZ              SSIDEA
   F229    DB53                 IN              DCMD    ; SET SIDE FOR 1791
   F22B    CBA7                 RES             4,A             ; SET SIDE B
   F22D    D353                 OUT             DCMD
   F22F    C3 F238              JMP             SETSIDE
   F232                 SSIDEA:
   F232    DB53                 IN              DCMD            ; SET SIDE FOR 1791
   F234    CBE7                 SET             4,A                     ; SET SIDE A
   F236    D353                 OUT             DCMD
                        
   F238                 SETSIDE:
   F238    C5                   PUSH    B
   F239    06FF                 MVI             B,0FFH          ;Slight delay for hardware
   F23B    10FE                 DELYS:  DJNZ DELYS
   F23D    C1                   POP             B
                                
   F23E                 SSECTOR:
   F23E    78                   MOV     A,B                     ;GET BACK SECTOR
   F23F    E67F                 ANI     07FH            ;DROP SIDE BIT
   F241    D356                 OUT     WSECT           ;UPDATE 179X SECTOR REGISTER






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 22




                        
   F243    3A F9C4              LDA     PCMD            ;GET READ OR WRITE COMMAND
   F246    CBCF                 SET     WBSID1,A        ;UPDATE SSO BIT TO 1
   F248    CB78                 BIT     7,B                     ;ARE WE ON SIDE 1(y/n)
   F24A    2802                 JRZ     SID01           ;NO, LEAVE WBSIDE BIT AS 0
   F24C    CBDF                 SET     WBSIDE,A
                        
                        
   F24E                 SID01:  
   F24E    D354                 OUT     WCMD            ;FOR PIO 179X COMMAND
   F250    32 F9D5      SID2:   STA     OCMD
   F253    32 F9C5              STA     ORWCMD          ;SAVE LAST READ OR WRITE CMD
   F256    57                   MOV     D,A             ;SAVE THE COMMAND
                        
   F257    3A F9CC              LDA     D3SWT           ;GET WAIT ACTIVE VF2 BYTE
   F25A    D353                 OUT     DCMD    
                        
   F25C    32 F9D4              STA     OD3S
                        
   F25F    01 8057              LXI     B,128 < 8+WDATA ;SET PORT AND LENGTH
   F262    3A F9B6              LDA     PTRACK          ;GET CURRENT TRACK
   F265    21 F9FD              LXI     H,OFF
   F268    BE                   CMP     M               ;IS IT A USER TRACK(y/n)
   F269    3A FA01              LDA     USLEN           ;GET USER SECTOR LENGTH
   F26C    3003                 JRNC    ULEN
   F26E    3A F9FF              LDA     SSLEN           ;GET SYSTEM SECTOR LENGTH
                        
   F271    2A F9BA      ULEN:   LHLD    PDMA            ;GET DMA ADDRESS
   F274    CB6A                 BIT     WBWRIT,D        ;ARE WE WRITING(y/n)
   F276    2017                 JRNZ    WRIT            ;YES, GO WRITE
                        
                        
                        ;********************************************************
                        ;                     READ THE SECTOR.
                        ;********************************************************
                        
   F278                 PIRD:   
   F278    B7                   ORA     A
   F279    280E                 JRZ     PR12
   F27B    0600                 MVI     B,0H
   F27D    3D                   DCR     A
   F27E    2809                 JRZ     PR25
   F280    3D                   DCR     A
   F281    2804                 JRZ     PR51
   F283    EDB2                 INIR
   F285    EDB2                 INIR
   F287    EDB2         PR51:   INIR
   F289                 PR25:
   F289    EDB2         PR12:   INIR
                                
   F28B                 RDFN:   
                        
   F28B    0E9C                 MVI     C,WSREAD        ;STATUS BITS TO TEST
   F28D    1815                 JMPR    CHEK
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 23




                        ;********************************************************
                        ;                   WRITE THE SECTOR.
                        ;********************************************************
                        
   F28F                 WRIT:   
   F28F    B7                   ORA     A
   F290    280E                 JRZ     PW12
   F292    0600                 MVI     B,0H
   F294    3D                   DCR     A
   F295    2809                 JRZ     PW25
   F297    3D                   DCR     A
   F298    2804                 JRZ     PW51
   F29A    EDB3                 OUTIR
   F29C    EDB3                 OUTIR
                        
   F29E    EDB3         PW51:   OUTIR
   F2A0                 PW25:
   F2A0    EDB3         PW12:   OUTIR
                                                
   F2A2                 WRFN:   
   F2A2    0EFC                 MVI     C,WSWRIT        ;STATUS BITS TO TEST
                        
                        
                        ;********************************************************
                        ;       WAIT FOR COMPLETION OF DISK OPERATION.
                        ;       TEST FOR ERRORS.
                        ;********************************************************
                        
   F2A4                 CHEK:   
   F2A4    3A F9CB              LDA     D3SNO           ;GET NO WAIT VF2 BYTE
   F2A7    D353                 OUT     DCMD
   F2A9    32 F9D4              STA     OD3S
   F2AC    CD F3A1              CALL    FQDONE          ;WAIT FOR 179X DONE
   F2AF    A1                   ANA     C               ;ANY ERROR BITS(y/n)
   F2B0    C8                   RZ                      ;NO, RETURN - SUCCESSFUL
                        
                        
                        ;********************************************************
                        ;           RETRY THE I/O IF AN ERROR OCCURED.
                        ;********************************************************
                        
   F2B1                 NOPRNT: 
   F2B1    21 F9C1              LXI     H,RMACRO        ;POINT TO MACRO RETRY COUNT
   F2B4    35                   DCR     M               ;DECREMENT IT
   F2B5    C2 F215              JNZ     MIC             ;RE-DO READ/WRITE
                        
   F2B8    21 EE51              LXI     H,KBIT
   F2BB    35                   DCR     M
   F2BC    CA F2CA              JZ      KEYIT
                        
   F2BF    CD F366              CALL    FHOME
   F2C2    D8                   RC
   F2C3    AF                   XRA     A
   F2C4    32 F9FA              STA     TRACK
   F2C7    C3 F1DD              JMP     MAC






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 24




                        
                        ;       IF WE CAME HERE IT IS TIME TO RE-CALIBRATE THE DRIVE
                        
   F2CA                 KEYIT:  
   F2CA    3E04                 MVI     A,4
   F2CC    32 EE51              STA     KBIT
   F2CF    3A F9D2              LDA     ISTAT           ;GET BACK LAST STATUS
   F2D2    A1                   ANA     C
   F2D3    CD F3AB              CALL    EPRINT
                        
                        ;********************************************************
                        ;THE FOLLOWING ROUTINE WAITS FOR USER
                        ;TO RETRY OPERATION ON DRIVE WITH ERROR
                        ;********************************************************
                        
   F2D6                 NORE:   
   F2D6    CD F366              CALL    FHOME
   F2D9    DA F4A5              JC      FATERR
   F2DC    AF                   XRA     A
   F2DD    32 F9FA              STA     TRACK
                        
                        ; ON A MEDIA ERROR YOU CAN TYPE IN A CONTROL CHARACTER
                        ; THAT DETERMINS WHAT THE BIOS AND BDOS WILL DO NEXT
                        ;
                        ; - CONTROL-C TO WARM BOOT (YOU GIVE UP ON ERROR)
                        ; - CONTROL-D TO IGNORE THE ERROR SO YOU CAN READ/WRITE
                        ;   'BAD' DATA AND CONTINUE ON WITHOUT A 'BDOS BAD SECTOR' MESSAGE
                        ; - <RETURN> TO RETRY THE OPERATION ANOTHER 12 TIMES
                        
   F2E0                 CRIN:   
   F2E0    CD F506              CALL    CONST           ;SEE IF KEY PRESSED
   F2E3    28FB                 JRZ     CRIN            ;IF NOT KEEP RINGING
   F2E5    CD F509              CALL    CONIN           ;GET CHAR
   F2E8    FE03                 CPI     3               ;A ^C (y/n)
   F2EA    CA EE6A              JZ      EEXIT           ;DO A WARM BOOT IF SO
   F2ED    FE04                 CPI     4               ;A ^D (y/n)
   F2EF    280D                 JRZ     FXER            ;IGNORE ERROR
   F2F1    FE0D                 CPI     13              ;SEE IF 'CR'
   F2F3    20EB                 JRNZ    CRIN            ;IF NOT TRY AGAIN
   F2F5    21 F9CF              LXI     H,MRML
   F2F8    35                   DCR     M
   F2F9    37                   STC
   F2FA    C8                   RZ
   F2FB    C3 F1DD              JMP     MAC             ;DO ANOTHER RE-TRY
                        
                        
                        ;IGNORE DISK I/O ERROR AND CONTINUE WITH STATUS SET O.K.
                        
   F2FE                 FXER:   
   F2FE    37                   STC                     ;FIX UP CARRY
   F2FF    3F                   CMC
   F300    AF                   XRA     A               ;CLEAR ERROR FLAG
   F301    C9                   RET
                        
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 25




                        ;********************************************************
                        ; SET VF2 CONTROL BYTE. GET 2 VF2 CONTROL BYTES, ONE
                        ; WITH THE HARDWARE WAIT BIT ACTIVE AND ONE WITHOUT,
                        ; FROM THE 8 POSSIBLE CONTROL BYTES. OUTPUT THE NO WAIT
                        ; BYTE. SAVE BOTH FOR LATER USE.
                        ;********************************************************
                        
   F302    3A F9B6      SETD3S: LDA     PTRACK          ;GET DESIRED TRACK
   F305    21 F9FD              LXI     H,OFF
   F308    BE                   CMP     M               ;USER TRACK(y/n)
   F309    21 F9F6              LXI     H,US0N          ;POINT TO USER TRACK BYTES
   F30C    3003                 JRNC    USER
   F30E    21 F9F2              LXI     H,SS0N          ;POINT TO SYSTEM TRACK BYTES
                        
   F311    3A F9B8      USER:   LDA     PSECT           ;TEST IF ON SIDE 1
   F314    CB7F                 BIT     7,A
   F316    2802                 JRZ     SID0            ;ON SIDE 0
   F318    23                   INX     H               ;POINT TO SIDE 1 BYTES
   F319    23                   INX     H
                        
   F31A    5E           SID0:   MOV     E,M             ;GET THE NO WAIT BYTE
   F31B    23                   INX     H
   F31C    56                   MOV     D,M             ;GET THE WAIT BYTE
   F31D    ED53 F9CB            SDED    D3SNO           ;SAVE BOTH
   F321    7B                   MOV     A,E
   F322    D353                 OUT     DCMD            ;OUTPUT THE NO WAIT BYTE
   F324    32 F9D4              STA     OD3S
   F327    C9                   RET
                        
                        
                        ;********************************************************
                        ; GET VF2 CONTROL BYTES. CREATE THE EIGHT VF2 CONTROL
                        ; BYTES IN ATABLE. THESE BYTES SET THE DENSITY BIT FOR
                        ; SYSTEM TRACKS AND USER TRACKS, SELECT SIDE 0 OR SIDE
                        ; 1, AND ENABLE OR DISABLE THE HARDWARE DATA WAIT.
                        ; CREATE THE BYTES BY MERGING THE APPROPRIATE HARDWARE
                        ; CONTROL BITS IN OPRTAB WITH THE CORRECT ADDRESS
                        ; CONTROL BITS IN ADRTAB.
                        ;********************************************************
                        
   F328    3A F9C2      GETD3S: LDA     ADISK           ;GET CURRENT DISK NUMBER
   F32B    21 EE4B              LXI     H,ADRTAB        ;POINT TO ADDRESS
   F32E    5F                   MOV     E,A             ;CONTROL BITS TABLE
   F32F    1600                 MVI     D,0
   F331    19                   DAD     D
   F332    4E                   MOV     C,M             ;SAVE ADDR BITS FOR VF2 BYTES
                        
   F333    3A F9FC              LDA     FLAG            ;GET THE FLAG
   F336    E614                 ANI     00010100B       ;ISOLATE SYSTEM DENSITY, SIZE
   F338    47                   MOV     B,A
   F339    0F                   RRC                     ;ALIGN THE DENSITY BIT
   F33A    B0                   ORA     B               ;COMBINE SIZE AND DENSITY
   F33B    E60C                 ANI     00001100B       ;DROP UNALIGNED BITS
   F33D    11 F9F2              LXI     D,SS0N          ;POINT TO BEGINNING OF DEST
   F340    CD F348              CALL    GET             ;GET SYSTEM TRACK VF2 BYTES






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 26




                        
   F343    3A F9FC              LDA     FLAG            ;GET THE FLAG
   F346    E60C                 ANI     00001100B       ;ISOLATE USER DENSITY, SIZE
                                                        ;AND GET USER TRACK VF2 BYTES
                        
   F348    21 EE3B      GET:    LXI     H,OPRTAB        ;POINT TO CONTROL BITS TABLE
   F34B    D5                   PUSH    D
   F34C    5F                   MOV     E,A             ;GET CONTROL BITS START ADDRESS
   F34D    1600                 MVI     D,0
   F34F    19                   DAD     D               ;START ADDRESS NOW IN HL
   F350    D1                   POP     D               ;DESTINATION RESTORED TO DE
   F351    0604                 MVI     B,4
   F353    7E           LOOP3:  MOV     A,M             ;GET A BYTE OF CONTROL BITS
   F354    23                   INX     H
   F355    B1                   ORA     C               ;COMBINE WITH ADDRESS BITS
   F356    12                   STAX    D               ;STORE COMBINED BYTE
   F357    13                   INX     D
   F358    10F9                 DJNZ    LOOP3           ;DO ALL BYTES
   F35A    C9                   RET
                        
                        ;********************************************************
                        ; WAIT FOR TRIM ERASE TO END. WAIT ONLY IF THE LAST
                        ; FLOPPY DISK COMMAND WAS A WRITE. CALLED ONLY IF
                        ; PHYSICAL HEAD MOTION IS NEEDED TO ACCESS THE NEXT
                        ; SECTOR. THE WAIT IS ABOUT 500 USEC AT 4 MHZ. THIS
                        ; ALLOWS TRIM ERASE TO COMPLETE BEFORE THE DRIVE IS
                        ; DESELECTED OR THE HEAD IS MOVED.
                        ;********************************************************
                        
   F35B    3A F9C5      TRIMWT: LDA     ORWCMD          ;GET LAST READ OR WRITE COMMAND
   F35E    CB6F                 BIT     WBWRIT,A        ;TEST WRITE BIT
   F360    C8                   RZ                      ;IT WAS A READ, DON'T WAIT
   F361    0696                 MVI     B,150           ;WAIT
   F363    10FE                 DJNZ    . 
   F365    C9                   RET
                        
                        
                        ;********************************************************
                        ;* MULTI-PURPOSE 179X SEEK SUBROUTINE. THE ENTRY
                        ;* POINTS ARE:
                        ;*
                        ;*      FHOME - RESTORE HEAD TO TRACK 0 POSITION
                        ;*      FSEEK - SEEK WITH HEAD LOAD TO DEST. IN ACC
                        ;*
                        ;*      FUNLD - SEEK SAME TRACK TO UNLOAD HEAD
                        ;*      FLOAD - SEEK SAME TRACK TO LOAD HEAD
                        ;*
                        ;* FOR THESE LAST TWO FUNCTIONS THE COMMAND IS STILL IN
                        ;* PROGRESS WHEN RETURN IS MADE. THE CALLING PROGRAM
                        ;* MUST WAIT FOR THE COMMAND TO COMPLETE.
                        ;*******************************************************
                        
   F366    0608         FHOME:  MVI     B,WHOME         ;SET UP HOME COMMAND
   F368    1804                 JMPR    FH
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 27




   F36A    D357         FSEEK:  OUT     WDATA           ;OUTPUT SEEK DESTINATION
   F36C    0618                 MVI     B,WSEEK         ;SET UP SEEK, DIFFERENT TRACK
                        
   F36E    3A F9FB      FH:     LDA     SPEED           ;GET SEEK SPEED
   F371    B0                   ORA     B               ;MERGE WITH SEEK COMMAND
   F372    D354                 OUT     WCMD            ;OUTPUT TO 179X
   F374    32 F9D5              STA     OCMD
   F377    CD F39D              CALL    FDONE
   F37A    E698                 ANI     WSSEEK          ;ELIMINATE UNWANTED STATUS BITS
                        
                        
                        ;********************************************************
                        ;    NOW GO IN A WAIT LOOP FOR HEAD SETTLE TIME
                        ;********************************************************
                        
   F37C    F5           SETL:   PUSH    PSW             ;SAVE FLAGS
                        
   F37D    3A F9C4              LDA     PCMD
   F380    CB6F                 BIT     5,A             ;SEE IF READ OR WRITE
   F382    2807                 JRZ     NDLY
                                
   F384    3E14                 MVI     A,20            ;WAIT 20 MS
   F386    10FE         SETL1:  DJNZ    SETL1           ;LOOP ON B REG
   F388    3D                   DCR     A               ;LOOP ON SETTLE VALUE
   F389    20FB                 JRNZ    SETL1
   F38B                 NDLY:
   F38B    F1                   POP     PSW             ;GET BACK REGS
   F38C    C8                   RZ                      ;RETURN - SUCCESSFUL 
   F38D    37                   STC
   F38E    C9                   RET                     ;RETURN WITH CARRY SET - ERROR
                        
   F38F    0610         FUNLD:  MVI     B,WUNLD         ;SET UP UNLOAD COMMAND
   F391    1802                 JMPR    FU
                        
   F393    0618         FLOAD:  MVI     B,WLOAD         ;SET UP LOAD COMMAND
                        
   F395    DB55         FU:     IN      WTRACK          ;GET CURRENT TRACK
   F397    D357                 OUT     WDATA           ;OUTPUT SEEK DESTINATION
                        
   F399    78                   MOV     A,B             ;OUTPUT SEEK COMMAND
   F39A    D354                 OUT     WCMD
   F39C    C9                   RET
                        
                        
                        ;********************************************************
                        ; 179X NOT BUSY SUBROUTINE. WAIT FOR 179X NOT BUSY.
                        ; THEN RETURN THE LAST STATUS READ FROM THE CHIP. THERE
                        ; ARE TWO ENTRY POINTS. FDONE DELAYS A SHORT WHILE TO
                        ; ALLOW THE 179X TO SET ITS BUSY BIT.
                        ; THIS ROUTINE TESTS FOR TYPE 1 AND TYPE 2
                        ; COMMAND COMPLETION. 
                        ;********************************************************
                        
   F39D                 FDONE:
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 28




   F39D    060A                 MVI     B,10            ;DELAY
   F39F    10FE                 DJNZ    .
   F3A1                 FQDONE:
   F3A1                 PIODON:
   F3A1    DB54                 IN      WSTAT
   F3A3    32 F9D2              STA     ISTAT
   F3A6    CB47                 BIT     WBBUSY,A
   F3A8    20F7                 JRNZ    PIODON
   F3AA    C9                   RET     
                                
                        
                        
                        ;********************************************************
                        ; FLOPPY DISK ERROR PRINT SUBROUTINE. ANY NON ZERO BITS
                        ; IN THE ACCUMULATOR ARE ERRORS. THE FIRST ONE FOUND IS
                        ; PRINTED OUT.
                        ;********************************************************
                        
   F3AB    57           EPRINT: MOV     D,A     ;SAVE ERROR BITS
   F3AC    79                   MOV     A,C     ;STORE CALLING ROUTINE ID
   F3AD    32 F9D3              STA     ACTIVE
   F3B0    DB55                 IN      WTRACK  ;STORE TRACK REGISTER
   F3B2    32 F9D0              STA     ITRACK
   F3B5    DB56                 IN      WSECT   ;STORE SECTOR REGISTER
   F3B7    32 F9D1              STA     ISECT
                        
   F3BA    CD F4B0              CALL    MSG
   F3BD    0D0A                 .BYTE   CR,LF
   F3BF    457272206F6E         .ASCIZ  \Err on \
   F3C7    3A F9B5              LDA     PDISK
   F3CA    C641                 ADI     'A'
   F3CC    4F                   MOV     C,A
   F3CD    CD EE0C              CALL    BIOOUT
   F3D0    CD F4B0              CALL    MSG
   F3D3    3A202000             .ASCIZ  \:  \
                        
   F3D7    CBCA                 SET     1,D     ;ENSURE NON ZERO ERROR BYTE
   F3D9    0600                 MVI     B,0
   F3DB    04           ..FIND: INR     B
   F3DC    CB12                 RALR    D       ;FIND FIRST NON ZERO BIT
   F3DE    30FB                 JRNC    ..FIND
   F3E0    21 F409              LXI     H,ERMESS ;POINT TO MESSAGE TABLE
   F3E3    1805                 JMPR    ..JOIN
   F3E5    7E           ..MORE: MOV     A,M     ;PUT MESSAGE CHAR IN A
   F3E6    A7                   ANA     A       ;SET FLAG BITS
   F3E7    23                   INX     H
   F3E8    20FB                 JRNZ    ..MORE  ;KEEP LOOKING FOR NULL TERMINATOR, THIS MSG
   F3EA    10F9         ..JOIN: DJNZ    ..MORE  ;KEEP LOOKING FOR CORRECT MSG
   F3EC    CD F4B6              CALL    MSGHL   ;PRINT OUT CORRECT MESSAGE
   F3EF    CD F4B0              CALL    MSG
   F3F2    2000                 .ASCIZ  \ \
                        
   F3F4    0607                 MVI     B,EILEN ;NUMBER OF ERROR INFO BYTES
   F3F6    21 F9D0              LXI     H,EINFO
   F3F9    CD F4B0      ..LOOP: CALL    MSG     ;SPACE BETWEEN BYTES






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 29




   F3FC    2000                 .ASCIZ  \ \
   F3FE    7E                   MOV     A,M
   F3FF    23                   INX     H
   F400    CD F43F              CALL    LBYTE   ;PRINT NEXT BYTE
   F403    10F4                 DJNZ    ..LOOP
                        
   F405    3E01                 MVI     A,1     ;CP/M ERROR FLAG
   F407    37                   STC             ;INTERNAL ERROR FLAG
   F408    C9                   RET
                        
                        ; FLOPPY DISK ERROR MESSAGES. USED BY THE EPRINT
                        ; ROUTINE TO TELL THE USER WHICH 179X ERROR OCCURED.
                        
   F409    4E6F74205265 ERMESS: .ASCIZ  \Not Ready\
   F413    577269746520         .ASCIZ  \Write Protect\
   F421    4661756C7400         .ASCIZ  \Fault\
   F427    524E4600             .ASCIZ  \RNF\
   F42B    426164204352         .ASCIZ  \Bad CRC\
   F433    4C6F73742044         .ASCIZ  \Lost Data\
   F43D    3F00                 .ASCIZ  \?\
                        
                        
                        ;********************************************************
                        ;            PRINT HEX BYTE ON CONSOLE.
                        ;********************************************************
                        
   F43F    F5           LBYTE:  PUSH    PSW
   F440    0F                   RRC
   F441    0F                   RRC
   F442    0F                   RRC
   F443    0F                   RRC
   F444    CD F448              CALL    P2
   F447    F1                   POP     PSW
   F448    E60F         P2:     ANI     0FH
   F44A    C690                 ADI     90H
   F44C    27                   DAA
   F44D    CE40                 ACI     40H
   F44F    27                   DAA
   F450    4F                   MOV     C,A
   F451    C3 EE0C              JMP     BIOOUT
                        
                        
                        ;********************************************************
                        ; MOVE ATABLE INTO THE CORRECT APB. MOVE THE CORRECT
                        ; APB INTO ATABLE.
                        ;********************************************************
                        
   F454    3A F9C2      PUTAPB: LDA     ADISK           ;GET CURRENT ATABLE NUMBER
   F457    CD F488              CALL    ASET            ;SET UP FOR MOVE
   F45A    EDB0                 LDIR                    ;COPY ATABLE INTO APB
   F45C    C9                   RET
                        
   F45D    21 F9C2      GETAPB: LXI     H,ADISK         ;POINT TO ATABLE DRIVE NUMBER
   F460    3A F9B5              LDA     PDISK           ;GET NEW NUMBER
   F463    BE                   CMP     M               ;THE SAME(y/n)






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 30




   F464    C8                   RZ                      ;YES, ATABLE ALREADY VALID
   F465    77                   MOV     M,A             ;UPDATE ATABLE NUMBER
   F466    CD F488              CALL    ASET            ;SET UP FOR MOVE
   F469    EB                   XCHG                    ;APB ADDRESS NOW SOURCE
   F46A    EDB0                 LDIR                    ;COPY APB INTO ATABLE
                        
                        ;NOW GET ALLOCATION SIZE FOR SELECTED DISK
                        
   F46C    3A F9B5              LDA     PDISK           ;GET DISK #
   F46F    5F                   MOV     E,A             ;MAKE INDEX
   F470    1600                 MVI     D,0
   F472    21 F9D7              LXI     H,ALOCSZ        ;POINT TO SAVED BSH TABLE
   F475    19                   DAD     D
   F476    7E                   MOV     A,M             ;GET BSH VALUE
   F477    21 F483              LXI     H,ALOREC        ;POINT TO RECORDS/ALLOCATION SIZE
   F47A    D603                 SUI     3               ;SET FOR INDEX
   F47C    5F                   MOV     E,A             ;MAKE INDEX
   F47D    19                   DAD     D
   F47E    7E                   MOV     A,M             ;GET RECORDS/ALLOCATION
   F47F    32 F9DB              STA     ALOCA           ;SAVE # FOR SELECTED DRIVE
                        
   F482    C9                   RET
                        
                        ;TABLE FOR # OF RECORDS FOR ALLOCATION SIZES FROM 1K TO 16K
                        
   F483                 ALOREC: 
   F483    0810204080           .BYTE   8,16,32,64,128
                        
                        
   F488    6F           ASET:   MOV     L,A             ;GET DISK NUMBER INTO L
   F489    CD F493              CALL    GETDPH
   F48C    21 F9F2              LXI     H,ATABLE
   F48F    01 0011              LXI     B,ALEN
   F492    C9                   RET
                        
                        
                        ;********************************************************
                        ; GET DPH ADDRESS AND APB ADDRESS. RETURN THE DPH
                        ; ADDRESS IN HL, THE CORRESPONDING APB ADDRESS IN DE.
                        ; DISK NUMBER MUST BE IN L AT CALL.
                        ;********************************************************
                        
   F493    2600         GETDPH: MVI     H,0
   F495    29                   DAD     H               ;GET NUMBER * 2
   F496    5D                   MOV     E,L
   F497    54                   MOV     D,H
   F498    29                   DAD     H
   F499    29                   DAD     H
   F49A    29                   DAD     H               ;GET NUMBER * 16
   F49B    19                   DAD     D               ;GET NUMBER * 18
   F49C    11 F50F              LXI     D,APBBEG
   F49F    19                   DAD     D               ;NOW WE HAVE ADDR OF APB ADDR
   F4A0    5E                   MOV     E,M             ;GET APB ADDRESS INTO DE
   F4A1    23                   INX     H
   F4A2    56                   MOV     D,M






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 31




   F4A3    23                   INX     H               ;HL NOW HAS DPH ADDRESS
   F4A4    C9                   RET
                        
                        
                        ;********************************************************
                        ;                  FATAL ERROR.
                        ;********************************************************
                        
   F4A5                 FATERR:
   F4A5    CD F4B0      QUIT:   CALL    MSG
   F4A8    2053545000                   .ASCIZ  ' STP'
   F4AD    C3 EE6A                      JMP     EEXIT           ;GO WARM BOOT
                        
                        ;********************************************************
                        ; MESSAGE OUTPUT SUBROUTINE. THERE ARE TWO ENTRY
                        ; POINTS. FOR MSG A MESSAGE FOLLOWS INLINE AFTER THE
                        ; CALL. FOR MSGHL THE MESSAGE ADDRESS IS IN HL. FOR
                        ; BOTH ENTRY POINTS THE MESSAGE IS PRINTED OUT UNTIL A
                        ; NULL TERMINATOR.
                        ;********************************************************
                        
   F4B0    E3           MSG:    XTHL                    ;GET MESSAGE ADDRESS
   F4B1    CD F4B6              CALL    MSGHL           ;PRINT THE MESSAGE
   F4B4    E3                   XTHL                    ;RESTORE NEW RETURN ADDRESS
   F4B5    C9                   RET
                        
   F4B6    4E           MSGHL:  MOV     C,M             ;GET CURRENT CHAR OF MESSAGE
   F4B7    79                   MOV     A,C
   F4B8    A7                   ANA     A
   F4B9    C8                   RZ                      ;NULL TERMINATOR, RETURN
   F4BA    CD EE0C              CALL    BIOOUT          ;OUTPUT THE CHAR
   F4BD    23                   INX     H               ;POINT TO NEXT CHAR
   F4BE    18F6                 JMPR    MSGHL           ;KEEP GOING
                        
                        ;********************************************************
                        ; I/O Routines: these routines implement the various
                        ; destinations selectable through the IOBYTE. By default,
                        ; only TTY is implemented, everything else falls through
                        ; to TTY. Expand and implement for custom IOBYTE options.
                        ;********************************************************
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;Unimplemented status routines
                        ;
                        ;pre: I/O devices are already initialized
                        ;post: return with 0 in A if no char available
                        ;post: return with 0xFF in A if char available
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   F4C0                 UC1IS:                          ;NOT IMPLEMENTED
   F4C0                 BATIS:                          ;NOT IMPLEMENTED
   F4C0                 CRTIS:                          ;NOT IMPLEMENTED
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;TTYIS -- TTY Status Routine
                        ;






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 32




                        ;pre: TTY device is initialized
                        ;post: return with 0 in A if no char available
                        ;post: return with 0xFF in A if char available
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   F4C0                 TTYIS:
   F4C0    3E00                 MVI     A,KBSTAT
   F4C2    4F                   MOV     C,A
   F4C3    3E02                 MVI     A,KIN
   F4C5    5F                   MOV     E,A
   F4C6    ED78                 INP     A
   F4C8    00                   NOP
                        ;       CMA FOR NEGATIVE LOGIC
   F4C9    00                   NOP
   F4CA    A3                   ANA     E
   F4CB    00                   NOP
   F4CC    00                   NOP
   F4CD    C8                   RZ                      ;RETURN FALSE IF UNAVAILABLE
   F4CE    00                   NOP
   F4CF    00                   NOP
   F4D0    3EFF                 MVI     A,0FFH
   F4D2    C9                   RET                     ;RETURN TRUE
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;Unimplemented input routines
                        ;
                        ;pre: I/O devices are already initialized
                        ;post: return with character from device in A register
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   F4D3                 UC1IN:                          ;NOT IMPLEMENTED
   F4D3                 BATIN:                          ;NOT IMPLEMENTED
   F4D3                 CRTIN:                          ;NOT IMPLEMENTED
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;TTYIN -- Get a character from the TTY device
                        ;
                        ;pre: TTY device is initialized
                        ;post: return with character from device in A register,
                        ;      strips parity
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   F4D3    CD F4C0      TTYIN:  CALL    TTYIS           ;GET STATUS
   F4D6    CA F4D3              JZ      TTYIN           ;WAIT UNTIL DATA AVAILABLE
   F4D9    3E01                 MVI     A,KBIO
   F4DB    4F                   MOV     C,A
   F4DC    ED78                 INP     A
   F4DE    00                   NOP
   F4DF    00                   NOP
   F4E0    E67F                 ANI     07FH            ;DROP PARITY
   F4E2    C9                   RET
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;TTYOS -- TTY output status
                        ;
                        ;pre: TTY device is initialized
                        ;post: return with 0 in A if not ready to transmit
                        ;post: return with 0xFF in A if ready to transmit






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 33




                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   F4E3                 TTYOS:
   F4E3    C5                   PUSH    B
   F4E4    3E00                 MVI     A,CSTAT
   F4E6    4F                   MOV     C,A
   F4E7    3E04                 MVI     A,COUT
   F4E9    5F                   MOV     E,A
   F4EA    ED78                 INP     A
                        ;       CMA FOR NEGATIVE LOGIC
   F4EC    00                   NOP
   F4ED    00                   NOP
   F4EE    A3                   ANA     E
   F4EF    C1                   POP     B
   F4F0    C8                   RZ                      ;RETURN FALSE IF NOT EMPTY
   F4F1    00                   NOP
   F4F2    00                   NOP
   F4F3    3EFF                 MVI     A,0FFH
   F4F5    C9                   RET                     ;RETURN TRUE
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;Unimplemented output routines
                        ;
                        ;pre: I/O devices are already initialized
                        ;post: character in C output to device
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   F4F6                 UC1OUT:                         ;NOT IMPLEMENTED
   F4F6                 BATOUT:                         ;NOT IMPLEMENTED
   F4F6                 CRTOUT:                         ;NOT IMPLEMENTED
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;TTYOUT -- output character to TTY
                        ;
                        ;pre: I/O devices are already initialized
                        ;post: character in C output to TTY
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   F4F6                 TTYOUT:
   F4F6    CD F4E3              CALL    TTYOS           ;GET STATUS
   F4F9    CA F4F6              JZ      TTYOUT          ;WAIT UNTIL BUFFER EMPTY
   F4FC    59                   MOV     E,C
   F4FD    3E01                 MVI     A,CIO
   F4FF    4F                   MOV     C,A
   F500    7B                   MOV     A,E
   F501    00                   NOP
   F502    00                   NOP
   F503    ED79                 OUTP    A               ;OUTPUT THE DATA
   F505    C9                   RET
                        
                        ;********************************************************
                        ; I/O Routines for IOBYTE Vectored Devices
                        ;
                        ; These routines deal with IOBYTE vectored devices. By
                        ; default, these are not implemented and fall through
                        ; to the console routines. With the default IOBYTE
                        ; implementation, everything uses the TTY.
                        ;********************************************************






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 34




                        
   F506                 LISTST:                         ;NOT IMPLEMENTED
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;CONST -- Get the console status for the selected IOBYTE
                        ;         device
                        ;
                        ;pre: I/O devices are already initialized
                        ;pre: IOBYTE is at 0x0003 and initialized
                        ;post: status check is handed off to selected device
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   F506                 CONST:  
   F506    C3 F4C0              JMP     TTYIS   
                        
                        
   F509                 READER:                         ;NOT IMPLEMENTED
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;CONIN -- Get a byte from the console device selected by
                        ;         the current IOBYTE
                        ;
                        ;pre: I/O devices are already initialized
                        ;pre: IOBYTE is at 0x0003 and initialized
                        ;post: data request is handed off to selected device
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   F509                 CONIN:  
   F509    C3 F4D3              JMP     TTYIN
                        
   F50C                 LIST:                           ;NOT IMPLEMENTED
   F50C                 PUNCH:                          ;NOT IMPLEMENTED
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;CONIN -- Send a byte from the console device selected by
                        ;         the current IOBYTE
                        ;
                        ;pre: I/O devices are already initialized
                        ;pre: IOBYTE is at 0x0003 and initialized
                        ;post: data request is handed off to selected device
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   F50C                 CONOUT:
   F50C    C3 F4F6              JMP     TTYOUT
                        
                        ;********************************************************
                        ; FLOPPY DISK DPH TABLE. FOR THE CONVENIENCE OF THE
                        ; CBIOS THE APB ADDRESS FOR A DISK PRECEDES THE DPH
                        ; FOR THE DISK.
                        ;********************************************************
                        
   F50F                 APBBEG: 
   F50F    FA06                 .WORD   APB0
   F511    FA26                 .WORD   TRANS0          ;LOGICAL TO PHYSICAL XLATE TAB
   F513    0000                 .WORD   0               ;SCRATCH
   F515    0000                 .WORD   0
   F517    0000                 .WORD   0
   F519    FBE6                 .WORD   DIRBUF          ;DIRECTORY BUFFER






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 35




   F51B    FA17                 .WORD   DPB0            ;DISK PARAMETER BLOCK
   F51D    FCD2                 .WORD   CSV0            ;CHECKSUM VECTOR
   F51F    FC66                 .WORD   ALV0            ;ALLOCATION VECTOR
                        
   F521    FA7E                 .WORD   APB1
   F523    FA9E                 .WORD   TRANS1
   F525    0000                 .WORD   0
   F527    0000                 .WORD   0
   F529    0000                 .WORD   0
   F52B    FBE6                 .WORD   DIRBUF
   F52D    FA8F                 .WORD   DPB1
   F52F    FD7E                 .WORD   CSV1
   F531    FD12                 .WORD   ALV1
                        
   F533    FAF6                 .WORD   APB2
   F535    FB16                 .WORD   TRANS2
   F537    0000                 .WORD   0
   F539    0000                 .WORD   0
   F53B    0000                 .WORD   0
   F53D    FBE6                 .WORD   DIRBUF
   F53F    FB07                 .WORD   DPB2
   F541    FE2A                 .WORD   CSV2
   F543    FDBE                 .WORD   ALV2
                        
   F545    FB6E                 .WORD   APB3
   F547    FB8E                 .WORD   TRANS3
   F549    0000                 .WORD   0
   F54B    0000                 .WORD   0
   F54D    0000                 .WORD   0
   F54F    FBE6                 .WORD   DIRBUF
   F551    FB7F                 .WORD   DPB3
   F553    FED6                 .WORD   CSV3
   F555    FE6A                 .WORD   ALV3
                        
                        
                        ;********************************************************
                        ; STANDARD APBS, DPBS AND TRANSLATE TABLES. THESE
                        ; TABLES ARE USED BY SELDSK WHEN IT CANNOT FIND A VALID
                        ; DDB ON THE DISK. THE TABLES ARE FOR STANDARD 8" OR 5"
                        ; SINGLE DENSITY FLOPPY DISKS. THIS ALLOWS PROGRAM
                        ; INTERCHANGE WITH OTHER CP/M BASED SYSTEMS WITHOUT
                        ; REQUIRING A DDB TO BE WRITTEN ON EACH DISK.
                        ;********************************************************
                        
                        ;********************************************************
                        ;             8" FLOPPY DISK TABLES.
                        ;********************************************************
                        
   F557                 STDDDB: 
   F557    01                   .BYTE   00000001B       ;FLAG
   F558    0002                 .WORD   2               ;OFF
   F55A    00                   .BYTE   0               ;SSLEN
   F55B    1A                   .BYTE   26              ;SLRPS
   F55C    00                   .BYTE   0               ;USLEN
   F55D    1A                   .BYTE   26              ;ULRPS






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 36




                        
   F55E    001A                 .WORD   26              ;STANDARD DPB
   F560    030700               .BYTE   3,7,0
   F563    00F2                 .WORD   242
   F565    003F                 .WORD   63
   F567    C000                 .BYTE   192,0
   F569    0010                 .WORD   16
   F56B    0002                 .WORD   2
                        
   F56D    01070D131905         .BYTE   1,7,13,19,25,5,11,17,23
   F576    03090F150208         .BYTE   3,9,15,21,2,8,14,20,26
   F57F    060C1218040A         .BYTE   6,12,18,24,4,10,16,22
                        
                        
                        
                        ;********************************************************
                        ;            5" FLOPPY DISK TABLES.
                        ;********************************************************
                        
                        
   F587    05           ALTDDB: .BYTE   00000101B       ;FLAG
   F588    0003                 .WORD   3               ;OFF
   F58A    00                   .BYTE   0               ;SSLEN
   F58B    12                   .BYTE   18              ;SLRPS
   F58C    00                   .BYTE   0               ;USLEN
   F58D    12                   .BYTE   18              ;ULRPS
                        
   F58E    0012                 .WORD   18              ;STANDARD DPB
   F590    030700               .BYTE   3,7,0
   F593    0047                 .WORD   71
   F595    003F                 .WORD   63
   F597    C000                 .BYTE   192,0
   F599    0010                 .WORD   16
   F59B    0003                 .WORD   3
                        
   F59D    0105090D1103         .BYTE   1,5,9,13,17,3,7,11,15
   F5A6    02060A0E1204         .BYTE   2,6,10,14,18,4,8,12,16
                        
                        ;********************************************************
                        ;       SECTOR READ AND WRITE BUFFERS.
                        ;********************************************************
                        
                        ; THE ORIGINAL CBIOS HAD INDEPENDENT READ AND WRITE BUFFERS.
                        ; BOHDAN COULDN'T WORK WITH THE DRI SINGLE BUFFER ALGORITHM,
                        ; SO HE LIMITED SECTOR SIZES TO 512 BYTES, AND HAD THESE LOCAL
                        ; READ AND WRITE BUFFERS. THAT WAY HE COULD IGNORE ANY 
                        ; ALLOCATION BLOCK-SIZE FLAGGING THAT BDOS PROVIDED.
                        ; B. JONES IMPLEMENTED THE DRI DEBLOCKING, COMBINED
                        ; RDBUFF & WRBUFF TO GIVE 1024 BYTE SECTOR SUPPORT.
                        ; RDBUFF & WRBUFF REFERANCES ARE STILL TO BE FOUND
                        ; IN THE PHYSICAL R/W CODE. THEY HAVE BEEN KEPT AS
                        ; FOSILS TO MARK THE ORIGINAL BUFFERING SCHEME.
                        
   F5AF                 HSTBUF:
   F5AF                 RDBUFF:






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 37




   F5AF                 WRBUFF:
   F5AF                 SYSNIT:
                        
                        ; SYSNIT CODE IS DISCARDED AFTER USE.
                        
   F5AF    CD F4B0      SIGNON: CALL    MSG
   F5B2    0D0A0A               .BYTE   CR,LF,LF
   F5B5    446967697461         .ASCII  'Digital Research CP/M 2.2 '
                        
   F5CF    3634                 .BYTE   (MSIZ)/10+'0',(MSIZ) @10+'0'
   F5D1    4B2F                 .ASCII  'K/'
                        
   F5D3    3536                 .BYTE (((BDOS-6)/1024)/10)+'0',((BDOS-6)/1024) @10+'0'
   F5D5    4B20545041           .ASCII  'K TPA'
   F5DA    0D0A                 .BYTE   CR,LF
                        
   F5DC    0D0A                 .BYTE   CR,LF
   F5DE    413A20262042         .ASCII  'A: & B: = 8" SDSS Floppies, C: = 5" DDDS Floppy'
   F60D    0D0A                 .BYTE   CR,LF
   F60F    5573696E6720         .ASCII  'Using a VersaFloppy II Board with a WD FD1791.'
   F63D    0D0A                 .BYTE   CR,LF
   F63F    0D0A00               .BYTE   CR,LF,00H
                        
   F642    C9                   RET
                        
   0094                         NITLEN  ==      .-SYSNIT
                        
   F643                 BIOEND:
                        
                        ;********************************************************
                        ;        SHOW HOW MUCH DISK SPACE IS LEFT
                        ;********************************************************
                        
                        ;TOTAL BYTE NEEDED ON BOOT TRACKS ARE
                        ;FROM CCP TO END OF BIOS CODE PLUS LODER + DDB
                        
   1F43                 TOTSIZ  ==      ((BIOEND-CCP)+128+128)
                        
                        ;SYSTEM SECTORS USED
                        
   000F                 SECUSD  ==      TOTSIZ/512
   1E00                 SECIS   ==      SECUSD*512
                        
                                .IFG    TOTSIZ-SECIS,[
   0010                         SECALL=SECUSD+1
                                ][
                                SECALL=SECUSD
                                ]
                        
                        
                        
                                .IFG    (.-BIOS)-(NSBIOS*128),[
                                .PRNTX  \BIOS EXCEEDS DISK SPACE \
                                ]
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 38




                        
                                .DEFINE SBOND[XX]=[.PRNTX /XX BYTES OF SYSTEM TRACKS LEFT/
                                ]
                                .DEFINE SBOD[XX]=[.PRNTX /XX BYTES BEYOND SYSTEM TRACKS/
                                ]       
                        
                                .DEFINE TSIZE[XX]=[
                                .PRNTX  /XX BYTES TOTAL BOOT TRACKS SPACE NEEDED /      ]
                        
                        
                                .DEFINE SECNED[XX]=[
                                .PRNTX  /XX   OF 18, 512 BYTE SECTORS USED ON SYSTEM TRACKS /]
                        
                                .IF1,[
                                .IFG    (NSBIOS*128)-(.-BIOS),[
                                SBOND   \(NSBIOS*128)-(.-BIOS)
                                TSIZE   \TOTSIZ
                                .RADIX  10
                                SECNED  \SECALL
                                ][
                                SBOD    \(.-BIOS)-(NSBIOS*128)
                                ]
                                ]
                        
                        ;********************************************************
                        ; END OF BIOS INSTRUCTIONS AND CONSTANTS. BEGINNING
                        ; OF WORK AREA.
                        ;********************************************************
                        
                        ; 1024 BYTE HOST BUFFER ENDS HERE       
                        
   F9AF                         .LOC    HSTBUFF+1024
                        
                        ;********************************************************
                        ; CP/M CALL PARAMETER STORAGE. CP/M SETS THE LOGICAL
                        ; PARAMETERS BY PRELIMINARY CALLS BEFORE CALLING THE
                        ; READ OR WRITE ROUTINES. THE CP/M I/O ROUTINES SET
                        ; AND USE THE REMAINING VARIABLES.
                        ;********************************************************
                        
   F9AF                 DMAFLG: .BLKB   1               ;CONTROLLER TYPE FLAG   
   F9B0                 SEKSEC: .BLKB   2               ;LOGICAL SECTOR TO R/W
   F9B2                 DMAADD: .BLKB   2               ;LOGICAL & ACTUAL CP/M DMA ADDR
   F9B4                 CREC:   .BLKB   1               ;CURRENT RECORD WITHIN SECTOR
                        
                        
                        ;********************************************************
                        ; PHYSICAL DISK I/O PARAMETER STORAGE. THESE PARAMETERS
                        ; MUST BE SET BEFORE CALLING THE FLOPPY DISK PHYSICAL
                        ; READ OR WRITE ROUTINES.
                        ;********************************************************
                        
   F9B5                 PDISK:  .BLKB   1               ;PHYSICAL DISK FOR NEXT I/O
   F9B6                 PTRACK: .BLKB   2               ;PHYSICAL TRACK FOR NEXT I/O
   F9B8                 PSECT:  .BLKB   2               ;PHYSICAL SECTOR FOR NEXT I/O






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 39




   F9BA                 PDMA:   .BLKB   2               ;PHYSICAL BUFFER ADDR, NEXT I/O
                        
   F9BC                 CTRACK: .BLKB   2
   F9BE                 CSECT:  .BLKB   2
                        
                        
                        
                        ;********************************************************
                        ;    GENERAL PURPOSE VARIABLES ARE STORED HERE.
                        ;********************************************************
                        
   F9C0                 RETRY:
   F9C0                 RMICRO: .BLKB   1               ;MICRO FDC RETRY COUNT
   F9C1                 RMACRO: .BLKB   1               ;MACRO FDC RETRY COUNT
   F9C2                 ADISK:  .BLKB   1               ;DISK NUMBER OF DISK AT ATABLE
   F9C3                 OLDFLO: .BLKB   1               ;OLD FLOPPY DRIVE NUMBER
   F9C4                 PCMD:   .BLKB   1               ;ACTUAL FLOPPY READ/WRITE CMD
   F9C5                 ORWCMD: .BLKB   1               ;LAST R/W OUTPUT TO CMD REG
   F9C6                 DPHADR: .BLKB   2               ;DPH ADDRESS FOR CURRENT DISK
   F9C8                 APBADR: .BLKB   2               ;APB ADDRESS FOR CURRENT DISK
   F9CA                 WRTYPE: .BLKB   1               ;TYPE OF WRITE
   F9CB                 D3SNO:  .BLKB   1               ;CURRENT NO WAIT VF2 BYTE
   F9CC                 D3SWT:  .BLKB   1               ;CURRENT WAIT VF2 BYTE
   F9CD                 SAVADR: .BLKB   2               ;STD OR ALT DDB ADDRESS
   F9CF                 MRML:   .BLKB   1               ;MACRO RETRY MAJOR LOOP
                        
                        
                        ;********************************************************
                        ; ERROR INFORMATION STORAGE. VARIOUS ROUTINES USE THIS
                        ; AREA TO STORE KEY VARIABLES RELATING TO THE VF2
                        ; CONTROLLER AND THE 179X CHIP. 
                        ;********************************************************
                        
   F9D0                 EINFO:
   F9D0                 ITRACK: .BLKB   1               ;LAST INPUT FROM TRACK REG
   F9D1                 ISECT:  .BLKB   1               ;LAST INPUT FROM SECTOR REG
   F9D2                 ISTAT:  .BLKB   1               ;LAST INPUT FROM STATUS REG
   F9D3                 ACTIVE: .BLKB   1               ;SHOWS WHICH ROUTINE HAD ERROR
   F9D4                 OD3S:   .BLKB   1               ;LAST OUTPUT TO VF2 CTRL BYTE
   F9D5                 OCMD:   .BLKB   1               ;LAST OUTPUT TO CMD REG
   F9D6                 SIDEID: .BLKB   1               ;LAST SIDE SELECTED
                        
   0007                 EILEN   ==      .-EINFO
                        
                        
                        
                        ;********************************************************
                        ;*   ALLOCATION VALUES FOR SELECTED DISKS ARE NEXT
                        ;********************************************************
                        
   F9D7                 ALOCSZ: .BLKB   4               ;BSH VALUE FOR 4 DRIVES
   F9DB                 ALOCA:  .BLKB   1               ;RECORDS/BLOCK FOR SELECTED DRIVE
                        
                                ;UNALLOCATED PARAMETERS FOLLOW
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 40




                        
   F9DC                 UNACNT: .BLKB   1               ;UNALLOCATED RECORD COUNT
                        
   F9DD                 UNADSK: .BLKB   1               ;      "     DISK #     
   F9DE                 UNATRK: .BLKB   2               ;      "     TRACK #
   F9E0                 UNASEC: .BLKB   2               ;      "     SECTOR #
                        
   F9E2                 NEWSEC: .BLKB   2               ;CP/M SET SECTOR
                        
   F9E4                 RSFLAG: .BLKB   1               ;READ SECTOR FLAG
   F9E5                 READOP: .BLKB   1               ;READ = 0, WRITE = 1
   F9E6                 HSTACT: .BLKB   1               ;0 = HOST NOT ACTIVE
   F9E7                 HSTWRT: .BLKB   1               ;HOST WRITTEN FLAG
                        
                        
   F9E8                 HSTDSK: .BLKB   1
   F9E9                 HSTTRK: .BLKB   2
   F9EB                 HSTSEC: .BLKB   2
                        
   F9ED                 SEKDSK: .BLKB   1
   F9EE                 SEKTRK: .BLKB   2
   F9F0                 SEKHST: .BLKB   2
                        
   0016                         UNALEN  ==      .-UNACNT
                        
                        
                        ;********************************************************
                        ; APB COPY FOR CURRENT DISK. THE APB CONTAINS SEVERAL
                        ; IMPORTANT BYTES NEEDED TO CONTROL THE ACTIVE DISK
                        ; DRIVE. THE EXACT LENGTH AND ORDERING OF THESE ENTRIES
                        ; IS CRITICAL, SO CHANGES MUST BE MADE WITH CARE. ONLY
                        ; THE FLAG BYTE HAS ANY MEANING FOR A HARD DISK.
                        ;********************************************************
                        
   F9F2                 ATABLE:
   F9F2                 SS0N:   .BLKB   1               ;SYSTEM TRACK VF2 CONTROL BYTES
   F9F3                 SS0W:   .BLKB   1
   F9F4                 SS1N:   .BLKB   1
   F9F5                 SS1W:   .BLKB   1
   F9F6                 US0N:   .BLKB   1               ;USER TRACK VF2 CONTROL BYTES
   F9F7                 US0W:   .BLKB   1
   F9F8                 US1N:   .BLKB   1
   F9F9                 US1W:   .BLKB   1
   F9FA                 TRACK:  .BLKB   1               ;CURRENT TRACK
   F9FB                 SPEED:  .BLKB   1               ;DRIVE SEEK SPEED
   F9FC                 FLAG:   .BLKB   1               ;FLAG BYTE
   F9FD                 OFF:    .BLKB   2               ;NUMBER OF SYSTEM TRACKS
   F9FF                 SSLEN:  .BLKB   1               ;SECTOR LENGTH, SYSTEM
   FA00                 SLRPS:  .BLKB   1               ;RECORDS PER SIDE, SYS TRACKS
   FA01                 USLEN:  .BLKB   1               ;SECTOR LENGTH, USER TRACKS
   FA02                 ULRPS:  .BLKB   1               ;RECORDS PER SIDE, USER TRACKS
                        
   0011                 ALEN    ==      .-ATABLE        ;ATABLE LENGTH
                        
   FA03                 CHKRDS: .BLKB   1               ;READ CHECK RETRIES






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 41




   FA04                 DEDMA:  .BLKB   2               ;DE FOR DMA OP.
                        
                        
                        ;********************************************************
                        ; FLOPPY DISK APBS, DPBS AND TRANSLATE TABLES. THE APB
                        ; FOR EACH DRIVE IS HERE, FOLLOWED BY THE DPB, FOLLOWED
                        ; BY THE TRANSLATE TABLE. EXTERNAL ROUTINES NEEDING TO
                        ; ACCESS THE APB ASSUME THAT IT IMMEDIATELY PRECEDES
                        ; THE DPB.
                        ;********************************************************
                        
   FA06                 APB0:   .BLKB   ALEN            ;AUXILIARY PARAMETER BLOCK
   FA17                 DPB0:   .BLKB   15              ;DISK PARAMETER BLOCK
                        
   000F                 DPBLEN  ==      .-DPB0
                        
   FA26                 TRANS0: .BLKB   88              ;TRANSLATE TABLE
                        
   0058                 TRALEN  ==      .-TRANS0
   0078                 APBDIS  ==      .-APB0
                        
                        
   FA7E                 APB1:   .BLKB   ALEN
   FA8F                 DPB1:   .BLKB   15
   FA9E                 TRANS1: .BLKB   88
                        
                        
   FAF6                 APB2:   .BLKB   ALEN
   FB07                 DPB2:   .BLKB   15
   FB16                 TRANS2: .BLKB   88
                        
                        
   FB6E                 APB3:   .BLKB   ALEN
   FB7F                 DPB3:   .BLKB   15
   FB8E                 TRANS3: .BLKB   88
                        
                        
                        
                        
                        ;********************************************************
                        ; CP/M WORK AREA. USED BY CP/M FOR DIRECTORY
                        ; OPERATIONS, FLOPPY DISK ALLOCATION VECTORS,
                        ; AND FLOPPY DISK CHANGED DISK CHECKSUMS.
                        ;********************************************************
                        
   FBE6                 DIRBUF: .BLKB   128             ;DIRECTORY OPERATION BUFFER
                        
   FC66                 ALV0:   .BLKB   108             ;ALLOCATION VECTOR
   FCD2                 CSV0:   .BLKB   64              ;CHECKSUM VECTOR
                        
   FD12                 ALV1:   .BLKB   108
   FD7E                 CSV1:   .BLKB   64
                        
                        
   FDBE                 ALV2:   .BLKB   108






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 42




   FE2A                 CSV2:   .BLKB   64
                        
   FE6A                 ALV3:   .BLKB   108
   FED6                 CSV3:   .BLKB   64
                        
   FF16                 LASLOC:
   0967                 WRKSP   ==      .-HSTBUF
                        
                        ; END OF WORK AREA.
                        
   3180                 OFFST   ==      1F80H -BIOS
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ;The following assembler directives give important
                        ;information about the size and location of the BIOS
                        ;after assembly. In particular, the printout will warn if
                        ;the BIOS Is too large for the allocated space (default 
                        ;3K). You will need the BIOS OFFSET and MOVCPM VALUE.
                        ;
                        ;The biggest change from the original is that we no 
                        ;longer have a console I/O parameters table, so there is
                        ;no need to print its location.
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        
                                .IF1,[
                        
                        
                                .DEFINE BADMEM[XX]=[
                                .PRNTX  / !! ** BIOS EXCEEDS MEMORY SIZE BY XX BYTES, SET 'BIOSIZ' LARGER ** !!/        ]
                        
                                .DEFINE OKMEM[XX]=[
                                .PRNTX  /XX   BYTES OF MEMORY LEFT BY BIOS/     ]
                        
                                .DEFINE SBIOS[XX]=[
                                .PRNTX  /XX IS START OF BIOS/                   ]
                        
                                .DEFINE LASTM[XX]=[
                                .PRNTX  /XX IS LAST LOCATION USED/              ]
                        
                                .DEFINE BDOSL[XX]=[
                                .PRNTX  /XX IS START OF BDOS/                   ]
                        
                                .DEFINE CCPL[XX]=[
                                .PRNTX  /XX IS START OF CCP/                    ]
                        
                                .DEFINE LEFMEM[XX]=[
                                .PRNTX  /XX IS 1st FREE ADDRESS AFTER BIOS/     ]
                        
                                .DEFINE WORKSP[XX]=[
                                .PRNTX  /XX BYTES IS WORKSPACE USED BY BIOS/]
                        
                                .DEFINE OFFSET[XX]=[
                                .PRNTX  /XX IS BIOS OFFSET /                    ]
                        
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 43




                                .DEFINE MOVCPM[XX]=[
                                .PRNTX  /XX   IS MOVCPM VALUE /                 ]
                        
                                .DEFINE CODEND[XX]=[
                                .PRNTX  /XX IS LAST BIOS RUNTIME CODE OR STATIC DATA LOCATION /]
                        
                                .DEFINE WRKEND[XX]=[
                                .PRNTX  /XX IS END OF DISCARDED INITIALIZATION CODE /   ]
                        
                                .IFG    (.-BIOS)-(6*256+BIOSIZ*1024),[
                        
                                BADMEM  \((.-BIOS)-(6*256+BIOSIZ*1024))
                        
                                .RADIX  16
                                CCPL    \CCP
                                BDOSL   \BDOS
                                SBIOS   \BIOS
                                CODEND  \HSTBUF-1
                                WRKEND  \BIOEND
                                .RADIX  10
                                WORKSP  \WRKSP
                                .RADIX  16
                                LASTM   \.-1
                                LEFMEM  \.
                                OFFSET  \OFFST
                                .RADIX  10
                                MOVCPM  \MOVEIT
                        
                                        ][
                        
                                OKMEM   \ (MSIZ*1024)-LASLOC
                        
                        
                                .RADIX  16
                                CCPL    \CCP
                                BDOSL   \BDOS
                                SBIOS   \BIOS
                                CODEND  \HSTBUF-1
                                WRKEND  \BIOEND
                                .RADIX  10
                                WORKSP  \WRKSP
                                .RADIX  16
                                LASTM   \.-1
                                LEFMEM  \.
                                OFFSET  \OFFST
                                .RADIX  10
                                MOVCPM  \MOVEIT
                        
                        
                                        ]
                                        ]
                        
                        
                        
                        






TDL Z80 CP/M DISK ASSEMBLER VERSION 2.21                                                                                   PAGE 44




                        
                                .END
























































                                                          