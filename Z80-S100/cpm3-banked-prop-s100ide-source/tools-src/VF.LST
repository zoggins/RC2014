Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   1
VF      Z80

    1                   ;  THIS IS A PROGRAM TO EXAMINE & FORMAT CPM DISKS USEING A VERSAFLOPPY II DISK 
    2                   ;  CONTROLLER. NOTE IT IS SELF A CONTAINED PROGRAM (EXCEPT FOR CONSOLE I/O)
    3                   ;
    4                   ; It is a completely new Diagnostic program and utilizes a new set of core BIOS
    5                   ; like functions that can easily be adapted for CPM+ etc. It does not utilze
    6                   ; any of the old SD_Systems BIOS/Diagnostic code (which I found to be convoluted, difficult 
    7                   ; to modify and specific for a few disk formats). This program utilizes a disk parameter
    8                   ; table driven approach for many common 8" & 5" formats. Others can be easily added.
    9                   ; It works with both the 1791 & 1795 chips (Set the EQU's below). 
   10                   ;
   11                   ; The program requires a Z80 CPU and utilizes the marvelous Z80 assembler (ZASMB) written 
   12                   ; by P.F Ridler in 1984. See (http://retrotechnology.com/herbs_stuff/s_sd.html#other) 
   13                   ; on Herbs site. The assembler here was setup to take long label names (see the docs). 
   14                   ; However most common Z80 assemblers should work, with minor changes to a few lines of code.
   15                   ; ZASMB allows the use uses a few more logical OP codes that Zilog left out 
   16                   ; (eg CP A,20H rather than CP 20H). This assembler is extremely fast and generates 
   17                   ; direct .com code. It does however have limited ifdef etc options.
   18                   ;
   19                   ;
   20                   ;	JOHN MONAHAN	(monahan@vitasoft.org)	27/4/2009	VERSION	1.0
   21                   ;
   22                   ;	V0.1	Basic Sector ID field working
   23                   ;	V0.2	Seek test jumpy
   24                   ;	V0.3	Seek done, before read sector core stuff
   25                   ;	V0.5	Sector read OK for 8" SD
   26                   ;	V0.7	Sector Read blanked out menu, itself OK. Seek redone.
   27                   ;	V0.8	Reading 128 byte sectors with my READ_SECTOR routine OK
   28                   ;	V0.9	Block read for sectors
   29                   ;	V0.10	Start of Formatting OK
   30                   ;	V0.11	Filled in comments of formatting
   31                   ;	V0.12	Start of sector track write image display
   32                   ;	V0.14	Fixed abort etc. Sec formatting display working, ESC to stop display 
   33                   ;	V0.15	Sec ID errors on display. general cleanup of abort stuff
   34                   ;	V0.16	Variable sec size display. Second side not working
   35                   ;	V0.17	Second side working before splitting UNIT into two sections (Hardware & Software)
   36                   ;	V0.18	New format using IO_BYTE and IX pointer to tables for disk/drive info.
   37                   ;	V0.19	Before simplifying moving IO_BYTE data to Disk paramater table
   38                   ;	V0.20	Start of HW_BYTE in disk paramater table. No format yet.
   39                   ;	V0.21	8" format done with new layout.
   40                   ;	V0.22	Before New Format Routine & Tables
   41                   ;	V0.24	Before switching to my memory track build routines
   42                   ;	V0.25	My track image not working yet
   43                   ;	V0.27	Software SD Track (no sides) working. No hardware yet
   44                   ;	V0.28	8" format (CPM cannot read it). Cannot access 5" drives
   45                   ;	V0.29	Straightened our 5". (DW in table). Still CPM read problem
   46                   ;	V0.30	Start of track dump SD 8" Format now working
   47                   ;	V0.31	Cleaned up seek no verify functions to one general function
   48                   ;	V0.33	Seems to be working now
   49                   ;	V0.34	Random sector read test working (write not done yet)
   50                   ;	V0.35	Start or read sec & seek error returns. Have seperate flag on CMD's 
   51                   ;	V0.37	New error routines Seek done. Modeled after VF1 Bios
   52                   ;	V0.38	New error routines, centralized Home, Seek etc started. 
   53                   ;	V0.39	New format for sec read with seek_V done
   54                   ;	V0.40	New side selection and redo of odds and ends
   55                   ;	V0.41	Split menu's for 5" & 8" drives. All OK on Sec reads
   56                   ;	V0.42	Dump track working again.
   57                   ;	V0.43	Format not working
   58                   ;	V0.44	Re-did disk format menues and selection. Started on Format stuff 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   2
VF      Z80

   59                   ;	V0.45	Combine IY & IX reg flags into a single IX+HW_BYTE flag
   60                   ;	V0.46	Put track size info in tables and use it for track dumps.
   61                   ;	V0.48	Cleaned up things. END_ROUTINE put in.
   62                   ;	V0.50	Sector Read/write done (track format broken)
   63                   ;	V0.51	Format not working.
   64                   ;	V0.52	Format SSSD 8" seems to be OK now. Need READ_ID at start
   65                   ;	V0.53	Format was still not working. Changed chip and used Restore with V flag on.
   66                   ;	V0.54	SOLID FORMATTING of 8'. Moved all 1791/5 CMD's to drive tables. (Need to up 5")
   67                   ;	V0.55	Formating of al 8" SS disks working
   68                   ;	V0.56	Combined all sec R/W tests into one core routine
   69                   ;	V0.58	Working on side selection, fixed some formatting issues including CPM86 disks
   70                   ;	V0.59	Fixed side_sel to actully select the proper side (Note debug display present)
   71                   ;	V0.60	Formatting 5' DDDS disk now working and compatable with CPM3
   72                   ;	V0.61	Many formats added for 5" disks
   73                   ;	V0.62	Before skew tables for formatting (Removed HP & KAYPRO)
   74                   ;	V0.63	Skew table for formatting done DD & SD
   75                   ;	V0.64	All formats done and working. Corrected (DRIVE)->IY problem
   76                   ;	V0.65	Load CMD done
   77                   ;	V0.66	Both sector dump and load working. repaired disk selection again.
   78                   ;	V0.67	Split out all the sector R/W functions again into seperate routines - easier to mentain.
   79                   ;	V0.68	Moved 179x CMDS to start. Take care of 1795 side bits. Rearranged main menu
   80                   ;	V0.69	Solve status port hang-up in invalid hardware.
   81                   ;	V0.70	Started Disk copy
   82                   ;	V0.71	Disk copying of 8" done. Slow with no sector skews
   83                   ;	V0.72	Skew for disk copying inserted - still slow
   84                   ;	V0.73	Went to multi-sec R/W but errors so far
   85                   ;	V0.74	Installed Verify cmd as well. Copy now working for 128 byte sectors
   86                   ;	V0.75	Improvements to M_SEC_RD/WR
   87                   ;	V0.76	Multi sector R/W working. 
   88                   ;	V0.77	Step-in CMD implemented but copy still requires HOME on A:
   89                   ;	V0.78	System copy done but needs work. Need to have global COPY,COMPARE  etc.
   90                   ;	V0.79	Copy disk generealized/global now working on DS disks
   91                   ;	V0.80	Verify command now generalized and working 
   92                   ;	V0.81	Sys copy done, 1795/91 mods added
   93                   ;	V0.82	Problems with 1795 seek & drive select.
   94                   ;	V0.83	Complete rearrangement of hardware selection. Seek working up to before Format
   95                   ;	V0.84	All cleaned up for 1791 chip
   96                   ;	V0.85	Had to flip A & B side hardware I/O selections for 1795 chip
   97                   ;	V0.86	Hardware side select finally straightened out. Before IY usage
   98                   ;	V0.87	Initial IY usage - untested
   99                   ;	V0.88	IY working throughout. Seems solid for 1791 & 1795 chips.
  100                   ;	V1.01	Set 1 track for 1K sector  8" CPM system tracks instead of 2
  101                   ;
  102                   ;	To Do:-
  103                   ;;	Add 5" dos sectors format initilization
  104                   ;
  105                   ;
  106                   ;
  107                   ;	
  108         0000      FALSE	EQU	0
  109         0001      TRUE	EQU	1
  110                   ;
  111         0000      CHIP_1795 EQU	FALSE		;<---- RD & WR sector cmd's bit patterns are different for these chips!
  112         0001      CHIP_1791 EQU	TRUE
  113                   
  114         0080      NBYTES	EQU	128		;BYTES PER SECTOR UNIT (eg, *2 FOR 256 BYTE SECTORS)
  115         000A      LF	EQU	0AH
  116         000D      CR	EQU	0DH
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   3
VF      Z80

  117         0007      BELL	EQU	07H
  118         001A      CLEAR	EQU	1AH		;SD Systems Video Board Clear Screen
  119         0009      TAB	EQU	09H
  120         001B      ESC	EQU	1BH
  121         001C      EOL	EQU	1CH		;SD Systems Video Board Clear to end of line
  122         0010      PAGE_SIZE EQU	16		;Number of lines at a time to display memory contents on CRT
  123         0005      STATUS_DELAY EQU 5		;Time-out for waiting for status port to ho not busy. (~5 seconds @ 4MHz)
  124                   ;
  125         0001      RO_FLAG	EQU	01		;Flag for sequental sectors R test (Read sectors)
  126         0002      WO_FLAG	EQU	02		;Flag for sequental sectors W test (Write to sectors)
  127         0003      RW_FLAG	EQU	03		;Flag for sequental sectors R/W test (Both)
  128         0004      RRW_FLAG EQU	04		;Flag for random track and sector R/W test
  129         0005      TRK_RO_FLAG EQU	05		;Flag for reading sectors from just one track continously
  130         0001      CPM86_FLAG  EQU	01		;Flag to indicate after 5" disk formating CPM86 first sector
  131                   				;needs to be modified
  132         0001      TEST_FILL EQU	01		;Character to write for sector write test.
  133                   ;
  134         0000      SIMPLE	EQU	00h		;Output information detail to CRT
  135         00FF      COMPLEX	EQU	0FFH	
  136                   ;
  137                   				;Will place these values here for easy RAM analysis if a crash
  138                   				;The rest go to the end of the program
  139         0040      TADDR	EQU	40H		;STORE FOR DMA ADDRESS
  140         0043      @TRK	EQU	43H		;NEW TRACK <---- DO not change the order of these locations 
  141         0044      @SIDE	EQU	44H		;NEW SIDE        the IY register will ALWAYS point to TRK
  142         0045      @SCTR	EQU	45H		;NEW SECTOR
  143         0046      DRIVE_1	EQU	46H		;CURRENT DRIVE SELECT BITS
  144         0047      DRIVE_2	EQU	47H		;SECOND DRIVE SELECT BITS (For copy, verify, sysgen etc)
  145         0048      IOBYTE	EQU	48H		;Combined drive selection, density, side and size bits for hardware
  146                   ;				;is inverted and sent to the VFII "SELECT" port
  147                   ;
  148                   ;	PORTS & COMMANDS FOR FOR 1791 or 1795
  149                   ;
  150         0050      RSET	EQU	50H		;<----- VERSAFLOPPY BASE PORT ADDRESS (I use Port 50H, SD-Systems uses 60H)
  151         0053      SELECT	EQU	53H		;DRIVE SELECT PORT
  152         0054      STATUS	EQU	54H		;STATUS PORT
  153         0055      TRACK	EQU	55H		;TRACK PORT
  154         0056      SECTOR	EQU	56H		;SECTOR PORT
  155         0057      DATA	EQU	57H		;DATA PORT
  156         0054      CMD	EQU	54H		;COMMAND PORT
  157                   ;
  158                   ;Note: the 1791/5 chip for most commands used bits 0&1 to set the head
  159                   ;motor stepping rate. 00 being 3ms (@2MH clock),11 being 15 ms. My
  160                   ;Tandon 8" drives take the fastest rate. Older drives may not.
  161                   ;
  162         000C      RSCMD	EQU	00001100B	;(0CH),RESTORE CMD	<------ (Some drives require 
  163         0018      SKNCMD	EQU	00011000B	;(18H),SEEK NO VERIFY CMD <--  (a slower stepping rate r1,r0)
  164         001C      SKCMD	EQU	00011100B	;(1CH),SEEK WITH VERIFY CMD <---
  165         00C4      RDACMD	EQU	11000100B	;(C0H),READ TRACK/SECTOR ID CMD	
  166         005C      STEPIN	EQU	01011100B	; Step-in verify on dstination track
  167                   	
  168         0080      RDCMD91	EQU	10000000B	;(80H),READ SECTOR CMD	1791 chip
  169         00A0      WRCMD91	EQU	10100000B	;(A0H),WRITE SECTOR CMD 
  170                   
  171         0088      RDCMD95	EQU	10001000B	;(88H),READ SECTOR CMD	1795 chip
  172         00A8      WRCMD95	EQU	10101000B	;(A8H),WRITE SECTOR CMD
  173                   
  174         00F4      WRTCMD	EQU	11110100B	;(F4H),Write a whole track command
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   4
VF      Z80

  175         00E4      RDTCMD	EQU	11100100B	;(E4H),Read a whole track command
  176                   ;
  177                   ;
  178         0004      SEC_RETRY_MAX	EQU	4	;Number of times to try R/W a sector before returning an error
  179         0002      SEEK_RETRY_MAX	EQU	2	;Number of times to try R/W a sector before returning an error
  180         0080      HOME_ERR_MASK   EQU	80H	;Error mask for Type I Home CMD
  181         0090      SIN_ERR_MASK	EQU	90H	;Step head in one track command error bits
  182         0090      SK_ERR_MASK     EQU	90H	;Track Seek error bits 
  183         009F      ID_ERR_MASK     EQU	9FH	;Sector ID read error mask
  184         00BF      RS_ERR_MASK     EQU	0BFH	;Read sector data error mask
  185         00AF      MRS_ERR_MASK    EQU	0AFH	;Multi-sector Read data error mask
  186         00EF      WS_ERR_MASK	EQU	0EFh	;Write sector data error mask
  187         00EF      MWS_ERR_MASK	EQU	0EFh	;Multi-sector Write data error mask
  188         0080      RT_ERR_MASK     EQU	80H	;Read Track error mask
  189         00E0      WT_ERR_MASK     EQU	0E0H	;Write Track error mask
  190                   ;
  191                   ;
  192         5000      FBUFFER	EQU    5000H		;Buffer to build track image OR display sectors reads
  193         6000      FBUFFER2 EQU   6000H		;2nd buffer here for sector R/W test	
  194                   ;
  195                   ;The Index register IX is used throughout the program to point to the disk paramater
  196                   ;table of the currently selected drive/disk format
  197                   ;(IOBYTE) will point to (DRIVE) and will contain the current DRIVE 
  198                   ;hardware selection bits. Drive select 0,1,2,3 and side A or side B bits as well as
  199                   ;other flags (see below) 
  200                   ;Remember the bits for disk selection, density and side selection are inverted on 
  201                   ;the actual Versafloppy II board hardware
  202                   ;Register IX is not used for anything else in this program.
  203                   ;
  204                   ;The Index register IY is used throughout the program to point to the current/requested
  205                   ;Track, Side & Sector being worked on. Thet are at memory locations @TRK... IY will
  206                   ;always point to @TRK and assumes the others follow. Do not relocate or change the order.
  207                   ;
  208                   ; 
  209                   
  210                   ; EQUATES FOR [IX] REGISTAR INTO DISK PARAMATER TABLE
  211                   ;
  212         0000      NSCTRS	EQU	0	;Sectors/Track for disk
  213         0001      NTRKS	EQU	1	;Tracks/Side
  214         0002      HW_BYTE	EQU	2	;Will contain bit flags for:-
  215                   					;Bits 0,1 are used for drive selection
  216                   					;Bits 2 & 3 are currently unused
  217                   					;Bit 4=0 For SS disk hardware, 1= DS disk
  218                   					;Bit 5=0 8" disk, 1= 5" disk
  219                   					;Bit 6=0 Single density, 1= Double density
  220                   					;Bit 7=0 if CURRENT selected side is A
  221                   					;      1 if CURRENT selected side is B
  222                   					;Note: handle this byte with care it is
  223                   					;central to many functions within the 
  224                   					;program.
  225         0003      HEADR	EQU	3	;For Formatting
  226         0004      GAP1	EQU	4	;	"
  227         0005      GAP2	EQU	5	;	"
  228         0006      GAP3	EQU	6	;	"
  229         0007      GAP4	EQU	7	;	"
  230         0008      GAP4R	EQU	8	;	"
  231         0009      SIZE	EQU	9	;1=128 Byte sectors.....4=1024 Byte sectors
  232         000A      GAP_FILL_CHAR  EQU 10	;Byte used in disk formating
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   5
VF      Z80

  233         000B      DATA_FILL_CHAR EQU 11	;     "       "       "
  234         000C      TRK_SIZE       EQU 12	;TWO bytes containing the track size of that disks format
  235         000E      SPECIAL_FLAG   EQU 14	;flag byte for cases where after formatting disk need to be initilized
  236                   			;normally 0, CPM86_FLAG = 1
  237         000F      SKEW	       EQU 15	;Low address of sector skew table
  238         0010      SKEW1          EQU 16	;High address of sector skew table
  239         0011      FORMAT_NUM     EQU 17	;Each format will have a unique number. 
  240         0012      SYS_TRKS       EQU 18	;How many tracks for system usually 2 for 8-inch disks
  241         0013      TITLE	       EQU 19	;Text string describing the disk format
  242                   ;
  243                   ;
  244                   ; EQUATES FOR [IY] REGISTAR FOR TRACK, SIDE, SECTOR locations
  245                   ;
  246         0000      TRK	EQU	0
  247         0001      SIDE	EQU	1
  248         0002      SCTR	EQU	2
  249                   ;
  250                   ;------------------------------------------------------------------------------
  251         0100      	ORG	100H
  252                   ;
  253 0100  ED 73 390A  	LD	(SP_SAVE),SP
  254 0104  31 3A25     	LD	SP,STACK
  255 0107  C3 0125     	JP	START
  256                   ;------------------------------------------------------------------------
  257                   ;		HARDWARE DEPENDENT STUFF
  258                   ; The only other hardware links are through the Versafloppy II board. 
  259                   ; Remember to make sure it is set to the correct 1791/5 & base port mentioned above.
  260                   ;
  261                   ; 
  262 010A  DB 00       CONST:	IN	A,(0)		;console status for SD Systems 8024 Video board
  263 010C  E6 02       	AND	A,02H		;anything there
  264 010E  C8          	RET	Z		;return 0 if nothing
  265 010F  AF          	XOR	A,A
  266 0110  3D          	DEC	A		;return NZ, & 0FFH in A if something there
  267 0111  C9          	RET
  268                   ;
  269 0112  DB 00       CI:	IN	A,(0)		;console input
  270 0114  E6 02       	AND	A,02H
  271 0116  28 FA       	JR	Z,CI
  272 0118  DB 01       	IN	A,(1)		;return with character in A
  273 011A  C9          	RET
  274                   ;		
  275 011B  DB 00       CO:	IN	A,(0)		;console output (arrive with character in C)
  276 011D  E6 04       	AND	A,04H		;Note character is in C and A on return.
  277 011F  28 FA       	JR	Z,CO
  278 0121  79          	LD	A,C
  279 0122  D3 01       	OUT	(1),A
  280 0124  C9          	RET
  281                   ;-------------------------------------------------------------------------
  282 0125  3E 00       START:	LD	A,SIMPLE
  283 0127  32 38FF     	LD	(CRTDISP),A	;Start off with simple diagnostic display
  284 012A  21 19FC     OVER:	LD	HL,SIGNON
  285 012D  CD 1903     	CALL	PMSG
  286 0130  FD 21 0043  	LD	IY,@TRK		;Always points here
  287 0134  AF          	XOR	A,A		;set everything to zero
  288 0135  FD 77 00    	LD	(IY+TRK),A
  289 0138  FD 77 01    	LD	(IY+SIDE),A
  290 013B  3C          	INC	A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   6
VF      Z80

  291 013C  FD 77 02    	LD	(IY+SCTR),A	;Track 0, side A, sector 1
  292                   
  293 013F  CD 1596     	CALL	SELECT_DR_1	;Put current drive hardware selection in (DRIVE_1)
  294 0142  28 0E       	JR	Z,GET_DR_TABLE	;Get the current disk format from user, point IX to table
  295 0144  FE FF       	CP	A,0FFH		
  296 0146  28 E2       	JR	Z,OVER		;Invalid drive, start over
  297 0148  CD 1920     	CALL	ZCRLF		;Must be an abort ESC
  298 014B  ED 7B 390A  	LD	SP,(SP_SAVE)
  299 014F  C3 0000     	JP	0H		;Reboot CP/M if ESC
  300                   
  301 0152              GET_DR_TABLE:
  302 0152  CD 1600     	CALL	SELECT_IX	;Set IX to point to the current drive table
  303 0155  28 0E       	JR	Z,LOOP		
  304 0157  FE FF       	CP	A,0FFH		
  305 0159  28 CF       	JR	Z,OVER		;Invalid drive, start over
  306 015B  CD 1920     	CALL	ZCRLF		;Must be an abort ESC
  307 015E  ED 7B 390A  	LD	SP,(SP_SAVE)
  308 0162  C3 0000     	JP	0H		;Reboot CP/M if ESC
  309                   ;
  310 0165  3A 38FF     LOOP:	LD	A,(CRTDISP)	;Check if detailed display flag is on
  311 0168  B7          	OR	A,A
  312 0169  20 05       	JR	NZ,MENU1
  313 016B  21 2057     	LD	HL,MAIN_MENU0	;Main Menu loop (Detailed Diaplay OFF)
  314 016E  18 03       	JR	LOOP1
  315 0170  21 209E     MENU1:	LD	HL,MAIN_MENU1	;Main Menu loop	(Detailed Display ON)
  316 0173  CD 1903     LOOP1:	CALL	PMSG
  317 0176  CD 11AE     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware 
  318                   
  319 0179  CD 16D0     	CALL	SHOW_HW_TITLE	;Describe the currently selected drive
  320 017C  CD 16E1     	CALL	SHOW_HW_BYTE	;Print out HW_BYTE info
  321                   	
  322 017F  21 5000     	LD	HL,FBUFFER	;The DMA RAM address will be here for sector R/W's
  323 0182  22 0040     	LD	(TADDR),HL
  324                   				
  325 0185  CD 0E2D     	CALL	HOME		;Move head to track 0 with a RESTORE CMD
  326 0188  C4 12A0     	CALL	NZ,SHOW_ERRORS	;If an error in restoring head to TRK 0 say so.
  327                   	
  328 018B  CB 47       	BIT	0,A		;If NZ, then timeout on Status port, bad hardware
  329 018D  20 13       	JR	NZ,TO_MENU	;Try another drive or format disk
  330                   
  331 018F  CD 174E     	CALL	SHOW_IX_TABLE	;Show info about current disk parameters
  332                   
  333 0192  CD 0EB0     	CALL	READ_ID		;Get Actual track ID
  334 0195  28 05       	JR	Z,ID_FINE	;Was there errors
  335 0197  CD 12A0     	CALL	SHOW_ERRORS	;If an error show bit flags
  336 019A  18 06       	JR	TO_MENU
  337                   
  338 019C  CD 1920     ID_FINE:CALL	ZCRLF
  339 019F  CD 178D     	CALL	SHOW_ID		;Show a typical Track ID field on track 0
  340                   				
  341 01A2              TO_MENU:
  342 01A2  21 221E     	LD	HL,MENU_OPTIONS
  343 01A5  CD 1903     	CALL	PMSG
  344 01A8  3A 38FF     	LD	A,(CRTDISP)	;Two menu lists (Set using menu #D)
  345 01AB  B7          	OR	A,A		;A detailed display or a simple one.
  346 01AC  20 05       	JR	NZ,MENUA
  347 01AE  21 2434     	LD	HL,MENU1_MSG
  348 01B1  18 03       	JR	MENUB
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   7
VF      Z80

  349 01B3  21 2487     MENUA:	LD	HL,MENU2_MSG
  350 01B6  CD 1903     MENUB:	CALL	PMSG
  351                   				;-----MAIN MENU----
  352 01B9  CD 190E     	CALL	GETCMD		;Find out Menu Option in A
  353 01BC  32 3906     	LD	(CMD_STORE),A
  354 01BF  FE 1B       	CP	A,ESC		;Abort if ESC character
  355 01C1  28 53       	JR	Z,FIN
  356 01C3  FE 30       	CP	A,'0'		;Get a new current disk
  357 01C5  CA 012A     	JP	Z,OVER
  358 01C8  FE 31       	CP	A,'1'
  359 01CA  CC 022B     	CALL	Z,SEEK_TEST	;Seek test
  360 01CD  FE 32       	CP	A,'2'
  361 01CF  CC 0281     	CALL	Z,SEC_READ_TEST	;Sequental Read sectors test. 
  362 01D2  FE 33       	CP	A,'3'
  363 01D4  CC 02ED     	CALL	Z,SEC_WRITE_TEST;Sequental Write sectors test. 
  364 01D7  FE 34       	CP	A,'4'
  365 01D9  CC 036A     	CALL	Z,SEC_RW_TEST	;Sequental sec R/W test
  366 01DC  FE 35       	CP	A,'5'		
  367 01DE  CC 03FC     	CALL	Z,RAND_SEC_TEST	;Random Track/Sector read/write test
  368 01E1  FE 36       	CP	A,'6'
  369 01E3  CC 04A1     	CALL	Z,TRACK_TEST	;Read continously sectors from a specific track
  370 01E6  FE 37       	CP	A,'7'
  371 01E8  CC 054A     	CALL	Z,TRACK_DUMP	;Load one whole track to RAM (at location 5000H)
  372 01EB  FE 38       	CP	A,'8'
  373 01ED  CC 0644     	CALL	Z,LOAD_SECTORS	;Load sectors into RAM
  374 01F0  FE 39       	CP	A,'9'
  375 01F2  CC 078A     	CALL	Z,DUMP_SECTORS	;Write sectors to disk
  376 01F5  FE 46       	CP	A,'F'
  377 01F7  CC 08D6     	CALL	Z,FORMAT_DISK	;Go to disk formatting section
  378 01FA  FE 43       	CP	A,'C'
  379 01FC  CC 0B22     	CALL	Z,COPY_DISK	;Copy disk A: to B:
  380 01FF  FE 56       	CP	A,'V'
  381 0201  CC 0C2C     	CALL	Z,VERIFY_DISK	;Verify disk A:=B:
  382 0204  FE 44       	CP	A,'D'
  383 0206  CC 0220     	CALL	Z,TOGGLE_CRT	;Switch on/off detail info display option
  384 0209  FE 53       	CP	A,'S'
  385 020B  CC 0D40     	CALL	Z,COPY_CPM3_SYS	;Copy CPM system tracks to another disk.
  386 020E  FE 49       	CP	A,'I'
  387 0210  CC 09DE     	CALL	Z,IBMFORM_DISK	;Quick format of blank 8" disk in B:
  388 0213  C3 0165     	JP	LOOP
  389 0216  CD 1920     FIN:	CALL	ZCRLF
  390 0219  ED 7B 390A  	LD	SP,(SP_SAVE)
  391 021D  CA 0000     	JP	Z,0H		;Return to CPM
  392                   
  393                   ;
  394                   ;
  395                   ;-------- TOGGLE ON/OFF DETAILED INFORMATION DISPLAY ON CRT/LCD FOR SOME COMMANDS
  396 0220              TOGGLE_CRT:
  397 0220  3A 38FF     	LD	A,(CRTDISP)
  398 0223  2F          	CPL
  399 0224  32 38FF     	LD	(CRTDISP),A
  400 0227  3A 3906     	LD	A,(CMD_STORE)	;So we dont pick up other menu items
  401 022A  C9          	RET			;Back to main menu
  402                   ;
  403                   ;
  404                   ;------------------ SEEK DIAGNOSTIC TEST --------------------
  405                   ;
  406                   ;Simply tests head movement control
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   8
VF      Z80

  407 022B              SEEK_TEST:
  408 022B  21 24DA     	LD	HL,SEKMSG
  409 022E  CD 1903     	CALL	PMSG
  410 0231  AF          	XOR	A,A		;Setup for the BIOS below
  411 0232  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  412 0235  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  413 0238  3C          	INC	A
  414 0239  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  415 023C  CD 11AE     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  416 023F  CD 0E2D     	CALL	HOME		;Restore head to track 0
  417 0242  C4 12A0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  418                   
  419 0245  CD 1920     SEKT:	CALL	ZCRLF
  420 0248  CD 0E68     	CALL	SEEK_TRACK_V	;Test SEEK ability/timing of chip
  421                   ;	CALL	STEP_IN_CMD	;Can also test Step in head one track & verify	
  422 024B  C4 12A0     	CALL	NZ,SHOW_ERRORS	;If Error show error flags
  423                   
  424 024E  CD 127D     	CALL	SHOW_T_LOC	;Print out current track #
  425 0251  CD 0EB0     	CALL	READ_ID		;Get current track ID
  426 0254  C4 12A0     	CALL	NZ,SHOW_ERRORS	;print out the track ID errors
  427 0257  CD 178D     	CALL	SHOW_ID		;Show track ID
  428                   
  429 025A  CD 19BC     	CALL	CHECKABORT	;SP will halt, ESC will abort
  430 025D  20 14       	JR	NZ,END_CMD	;Return back to main menu
  431                   
  432 025F  FD 34 00    	INC	(IY+TRK)	;Need to bump track up one
  433 0262  FD 7E 00    	LD	A,(IY+TRK)	;Store here
  434 0265  DD BE 01    	CP	A,(IX+NTRKS)	;Are we at the end yet
  435 0268  20 DB       	JR	NZ,SEKT
  436 026A  FD 36 00 00 	LD	(IY+TRK),0
  437 026E  CD 1920     	CALL	ZCRLF		;Extra CR/LF fro another loop
  438 0271  28 D2       	JR	Z,SEKT		;start again
  439                   ;
  440 0273              END_CMD:
  441 0273  AF          	XOR	A,A
  442 0274  FD 77 00    	LD	(IY+TRK),A	;Always back to Track 0, Side A
  443 0277  FD 77 01    	LD	(IY+SIDE),A
  444 027A  CD 0E2D     	CALL	HOME		;Move head back to Track 0
  445 027D  3A 3906     	LD	A,(CMD_STORE)	;So we dont pick up other menu items IF we return from here
  446 0280  C9          	RET
  447                   
  448                   ; ------------------- READ SECTORS TEST -------------
  449                   ; This routine will sequentially read all sectors on a disk. Both sides
  450                   ; if a 2 sided disk.
  451                   ;
  452 0281              SEC_READ_TEST:
  453 0281  21 2913     	LD	HL,RDTST_MSG		;Say read test
  454 0284  CD 1903     	CALL	PMSG
  455 0287  CD 1920     	CALL	ZCRLF
  456 028A  AF          	XOR	A,A			;Setup for the BIOS below
  457 028B  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  458 028E  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  459 0291  3C          	INC	A
  460 0292  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  461                   
  462 0295  CD 11AE     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  463 0298  CD 0E2D     	CALL	HOME		
  464 029B  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   9
VF      Z80

  465                   
  466 029E              READ_LOOP1:
  467 029E  CD 1920     	CALL	ZCRLF
  468 02A1  CD 0E68     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  469 02A4  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  470                   
  471 02A7  21 5000     	LD	HL,FBUFFER		;Place sector data here
  472 02AA  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  473                   
  474 02AD  CD 0ED7     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  475 02B0  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  476                   	
  477 02B3  CD 1242     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  478 02B6  CD 17D4     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  479                   
  480 02B9  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  481 02BC  FD 7E 02    	LD	A,(IY+SCTR)		;Store new sec # in A
  482 02BF  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  483 02C0  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  484 02C3  20 16       	JR	NZ,SECTRK_DONE1
  485                   
  486 02C5  CD 11E0     	CALL	SWAP_SIDES		;Sides swap check
  487 02C8  3E 01       	LD	A,1			;Back to sector 1 no matter what
  488 02CA  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  489 02CD  20 0C       	JR	NZ,SECTRK_DONE1		;If B side (NZ), same track, back to sec 1
  490                   
  491 02CF  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  492 02D2  FD 7E 00    	LD	A,(IY+TRK)		;Store here
  493 02D5  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
  494 02D8  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  495                   ;	
  496 02DB              SECTRK_DONE1:
  497 02DB  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
  498 02DE  28 BE       	JR	Z,READ_LOOP1		;Loop until abort or all tracks done
  499 02E0  3A 38FF     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  500 02E3  B7          	OR	A,A			;will switch it off
  501 02E4  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  502 02E7  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  503 02E8  32 38FF     	LD	(CRTDISP),A
  504 02EB  18 B1       	JR	READ_LOOP1
  505                   ;
  506                   ;
  507                   ; ------------------- WRITE SECTORS TEST -------------
  508                   ; This routine will sequentially write to all sectors on a disk. Both sides
  509                   ; if a 2 sided disk. It will write the character TEST_FILL in each sector
  510                   ;
  511 02ED              SEC_WRITE_TEST:
  512 02ED  21 2931     	LD	HL,WRTST_MSG		;Say write test
  513 02F0  CD 1903     	CALL	PMSG
  514 02F3  CD 1920     	CALL	ZCRLF			;CR,LF at start. 
  515 02F6  AF          	XOR	A,A			;Setup for the BIOS below
  516 02F7  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  517 02FA  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  518 02FD  3C          	INC	A
  519 02FE  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  520 0301  CD 11AE     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  521 0304  CD 0E2D     	CALL	HOME	
  522 0307  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  10
VF      Z80

  523                   
  524 030A  21 5000     	LD	HL,FBUFFER		;Sector data to be written is here
  525 030D  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  526                   
  527 0310  0E 01       	LD	C,TEST_FILL		;Data fill character (01H)
  528 0312  CD 135C     	CALL	FILL_BUFFER		;Fill buffer with character to be written
  529                   
  530 0315  CD 17C6     	CALL	CHECK_WP		;See if disk is write protected
  531 0318  C2 0273     	JP	NZ,END_CMD		;Abort
  532                   ;
  533 031B              WRITE_LOOP1:
  534 031B  CD 1920     	CALL	ZCRLF
  535 031E  CD 0E68     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  536 0321  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  537                   	
  538 0324  21 5000     	LD	HL,FBUFFER		;Place sector data here
  539 0327  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  540                   
  541 032A  CD 101E     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  542 032D  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  543                   	
  544 0330  CD 1242     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  545 0333  CD 17D4     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  546                   
  547 0336  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  548 0339  FD 7E 02    	LD	A,(IY+SCTR)		;Store new sec # in A
  549 033C  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  550 033D  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  551 0340  20 16       	JR	NZ,SECTRK_DONE2
  552                   
  553 0342  CD 11E0     	CALL	SWAP_SIDES		;Sides swap check
  554 0345  3E 01       	LD	A,1			;Back to sector 1 no matter what
  555 0347  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  556 034A  20 0C       	JR	NZ,SECTRK_DONE2		;If B side (NZ), same track, back to sec 1
  557                   
  558 034C  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  559 034F  FD 7E 00    	LD	A,(IY+TRK)		;Next track
  560 0352  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
  561 0355  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  562                   ;	
  563 0358              SECTRK_DONE2:
  564 0358  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
  565 035B  28 BE       	JR	Z,WRITE_LOOP1		;Loop until abort or all tracks done
  566 035D  3A 38FF     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  567 0360  B7          	OR	A,A			;will switch it off
  568 0361  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  569 0364  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  570 0365  32 38FF     	LD	(CRTDISP),A
  571 0368  18 B1       	JR	WRITE_LOOP1
  572                   ;
  573                   ;
  574                   ; ------------------- SEQUENTAL READ/WRITE SECTORS TEST -------------
  575                   ; This routine will read and write back to randomly selected tracks and 
  576                   ; sectors on a disk. Both sides, if a 2 sided disk.
  577                   ;
  578 036A              SEC_RW_TEST:
  579 036A  21 2950     	LD	HL,RDWRTST_MSG		;Say R/W test
  580 036D  CD 1903     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  11
VF      Z80

  581 0370  CD 1920     	CALL	ZCRLF			;CR,LF at start. 
  582 0373  AF          	XOR	A,A			;Setup for the BIOS below
  583 0374  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  584 0377  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  585 037A  3C          	INC	A
  586 037B  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  587 037E  CD 11AE     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  588 0381  CD 0E2D     	CALL	HOME	
  589 0384  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  590                   
  591 0387  CD 17C6     	CALL	CHECK_WP		;See if disk is write protected
  592 038A  C2 0273     	JP	NZ,END_CMD		;Abort
  593                   ;
  594 038D              RW_LOOP1:
  595 038D  CD 1920     	CALL	ZCRLF
  596 0390  CD 0E68     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  597 0393  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  598                   	
  599 0396  21 5000     	LD	HL,FBUFFER		;Place sector data here
  600 0399  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  601                   
  602 039C  CD 0ED7     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  603 039F  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  604                   	
  605 03A2  CD 1242     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  606 03A5  CD 17D4     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  607                   
  608 03A8  CD 101E     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  609 03AB  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  610                   
  611 03AE  21 6000     	LD	HL,FBUFFER2		;Place new sector data here
  612 03B1  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  613                   
  614 03B4  CD 0ED7     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  615 03B7  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  616                   
  617 03BA  CD 1326     	CALL	CMP_BUFFERS		;Check for errors
  618 03BD  28 09       	JR	Z,COMPARE_OK
  619 03BF  21 28F0     	LD	HL,SEC_V_ERROR		;R/W Error found 
  620 03C2  CD 1903     	CALL	PMSG
  621 03C5  CD 1242     	CALL	SHOW_TSS_LOC		;trk,sec,head
  622                   
  623 03C8              COMPARE_OK:
  624 03C8  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  625 03CB  FD 7E 02    	LD	A,(IY+SCTR)
  626 03CE  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  627 03CF  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  628 03D2  20 16       	JR	NZ,SECTRK_DONE3
  629                   
  630 03D4  CD 11E0     	CALL	SWAP_SIDES		;Sides swap check
  631 03D7  3E 01       	LD	A,1			;Back to sector 1 no matter what
  632 03D9  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  633 03DC  20 0C       	JR	NZ,SECTRK_DONE3		;If B side (NZ), same track, back to sec 1
  634                   
  635 03DE  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  636 03E1  FD 7E 00    	LD	A,(IY+TRK)		;Next track
  637 03E4  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
  638 03E7  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  12
VF      Z80

  639                   ;	
  640 03EA              SECTRK_DONE3:
  641 03EA  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
  642 03ED  28 9E       	JR	Z,RW_LOOP1		;Loop until abort or all tracks done
  643 03EF  3A 38FF     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  644 03F2  B7          	OR	A,A			;Will switch it off
  645 03F3  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  646 03F6  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  647 03F7  32 38FF     	LD	(CRTDISP),A
  648 03FA  18 91       	JR	RW_LOOP1		;try again
  649                   ;
  650                   ;
  651                   ; ------------------- RANDOM TRK/SEC READ/WRITE SECTORS TEST -------------
  652                   ; This routine will read and write back to randomly selected tracks and 
  653                   ; sectors on a disk. Both sides, if a 2 sided disk.
  654                   ;
  655 03FC              RAND_SEC_TEST:
  656 03FC  21 296D     	LD	HL,RAND_TST_MSG		;Say R/W test
  657 03FF  CD 1903     	CALL	PMSG
  658 0402  CD 1920     	CALL	ZCRLF			;CR,LF at start. 
  659 0405  AF          	XOR	A,A			;Setup for the BIOS below
  660 0406  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  661 0409  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  662 040C  3C          	INC	A
  663 040D  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  664 0410  CD 11AE     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  665 0413  CD 0E2D     	CALL	HOME		
  666 0416  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  667                   
  668 0419  CD 17C6     	CALL	CHECK_WP		;See if disk is write protected
  669 041C  C2 0273     	JP	NZ,END_CMD		;Abort
  670                   ;
  671 041F              RAND_LOOP1:
  672 041F  CD 1920     	CALL	ZCRLF
  673 0422  CD 0E68     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  674 0425  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  675                   
  676 0428  21 5000     	LD	HL,FBUFFER		;Place sector data here
  677 042B  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  678                   
  679 042E  CD 0ED7     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  680 0431  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  681                   	
  682 0434  CD 1242     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  683 0437  CD 17D4     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  684                   
  685 043A  CD 101E     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  686 043D  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  687                   
  688 0440  21 6000     	LD	HL,FBUFFER2		;Place new sector data here
  689 0443  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  690                   
  691 0446  CD 0ED7     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  692 0449  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  693                   
  694 044C  CD 1326     	CALL	CMP_BUFFERS		;Check for errors
  695 044F  28 09       	JR	Z,RAND_OK
  696 0451  21 28F0     	LD	HL,SEC_V_ERROR		;R/W Error found 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  13
VF      Z80

  697 0454  CD 1903     	CALL	PMSG
  698 0457  CD 1242     	CALL	SHOW_TSS_LOC		;At trk,sec,head
  699                   
  700 045A              RAND_OK:
  701 045A  CD 0496     	CALL	RANDOM			;Get a random sector#
  702 045D  DD 46 00    	LD	B,(IX+NSCTRS)
  703 0460  A0          	AND	A,B			;strip off extra bits
  704 0461  B7          	OR	A,A			;No sector 0
  705 0462  20 01       	JR	NZ,RAND_SEC_OK
  706 0464  3C          	INC	A
  707 0465              RAND_SEC_OK:	
  708 0465  FD 77 02    	LD	(IY+SCTR),A		;Store for SEC display and sector read routine
  709                   
  710 0468  CD 0496     	CALL	RANDOM			;Get a random track #
  711 046B  DD 46 01    	LD	B,(IX+NTRKS)
  712 046E  05          	DEC	B			;Tracks numbered 0,1,2...NTRKS-1
  713 046F  A0          	AND	A,B			;strip off extra bits
  714 0470  FD 77 00    	LD	(IY+TRK),A		;Store for SEC display and sector read routine
  715                   
  716 0473  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
  717 0477  28 0B       	JR	Z,SECTRK_DONE4		;If 1 sided then skip sides swap
  718                   
  719 0479  CD 0496     	CALL	RANDOM			;Get a random SIDE 
  720 047C  E6 02       	AND	02H			;Isolate the SIDE bit
  721 047E  FD 77 01    	LD	(IY+SIDE),A		;Will be either 0 or 02H
  722 0481  CD 11FF     	CALL	SET_SIDE
  723                   
  724 0484              SECTRK_DONE4:
  725 0484  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
  726 0487  28 96       	JR	Z,RAND_LOOP1		;Loop until abort 
  727 0489  3A 38FF     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  728 048C  B7          	OR	A,A			;will switch it off
  729 048D  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  730 0490  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  731 0491  32 38FF     	LD	(CRTDISP),A
  732 0494  18 89       	JR	RAND_LOOP1		;try again
  733                   ;
  734                   ; Simple random number generator
  735 0496  ED 5F       RANDOM:	LD	A,R			;Seed will be differentd each time
  736 0498  47          	LD	B,A		
  737 0499  87          	ADD	A,A
  738 049A  87          	ADD	A,A
  739 049B  80          	ADD	A,B
  740 049C  CB 1F       	RR	A
  741 049E  C6 07       	ADD	A,7
  742 04A0  C9          	RET
  743                   ;
  744                   ;
  745                   ; ------------------- CONTINOUSLY READ SECTORS FROM ONE TRACK TEST -------------
  746                   ; This routine will read sectors continously from one track. Both sides, if a 
  747                   ; a 2 sided disk. Can be used with a scope to do a 'CATS EYES' hardware test.
  748                   ;
  749 04A1              TRACK_TEST:
  750 04A1  21 2913     	LD	HL,RDTST_MSG	;Say read test
  751 04A4  CD 1903     	CALL	PMSG
  752 04A7  AF          	XOR	A,A		;Setup for the BIOS below
  753 04A8  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  754 04AB  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  14
VF      Z80

  755 04AE  3C          	INC	A
  756 04AF  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  757 04B2  CD 11AE     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  758 04B5  CD 0E2D     	CALL	HOME		
  759 04B8  C4 12A0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  760                   
  761 04BB  CD 1920     	CALL	ZCRLF
  762 04BE  21 26AA     	LD	HL,GET_TRACK_MSG ;get the required track
  763 04C1  CD 1903     	CALL	PMSG
  764 04C4  CD 1938     	CALL	GET_HEX		;get 2 digits
  765 04C7  DA 0273     	JP	C,END_CMD	;Abort if C returned
  766                   	
  767 04CA  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  768 04CD  B8          	CP	A,B
  769 04CE  38 08       	JR	C,GET_TSIDES	;Yes we are 
  770 04D0  21 2848     	LD	HL,TRACK_ERROR
  771 04D3  CD 1903     	CALL	PMSG
  772 04D6  18 C9       	JR	TRACK_TEST	;Try again
  773                   
  774 04D8              GET_TSIDES:
  775 04D8  FD 77 00    	LD	(IY+TRK),A	;Store requested track
  776                   
  777 04DB  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
  778 04DF  28 25       	JR	Z,TRACK_TEST2	;If 1 sided then skip side question
  779                   
  780 04E1  21 26DE     	LD	HL,GET_SIDE_MSG ;get required track
  781 04E4  CD 1903     	CALL	PMSG
  782 04E7  CD 190E     	CALL	GETCMD		;get the input option
  783 04EA  FE 1B       	CP	A,ESC		;Abort if ESC character
  784 04EC  CA 0273     	JP	Z,END_CMD
  785 04EF  FE 42       	CP	A,'B'
  786 04F1  20 07       	JR	NZ,MUST_BE_TA
  787 04F3  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
  788 04F5  FD 77 01    	LD	(IY+SIDE),A
  789 04F8  18 0C       	JR	TRACK_TEST2
  790 04FA              MUST_BE_TA:
  791 04FA  FE 41       	CP	A,'A'
  792 04FC  28 08       	JR	Z,TRACK_TEST2	;Already on A
  793 04FE  21 2707     	LD	HL,SIDE_ERROR	;Not 'A' or 'B' must be error
  794 0501  CD 1903     	CALL	PMSG
  795 0504  18 9B       	JR	TRACK_TEST	;Try again
  796                   
  797 0506              TRACK_TEST2:
  798 0506  CD 1920     	CALL	ZCRLF
  799 0509  CD 11FF     	CALL	SET_SIDE		;Update the side hardware (if required)	
  800 050C  CD 0E68     	CALL	SEEK_TRACK_V		;seek to the new track position	
  801 050F  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  802                   ;	
  803 0512              READ_LOOP2:
  804 0512  CD 1920     	CALL	ZCRLF
  805 0515  21 5000     	LD	HL,FBUFFER		;Place sector data here
  806 0518  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  807                   
  808 051B  CD 0ED7     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  809 051E  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  810                   	
  811 0521  CD 1242     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  812 0524  CD 17D4     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  15
VF      Z80

  813                   
  814 0527  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  815 052A  FD 7E 02    	LD	A,(IY+SCTR)
  816 052D  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  817 052E  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  818 0531  20 05       	JR	NZ,SEC_DONE4
  819 0533  3E 01       	LD	A,1			;Cycle back to sector 1
  820 0535  FD 77 02    	LD	(IY+SCTR),A
  821                   
  822 0538              SEC_DONE4:
  823 0538  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
  824 053B  28 D5       	JR	Z,READ_LOOP2		;Loop until abort or all tracks done
  825 053D  3A 38FF     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  826 0540  B7          	OR	A,A			;will switch it off
  827 0541  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  828 0544  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  829 0545  32 38FF     	LD	(CRTDISP),A
  830 0548  18 C8       	JR	READ_LOOP2
  831                   ;
  832                   ;
  833                   ;
  834                   ;------------------------------------------------------------------------------
  835                   ;Read one whole track to RAM (5000H). This is used to see what the Format routine actully
  836                   ;placed on the disk and/or to see what track formats other computers used.
  837                   ;
  838                   ;
  839 054A              TRACK_DUMP:
  840 054A  21 2B31     	LD	HL,TRK_DUMP_MSG ;Say track dump msg
  841 054D  CD 1903     	CALL	PMSG
  842 0550  AF          	XOR	A,A		;Setup for the BIOS below
  843 0551  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  844 0554  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  845 0557  3C          	INC	A
  846 0558  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  847 055B  CD 11AE     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  848 055E  CD 0E2D     	CALL	HOME		
  849 0561  C4 12A0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  850                   
  851 0564  CD 1920     	CALL	ZCRLF
  852 0567  21 26AA     	LD	HL,GET_TRACK_MSG ;get required track
  853 056A  CD 1903     	CALL	PMSG
  854 056D  CD 1938     	CALL	GET_HEX		;get 2 digits in [A]
  855 0570  DA 0273     	JP	C,END_CMD
  856 0573  CD 1920     	CALL	ZCRLF
  857                   	
  858 0576  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  859 0579  B8          	CP	A,B
  860 057A  38 08       	JR	C,GET_SIDES	;Yes we are 
  861 057C  21 2848     	LD	HL,TRACK_ERROR
  862 057F  CD 1903     	CALL	PMSG
  863 0582  18 C6       	JR	TRACK_DUMP	;Try again
  864 0584              GET_SIDES:
  865 0584  FD 77 00    	LD	(IY+TRK),A	;Store requested track
  866                   
  867 0587  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
  868 058B  28 25       	JR	Z,GET_TRK	;If 1 sided then skip side question
  869                   
  870 058D  21 26DE     	LD	HL,GET_SIDE_MSG ;get required track
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  16
VF      Z80

  871 0590  CD 1903     	CALL	PMSG
  872 0593  CD 190E     	CALL	GETCMD		;get the input option
  873 0596  FE 1B       	CP	A,ESC		;Abort if ESC character
  874 0598  CA 0273     	JP	Z,END_CMD
  875 059B  FE 42       	CP	A,'B'
  876 059D  20 07       	JR	NZ,MUST_BE_A
  877 059F  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
  878 05A1  FD 77 01    	LD	(IY+SIDE),A
  879 05A4  18 0C       	JR	GET_TRK
  880 05A6              MUST_BE_A:
  881 05A6  FE 41       	CP	A,'A'
  882 05A8  28 08       	JR	Z,GET_TRK	;Already on A
  883 05AA  21 2707     	LD	HL,SIDE_ERROR
  884 05AD  CD 1903     	CALL	PMSG
  885 05B0  18 98       	JR	TRACK_DUMP	;Try again
  886                   
  887 05B2              GET_TRK:
  888 05B2  CD 1920     	CALL	ZCRLF
  889 05B5  CD 11FF     	CALL	SET_SIDE	;Update the side hardware (if required)	
  890                   
  891 05B8  CD 0E68     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
  892 05BB  C4 12A0     	CALL	NZ,SHOW_ERRORS	;If any show error flags
  893                   ;
  894 05BE  21 5000     	LD	HL,FBUFFER	;Will build the complete sector image here (5000H)
  895 05C1  22 0040     	LD	(TADDR),HL	;Store the pointer here.
  896 05C4  DD 56 0D    	LD	D,(IX+TRK_SIZE+1) ;Need to find out how large the track is
  897 05C7  DD 5E 0C    	LD	E,(IX+TRK_SIZE)	;Number of bytes per track for this disk into [DE]
  898 05CA  7A          	LD	A,D		;check that it is not 0 (ie. data not filled in table)
  899 05CB  B7          	OR	A,A
  900 05CC  20 09       	JR	NZ,SIZE_OK
  901 05CE  21 29F6     	LD	HL,TRK_SIZE_ERR
  902 05D1  CD 1903     	CALL	PMSG
  903 05D4  C3 0273     	JP	END_CMD
  904 05D7              SIZE_OK:
  905 05D7  ED 53 390F  	LD	(TRACK_SIZE),DE ;Store for below also
  906                   
  907 05DB  06 00       	LD	B,0
  908 05DD  70          Z_LOOP:	LD	(HL),B		;Fill RAM with 0's before starting
  909 05DE  23          	INC	HL
  910 05DF  1B          	DEC	DE
  911 05E0  7B          	LD	A,E
  912 05E1  B7          	OR	A,A
  913 05E2  20 F9       	JR	NZ,Z_LOOP
  914 05E4  B2          	OR	A,D
  915 05E5  20 F6       	JR	NZ,Z_LOOP	;Have we done DE bytes yet
  916                   	
  917 05E7  21 5000     	LD	HL,FBUFFER	;Start again
  918 05EA  22 0040     	LD	(TADDR),HL
  919 05ED  ED 5B 390F  	LD	DE,(TRACK_SIZE)	;Number of bytes per track 
  920                   				
  921 05F1  CD 0FEB     	CALL	READ_TRACK	;<<<<<< Read one whole track
  922 05F4  C4 12A0     	CALL	NZ,SHOW_ERRORS	;If any, show error flags
  923                   	
  924 05F7  CD 1291     	CALL	SHOW_TS_LOC
  925                   	
  926 05FA  21 2756     	LD	HL,TRACK_CONTENTS
  927 05FD  CD 1903     	CALL	PMSG
  928 0600  2E 10       	LD	L,PAGE_SIZE	;20 lines per page
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  17
VF      Z80

  929 0602  ED 5B 390F  	LD	DE,(TRACK_SIZE)	;to count down 
  930 0606  01 0000     	LD	BC,0		;to count up
  931 0609  D9          	EXX
  932 060A  21 5000     	LD	HL,FBUFFER	;will use alt reg HL' for data pointer
  933 060D  D9          	EXX
  934 060E  D9          RAMDUMP:EXX
  935 060F  7E          	LD	A,(HL)
  936 0610  CD 1989     	CALL	PACC
  937 0613  23          	INC	HL
  938 0614  D9          	EXX
  939 0615  03          	INC	BC
  940 0616  79          	LD	A,C
  941 0617  E6 1F       	AND	A,00011111B	;32 characters /line
  942 0619  20 1A       	JR	NZ,NOCRX
  943 061B  CD 1920     	CALL	ZCRLF
  944 061E  2D          	DEC	L
  945 061F  20 14       	JR	NZ,NOCRX
  946 0621  E5          	PUSH	HL
  947 0622  21 276B     	LD	HL,MORE_MSG
  948 0625  CD 1903     	CALL	PMSG
  949 0628  CD 190E     	CALL	GETCMD		;Ask if we wish to continue
  950 062B  E1          	POP	HL
  951 062C  FE 59       	CP	A,'Y'
  952 062E  20 0D       	JR	NZ,DONECR
  953 0630  CD 1920     	CALL	ZCRLF
  954 0633  2E 10       	LD	L,PAGE_SIZE
  955 0635  1B          NOCRX:	DEC	DE
  956 0636  7B          	LD	A,E
  957 0637  B7          	OR	A,A
  958 0638  20 D4       	JR	NZ,RAMDUMP
  959 063A  B2          	OR	A,D
  960 063B  20 D1       	JR	NZ,RAMDUMP	;Have we sent DE bytes yet
  961 063D  D9          DONECR:	EXX			;We are done
  962 063E  CD 1236     	CALL	FRCINT		;Need to clear the 1791/5 because we may have 
  963                   ;				;overrun reading the track
  964 0641  C3 0273     	JP	END_CMD		;All done back to main menu
  965                   ;
  966                   ;
  967                   ;
  968                   ;**************** LOAD SECTORS FROM DISK TO RAM ROUTINE ********
  969                   ;Note sectors from only one side.
  970                   
  971 0644              LOAD_SECTORS:
  972 0644  21 2B64     	LD	HL,LOAD_MSG	;Load msg
  973 0647  CD 1903     	CALl	PMSG
  974 064A  AF          	XOR	A,A		;Setup for the BIOS below
  975 064B  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  976 064E  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  977 0651  3C          	INC	A
  978 0652  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  979 0655  CD 11AE     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  980 0658  CD 0E2D     	CALL	HOME		
  981 065B  C4 12A0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  982                   
  983 065E  CD 1920     	CALL	ZCRLF
  984 0661  21 26AA     	LD	HL,GET_TRACK_MSG ;get required track
  985 0664  CD 1903     	CALL	PMSG
  986 0667  CD 1938     	CALL	GET_HEX		;get 2 digits
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  18
VF      Z80

  987 066A  DA 0273     	JP	C,END_CMD
  988                   
  989 066D  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  990 0670  B8          	CP	A,B
  991 0671  38 09       	JR	C,LGET_SIDES	;Yes we are 
  992 0673  21 2848     	LD	HL,TRACK_ERROR
  993 0676  CD 1903     	CALL	PMSG
  994 0679  C3 0644     	JP	LOAD_SECTORS	;Try again
  995 067C              LGET_SIDES:
  996 067C  FD 77 00    	LD	(IY+TRK),A	;Store requested track for below
  997                   
  998 067F  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
  999 0683  28 29       	JR	Z,GET_START_SEC	;If 1 sided then skip side question
 1000                   
 1001 0685  CD 1920     	CALL	ZCRLF
 1002 0688  21 26DE     	LD	HL,GET_SIDE_MSG ;get required track
 1003 068B  CD 1903     	CALL	PMSG
 1004 068E  CD 190E     	CALL	GETCMD		;get the input option
 1005 0691  FE 1B       	CP	A,ESC		;Abort if ESC character
 1006 0693  CA 0273     	JP	Z,END_CMD
 1007 0696  FE 42       	CP	A,'B'
 1008 0698  20 07       	JR	NZ,LMUST_BE_A
 1009 069A  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
 1010 069C  FD 77 01    	LD	(IY+SIDE),A
 1011 069F  18 0D       	JR	GET_START_SEC
 1012                   
 1013 06A1              LMUST_BE_A:
 1014 06A1  FE 41       	CP	A,'A'
 1015 06A3  28 09       	JR	Z,GET_START_SEC	;Already on A
 1016 06A5  21 2707     	LD	HL,SIDE_ERROR
 1017 06A8  CD 1903     	CALL	PMSG
 1018 06AB  C3 0644     	JP	LOAD_SECTORS	;Try again
 1019                   
 1020 06AE              GET_START_SEC:
 1021 06AE  21 2721     	LD	HL,GET_SEC_MSG	;Get starting sector
 1022 06B1  CD 1903     	CALL	PMSG
 1023 06B4  CD 1938     	CALL	GET_HEX		;get 2 digits
 1024 06B7  DA 0273     	JP	C,END_CMD
 1025 06BA  CD 1920     	CALL	ZCRLF
 1026 06BD  DD 46 00    	LD	B,(IX+NSCTRS)	;Are we within disk range
 1027 06C0  B8          	CP	A,B
 1028 06C1  38 09       	JR	C,GSTART1	;Yes we are 
 1029 06C3  21 278D     GSTART0:LD	HL,SEC_ERROR
 1030 06C6  CD 1903     	CALL	PMSG
 1031 06C9  C3 0644     	JP	LOAD_SECTORS	;Try again
 1032 06CC  B7          GSTART1:OR	A,A		;Sectors numbered 1,2,3... 
 1033 06CD  28 F4       	JR	Z,GSTART0
 1034                   
 1035 06CF  FD 77 02    	LD	(IY+SCTR),A	;Store start sector
 1036                   
 1037 06D2  21 2A39     	LD	HL,SEC_COUNT_MSG   ;Get no. of sectors to load
 1038 06D5  CD 1903     	CALL	PMSG
 1039 06D8  CD 1938     	CALL	GET_HEX		;get 2 digits
 1040 06DB  D2 06E7     	JP	NC,GSTART2
 1041 06DE              GSTART3:
 1042 06DE  21 2025     	LD	HL,SEC_COUNT_ERR
 1043 06E1  CD 1903     	CALL	PMSG
 1044 06E4  C3 0273     	JP	END_CMD
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  19
VF      Z80

 1045 06E7  B7          GSTART2:OR	A,A		;cannot have 0 sectors
 1046 06E8  28 F4       	JR	Z,GSTART3
 1047                   	
 1048 06EA  32 3911     	LD	(SEC_COUNT),A	;store count of sectors
 1049                   	
 1050 06ED  21 2A64     	LD	HL,GET_DMA_MSG  ;Get DMA Aaddress
 1051 06F0  CD 1903     	CALL	PMSG
 1052 06F3  CD 196F     	CALL	GET_HEX4	;get 4 digits
 1053 06F6  D2 0702     	JP	NC,GSTART4
 1054 06F9  21 203A     	LD	HL,RAM_ERROR
 1055 06FC  CD 1903     	CALL	PMSG
 1056 06FF  C3 0273     	JP	END_CMD
 1057 0702              GSTART4:
 1058 0702  22 0040     	LD	(TADDR),HL	;Store the DMA address
 1059 0705  CD 11FF     	CALL	SET_SIDE	;Update the side hardware (if required)	
 1060 0708  CD 1920     	CALL	ZCRLF
 1061                   
 1062 070B              MORE_LOAD:
 1063 070B  CD 0E68     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
 1064 070E  C4 12A0     	CALL	NZ,SHOW_ERRORS	;If any show error flags
 1065                   ;	
 1066 0711  21 2AE1     	LD	HL,LOADING_MSG
 1067 0714  CD 1903     	CALL	PMSG
 1068 0717  CD 1242     	CALL	SHOW_TSS_LOC
 1069 071A  21 2AF1     	LD	HL,LOADING1_MSG
 1070 071D  CD 1903     	CALL	PMSG
 1071 0720  2A 0040     	LD	HL,(TADDR)
 1072 0723  7C          	LD	A,H
 1073 0724  CD 1989     	CALL	PACC
 1074 0727  7D          	LD	A,L
 1075 0728  CD 1989     	CALL	PACC
 1076 072B  21 2515     	LD	HL,H_MSG		;H. at end of message
 1077 072E  CD 1903     	CALL	PMSG
 1078                   
 1079 0731  CD 0ED7     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
 1080 0734  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1081                   ;
 1082 0737  2A 3912     	LD	HL,(DMA_NEXT)		;Update the next RAM location
 1083 073A  22 0040     	LD	(TADDR),HL
 1084                   
 1085 073D  3A 3911     	LD	A,(SEC_COUNT)
 1086 0740  3D          	DEC	A
 1087 0741  28 35       	JR	Z,DONE_LOAD_OK
 1088 0743  32 3911     	LD	(SEC_COUNT),A		;Store for next time
 1089                   
 1090 0746  FD 34 02    	INC	(IY+SCTR)
 1091 0749  FD 7E 02    	LD	A,(IY+SCTR)
 1092 074C  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1093 074D  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1094 0750  20 10       	JR	NZ,LSECTRK_OK
 1095                   
 1096 0752  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1097 0754  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1098                   
 1099 0757  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
 1100 075A  FD 7E 00    	LD	A,(IY+TRK)
 1101 075D  DD BE 01    	CP	A,(IX+NTRKS)
 1102 0760  28 1F       	JR	Z,ERROR_LOAD		;Ran out of tracks
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  20
VF      Z80

 1103                   ;
 1104 0762              LSECTRK_OK:
 1105 0762  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1106 0765  20 03       	JR	NZ,DONE_LR
 1107 0767  C3 070B     	JP	MORE_LOAD		;Loop until abort or all sectors are done
 1108 076A  3A 38FF     DONE_LR:LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1109 076D  B7          	OR	A,A			;will switch it off
 1110 076E  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
 1111 0771  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1112 0772  32 38FF     	LD	(CRTDISP),A
 1113 0775  C3 070B     	JP	MORE_LOAD
 1114                   ;
 1115 0778              DONE_LOAD_OK:
 1116 0778  21 2B1A     	LD	HL,LOAD_DONE_MSG
 1117 077B  CD 1903     	CALL	PMSG			
 1118 077E  C3 0273     	JP	END_CMD
 1119                   ;
 1120 0781              ERROR_LOAD:
 1121 0781  21 2AFD     	LD	HL,ERR_TK_MSG
 1122 0784  CD 1903     	CALL	PMSG
 1123 0787  C3 0273     	JP	END_CMD
 1124                   ;
 1125                   ;
 1126                   ;
 1127                   ;;**************** DUMP SECTORS FROM RAM TO DISK ROUTINE ********
 1128                   ;
 1129 078A              DUMP_SECTORS:
 1130 078A  21 2B86     	LD	HL,DUMP_MSG	;Load msg
 1131 078D  CD 1903     	CALl	PMSG
 1132 0790  AF          	XOR	A,A		;Setup for the BIOS below
 1133 0791  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
 1134 0794  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
 1135 0797  3C          	INC	A
 1136 0798  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
 1137 079B  CD 11AE     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
 1138 079E  CD 0E2D     	CALL	HOME		
 1139 07A1  C4 12A0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
 1140                   
 1141 07A4  CD 17C6     	CALL	CHECK_WP	;See if disk is write protected
 1142 07A7  C2 0273     	JP	NZ,END_CMD	
 1143                   
 1144 07AA              WR_T_OK:
 1145 07AA  CD 1920     	CALL	ZCRLF
 1146 07AD  21 26AA     	LD	HL,GET_TRACK_MSG ;get required track
 1147 07B0  CD 1903     	CALL	PMSG
 1148 07B3  CD 1938     	CALL	GET_HEX		;get 2 digits
 1149 07B6  DA 0273     	JP	C,END_CMD
 1150 07B9  CD 1920     	CALL	ZCRLF
 1151 07BC  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
 1152 07BF  B8          	CP	A,B
 1153 07C0  38 09       	JR	C,DGET_SIDES	;Yes we are 
 1154 07C2  21 2848     	LD	HL,TRACK_ERROR
 1155 07C5  CD 1903     	CALL	PMSG
 1156 07C8  C3 078A     	JP	DUMP_SECTORS	;Try again
 1157 07CB              DGET_SIDES:
 1158 07CB  FD 77 00    	LD	(IY+TRK),A	;Store requested track for below
 1159                   
 1160 07CE  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  21
VF      Z80

 1161 07D2  28 29       	JR	Z,GET_START_DSEC	;If 1 sided then skip side question
 1162 07D4  CD 1920     	CALL	ZCRLF
 1163                   
 1164 07D7  21 26DE     	LD	HL,GET_SIDE_MSG ;get required track
 1165 07DA  CD 1903     	CALL	PMSG
 1166 07DD  CD 190E     	CALL	GETCMD		;get the input option
 1167 07E0  FE 1B       	CP	A,ESC		;Abort if ESC character
 1168 07E2  CA 0273     	JP	Z,END_CMD
 1169 07E5  FE 42       	CP	A,'B'
 1170 07E7  20 07       	JR	NZ,DMUST_BE_A
 1171 07E9  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
 1172 07EB  FD 77 01    	LD	(IY+SIDE),A
 1173 07EE  18 0D       	JR	GET_START_DSEC
 1174 07F0              DMUST_BE_A:
 1175 07F0  FE 41       	CP	A,'A'
 1176 07F2  28 09       	JR	Z,GET_START_DSEC	;Already on A
 1177 07F4  21 2707     	LD	HL,SIDE_ERROR
 1178 07F7  CD 1903     	CALL	PMSG
 1179 07FA  C3 078A     	JP	DUMP_SECTORS		;Try again
 1180                   
 1181 07FD              GET_START_DSEC:
 1182 07FD  21 2721     	LD	HL,GET_SEC_MSG	;Get starting sector
 1183 0800  CD 1903     	CALL	PMSG
 1184 0803  CD 1938     	CALL	GET_HEX		;get 2 digits
 1185 0806  DA 0273     	JP	C,END_CMD
 1186 0809  CD 1920     	CALL	ZCRLF
 1187 080C  DD 46 00    	LD	B,(IX+NSCTRS)	;Are we within disk range
 1188 080F  B8          	CP	A,B
 1189 0810  38 09       	JR	C,DSTART1	;Yes we are 
 1190 0812  21 278D     DSTART0:LD	HL,SEC_ERROR
 1191 0815  CD 1903     	CALL	PMSG
 1192 0818  C3 078A     	JP	DUMP_SECTORS	;Try again
 1193 081B  B7          DSTART1:OR	A,A		;Sectors numbered 1,2,3... 
 1194 081C  28 F4       	JR	Z,DSTART0
 1195                   
 1196 081E  FD 77 02    	LD	(IY+SCTR),A	;Store start sector
 1197                   
 1198 0821  21 2A39     	LD	HL,SEC_COUNT_MSG   ;Get no. of sectors to write
 1199 0824  CD 1903     	CALL	PMSG
 1200 0827  CD 1938     	CALL	GET_HEX		;get 2 digits
 1201 082A  D2 0836     	JP	NC,DSTART2
 1202 082D              DSTART3:
 1203 082D  21 2025     	LD	HL,SEC_COUNT_ERR
 1204 0830  CD 1903     	CALL	PMSG
 1205 0833  C3 0273     	JP	END_CMD
 1206 0836  B7          DSTART2:OR	A,A		;cannot have 0 sectors
 1207 0837  28 F4       	JR	Z,DSTART3
 1208                   	
 1209 0839  32 3911     	LD	(SEC_COUNT),A	;store count of sectors
 1210                   	
 1211 083C  21 2AA4     	LD	HL,GET_DMAD_MSG  ;Get DMA Aaddress
 1212 083F  CD 1903     	CALL	PMSG
 1213 0842  CD 196F     	CALL	GET_HEX4	;get 4 digits
 1214 0845  D2 0851     	JP	NC,DSTART4
 1215 0848  21 203A     	LD	HL,RAM_ERROR
 1216 084B  CD 1903     	CALL	PMSG
 1217 084E  C3 0273     	JP	END_CMD
 1218 0851              DSTART4:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  22
VF      Z80

 1219 0851  22 0040     	LD	(TADDR),HL	;Store the DMA address
 1220 0854  CD 11FF     	CALL	SET_SIDE	;Update the side hardware (if required)	
 1221 0857              MORE_DUMP:
 1222 0857  CD 0E68     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
 1223 085A  C4 12A0     	CALL	NZ,SHOW_ERRORS	;If any show error flags
 1224                   ;	
 1225 085D  21 2BBD     	LD	HL,DUMPING_MSG
 1226 0860  CD 1903     	CALL	PMSG
 1227 0863  CD 1242     	CALL	SHOW_TSS_LOC
 1228 0866  21 2BCD     	LD	HL,DUMPING1_MSG
 1229 0869  CD 1903     	CALL	PMSG
 1230 086C  2A 0040     	LD	HL,(TADDR)
 1231 086F  7C          	LD	A,H
 1232 0870  CD 1989     	CALL	PACC
 1233 0873  7D          	LD	A,L
 1234 0874  CD 1989     	CALL	PACC
 1235 0877  21 2515     	LD	HL,H_MSG		;H. at end of message
 1236 087A  CD 1903     	CALL	PMSG
 1237                   
 1238 087D  CD 101E     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
 1239 0880  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1240                   ;
 1241 0883  2A 3912     	LD	HL,(DMA_NEXT)		;Update the next RAM location
 1242 0886  22 0040     	LD	(TADDR),HL
 1243                   
 1244 0889  3A 3911     	LD	A,(SEC_COUNT)
 1245 088C  3D          	DEC	A
 1246 088D  28 35       	JR	Z,DONE_DUMP_OK
 1247 088F  32 3911     	LD	(SEC_COUNT),A		;Store for next time
 1248                   
 1249 0892  FD 34 02    	INC	(IY+SCTR)		;Get next sector
 1250 0895  FD 7E 02    	LD	A,(IY+SCTR)
 1251 0898  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1252 0899  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1253 089C  20 10       	JR	NZ,DSECTRK_OK
 1254                   
 1255 089E  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1256 08A0  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1257                   
 1258 08A3  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
 1259 08A6  FD 7E 00    	LD	A,(IY+TRK)			
 1260 08A9  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
 1261 08AC  28 1F       	JR	Z,ERROR_DUMP		;Ran out of tracks
 1262                   ;	
 1263 08AE              DSECTRK_OK:
 1264 08AE  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1265 08B1  20 03       	JR	NZ,DONE_LX
 1266 08B3  C3 0857     	JP	MORE_DUMP		;Loop until abort or all sectors are done
 1267 08B6  3A 38FF     DONE_LX:LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1268 08B9  B7          	OR	A,A			;will switch it off
 1269 08BA  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
 1270 08BD  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1271 08BE  32 38FF     	LD	(CRTDISP),A
 1272 08C1  C3 0857     	JP	MORE_DUMP
 1273                   ;
 1274 08C4              DONE_DUMP_OK:
 1275 08C4  21 2BDB     	LD	HL,DUMP_DONE_MSG
 1276 08C7  CD 1903     	CALL	PMSG			
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  23
VF      Z80

 1277 08CA  C3 0273     	JP	END_CMD
 1278                   ;
 1279 08CD              ERROR_DUMP:
 1280 08CD  21 2AFD     	LD	HL,ERR_TK_MSG
 1281 08D0  CD 1903     	CALL	PMSG
 1282 08D3  C3 0273     	JP	END_CMD
 1283                   ;
 1284                   ;
 1285                   ;**************** CURRENT DISK, FORMAT ROUTINE ***************************
 1286                   ;
 1287 08D6              FORMAT_DISK:
 1288 08D6  DD 22 38FC  	LD	(IX_OLD_STORE),IX	;Save current IX in case of an abort
 1289                   
 1290 08DA  DD CB 02 6E 	BIT	5,(IX+HW_BYTE)		;See if current selected disk is 5" or 8"
 1291 08DE  20 0D       	JR	NZ,FORM_TABLE5
 1292 08E0  CD 1622     	CALL	GET_TABLE_8		;Setup IX to (new) table parameters for 8"
 1293 08E3  28 15       	JR	Z,TABLE_OK
 1294 08E5  21 255A     	LD	HL,BADCMD
 1295 08E8  CD 1903     	CALL	PMSG
 1296 08EB  18 30       	JR	FABORT
 1297 08ED              FORM_TABLE5:
 1298 08ED  CD 165D     	CALL	GET_TABLE_5		;Setup IX to (new) table parameters for 5"
 1299 08F0  28 08       	JR	Z,TABLE_OK
 1300 08F2  21 255A     	LD	HL,BADCMD
 1301 08F5  CD 1903     	CALL	PMSG
 1302 08F8  18 23       	JR	FABORT
 1303 08FA              TABLE_OK:	
 1304 08FA  21 253E     	LD	HL,FORMATTING_MSG
 1305 08FD  CD 1903     	CALL	PMSG
 1306 0900  DD E5       	PUSH	IX			;IX->HL
 1307 0902  E1          	POP	HL
 1308 0903  11 0013     	LD	DE,TITLE		;add in offset
 1309 0906  19          	ADD	HL,DE			;HL now points to the title entry of the selected disk
 1310 0907  CD 1903     	CALL	PMSG
 1311                   
 1312 090A  CD 11AE     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1313 090D  CD 0E2D     	CALL	HOME			;Restore disk head
 1314 0910  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1315                   	
 1316 0913  CD 17C6     	CALL	CHECK_WP		;See if disk is write protected
 1317 0916  CA 0924     	JP	Z,FORMWP_OK		;Go to the core test routine
 1318 0919  DD 2A 38FC  	LD	IX,(IX_OLD_STORE)	;Nothing altered go back to main menu
 1319 091D  CD 11AE     FABORT:	CALL	START_DRIVE_1		;RE-select to old drive disk format, Side A
 1320 0920  3A 3906     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1321 0923  C9          	RET				;return back to MENU
 1322                   	
 1323 0924              FORMWP_OK:
 1324 0924  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here
 1325 0927  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1326                   
 1327 092A  3E 01       	LD	A,1
 1328 092C  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1329 092F  AF          	XOR	A,A			;Setup for the BIOS below
 1330 0930  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1331 0933  CD 11FF     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1332 0936  AF          	XOR	A,A
 1333                   					;Fall through with 0 in [A] for trk 0
 1334 0937              NEXT_TRK:			
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  24
VF      Z80

 1335 0937  FD 77 00    	LD	(IY+TRK),A		;store track info for eack loop
 1336                   	
 1337 093A  CD 1383     	CALL	BUILD_TRACK		;Build a complete track image in RAM
 1338                   
 1339 093D  CD 182A     	CALL	FORMAT_INFO		;Display the track if detailed info is on
 1340                   	
 1341 0940  FD 7E 01    	LD	A,(IY+SIDE)	
 1342 0943  FE 02       	CP	A,02H			;If B side no seek necessary
 1343 0945  28 09       	JR	Z,SKIP_SEEK
 1344                   
 1345 0947  FD 7E 00    	LD	A,(IY+TRK)		;Get new track#
 1346 094A  CD 0E79     	CALL	SEEK_TRACK_NV		;Seek with verify command to 1791/5
 1347 094D  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1348                   
 1349 0950              SKIP_SEEK:
 1350 0950  11 5000     	LD	DE,FBUFFER		;Move Start of track image into DE
 1351 0953  D5          	PUSH	DE			;save it
 1352 0954  2A 3923     	LD	HL,(E_GAP4_MARK)	;End+1 of track header
 1353 0957  2B          	DEC	HL
 1354 0958  ED 52       	SBC	HL,DE
 1355 095A  EB          	EX	DE,HL			;Count now in DE
 1356                   
 1357 095B  21 390F     	LD	HL,TRACK_SIZE		;Side step, need to store track byte count
 1358 095E  72          	LD	(HL),D			;for display at end of format etc.
 1359 095F  23          	INC	HL
 1360 0960  73          	LD	(HL),E
 1361 0961  E1          	POP	HL			;DE on stack to --> HL
 1362                   
 1363 0962  CD 1132     	CALL	WRITE_TRACK		;<<<< Write track with hardware >>>>>
 1364 0965  C4 12A0     	CALL	NZ,SHOW_ERRORS
 1365                   
 1366 0968  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1367 096B  20 58       	JR	NZ,CHECK_ABORT
 1368 096D              AGAIN1:
 1369 096D  DD 7E 02    	LD	A,(IX+HW_BYTE)		;Check if side B is req
 1370 0970  CB 67       	BIT	4,A
 1371 0972  28 1C       	JR	Z,AGAIN			;SS drive go to next track
 1372                   
 1373 0974  FD 7E 01    	LD	A,(IY+SIDE)
 1374 0977  B7          	OR	A,A			;If 0 we have done A side, now do B
 1375 0978  28 09       	JR	Z,FORM_B_SIDE		;switch over to B side
 1376 097A  AF          	XOR	A,A
 1377 097B  FD 77 01    	LD	(IY+SIDE),A
 1378 097E  CD 11FF     	CALL	SET_SIDE		;update the hardware
 1379 0981  18 0D       	JR	AGAIN			;Need track increase now we are back on side A
 1380 0983              FORM_B_SIDE:
 1381 0983  3E 02       	LD	A,02H			;Flag for B side
 1382 0985  FD 77 01    	LD	(IY+SIDE),A	
 1383 0988  CD 11FF     	CALL	SET_SIDE		;Update the hardware
 1384 098B  FD 7E 00    	LD	A,(IY+TRK)	
 1385 098E  18 A7       	JR	NEXT_TRK		;Do everything again with this track on B side
 1386                   
 1387 0990  FD 34 00    AGAIN:	INC	(IY+TRK)		;What was the last track number just done
 1388 0993  FD 7E 00    	LD	A,(IY+TRK)
 1389 0996  DD BE 01    	CP	A,(IX+NTRKS)		;Check if we are on the last tarck
 1390 0999  20 9C       	JR	NZ,NEXT_TRK		;If not then back to updating tracks and doing it again.
 1391                   ;
 1392 099B  21 25A2     	LD	HL,END_FORM_MSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  25
VF      Z80

 1393 099E  CD 1903     	CALL	PMSG
 1394 09A1  21 390F     	LD	HL,TRACK_SIZE
 1395 09A4  7E          	LD	A,(HL)			;Fill in total byte count of a track
 1396 09A5  CD 1989     	CALL	PACC			;Is useful for building tables and track disply
 1397 09A8  23          	INC	HL			;was obtained from WRITE_1_TRACK below
 1398 09A9  7E          	LD	A,(HL)
 1399 09AA  CD 1989     	CALL	PACC
 1400 09AD  21 25D6     	LD	HL,END_FORM1_MSG	;end of formatting
 1401 09B0  CD 1903     	CALL	PMSG
 1402                   
 1403 09B3  DD 7E 0E    	LD	A,(IX+SPECIAL_FLAG)	;Is any post formatting mods required?
 1404 09B6  B7          	OR	A,A
 1405 09B7  28 05       	JR	Z,NO_MODS
 1406 09B9  FE 01       	CP	A,CPM86_FLAG
 1407 09BB  CC 1562     	CALL	Z,INIT_CPM86		;Must modify first 5" disk sector for CPM86
 1408 09BE              NO_MODS:
 1409 09BE  CD 11AE     	CALL	START_DRIVE_1		;Select disk with new IX table format, Side A
 1410 09C1  3A 3906     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1411 09C4  C9          	RET				;return back to MENU
 1412                   ;
 1413 09C5              CHECK_ABORT:
 1414 09C5  3A 38FF     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1415 09C8  B7          	OR	A,A			;will switch it off
 1416 09C9  CA 09D2     	JP	Z,FORM_ABORT		;If Z do not list the sector contents.
 1417 09CC  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1418 09CD  32 38FF     	LD	(CRTDISP),A
 1419 09D0  18 9B       	JR	AGAIN1
 1420                   ;
 1421 09D2              FORM_ABORT:
 1422 09D2  21 2577     	LD	HL,FORM_ERRMSG		;Say error formatting disk
 1423 09D5  CD 1903     	CALL	PMSG	
 1424 09D8  31 3A25     	LD	SP,STACK
 1425 09DB  C3 0125     	JP	START			;Must abort everything because disk status is unknown
 1426                   ;
 1427                   ;
 1428                   ;
 1429                   ; QUICK 8" IBM SSSD FORMAT of a blank disk in B: drive
 1430                   ; This is for quickly making CPM 8" disks. Not really a disgnostic
 1431                   ; This assumes an 8" disk is in B: drive.
 1432                   ;
 1433 09DE              IBMFORM_DISK:
 1434 09DE  AF          	XOR	A,A
 1435 09DF  32 38FE     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1436                   
 1437 09E2  DD 22 38FC  	LD	(IX_OLD_STORE),IX	;Store current disk paramater table
 1438 09E6  3A 0046     	LD	A,(DRIVE_1)		;Because we may not already be on B:
 1439 09E9  32 3916     	LD	(DRIVE_STORE),A
 1440                   
 1441 09EC  21 2EAD     	LD	HL,IBM_FORMAT
 1442 09EF  CD 1903     	CALL	PMSG
 1443                   
 1444 09F2  DD 21 32CC  	LD	IX,STDSDT		;Force current drive to 8" IBM SSSD
 1445 09F6  3E 02       	LD	A,2
 1446 09F8  32 0046     	LD	(DRIVE_1),A		;Force B: drive hardware selection
 1447 09FB  CD 11AE     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1448 09FE  CD 0E2D     	CALL	HOME			;Restore disk head
 1449 0A01  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1450                   	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  26
VF      Z80

 1451 0A04  CD 17C6     	CALL	CHECK_WP		;See if disk is write protected
 1452 0A07  CA 0A1B     	JP	Z,IBMFORM_OK1		;Go to the core routine
 1453                   
 1454 0A0A  DD 2A 38FC  	LD	IX,(IX_OLD_STORE)	;Nothing altered go back to main menu
 1455 0A0E  3A 3916     	LD	A,(DRIVE_STORE)
 1456 0A11  32 0046     	LD	(DRIVE_1),A		;Get back origional drive
 1457 0A14  CD 11AE     	CALL	START_DRIVE_1		;RE-select to old drive disk format, Side A
 1458 0A17  3A 3906     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1459 0A1A  C9          	RET				;return back to MENU
 1460                   
 1461 0A1B              IBMFORM_OK1:
 1462 0A1B  21 2EF1     	LD	HL,IBM_FORMAT1		;Formatting started
 1463 0A1E  CD 1903     	CALL	PMSG
 1464 0A21              IBMFORM_OK:
 1465 0A21  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here
 1466 0A24  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1467                   
 1468 0A27  3E 01       	LD	A,1
 1469 0A29  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1470 0A2C  AF          	XOR	A,A			;Setup for the BIOS below
 1471 0A2D  FD 77 01    	LD	(IY+SIDE),A		;Side A 
 1472 0A30  CD 11FF     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1473 0A33  AF          	XOR	A,A
 1474                   					;Fall through with 0 in [A] for trk 0
 1475 0A34              IBM_NEXT_TRK:			
 1476 0A34  FD 77 00    	LD	(IY+TRK),A		;store track info for eack loop
 1477 0A37  CD 1383     	CALL	BUILD_TRACK		;Build a complete track image in RAM
 1478                   
 1479 0A3A  CD 0E79     	CALL	SEEK_TRACK_NV		;Seek with verify command to 1791/5
 1480 0A3D  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1481                   
 1482 0A40  21 305F     	LD	HL,FORM_TRK_MSG		;At track xx
 1483 0A43  CD 1903     	CALL	PMSG
 1484 0A46  FD 7E 00    	LD	A,(IY+TRK)
 1485 0A49  CD 1989     	CALL	PACC
 1486                   
 1487 0A4C  11 5000     	LD	DE,FBUFFER		;Move Start of track image into DE
 1488 0A4F  D5          	PUSH	DE			;save it
 1489 0A50  2A 3923     	LD	HL,(E_GAP4_MARK)	;End+1 of track header
 1490 0A53  2B          	DEC	HL
 1491 0A54  ED 52       	SBC	HL,DE
 1492 0A56  EB          	EX	DE,HL			;Count now in DE
 1493 0A57  E1          	POP	HL			;DE on stack to --> HL
 1494                   	
 1495 0A58  CD 1132     	CALL	WRITE_TRACK		;<<<< Write track with hardware >>>>>
 1496 0A5B  C4 12A0     	CALL	NZ,SHOW_ERRORS
 1497                   
 1498 0A5E  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1499 0A61  C2 0B16     	JP	NZ,IBMF_ABORT
 1500                   
 1501 0A64  FD 34 00    	INC	(IY+TRK)		;what was the last track number just done
 1502 0A67  FD 7E 00    	LD	A,(IY+TRK)
 1503 0A6A  DD BE 01    	CP	A,(IX+NTRKS)		;Check if we are on the last tarck
 1504 0A6D  20 C5       	JR	NZ,IBM_NEXT_TRK		;If not then back to updating tracks and doing it again.
 1505                   ;
 1506 0A6F  21 2F77     	LD	HL,COPY_SYSTRKS		;Do you wish to copy CPM from the system tracks of drive A:
 1507 0A72  CD 1903     	CALL	PMSG
 1508 0A75  CD 190E     	CALL	GETCMD			;Ask if we wish to continue
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  27
VF      Z80

 1509 0A78  FE 59       	CP	A,'Y'
 1510 0A7A  C2 0B06     	JP	NZ,IBMF_DONE1		;If not return
 1511 0A7D  21 2FEB     	LD	HL,COPYING_CPM
 1512 0A80  CD 1903     	CALL	PMSG
 1513 0A83  DD 7E 12    	LD	A,(IX+SYS_TRKS)
 1514 0A86  32 3914     	LD	(COPY_TRK_COUNT),A	;Count down 2 tracks
 1515                   
 1516 0A89  3E 01       	LD	A,1			;Second drive on A: set (DRIVE_2) to it
 1517 0A8B  32 0047     	LD	(DRIVE_2),A
 1518                   ;
 1519 0A8E              IBM_CPM_LOOP				;Now copy CPM from A: Drive to B: drive. IX is already 8" IBM
 1520 0A8E  CD 11B3     	CALL	START_DRIVE_2		;Select for A: drive in hardware, Side A
 1521 0A91  CD 0E2D     	CALL	HOME		
 1522 0A94  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1523                   
 1524 0A97  3A 3915     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1525 0A9A  FD 77 00    	LD	(IY+TRK),A
 1526                   
 1527 0A9D  CD 0E68     	CALL	SEEK_TRACK_V
 1528 0AA0  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1529                   
 1530 0AA3  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1531 0AA6  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1532 0AA9  1E 01       	LD	E,1			;Start with 1st sector 
 1533 0AAB  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1534                   ;
 1535 0AAE  CD 0F6C     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1536 0AB1  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1537                   ;
 1538                   ;---					
 1539                   ;					;<<<<< WRITE TO Destination drive
 1540 0AB4  CD 11AE     	CALL	START_DRIVE_1		;Select for B: drive in hardware, Side A
 1541 0AB7  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1542 0ABA  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1543                   
 1544 0ABD  3A 3915     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1545 0AC0  FD 77 00    	LD	(IY+TRK),A
 1546                   
 1547 0AC3  CD 0E68     	CALL	SEEK_TRACK_V
 1548 0AC6  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1549                   
 1550 0AC9  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1551 0ACC  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1552 0ACF  1E 01       	LD	E,1			;Start with 1st sector 
 1553 0AD1  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1554                   ;
 1555 0AD4  CD 10B3     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1556 0AD7  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1557                   ;
 1558 0ADA  3A 3915     	LD	A,(COPY_TRK)		;bump up a track
 1559 0ADD  3C          	INC	A
 1560 0ADE  32 3915     	LD	(COPY_TRK),A
 1561 0AE1  3A 3914     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1562 0AE4  3D          	DEC	A
 1563 0AE5  32 3914     	LD	(COPY_TRK_COUNT),A	
 1564 0AE8  CA 0AF3     	JP	Z,IBMF_DONE2
 1565                   ;
 1566 0AEB  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  28
VF      Z80

 1567 0AEE  20 16       	JR	NZ,IBMF_DONE1		;Loop until abort or all tracks done
 1568 0AF0  C3 0A8E     	JP	IBM_CPM_LOOP
 1569                   ;
 1570 0AF3              IBMF_DONE2
 1571 0AF3  3A 38FE     	LD	A,(ERRORS_FLAG)		;Were there errors
 1572 0AF6  B7          	OR	A,A
 1573 0AF7  20 1D       	JR	NZ,IBMF_ABORT
 1574 0AF9  21 3018     	LD	HL,END_FORM_MSG2
 1575 0AFC  CD 1903     	CALL	PMSG
 1576 0AFF  CD 11AE     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1577 0B02  3A 3906     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1578 0B05  C9          	RET				;return back to MENU
 1579                   ;
 1580 0B06              IBMF_DONE1:
 1581 0B06  3A 38FE     	LD	A,(ERRORS_FLAG)		;Were there errors
 1582 0B09  B7          	OR	A,A
 1583 0B0A  20 0A       	JR	NZ,IBMF_ABORT
 1584 0B0C  21 2F0C     	LD	HL,END_FORM_MSG1
 1585 0B0F  CD 11AE     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1586 0B12  3A 3906     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1587 0B15  C9          	RET				;return back to MENU
 1588                   ;
 1589 0B16              IBMF_ABORT:
 1590 0B16  21 2577     	LD	HL,FORM_ERRMSG		;Say error formatting disk
 1591 0B19  CD 1903     	CALL	PMSG	
 1592 0B1C  31 3A25     	LD	SP,STACK
 1593 0B1F  C3 0125     	JP	START			;Must abort everything because disk status is unknown
 1594                   ;
 1595                   ;
 1596                   ;
 1597                   ;
 1598                   ;***************** DISK TO DISK COPY *********************************
 1599                   ; Unlike much of this program, this module is somewhat hardware specific in that it assumes 
 1600                   ; the source and destination disks are identical and are using the SAME disk formats. 
 1601                   ; Normall they are 8" drives but it should be OK with two 5" drives as well. (5" was not tested)
 1602                   ; I decided not to use whole track R/W's because there is no CRC error checking of the data. 
 1603                   ; Uses the 1791/5 multi sector read command. Will do both sides if DS disk
 1604                   ; 
 1605 0B22              COPY_DISK:
 1606 0B22  AF          	XOR	A,A
 1607 0B23  32 38FE     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1608                   
 1609 0B26  21 2C72     	LD	HL,COPY_MSG		;Announce the disk copy msg
 1610 0B29  CD 1903     	CALL	PMSG
 1611 0B2C  AF          	XOR	A,A			;Setup for the BIOS below
 1612 0B2D  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1613 0B30  32 3915     	LD	(COPY_TRK),A
 1614 0B33  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1615 0B36  CD 11AE     	CALL	START_DRIVE_1		;Start "the current drive" hardware, Side A
 1616 0B39  CD 0E2D     	CALL	HOME		
 1617 0B3C  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1618 0B3F  C2 0C1E     	JP	NZ,DONE_COPY
 1619                   ;
 1620 0B42              GET_CDEST:				;<<< DESTINATION DRIVE
 1621 0B42  21 2CB9     	LD	HL,COPY2_MSG		;Destination disk 
 1622 0B45  CD 1903     	CALL	PMSG
 1623 0B48  CD 15CF     	CALL	SELECT_DR_2		;Get second drive, put it in (DRIVE_2)
 1624 0B4B  FE FF       	CP	A,0FFH		
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  29
VF      Z80

 1625 0B4D  28 F3       	JR	Z,GET_CDEST		;Invalid drive, start over
 1626 0B4F  FE 1B       	CP	A,ESC
 1627 0B51  CA 0C1E     	JP	Z,DONE_COPY
 1628                   ;
 1629 0B54              FORMATS_OK:
 1630 0B54  CD 11B3     	CALL	START_DRIVE_2		;Select for second drive in hardware, Side A
 1631 0B57  CD 0E2D     	CALL	HOME		
 1632 0B5A  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1633 0B5D  C2 0C1E     	JP	NZ,DONE_COPY		;If errors abort
 1634                   	
 1635 0B60  CD 17C6     	CALL	CHECK_WP		;See if disk is write protected
 1636 0B63  C2 0C1E     	JP	NZ,DONE_COPY		;Abort if second drive is write protected
 1637                   ;
 1638 0B66              COPYWP_OK:
 1639 0B66  21 2CD6     	LD	HL,HOW_MANY_TRKS
 1640 0B69  CD 1903     	CALL	PMSG
 1641 0B6C  CD 190E     	CALL	GETCMD
 1642 0B6F  FE 1B       	CP	A,ESC			;Abort if ESC character
 1643 0B71  CA 0C1E     	JP	Z,DONE_COPY
 1644 0B74  FE 53       	CP	A,'S'
 1645 0B76  20 04       	JR	NZ,NOT_S
 1646 0B78  3E 02       	LD	A,2
 1647 0B7A  18 11       	JR	GOT_TRK_CNT
 1648 0B7C  FE 41       NOT_S:	CP	A,'A'
 1649 0B7E  20 05       	JR	NZ,NOT_ALL
 1650 0B80  DD 7E 01    	LD	A,(IX+NTRKS)
 1651 0B83  18 08       	JR	GOT_TRK_CNT
 1652 0B85  21 2D0F     NOT_ALL:LD	HL,INVALID_TRK_CT	;Must be S or All
 1653 0B88  CD 1903     	CALL	PMSG
 1654 0B8B  18 D9       	JR	COPYWP_OK
 1655                   ;
 1656 0B8D              GOT_TRK_CNT:
 1657 0B8D  32 3914     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1658                   	
 1659 0B90              COPY_R_LOOP:				; <<<< READ FROM Source drive
 1660 0B90  CD 11AE     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1661 0B93  CD 11FF     	CALL	SET_SIDE		;Make sure drive is set for correct side
 1662 0B96  CD 0E2D     	CALL	HOME		
 1663 0B99  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1664                   
 1665 0B9C  3A 3915     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1666 0B9F  FD 77 00    	LD	(IY+TRK),A
 1667                   
 1668 0BA2  CD 0E68     	CALL	SEEK_TRACK_V		;Get appropiate track
 1669 0BA5  C4 12A0     	CALL	NZ,SHOW_ERRORS		;not clear why this is so. 
 1670                   	
 1671 0BA8  21 2D3D     	LD	HL,COPY_AT_TRK
 1672 0BAB  CD 1903     	CALL	PMSG
 1673 0BAE  CD 1291     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1674                   
 1675 0BB1  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1676 0BB4  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1677 0BB7  1E 01       	LD	E,1			;Start with 1st sector 
 1678 0BB9  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1679                   ;
 1680 0BBC  CD 0F6C     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1681 0BBF  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1682                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  30
VF      Z80

 1683                   ;---					
 1684                   ;					;<<<<< WRITE TO Destination drive
 1685 0BC2  CD 11B3     	CALL	START_DRIVE_2		;Start "the second drive" in hardware, Side A
 1686 0BC5  CD 11FF     	CALL	SET_SIDE		;Update the side hardware 
 1687 0BC8  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1688 0BCB  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1689                   
 1690 0BCE  3A 3915     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1691 0BD1  FD 77 00    	LD	(IY+TRK),A
 1692                   
 1693 0BD4  CD 0E68     	CALL	SEEK_TRACK_V		;Get appropiate track
 1694 0BD7  C4 12A0     	CALL	NZ,SHOW_ERRORS		;not clear why this is so. 
 1695                   
 1696 0BDA  21 2D52     	LD	HL,WRITE_AT_TRK
 1697 0BDD  CD 1903     	CALL	PMSG
 1698 0BE0  CD 1291     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1699                   
 1700 0BE3  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1701 0BE6  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1702 0BE9  1E 01       	LD	E,1			;Start with 1st sector 
 1703 0BEB  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1704                   ;
 1705 0BEE  CD 10B3     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1706 0BF1  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1707                   ;
 1708 0BF4  CD 11E0     	CALL	SWAP_SIDES		;Sides swap check
 1709 0BF7  20 11       	JR	NZ,R_TRK_OK		;If B side (NZ), same track
 1710                   ;					;Else see if more tracks are required
 1711 0BF9  3A 3915     	LD	A,(COPY_TRK)		;bump up a track
 1712 0BFC  3C          	INC	A
 1713 0BFD  32 3915     	LD	(COPY_TRK),A
 1714 0C00  3A 3914     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1715 0C03  3D          	DEC	A
 1716 0C04  32 3914     	LD	(COPY_TRK_COUNT),A	
 1717 0C07  CA 0C12     	JP	Z,DONE_COPY2
 1718                   ;
 1719 0C0A              R_TRK_OK:
 1720 0C0A  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1721 0C0D  20 0F       	JR	NZ,DONE_COPY		;Loop until abort or all tracks done
 1722 0C0F  C3 0B90     	JP	COPY_R_LOOP
 1723                   ;
 1724 0C12              DONE_COPY2:				;We are done restore both drives
 1725 0C12  3A 38FE     	LD	A,(ERRORS_FLAG)		;Were there errors
 1726 0C15  B7          	OR	A,A
 1727 0C16  20 0C       	JR	NZ,BAD_COPY
 1728 0C18  21 2D28     	LD	HL,COPYING_DONE		;Announce we are finished
 1729 0C1B  CD 1903     	CALL	PMSG
 1730 0C1E              DONE_COPY:
 1731 0C1E  CD 11AE     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1732 0C21  C3 0273     	JP	END_CMD
 1733                   ;
 1734 0C24  21 306A     BAD_COPY:LD	HL,BAD_COPY_MSG		;errors seen so say bad copy
 1735 0C27  CD 1903     	CALL	PMSG
 1736 0C2A  18 F2       	JR	DONE_COPY
 1737                   ;
 1738                   ;***************** VERIFY TWO DISKS ARE THE SAME SECTOR BY SECTOR******************************
 1739                   ; This module assumes the disks sizes are identical and are using the same disk formats. 
 1740                   ; Normall they are 8" drives but it should be OK with two 5" drives as well. (5" was not tested)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  31
VF      Z80

 1741                   ;
 1742 0C2C              VERIFY_DISK:
 1743 0C2C  21 2D8E     	LD	HL,VERIFY_MSG		;Announce the disk copy msg
 1744 0C2F  CD 1903     	CALl	PMSG
 1745 0C32  AF          	XOR	A,A			;Setup for the BIOS below
 1746 0C33  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1747 0C36  32 3915     	LD	(COPY_TRK),A
 1748 0C39  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A of A:
 1749 0C3C  3C          	INC	A
 1750 0C3D  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1751 0C40  CD 11AE     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1752 0C43  CD 0E2D     	CALL	HOME		
 1753 0C46  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1754 0C49  C2 0273     	JP	NZ,END_CMD
 1755                   ;
 1756 0C4C              GET_VDEST:				;<<< DESTINATION DRIVE
 1757 0C4C  21 2DB8     	LD	HL,VERIFY2_MSG		;Destination disk 
 1758 0C4F  CD 1903     	CALL	PMSG
 1759 0C52  CD 15CF     	CALL	SELECT_DR_2		;Ask user which drive for second drive
 1760 0C55  FE FF       	CP	A,0FFH			;Note IX will be the same for both disks
 1761 0C57  28 F3       	JR	Z,GET_VDEST		;Invalid drive, start over
 1762 0C59  FE 1B       	CP	A,ESC
 1763 0C5B  CA 0273     	JP	Z,END_CMD
 1764                   ;
 1765 0C5E              HOW_MANY:
 1766 0C5E  21 2CD6     	LD	HL,HOW_MANY_TRKS
 1767 0C61  CD 1903     	CALL	PMSG
 1768 0C64  CD 190E     	CALL	GETCMD
 1769 0C67  FE 1B       	CP	A,ESC			;Abort if ESC character
 1770 0C69  CA 0273     	JP	Z,END_CMD
 1771 0C6C  FE 53       	CP	A,'S'
 1772 0C6E  20 04       	JR	NZ,NOT_VS
 1773 0C70  3E 02       	LD	A,2
 1774 0C72  18 11       	JR	VGOT_TRK_CNT
 1775 0C74  FE 41       NOT_VS:	CP	A,'A'
 1776 0C76  20 05       	JR	NZ,NOT_VALL
 1777 0C78  DD 7E 01    	LD	A,(IX+NTRKS)
 1778 0C7B  18 08       	JR	VGOT_TRK_CNT
 1779 0C7D              NOT_VALL:
 1780 0C7D  21 2D0F     	LD	HL,INVALID_TRK_CT	;Must be S or All
 1781 0C80  CD 1903     	CALL	PMSG
 1782 0C83  18 D9       	JR	HOW_MANY
 1783                   ;
 1784 0C85              VGOT_TRK_CNT:
 1785 0C85  32 3914     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1786                   ;	
 1787 0C88              VERIFY_R_LOOP:
 1788 0C88  CD 11AE     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1789 0C8B  CD 11FF     	CALL	SET_SIDE		;Update the side hardware 
 1790 0C8E  FD 7E 02    	LD	A,(IY+SCTR)		;Is it a new track
 1791 0C91  FE 01       	CP	A,1
 1792 0C93  20 12       	JR	NZ,VR_1
 1793 0C95  CD 0E2D     	CALL	HOME			;If a new track need to seek
 1794 0C98  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1795 0C9B  3A 3915     	LD	A,(COPY_TRK)
 1796 0C9E  FD 77 00    	LD	(IY+TRK),A
 1797                   
 1798 0CA1  CD 0E68     	CALL	SEEK_TRACK_V		;seek to the new track position	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  32
VF      Z80

 1799 0CA4  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1800 0CA7              VR_1:	
 1801 0CA7  21 2D64     	LD	HL,READ_AT_TRK
 1802 0CAA  CD 1903     	CALL	PMSG
 1803 0CAD  CD 1242     	CALL	SHOW_TSS_LOC		;Announce current Track/Sec 
 1804                   
 1805 0CB0  21 5000     	LD	HL,FBUFFER		;Will place the complete sector image here (5000H)
 1806 0CB3  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1807                   ;
 1808 0CB6  CD 0ED7     	CALL	READ_SECTOR		;<<<<<< Read sector of A: Drive>>>>>>>
 1809 0CB9  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1810                   ;
 1811 0CBC  CD 11B3     	CALL	START_DRIVE_2		;Start the drive hardware (A side)
 1812 0CBF  CD 11FF     	CALL	SET_SIDE		;Update the side hardware -- assume side A only
 1813 0CC2  FD 7E 02    	LD	A,(IY+SCTR)		;Is it a new track
 1814 0CC5  FE 01       	CP	A,1
 1815 0CC7  20 12       	JR	NZ,VR_2
 1816 0CC9  CD 0E2D     	CALL	HOME			;Not clear why but get a seek error without this!
 1817 0CCC  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1818 0CCF  3A 3915     	LD	A,(COPY_TRK)
 1819 0CD2  FD 77 00    	LD	(IY+TRK),A
 1820                   
 1821 0CD5  CD 0E68     	CALL	SEEK_TRACK_V		;seek to the new track position
 1822 0CD8  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1823 0CDB              VR_2:	
 1824 0CDB  21 2D6F     	LD	HL,VERIFY_AT_TRK
 1825 0CDE  CD 1903     	CALL	PMSG
 1826 0CE1  CD 1242     	CALL	SHOW_TSS_LOC		;Announce current Track 
 1827                   
 1828 0CE4  21 6000     	LD	HL,FBUFFER2		;Will place  the complete sector image here (5000H)
 1829 0CE7  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1830                   
 1831 0CEA  CD 0ED7     	CALL	READ_SECTOR		;<<<<<< Read sector on B: Drive
 1832 0CED  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1833                   ;
 1834 0CF0  CD 1326     	CALL	CMP_BUFFERS		;Check for errors
 1835 0CF3  28 09       	JR	Z,VCOMPARE_OK
 1836 0CF5  21 28F0     	LD	HL,SEC_V_ERROR		;R/W Error found 
 1837 0CF8  CD 1903     	CALL	PMSG
 1838 0CFB  CD 1242     	CALL	SHOW_TSS_LOC		;trk,sec,head
 1839                   
 1840 0CFE              VCOMPARE_OK:
 1841 0CFE  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1842 0D01  C2 0D33     	JP	NZ,DONE_VERIFY1		;Abort if requested
 1843                   
 1844 0D04  FD 34 02    	INC	(IY+SCTR)		;Get next sector
 1845 0D07  FD 7E 02    	LD	A,(IY+SCTR)
 1846 0D0A  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1847 0D0B  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1848 0D0E  C2 0C88     	JP	NZ,VERIFY_R_LOOP
 1849                   
 1850 0D11  CD 11E0     	CALL	SWAP_SIDES		;Sides swap check
 1851 0D14  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1852 0D16  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1853 0D19  C2 0C88     	JP	NZ,VERIFY_R_LOOP	;If B side (NZ), same track, back to sec 1
 1854                   
 1855 0D1C  3A 3915     	LD	A,(COPY_TRK)		;bump up a track
 1856 0D1F  3C          	INC	A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  33
VF      Z80

 1857 0D20  32 3915     	LD	(COPY_TRK),A
 1858 0D23  3A 3914     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1859 0D26  3D          	DEC	A
 1860 0D27  32 3914     	LD	(COPY_TRK_COUNT),A	
 1861 0D2A  C2 0C88     	JP	NZ,VERIFY_R_LOOP
 1862                   ;
 1863 0D2D              END_VERIFY:				;We are done restore both drives
 1864 0D2D  21 2D78     	LD	HL,VERIFY_DONE
 1865 0D30  CD 1903     	CALL	PMSG
 1866                   ;
 1867 0D33              DONE_VERIFY1:
 1868 0D33  CD 11AE     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1869 0D36  CD 0E2D     	CALL	HOME			;Will set TRK to 0
 1870 0D39  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1871 0D3C  3A 3906     	LD	A,(CMD_STORE)		;So we dont pick up other menu items
 1872 0D3F  C9          	RET				;Back to main menu	
 1873                   ;
 1874                   ;
 1875                   ;
 1876                   ; This routine will copy the CPM system tracks FROM another current disk and writes it TO 
 1877                   ; the current disk. Its just a modification of COPY_DISK where the number of tracks set aside
 1878                   ; is picked off from the Disk paramater table
 1879                   ; It should be OK with any disk format but so far has just been checked out on 
 1880                   ; standard 8" SSSD IBM 3740 disks. Both disks must use the same format. (untested for 5" disks)
 1881                   ;
 1882 0D40              COPY_CPM3_SYS:
 1883 0D40  AF          	XOR	A,A
 1884 0D41  32 38FE     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1885                   
 1886 0D44  21 2DF3     	LD	HL,SYS_COPY_MSG
 1887 0D47  CD 1903     	CALL	PMSG
 1888 0D4A  AF          	XOR	A,A			;Setup for the BIOS below
 1889 0D4B  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1890 0D4E  32 3915     	LD	(COPY_TRK),A
 1891 0D51  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1892                   
 1893 0D54  CD 11AE     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1894 0D57  CD 0E2D     	CALL	HOME		
 1895 0D5A  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1896 0D5D  C2 0273     	JP	NZ,END_CMD
 1897                   
 1898 0D60  CD 17C6     	CALL	CHECK_WP		;See if disk is write protected
 1899 0D63  C2 0273     	JP	NZ,END_CMD
 1900                   
 1901 0D66              GET_SDEST:				;<<<  SOURCE DRIVE
 1902 0D66  21 2E44     	LD	HL,SYS_COPY_MSG1	;Source disk of CPM 
 1903 0D69  CD 1903     	CALL	PMSG
 1904 0D6C  CD 15CF     	CALL	SELECT_DR_2		;Ask user which drive to get the CPM system tracks from
 1905 0D6F  FE FF       	CP	A,0FFH			;Note IX will be the same for both disks
 1906 0D71  28 F3       	JR	Z,GET_SDEST		;Invalid drive, start over
 1907 0D73  FE 1B       	CP	A,ESC
 1908 0D75  CA 0273     	JP	Z,END_CMD
 1909                   
 1910 0D78  CD 11B3     	CALL	START_DRIVE_2		;Start the drive hardware (A side)
 1911 0D7B  CD 0E2D     	CALL	HOME
 1912 0D7E  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1913 0D81  C2 0273     	JP	NZ,END_CMD
 1914                   	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  34
VF      Z80

 1915 0D84              COPYWP_SOK:
 1916 0D84  DD 7E 12    	LD	A,(IX+SYS_TRKS)		;How many tracks for CPM system on this disk	
 1917 0D87  32 3914     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1918                   	
 1919 0D8A              SYS_R_LOOP:				; <<<< READ FROM Source drive
 1920 0D8A  CD 11B3     	CALL	START_DRIVE_2		;Start the source drive hardware (A side)
 1921 0D8D  CD 11FF     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1922 0D90  CD 0E2D     	CALL	HOME		
 1923 0D93  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1924                   
 1925 0D96  3A 3915     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1926 0D99  FD 77 00    	LD	(IY+TRK),A
 1927 0D9C  CD 0E68     	CALL	SEEK_TRACK_V
 1928 0D9F  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1929                   
 1930 0DA2  21 2E69     	LD	HL,COPY_SYS_TRK
 1931 0DA5  CD 1903     	CALL	PMSG
 1932 0DA8  CD 1291     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1933                   
 1934 0DAB  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1935 0DAE  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1936 0DB1  1E 01       	LD	E,1			;Start with 1st sector 
 1937 0DB3  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1938                   ;
 1939 0DB6  CD 0F6C     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1940 0DB9  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1941                   ;
 1942                   ;---					
 1943                   ;					;<<<<< WRITE TO Destination drive
 1944 0DBC  CD 11AE     	CALL	START_DRIVE_1		;Start the destination drive hardware (A side)
 1945 0DBF  CD 11FF     	CALL	SET_SIDE		;Update the side hardware (A)
 1946 0DC2  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1947 0DC5  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1948                   
 1949 0DC8  3A 3915     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1950 0DCB  FD 77 00    	LD	(IY+TRK),A
 1951 0DCE  CD 0E68     	CALL	SEEK_TRACK_V
 1952 0DD1  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1953                   
 1954 0DD4  21 2E7D     	LD	HL,WRITE_SYS_TRK
 1955 0DD7  CD 1903     	CALL	PMSG
 1956 0DDA  CD 1291     	CALL	SHOW_TS_LOC		;Shows current (TRK,SIDE)
 1957                   
 1958 0DDD  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1959 0DE0  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1960 0DE3  1E 01       	LD	E,1			;Start with 1st sector 
 1961 0DE5  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1962                   ;
 1963 0DE8  CD 10B3     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1964 0DEB  C4 12A0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1965                   ;
 1966 0DEE  CD 11E0     	CALL	SWAP_SIDES		;Sides swap check
 1967 0DF1  20 11       	JR	NZ,R_TRK_SOK		;If B side (NZ), same track
 1968                   ;					;Else see if more tracks are required
 1969 0DF3  3A 3915     	LD	A,(COPY_TRK)		;bump up a track
 1970 0DF6  3C          	INC	A
 1971 0DF7  32 3915     	LD	(COPY_TRK),A
 1972 0DFA  3A 3914     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  35
VF      Z80

 1973 0DFD  3D          	DEC	A
 1974 0DFE  32 3914     	LD	(COPY_TRK_COUNT),A	
 1975 0E01  CA 0E0C     	JP	Z,DONE_SYS2
 1976                   ;
 1977 0E04              R_TRK_SOK:
 1978 0E04  CD 19BC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1979 0E07  20 0F       	JR	NZ,DONE_SYS1		;Loop until abort or all tracks done
 1980 0E09  C3 0D8A     	JP	SYS_R_LOOP
 1981                   ;
 1982 0E0C              DONE_SYS2:				;We are done restore both drives
 1983 0E0C  3A 38FE     	LD	A,(ERRORS_FLAG)		;Were there errors
 1984 0E0F  B7          	OR	A,A
 1985 0E10  20 13       	JR	NZ,ERROR_SYS3
 1986 0E12  21 2E8E     	LD	HL,DONE_SYS_MSG		;Announce we are finished
 1987 0E15  CD 1903     	CALL	PMSG
 1988 0E18              DONE_SYS1:
 1989 0E18  CD 11AE     	CALL	START_DRIVE_1		;Start the source drive hardware (A side)
 1990 0E1B  CD 0E2D     	CALL	HOME			;Will set TRK to 0
 1991 0E1E  C4 12A0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1992 0E21  3A 3906     	LD	A,(CMD_STORE)		;So we dont pick up other menu items
 1993 0E24  C9          	RET				;Back to main menu	
 1994                   ;
 1995 0E25              ERROR_SYS3:
 1996 0E25  21 2F4B     	LD	HL,ERRORS_SEEN		;errors encountered
 1997 0E28  CD 1903     	CALL	PMSG
 1998 0E2B  18 EB       	JR	DONE_SYS1
 1999                   
 2000                   ;
 2001                   ;
 2002                   ;
 2003                   ;==============================================================================
 2004                   ;================== 1791/5 COMMAND ROUTINES ===================================
 2005                   ;==============================================================================
 2006                   ;
 2007                   ; SEND A RESTORE COMMAND FOR THE CURRENT DISK. 
 2008                   ; On return: Z if no errors. NZ if errors with errors in (ERSTAT)and [A]
 2009                   ; Note (TRK) IS set to 0, (IX+HW_BYTE) SIDE_BIT (7) is not changed
 2010                   ;
 2011 0E2D  3E 80       HOME:	LD	A,HOME_ERR_MASK		;Error mask for Type I RESTORE CMD
 2012 0E2F  32 3907     	LD	(ERMASK),A		;Save error mask for end/error routine
 2013 0E32  AF          	XOR	A,A
 2014 0E33  FD 77 00    	LD	(IY+TRK),A	
 2015 0E36  DB 54       HOME2:	IN	A,(STATUS)
 2016 0E38  E6 01       	AND	A,1
 2017 0E3A  20 FA       	JR	NZ,HOME2		;Wait until 1791/5 is ready
 2018 0E3C  CD 1228     	CALL	WAIT_OFF		;Disable Wait State Hardware (just in case it is on)
 2019 0E3F  3E 0C       	LD	A,RSCMD
 2020 0E41  32 3909     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2021 0E44  D3 54       	OUT	(CMD),A
 2022 0E46  CD 1161     	CALL	END_ROUTINE		;Wait, check status and return
 2023 0E49  C9          	RET
 2024                   ;
 2025                   ;
 2026                   ; SEND A HEAD STEP-IN COMMAND TO THE CURRENT DRIVE 
 2027                   ; On return: Z if no errors. NZ if errors with errors in (ERSTAT)and [A]
 2028                   ; Note (TRK) is NOT updated to new track position, (IX+HW_BYTE) SIDE_BIT (7) is unchanged
 2029                   ;
 2030 0E4A              STEP_IN_CMD:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  36
VF      Z80

 2031 0E4A  3E 90       	LD	A,SIN_ERR_MASK		;Error mask for Type I CMD
 2032 0E4C  32 3907     	LD	(ERMASK),A		;Save error mask for end/error routine
 2033 0E4F  3E 5C       	LD	A,STEPIN		;Send Step-in (with verify) CMD
 2034 0E51  32 3909     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2035 0E54              STEP_IN2:
 2036 0E54  DB 54       	IN	A,(STATUS)
 2037 0E56  E6 01       	AND	A,1
 2038 0E58  20 FA       	JR	NZ,STEP_IN2		;Wait until 1791/5 is ready
 2039 0E5A  CD 1228     	CALL	WAIT_OFF		;Disable Wait State Hardware (just in case it is on)
 2040 0E5D  3E 5C       	LD	A,STEPIN
 2041 0E5F  32 3909     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2042 0E62  D3 54       	OUT	(CMD),A
 2043 0E64  CD 1161     	CALL	END_ROUTINE		;Wait, check status and return
 2044 0E67  C9          	RET
 2045                   ;
 2046                   ; Seek with track WITH verify. Assumes valid track in (TRK)
 2047                   ; On return: Z if no errors. NZ if errors, (ERSTAT)and [A] has errors 
 2048                   ; Note (TRK) is NOT updated to new track position
 2049                   ;
 2050 0E68              SEEK_TRACK_V:
 2051 0E68  3E 90       	LD	A,SK_ERR_MASK		;Error mask for Type I Seek CMD
 2052 0E6A  32 3907     	LD	(ERMASK),A		;Save error mask for end/error routine
 2053 0E6D  3E 1C       	LD	A,SKCMD			;Send seek (with verify) CMD
 2054 0E6F  32 3909     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2055 0E72  3E 02       	LD	A,SEEK_RETRY_MAX	;In case of errors will retry seeking
 2056 0E74  32 390D     	LD	(SEEK_RT_COUNT),A	;a few times
 2057 0E77  18 0F       	JR	SEEK_TRK
 2058                   
 2059                   ;
 2060                   ;
 2061                   ; Seek track with NO verify. Assumes valid track in (TRK)
 2062                   ; On return: Z if no errors. NZ if errors, (ERSTAT)and [A] has errors 
 2063                   ; Note (TRK) is NOT updated to new track position
 2064                   ;
 2065 0E79              SEEK_TRACK_NV:	
 2066 0E79  3E 90       	LD	A,SK_ERR_MASK		;Error mask for Type I Seek CMD
 2067 0E7B  32 3907     	LD	(ERMASK),A		;Save error mask for end/error routine
 2068 0E7E  3E 18       	LD	A,SKNCMD		;Send seek CMD ((with NO verify)
 2069 0E80  32 3909     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2070 0E83  3E 02       	LD	A,SEEK_RETRY_MAX	;In case of errors will retry seeking
 2071 0E85  32 390D     	LD	(SEEK_RT_COUNT),A	;a few times
 2072 0E88              SEEK_TRK:
 2073 0E88  DB 54       	IN	A,(STATUS)
 2074 0E8A  E6 01       	AND	A,1
 2075 0E8C  20 FA       	JR	NZ,SEEK_TRK		;wait until 1791/5 is ready
 2076 0E8E  CD 1228     	CALL	WAIT_OFF		;Disable Wait State Hardware (in case it was on)
 2077 0E91  FD 7E 00    	LD	A,(IY+TRK)		;Send required track to 1791/5
 2078 0E94  D3 57       	OUT	(DATA),A
 2079 0E96  3A 3909     	LD	A,(CHIP_CMDSV)		;Was it a seek or seek_nv
 2080 0E99  D3 54       	OUT	(CMD),A			;Send seek cmd		
 2081 0E9B  CD 1161     	CALL	END_ROUTINE		;Wait, check status and return
 2082 0E9E  C8          	RET	Z			;Return if no errors
 2083                   
 2084 0E9F  3A 390D     	LD	A,(SEEK_RT_COUNT)
 2085 0EA2  3D          	DEC	A			;Retrys 2,1... Will reseek
 2086 0EA3  32 390D     	LD	(SEEK_RT_COUNT),A
 2087 0EA6  28 02       	JR	Z,BAD_SEEK
 2088 0EA8  18 DE       	JR	SEEK_TRK		;Try re-reading the sector
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  37
VF      Z80

 2089 0EAA              BAD_SEEK:
 2090 0EAA  AF          	XOR	A,A
 2091 0EAB  3D          	DEC	A			;Set to NZ
 2092 0EAC  3A 3908     	LD	A,(ERSTAT)
 2093 0EAF  C9          	RET	
 2094                   ;
 2095                   ;
 2096                   ;
 2097                   ;
 2098                   ; Read an ID from the track. Assumes valid track in (TRK) 
 2099                   ; Note any Sector ID from the track will be obtained depending where the head falls
 2100                   ; The currently selected side at (SIDE) is read
 2101                   ;
 2102 0EB0  3E 9F       READ_ID:LD	A,ID_ERR_MASK
 2103 0EB2  32 3907     	LD	(ERMASK),A		;Store for error display
 2104 0EB5  DB 54       RDSC_1:	IN	A,(STATUS)
 2105 0EB7  E6 01       	AND	A,1
 2106 0EB9  20 FA       	JR	NZ,RDSC_1		;wait until 1791/5 is ready
 2107 0EBB  21 3900     	LD	HL,IDSV			;Will store the 6 bytes here
 2108 0EBE  01 0657     	LD	BC,600H+DATA		;6 bytes in B, Data port in C below
 2109 0EC1  CD 122F     	CALL	WAIT_ON			;Enable hardware wait states
 2110 0EC4  3E C4       	LD	A,RDACMD		;Send the Read Track ID CMD
 2111 0EC6  32 3909     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2112 0EC9  F3          	DI				;Just in case
 2113 0ECA  D3 54       	OUT	(CMD),A
 2114 0ECC  18 00       	JR	MM2			;Slight delay
 2115 0ECE  18 00       MM2:	JR	MM3
 2116 0ED0  ED B2       MM3:	INIR				;Block input 6 bytes
 2117 0ED2  FB          	EI
 2118 0ED3  CD 1161     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status 
 2119 0ED6  C9          	RET				;and return
 2120                   ;	
 2121                   ;
 2122                   ;
 2123                   ; <<< CORE SECTOR READ ROUTINE>>>. Assumes valid track in (TRK)&(SEC) 
 2124                   ; Address in (TADDR). The currently selected side at (SIDE) is setup
 2125                   ; Note: (TADDR) is unaltered, (DMA_NEXT) is updated for repetative calls to this routine
 2126                   ;
 2127 0ED7              READ_SECTOR:
 2128 0ED7  3E BF       	LD	A,RS_ERR_MASK	;Error mask from 1791/5 after read is done
 2129 0ED9  32 3907     	LD	(ERMASK),A
 2130 0EDC  3E 04       	LD	A,SEC_RETRY_MAX		;In case of errors will retry reading sector 
 2131 0EDE  32 390C     	LD	(SEC_RT_COUNT),A	;a few times
 2132 0EE1              AGAIN_RD:
 2133 0EE1  2A 0040     	LD	HL,(TADDR)	;Deposit sector info here
 2134 0EE4  FD 7E 02    	LD	A,(IY+SCTR)
 2135 0EE7  D3 56       	OUT	(SECTOR),A
 2136 0EE9  0E 57       	LD	C,DATA		;C = DATA port for INIR below
 2137 0EEB  CD 122F     	CALL	WAIT_ON
 2138                   
 2139         0001           if	CHIP_1791
 2140 0EEE  3E 80       	LD	A,RDCMD91	;Read sector command to 1791
 2141 0EF0  32 3909     	LD	(CHIP_CMDSV),A	;store cmd here for Error display (if any)
 2142                        endif
 2143                   
 2144         0000           if	CHIP_1795
 2148                        endif
 2149                   	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  38
VF      Z80

 2150 0EF3  F3          	DI
 2151 0EF4  D3 54       	OUT	(CMD),A
 2152 0EF6  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2153 0EF9  06 80       	LD	B,NBYTES
 2154 0EFB  B7          	OR	A,A		;Block input [B] Bytes->[HL] from port [C]
 2155 0EFC  28 10       	JR	Z,R128256	;Do 128 byte read
 2156 0EFE  06 00       	LD	B,0
 2157 0F00  FE 01       	CP	A,1
 2158 0F02  28 0A       	JR	Z,R128256	;Do 256 byte read
 2159 0F04  FE 02       	CP	A,2
 2160 0F06  28 04       	JR	Z,R512		;Do 512 byte read
 2161 0F08  ED B2       	INIR			;Must be 1024 byte sectors so 4X256		
 2162 0F0A  ED B2       	INIR
 2163 0F0C  ED B2       R512:	INIR			;256X2 bytes
 2164 0F0E  ED B2       R128256:INIR			;128 or 256 bytes (B=128 or 0)
 2165 0F10  FB          	EI
 2166 0F11  22 3912     	LD	(DMA_NEXT),HL	;Store next byte of DMA
 2167 0F14  CD 1161     	CALL	END_ROUTINE	;Wait, turn off wait hware, check status and return
 2168 0F17  C8          	RET	Z		;RET Z if all is OK
 2169                   				;Read failed. Do we retry again
 2170 0F18  3A 38FF     	LD	A,(CRTDISP)	;Check if detailed display flag is on
 2171 0F1B  B7          	OR	A,A
 2172 0F1C  28 12       	JR	Z,MM6
 2173 0F1E  21 2874     	LD	HL,SEC_READ_RETRY     ;'Re-reading SECTOR XXH.'
 2174 0F21  CD 1903     	CALL	PMSG
 2175 0F24  FD 7E 02    	LD	A,(IY+SCTR)
 2176 0F27  CD 1989     	CALL	PACC
 2177 0F2A  21 2515     	LD	HL,H_MSG
 2178 0F2D  CD 1903     	CALL	PMSG
 2179 0F30  3A 390C     MM6:	LD	A,(SEC_RT_COUNT)
 2180 0F33  3D          	DEC	A			;Retrys 4,3 2,1... Will reseek on 3rd re-read try
 2181 0F34  32 390C     	LD	(SEC_RT_COUNT),A
 2182 0F37  28 2D       	JR	Z,BAD_RD
 2183 0F39  FE 02       	CP	A,2
 2184 0F3B  20 A4       	JR	NZ,AGAIN_RD		;Try re-reading the sector
 2185 0F3D  3A 38FF     	LD	A,(CRTDISP)		;Check if detailed display flag is on
 2186 0F40  B7          	OR	A,A
 2187 0F41  28 12       	JR	Z,MM7B
 2188 0F43  21 289E     	LD	HL,SEC_RH_RETRY		;'Re-Seeking head for re-reading SECTOR XXH.'
 2189 0F46  CD 1903     	CALL	PMSG
 2190 0F49  FD 7E 02    	LD	A,(IY+SCTR)
 2191 0F4C  CD 1989     	CALL	PACC
 2192 0F4F  21 2515     	LD	HL,H_MSG
 2193 0F52  CD 1903     	CALL	PMSG
 2194 0F55              MM7B:
 2195 0F55  FD 7E 00    	LD	A,(IY+TRK)	;If it failed a second time, home, reseek and try again
 2196 0F58  F5          	PUSH	AF		;Save TRK because HOME sets it to 0
 2197 0F59  CD 0E2D     	CALL	HOME		;Restore to track 0 (Note assumes TRK is unchanged in HOME)
 2198 0F5C  F1          	POP	AF
 2199 0F5D  FD 77 00    	LD	(IY+TRK),A
 2200 0F60  CD 0E68     	CALL	SEEK_TRACK_V	;Re-seek to track
 2201 0F63  C3 0EE1     	JP	AGAIN_RD
 2202 0F66  AF          BAD_RD	XOR	A,A
 2203 0F67  3D          	DEC	A		;Set to NZ
 2204 0F68  3A 3908     	LD	A,(ERSTAT)
 2205 0F6B  C9          	RET	
 2206                   ;
 2207                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  39
VF      Z80

 2208                   ; Multi_sector Read of ALL sectors on a TRACK. Assumes head is over relevent track in (TRK)
 2209                   ; Will place data at (TADDR). The currently selected side at (SIDE) is read.
 2210                   ; (DMA_NEXT) is updated for repetative calls to this routine
 2211                   ; [D] = the number of sectors (Max IX+NSCTRS), [E] = the starting sector number.
 2212                   ; Note this can be easily modified for CPM3 to multi sector write by adjusting [D] & [E]. 
 2213                   ; Also note, actual timing for data I/O is quite tight for slow CPU's. Thus the strange layout.
 2214                   ;
 2215 0F6C              MULTI_SEC_RD:
 2216 0F6C  3E AF       	LD	A,MRS_ERR_MASK		;Setup for error checking
 2217 0F6E  32 3907     	LD	(ERMASK),A
 2218 0F71  2A 0040     	LD	HL,(TADDR)
 2219 0F74  FD 7E 00    	LD	A,(IY+TRK)
 2220 0F77  D3 55       	OUT	(TRACK),A
 2221 0F79  7B          	LD	A,E			;first sector (usually 1)
 2222 0F7A  FD 77 02    	LD	(IY+SCTR),A		;For error dump (Actully error could be any sector on the track)
 2223 0F7D  D3 56       	OUT	(SECTOR),A
 2224 0F7F  0E 57       	LD	C,DATA			;C = DATA port for INIR below
 2225                   
 2226 0F81  CD 122F     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2227                   
 2228         0001          if	CHIP_1791
 2229 0F84  3E 80       	LD	A,RDCMD91		;Read sector command to 1791
 2230 0F86  32 3909     	LD	(CHIP_CMDSV),A		;store cmd here for Error display (if any)
 2231                       endif
 2232                   
 2233         0000          if	CHIP_1795
 2237                        endif
 2238                   
 2239 0F89  CB E7       	SET	4,A			;Set "Multi sec bit"
 2240 0F8B  F5          	PUSH	AF			;Store until we get sec size info
 2241 0F8C  F3          	DI				;Disable Interrupts
 2242                   ;
 2243 0F8D  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2 or 1024=3 byte sector size
 2244 0F90  B7          	OR	A,A			;Block input [B] Bytes->[HL] from port [C]
 2245 0F91  28 0A       	JR	Z,MR128			;Do 128 byte read
 2246 0F93  FE 01       	CP	A,1
 2247 0F95  28 14       	JR	Z,MR256			;Do 256 byte read
 2248 0F97  FE 02       	CP	A,2
 2249 0F99  28 1E       	JR	Z,MR512			;Do 512 byte read
 2250 0F9B  18 2C       	JR	MR1K			;Must be 1K sectors
 2251                   
 2252 0F9D  06 80       MR128:	LD	B,128
 2253 0F9F  F1          	POP	AF
 2254 0FA0  D3 54       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2255 0FA2  ED B2       MR128A:	INIR				;128 bytes (B=128)
 2256 0FA4  06 80       	LD	B,128
 2257 0FA6  15          	DEC	D
 2258 0FA7  20 F9       	JR	NZ,MR128A
 2259 0FA9  18 32       	JR	DONE_MR
 2260                   
 2261 0FAB  06 00       MR256:	LD	B,0
 2262 0FAD  F1          	POP	AF
 2263 0FAE  D3 54       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2264 0FB0  ED B2       MR256A:	INIR				;256 bytes 
 2265 0FB2  06 00       	LD	B,0
 2266 0FB4  15          	DEC	D
 2267 0FB5  20 F9       	JR	NZ,MR256A
 2268 0FB7  18 24       	JR	DONE_MR
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  40
VF      Z80

 2269                   
 2270 0FB9  06 00       MR512:	LD	B,0
 2271 0FBB  F1          	POP	AF
 2272 0FBC  D3 54       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2273 0FBE  ED B2       MR512A:	INIR				;512 = 256x2
 2274 0FC0  ED B2       	INIR
 2275 0FC2  06 00       	LD	B,0
 2276 0FC4  15          	DEC	D
 2277 0FC5  20 F7       	JR	NZ,MR512A
 2278 0FC7  18 14       	JR	DONE_MR
 2279                   
 2280 0FC9  06 00       MR1K:	LD	B,0
 2281 0FCB  F1          	POP	AF
 2282 0FCC  D3 54       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2283 0FCE  ED B2       MR1KA:	INIR				;1K = 256x4
 2284 0FD0  ED B2       	INIR
 2285 0FD2  ED B2       	INIR
 2286 0FD4  ED B2       	INIR
 2287 0FD6  06 00       	LD	B,0
 2288 0FD8  15          	DEC	D
 2289 0FD9  20 F3       	JR	NZ,MR1KA
 2290 0FDB  18 00       	JR	DONE_MR
 2291                   
 2292 0FDD              DONE_MR:
 2293 0FDD  FB          	EI
 2294 0FDE  22 3912     	LD	(DMA_NEXT),HL		;Store "next location". Used by other routines
 2295 0FE1  CD 1161     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2296 0FE4  C8          	RET	Z			;RET Z if all is OK
 2297 0FE5  AF          	XOR	A,A
 2298 0FE6  3D          	DEC	A			;Set to NZ
 2299 0FE7  3A 3908     	LD	A,(ERSTAT)		;Return with error bits
 2300 0FEA  C9          	RET	
 2301                   ;
 2302                   ;
 2303                   ; Read Track. Assumes head is over relevent track in (TRK)
 2304                   ; Will place data at (TADDR)
 2305                   ; The currently selected side at (SIDE) is read
 2306                   ; The total size of a  track in bytes is in [DE]
 2307                   
 2308 0FEB              READ_TRACK:
 2309 0FEB  3E 80       	LD	A,RT_ERR_MASK		;Setup for error checking
 2310 0FED  32 3907     	LD	(ERMASK),A
 2311 0FF0  2A 0040     	LD	HL,(TADDR)
 2312 0FF3  FD 7E 00    	LD	A,(IY+TRK)
 2313 0FF6  D3 55       	OUT	(TRACK),A
 2314 0FF8  CD 122F     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2315 0FFB  3E E4       	LD	A,RDTCMD		;setup for 179x read track command
 2316 0FFD  32 3909     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2317 1000  F3          	DI				;Disable Interrupts
 2318 1001  D3 54       	OUT	(CMD),A			;send it to the 179x CMD port
 2319 1003  18 00       	JR	MM7			;Slight delay
 2320 1005  18 00       MM7:	JR	R_LOOP
 2321                   
 2322 1007  DB 57       R_LOOP:	IN	A,(DATA)		;Get all track bytes
 2323 1009  77          	LD	(HL),A
 2324 100A  23          	INC	HL
 2325 100B  1B          	DEC	DE			;Track size is in DE
 2326 100C  7B          	LD	A,E
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  41
VF      Z80

 2327 100D  B7          	OR	A,A
 2328 100E  20 F7       	JR	NZ,R_LOOP
 2329 1010  B2          	OR	A,D
 2330 1011  20 F4       	JR	NZ,R_LOOP		;Have we sent DE bytes yet
 2331 1013  FB          	EI
 2332 1014  CD 1161     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2333 1017  C8          	RET	Z			;RET Z if all is OK
 2334 1018  AF          	XOR	A,A
 2335 1019  3D          	DEC	A			;Set to NZ
 2336 101A  3A 3908     	LD	A,(ERSTAT)		;Return with error bits
 2337 101D  C9          	RET	
 2338                   ;
 2339                   ;
 2340                   ; <<< CORE SECTOR WRITE ROUTINE >>> . Assumes valid track in (TRK) & (SEC) 
 2341                   ; Address in (TADDR). The currently selected side at (SIDE) is setup
 2342                   ; Note: (TADDR) is unaltered, (DMA_NEXT) is updated for repetative calls to this routine
 2343                   ;
 2344 101E              WRITE_SECTOR:
 2345 101E  3E EF       	LD	A,WS_ERR_MASK	;Error mask from 1791/5 after read is done
 2346 1020  32 3907     	LD	(ERMASK),A
 2347 1023  3E 04       	LD	A,SEC_RETRY_MAX	;In case of errors will retry reading sector 
 2348 1025  32 390C     	LD	(SEC_RT_COUNT),A	;a few times
 2349 1028              AGAIN_WR:
 2350 1028  2A 0040     	LD	HL,(TADDR)	;Deposit sector info here
 2351 102B  FD 7E 02    	LD	A,(IY+SCTR)
 2352 102E  D3 56       	OUT	(SECTOR),A
 2353 1030  0E 57       	LD	C,DATA		;C = DATA port for OTIR below
 2354 1032  CD 122F     	CALL	WAIT_ON
 2355                   
 2356         0001           if	CHIP_1791
 2357 1035  3E A0       	LD	A,WRCMD91	;Read sector command to 1791
 2358 1037  32 3909     	LD	(CHIP_CMDSV),A	;store cmd here for Error display (if any)
 2359                        endif
 2360                   
 2361         0000           if	CHIP_1795
 2365                         endif
 2366                   
 2367 103A  F3          	DI
 2368 103B  D3 54       	OUT	(CMD),A
 2369 103D  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2370 1040  06 80       	LD	B,NBYTES
 2371 1042  B7          	OR	A,A		;Block input [B] Bytes->[HL] from port [C]
 2372 1043  28 10       	JR	Z,W128256	;Do 128 byte read
 2373 1045  06 00       	LD	B,0
 2374 1047  FE 01       	CP	A,1
 2375 1049  28 0A       	JR	Z,W128256	;Do 256 byte read
 2376 104B  FE 02       	CP	A,2
 2377 104D  28 04       	JR	Z,W512		;Do 512 byte read
 2378 104F  ED B3       	OTIR			;Must be 1024 byte sectors so 4X256		
 2379 1051  ED B3       	OTIR
 2380 1053  ED B3       W512:	OTIR			;256X2 bytes
 2381 1055  ED B3       W128256:OTIR			;128 or 256 bytes (B=128 or 0)
 2382 1057  FB          	EI
 2383 1058  22 3912     	LD	(DMA_NEXT),HL	;Store next byte of DMA (for multiple sec R/W's)
 2384 105B  CD 1161     	CALL	END_ROUTINE	;Wait, turn off wait hware, check status and return
 2385 105E  C8          	RET	Z		;RET Z if all is OK
 2386                   				;Read failed. Do we retry again
 2387 105F  3A 38FF     	LD	A,(CRTDISP)	;Check if detailed display flag is on
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  42
VF      Z80

 2388 1062  B7          	OR	A,A
 2389 1063  28 12       	JR	Z,MM6W
 2390 1065  21 2889     	LD	HL,SEC_WR_RETRY  ;'Re-writing SECTOR XXH.'
 2391 1068  CD 1903     	CALL	PMSG
 2392 106B  FD 7E 02    	LD	A,(IY+SCTR)
 2393 106E  CD 1989     	CALL	PACC
 2394 1071  21 2515     	LD	HL,H_MSG
 2395 1074  CD 1903     	CALL	PMSG
 2396 1077  3A 390C     MM6W:	LD	A,(SEC_RT_COUNT)
 2397 107A  3D          	DEC	A			;Retrys 4,3 2,1... Will reseek on 3rd re-read try
 2398 107B  32 390C     	LD	(SEC_RT_COUNT),A
 2399 107E  28 2D       	JR	Z,BAD_WR
 2400 1080  FE 02       	CP	A,2
 2401 1082  20 A4       	JR	NZ,AGAIN_WR		;Try re-reading the sector
 2402 1084  3A 38FF     	LD	A,(CRTDISP)		;Check if detailed display flag is on
 2403 1087  B7          	OR	A,A
 2404 1088  28 12       	JR	Z,MM7W
 2405 108A  21 28C7     	LD	HL,SEC_WH_RETRY		;'Re-Seeking head for re-reading SECTOR XXH.'
 2406 108D  CD 1903     	CALL	PMSG
 2407 1090  FD 7E 02    	LD	A,(IY+SCTR)
 2408 1093  CD 1989     	CALL	PACC
 2409 1096  21 2515     	LD	HL,H_MSG
 2410 1099  CD 1903     	CALL	PMSG
 2411 109C              MM7W:
 2412 109C  FD 7E 00    	LD	A,(IY+TRK)	;If it failed a second time, home, reseek and try again
 2413 109F  F5          	PUSH	AF
 2414 10A0  CD 0E2D     	CALL	HOME		;Restore to track 0 
 2415 10A3  F1          	POP	AF
 2416 10A4  FD 77 00    	LD	(IY+TRK),A
 2417 10A7  CD 0E68     	CALL	SEEK_TRACK_V	;Re-seek to track
 2418 10AA  C3 0EE1     	JP	AGAIN_RD
 2419 10AD  AF          BAD_WR	XOR	A,A
 2420 10AE  3D          	DEC	A		;Set to NZ
 2421 10AF  3A 3908     	LD	A,(ERSTAT)	;Return with error bits
 2422 10B2  C9          	RET	
 2423                   ;
 2424                   ; Multi_sector Write of multiple sectors on a TARCK. Assumes head is over relevent track in (TRK)
 2425                   ; Will place data at (TADDR) The currently selected side at (SIDE) is read
 2426                   ; (DMA_NEXT) is updated for repetative calls to this routine.
 2427                   ; [D] contains the number of sectors (Max IX+NSCTRS), [E] the starting sector number.
 2428                   ; Note this can be easily modified for CPM3 to multi sector write by adjusting [D] & [E]. 
 2429                   ; Also note, actual timing for data I/O is quite tight for slow CPU's. Thus the strange layout.
 2430                   ;
 2431 10B3              MULTI_SEC_WR:
 2432 10B3  3E EF       	LD	A,WS_ERR_MASK		;Setup for error checking
 2433 10B5  32 3907     	LD	(ERMASK),A
 2434 10B8  2A 0040     	LD	HL,(TADDR)
 2435 10BB  FD 7E 00    	LD	A,(IY+TRK)
 2436 10BE  D3 55       	OUT	(TRACK),A
 2437 10C0  7B          	LD	A,E			;first sector (usually 1)
 2438 10C1  FD 77 02    	LD	(IY+SCTR),A		;For error dump (Actully error could be any sector on the track)
 2439 10C4  D3 56       	OUT	(SECTOR),A
 2440 10C6  0E 57       	LD	C,DATA			;C = DATA port for INIR below
 2441                   
 2442 10C8  CD 122F     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2443                   
 2444         0001          if	CHIP_1791
 2445 10CB  3E A0       	LD	A,WRCMD91		;Read sector command to 1791
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  43
VF      Z80

 2446 10CD  32 3909     	LD	(CHIP_CMDSV),A		;store cmd here for Error display (if any)
 2447                        endif
 2448                   
 2449         0000           if	CHIP_1795
 2453                        endif
 2454                   
 2455 10D0  CB E7       	SET	4,A			;Multi sec bit
 2456 10D2  F5          	PUSH	AF			;Store for now
 2457 10D3  F3          	DI				;Disable Interrupts
 2458                   
 2459 10D4  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2 or 1024=3 byte sector size
 2460 10D7  B7          	OR	A,A			;Block input [B] Bytes->[HL] from port [C]
 2461 10D8  28 0A       	JR	Z,MW128			;Do 128 byte read
 2462 10DA  FE 01       	CP	A,1
 2463 10DC  28 14       	JR	Z,MW256			;Do 256 byte read
 2464 10DE  FE 02       	CP	A,2
 2465 10E0  28 1E       	JR	Z,MW512			;Do 512 byte read
 2466 10E2  18 2C       	JR	MW1K			;Must be 1K sectors
 2467                   
 2468 10E4  06 80       MW128:	LD	B,128			;Note the code is spread out like this with
 2469 10E6  F1          	POP	AF			;each sector having its own module because of timing
 2470 10E7  D3 54       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2471 10E9  ED B3       MW128A:	OTIR				;128 bytes (B=128)
 2472 10EB  06 80       	LD	B,128
 2473 10ED  15          	DEC	D
 2474 10EE  20 F9       	JR	NZ,MW128A
 2475 10F0  18 32       	JR	DONE_MW
 2476                   
 2477 10F2  06 00       MW256:	LD	B,0
 2478 10F4  F1          	POP	AF
 2479 10F5  D3 54       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2480 10F7  ED B3       MW256A:	OTIR				;256 bytes 
 2481 10F9  06 00       	LD	B,0
 2482 10FB  15          	DEC	D
 2483 10FC  20 F9       	JR	NZ,MW256A
 2484 10FE  18 24       	JR	DONE_MW
 2485                   
 2486 1100  06 00       MW512:	LD	B,0
 2487 1102  F1          	POP	AF
 2488 1103  D3 54       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2489 1105  ED B3       MW512A:	OTIR				;512 = 256x2
 2490 1107  ED B3       	OTIR
 2491 1109  06 00       	LD	B,0
 2492 110B  15          	DEC	D
 2493 110C  20 F7       	JR	NZ,MW512A
 2494 110E  18 14       	JR	DONE_MW
 2495                   
 2496 1110  06 00       MW1K:	LD	B,0
 2497 1112  F1          	POP	AF
 2498 1113  D3 54       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2499 1115  ED B3       MW1KA:	OTIR				;1K = 256x4
 2500 1117  ED B3       	OTIR
 2501 1119  ED B3       	OTIR
 2502 111B  ED B3       	OTIR
 2503 111D  06 00       	LD	B,0
 2504 111F  15          	DEC	D
 2505 1120  20 F3       	JR	NZ,MW1KA
 2506 1122  18 00       	JR	DONE_MW
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  44
VF      Z80

 2507                   
 2508 1124              DONE_MW:
 2509 1124  FB          	EI
 2510 1125  22 3912     	LD	(DMA_NEXT),HL		;Store "next" location. Used by other routines
 2511 1128  CD 1161     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2512 112B  C8          	RET	Z			;RET Z if all is OK
 2513 112C  AF          	XOR	A,A
 2514 112D  3D          	DEC	A			;Set to NZ
 2515 112E  3A 3908     	LD	A,(ERSTAT)		;Return with error bits
 2516 1131  C9          	RET	
 2517                   ;
 2518                   ;
 2519                   ;	
 2520                   ; Write Track. Assumes head is over relevent track in (TRK)
 2521                   ; Track data at (TADDR)
 2522                   ; The currently selected side at (SIDE) is written to
 2523                   ; The total size of a track in bytes is in [DE]
 2524                   ;
 2525 1132              WRITE_TRACK:
 2526 1132  3E E0       	LD	A,WT_ERR_MASK		;Setup for error checking
 2527 1134  32 3907     	LD	(ERMASK),A
 2528 1137  2A 0040     	LD	HL,(TADDR)
 2529 113A  FD 7E 00    	LD	A,(IY+TRK)
 2530 113D  D3 55       	OUT	(TRACK),A
 2531 113F  CD 122F     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2532 1142  3E F4       	LD	A,WRTCMD		;setup for 179x WRITE track command
 2533 1144  32 3909     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2534 1147  F3          	DI				;Disable Interrupts
 2535 1148  D3 54       	OUT	(CMD),A			;send it to the 179x CMD port
 2536 114A  7E          W_LOOP:	LD	A,(HL)
 2537 114B  D3 57       	OUT	(DATA),A		;Send all track bytes
 2538 114D  23          	INC	HL
 2539 114E  1B          	DEC	DE
 2540 114F  7B          	LD	A,E
 2541 1150  B7          	OR	A,A
 2542 1151  20 F7       	JR	NZ,W_LOOP
 2543 1153  B2          	OR	A,D
 2544 1154  20 F4       	JR	NZ,W_LOOP	;Have we sent DE bytes yet
 2545 1156  FB          	EI
 2546 1157  CD 1161     	CALL	END_ROUTINE	;Wait,  turn off wait hware, check status and return
 2547 115A  C8          	RET	Z		;RET Z if all is OK
 2548 115B  AF          	XOR	A,A
 2549 115C  3D          	DEC	A		;Set to NZ
 2550 115D  3A 3908     	LD	A,(ERSTAT)
 2551 1160  C9          	RET	
 2552                   ;
 2553                   ;
 2554                   ; END Routine comes after each Type I command is completed. It waits for the 1791/5 
 2555                   ; chip to time out then switches off the wait state generator and checks for errors. 
 2556                   ; Returns Z if no errors, otherewise NZ with error in (ERSTAT). If chip gets hung waiting
 2557                   ; for status it forces a 1791/5 Interrupt CMD after ~ 5 seconds.  This is usually due to
 2558                   ; a hardware problem.
 2559                   ;
 2560 1161              END_ROUTINE:
 2561 1161  CD 11CE     	CALL	DELAY		;Delay for hardware
 2562 1164  C5          	PUSH	BC		;Setup a loop count
 2563 1165  D5          	PUSH	DE
 2564 1166  E5          	PUSH	HL
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  45
VF      Z80

 2565 1167  01 0000     	LD	BC,0
 2566 116A  1E 05       	LD	E,STATUS_DELAY	;time out about 5 seconds
 2567 116C  DB 54       ENDR2:	IN	A,(STATUS)	;Wait until chip is not busy
 2568 116E  E6 01       	AND	A,1
 2569 1170  28 25       	JR	Z,ENDR2_OK
 2570 1172  10 F8       	DJNZ	ENDR2		;Try for ~5 seconds
 2571 1174  05          	DEC	B
 2572 1175  0D          	DEC	C
 2573 1176  20 F4       	JR	NZ,ENDR2
 2574 1178  05          	DEC	B
 2575 1179  0D          	DEC	C
 2576 117A  1D          	DEC	E
 2577 117B  20 EF       	JR	NZ,ENDR2
 2578 117D  CD 1228     	CALL	WAIT_OFF	;Disable Hardware wait states
 2579 1180  21 2BF5     	LD	HL,TIMEOUT_ERR
 2580 1183  CD 1903     	CALL	PMSG
 2581 1186  CD 17BA     	CALL	SHOW_STAT_BITS
 2582 1189  32 3908     	LD	(ERSTAT),A	
 2583 118C  CD 1920     	CALL	ZCRLF
 2584 118F  CD 1236     	CALL	FRCINT
 2585 1192  E1          	POP	HL
 2586 1193  D1          	POP	DE
 2587 1194  C1          	POP	BC
 2588 1195  18 11       	JR	ENDR3
 2589 1197              ENDR2_OK:
 2590 1197  E1          	POP	HL
 2591 1198  D1          	POP	DE
 2592 1199  C1          	POP	BC
 2593 119A  CD 1228     	CALL	WAIT_OFF	;Disable Hardware wait states
 2594 119D  DB 54       	IN	A,(STATUS)	;(May already be off anyway for Seeks etc)
 2595 119F  57          	LD	D,A
 2596 11A0  3A 3907     	LD	A,(ERMASK)	;Error mask was stored here
 2597 11A3  A2          	AND	A,D
 2598 11A4  32 3908     	LD	(ERSTAT),A	;Save error status for error routine
 2599 11A7  C8          	RET	Z		;RET Z if all is OK
 2600 11A8  AF          ENDR3:	XOR	A,A
 2601 11A9  3D          	DEC	A		;Set to NZ
 2602 11AA  3A 3908     	LD	A,(ERSTAT)
 2603 11AD  C9          	RET	
 2604                   ;
 2605                   ;
 2606                   ;
 2607                   ;
 2608                   ; SELECT DRIVE IN HARDWARE, WILL BE THE NEW CURRENT DRIVE 
 2609                   ; (IX+HW_BYTE) points to relevent drive selection, density and 
 2610                   ; side(s) info for the current disk. Note: Sets head to Side A - ALWAYS
 2611                   ;
 2612 11AE              START_DRIVE_1:
 2613 11AE  3A 0046     	LD	A,(DRIVE_1)	;Get the drive selection bit
 2614 11B1  18 03       	JR	START_DR
 2615                   
 2616 11B3              START_DRIVE_2:
 2617 11B3  3A 0047     	LD	A,(DRIVE_2)	;Get the drive selection bit
 2618 11B6              START_DR:
 2619 11B6  DD B6 02    	OR	A,(IX+HW_BYTE)	;OR in the density,side and size bits
 2620 11B9  32 0048     	LD	(IOBYTE),A	;For diagnostic display	
 2621 11BC  E6 7F       	AND	A,7FH		;Strip off the current side bit flag of (IOBYTE)
 2622 11BE  2F          	CPL			;Hardware is inverted
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  46
VF      Z80

 2623 11BF  CB E7       	SET	4,A		;Force to side A
 2624 11C1  D3 53       	OUT	(SELECT),A
 2625 11C3  CD 11CE     	CALL	DELAY
 2626 11C6  DB 54       RDYCK:	IN	A,(STATUS)	;Drive select delay
 2627 11C8  E6 80       	AND	80H
 2628 11CA  C2 11C6     	JP	NZ,RDYCK	;Return when ready
 2629 11CD  C9          	RET
 2630                   ;
 2631                   ; Delay for drive select hardware. Different for 8" and 5" drives
 2632                   ;
 2633 11CE  DD CB 02 6E DELAY:	BIT	5,(IX+HW_BYTE)	;8" or 5"
 2634 11D2  3E 27       	LD	A,39
 2635 11D4  28 02       	JR	Z,DELAY1  
 2636 11D6  3E 3C       	LD	A,60
 2637 11D8  06 00       DELAY1:	LD	B,0
 2638 11DA  10 FE       M0:	DJNZ	M0
 2639 11DC  3D          	DEC	A
 2640 11DD  20 F9       	JR	NZ,DELAY1  
 2641 11DF  C9          	RET
 2642                   ;	
 2643                   ; This routine switches the active side of the current disk.
 2644                   ; Returns Z if no sides OR new side is A, NZ if new side is B. 
 2645                   ;
 2646 11E0              SWAP_SIDES:
 2647 11E0  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
 2648 11E4  C8          	RET	Z			;If 1 sided then return Z
 2649                   
 2650 11E5  FD 7E 01    	LD	A,(IY+SIDE)
 2651 11E8  B7          	OR	A,A			;If 0 we have done A side now do B
 2652 11E9  28 09       	JR	Z,GOTO_B_SIDE1		;switch over to B side
 2653 11EB  AF          	XOR	A,A
 2654 11EC  FD 77 01    	LD	(IY+SIDE),A
 2655 11EF  CD 11FF     	CALL	SET_SIDE		;update the hardware
 2656 11F2  AF          	XOR	A,A
 2657 11F3  C9          	RET				;Return Z
 2658 11F4              GOTO_B_SIDE1:
 2659 11F4  3E 02       	LD	A,02H
 2660 11F6  FD 77 01    	LD	(IY+SIDE),A	
 2661 11F9  CD 11FF     	CALL	SET_SIDE		;Update the hardware	
 2662 11FC  AF          	XOR	A,A
 2663 11FD  3D          	DEC	A
 2664 11FE  C9          	RET				;Returns NZ
 2665                   ;
 2666                   ;
 2667                   ; SELECT DRIVE SIDE IN HARDWARE
 2668                   ; Set side for sector R/W if different than current side
 2669                   ; (SIDE) = 0 if A side, (SIDE)= 02H if B side.
 2670                   ; Note Hardware bit 7 of HW_BYTE is updated here!
 2671                   ;
 2672 11FF              SET_SIDE:
 2673 11FF  DD 7E 02    	LD	A,(IX+HW_BYTE)	;Get current side info
 2674 1202  CB 67       	BIT	4,A		;Is it a 1 or 2 sided disk
 2675 1204  C8          	RET	Z		;Return if single sided
 2676                   
 2677 1205  FD 7E 01    	LD	A,(IY+SIDE)	;Which side do we want. (0 for A, 02H for B)
 2678 1208  B7          	OR	A,A
 2679 1209  20 0C       	JR	NZ,SET_HW_B
 2680 120B  DB 53       	IN	A,(SELECT)	;get hardware selection
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  47
VF      Z80

 2681 120D  CB E7       	SET	4,A		;Port hardware for side selection (1=A, 0=B)
 2682 120F  D3 53       	OUT	(SELECT),A	;Select side A in hardware (inverted)
 2683 1211  DD CB 02 BE 	RES	7,(IX+HW_BYTE)	;Set to side to A (Will show up in IOBYTE info)
 2684 1215  18 0A       	JR	DONE_SET_SIDES
 2685 1217              SET_HW_B:
 2686 1217  DB 53       	IN	A,(SELECT)	;get hardware selection
 2687 1219  CB A7       	RES	4,A		;Port hardware for side selection (1=A, 0=B)
 2688 121B  D3 53       	OUT	(SELECT),A	;Select side B in hardware
 2689 121D  DD CB 02 FE 	SET	7,(IX+HW_BYTE)	;Set to side to B (Will show up in IOBYTE info)
 2690                   ;
 2691 1221              DONE_SET_SIDES:
 2692 1221  C5          	PUSH	BC
 2693 1222  06 FF       	LD	B,0FFH		;Slight delay for hardware
 2694 1224  10 FE       DELYS:	DJNZ	DELYS
 2695 1226  C1          	POP	BC
 2696 1227  C9          	RET
 2697                   ;
 2698                   ;
 2699                   ;
 2700                   ;
 2701                   ; Turn on or off the hardware wait state generator. This hardware stops and starts the CPU
 2702                   ; as bytes are read/written to the 179x/Disk
 2703                   ;
 2704                   ;	DISABLE WAIT STATES
 2705 1228              WAIT_OFF:
 2706 1228  DB 53       	IN	A,(SELECT)
 2707 122A  F6 80       	OR	80H
 2708 122C  D3 53       	OUT	(SELECT),A
 2709 122E  C9          	RET
 2710                   ;
 2711                   ;	ENABLE WAIT STATES
 2712 122F              WAIT_ON:
 2713 122F  DB 53       	IN	A,(SELECT)
 2714 1231  E6 7F       	AND	7FH
 2715 1233  D3 53       	OUT	(SELECT),A
 2716 1235  C9          	RET
 2717                   ;
 2718                   ;
 2719                   ;	FORCE CHIP INTERUPT
 2720 1236  3E D0       FRCINT:	LD	A,0D0H
 2721 1238  D3 54       	OUT	(CMD),A
 2722 123A  3E 0A       	LD	A,10
 2723 123C  3D          FRC1:	DEC	A
 2724 123D  20 FD       	JR	NZ,FRC1
 2725 123F  DB 54       	IN	A,(STATUS)
 2726 1241  C9          	RET
 2727                   ;
 2728                   ;
 2729                   ;
 2730                   ; General routine to show the current location of the active disk head.
 2731                   ; Will display track, sector and side if two sided drive/disk
 2732                   ; Format is 'At TRACK xxH, SCETOR yyH, SIDE A/B.' 
 2733                   ; Note: NO CR/LF at start of string
 2734                   ;
 2735 1242              SHOW_TSS_LOC:
 2736 1242  E5          	PUSH	HL
 2737 1243  21 24EE     	LD	HL,ATTRK	;Announce current track position
 2738 1246  CD 1903     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  48
VF      Z80

 2739 1249  DB 55       	IN	A,(TRACK)		
 2740 124B  CD 1989     	CALL	PACC
 2741 124E  21 24F6     	LD	HL,ATSEC	;and sector position
 2742 1251  CD 1903     	CALL	PMSG
 2743 1254  DB 56       	IN	A,(SECTOR)		
 2744 1256  CD 1989     	CALL	PACC
 2745 1259              SHOW_SIDES:			;Announce head if 2 sided disk
 2746 1259  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 2747 125D  28 16       	JR	Z,RW_SKIP_SIDES	;If 1 sided then skip side swap
 2748 125F  DB 53       	IN	A,(SELECT)	;Get hardware selection
 2749 1261  CB 67       	BIT	4,A		;Port Hardware for side selection (1=A, 0=B)
 2750 1263  28 08       	JR	Z,RW_B_SIDE	
 2751 1265  21 2501     	LD	HL,HEAD0_MSG	;Announce side 0 (or A)
 2752 1268  CD 1903     	CALL	PMSG
 2753 126B  E1          	POP	HL
 2754 126C  C9          	RET
 2755 126D              RW_B_SIDE:
 2756 126D  21 250B     	LD	HL,HEAD1_MSG	;Announce side 1 (or B)
 2757 1270  CD 1903     	CALL	PMSG
 2758 1273  E1          	POP	HL
 2759 1274  C9          	RET
 2760 1275              RW_SKIP_SIDES:
 2761 1275  21 2515     	LD	HL,H_MSG	;If SS disk, no need for a HEAD# message
 2762 1278  CD 1903     	CALL	PMSG
 2763 127B  E1          	POP	HL
 2764 127C  C9          	RET
 2765                   ;
 2766                   ;
 2767                   ;
 2768                   ; General routine to show the current TRACK location of the active disk head.
 2769                   ; Will display track only.  The format is 'At TRACK xxH.'
 2770                   ; Note: NO CR,LF at start of string
 2771                   ;
 2772 127D              SHOW_T_LOC:
 2773 127D  E5          	PUSH	HL
 2774 127E  21 24EE     	LD	HL,ATTRK
 2775 1281  CD 1903     	CALL	PMSG
 2776 1284  DB 55       	IN	A,(TRACK)	;Say what track we are now on.
 2777 1286  CD 1989     	CALL	PACC		;Display current track number 
 2778 1289  21 2515     	LD	HL,H_MSG
 2779 128C  CD 1903     	CALL	PMSG
 2780 128F  E1          	POP	HL
 2781 1290  C9          	RET
 2782                   ;
 2783                   ;
 2784                   ; General routine to show the current TRACK & SIDE location of the active 
 2785                   ; disk head. The format is 'At TRACK xxH Side A/B.'
 2786                   ; Note: NO CR,LF at start of string
 2787                   ;
 2788 1291              SHOW_TS_LOC:
 2789 1291  E5          	PUSH	HL
 2790 1292  21 24EE     	LD	HL,ATTRK
 2791 1295  CD 1903     	CALL	PMSG
 2792 1298  DB 55       	IN	A,(TRACK)	;Say what track we are now on.
 2793 129A  CD 1989     	CALL	PACC		;Display current track number 
 2794 129D  C3 1259     	JP	SHOW_SIDES
 2795                   ;
 2796                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  49
VF      Z80

 2797                   ; General routine to print out the error status returned by the 1791/5 chip
 2798                   ; after seeks, sector reads etc. 
 2799                   ; Note: will end with CRLF and error bits in [A]
 2800                   ;
 2801 12A0              SHOW_ERRORS:
 2802 12A0  3A 38FE     	LD	A,(ERRORS_FLAG)
 2803 12A3  3C          	INC	A
 2804 12A4  32 38FE     	LD	(ERRORS_FLAG),A	;Assuming we have less than 256 errors!
 2805                   
 2806 12A7  3A 3909     	LD	A,(CHIP_CMDSV)	;What was the last command to the chip
 2807 12AA  FE 80       	CP	A,RDCMD91	;Was it a read sector 1791 CMD?
 2808 12AC  20 05       	JR	NZ,NOT_RDCMD91
 2809 12AE  21 30AC     	LD	HL,SEC_READ_ERROR 
 2810 12B1  18 5D       	JR	DONE_ERRS
 2811 12B3              NOT_RDCMD91:
 2812 12B3  FE 88       	CP	A,RDCMD95	;Was it a read sector 1795 CMD?
 2813 12B5  20 05       	JR	NZ,NOT_RDCMD95
 2814 12B7  21 30AC     	LD	HL,SEC_READ_ERROR 
 2815 12BA  18 54       	JR	DONE_ERRS
 2816 12BC              NOT_RDCMD95:
 2817 12BC  FE 18       	CP	A,SKNCMD	;Was it a seek no verify cmd 
 2818 12BE  20 05       	JR	NZ,NOT_SKNCMD
 2819 12C0  21 30EF     	LD	HL,SEEKNV_ERROR
 2820 12C3  18 4B       	JR	DONE_ERRS
 2821 12C5              NOT_SKNCMD:
 2822 12C5  FE 0C       	CP	A,RSCMD		;Was it a restore CMD 
 2823 12C7  20 05       	JR	NZ,NOT_RSCMD
 2824 12C9  21 3130     	LD	HL,RSCMD_ERROR
 2825 12CC  18 42       	JR	DONE_ERRS
 2826 12CE              NOT_RSCMD:
 2827 12CE  FE C4       	CP	A,RDACMD	;Was it a read track address command
 2828 12D0  20 05       	JR	NZ,NOT_RDACMD
 2829 12D2  21 316F     	LD	HL,SEC_ID_ERROR
 2830 12D5  18 39       	JR	DONE_ERRS
 2831 12D7              NOT_RDACMD:
 2832 12D7  FE 1C       	CP	A,SKCMD		;Was it seek cmd with verify
 2833 12D9  20 05       	JR	NZ,NOT_SKCMD
 2834 12DB  21 31A6     	LD	HL,SKCMD_ERROR
 2835 12DE  18 30       	JR	DONE_ERRS
 2836 12E0              NOT_SKCMD:
 2837 12E0  FE E4       	CP	A,RDTCMD	;Was it a read track command
 2838 12E2  20 05       	JR	NZ,NOT_RDTCMD
 2839 12E4  21 3221     	LD	HL,RDTCMD_ERROR
 2840 12E7  18 27       	JR	DONE_ERRS
 2841 12E9              NOT_RDTCMD:
 2842 12E9  FE F4       	CP	A,WRTCMD	;Was it a write track cmd
 2843 12EB  20 05       	JR	NZ,NOT_WRTCMD
 2844 12ED  21 3258     	LD	HL,WRTCMD_ERROR
 2845 12F0  18 1E       	JR	DONE_ERRS
 2846 12F2              NOT_WRTCMD:
 2847 12F2  FE A0       	CP	A,WRCMD91	;Was it a sector write cmd 1791
 2848 12F4  20 05       	JR	NZ,NOT_WRCMD91
 2849 12F6  21 3292     	LD	HL,WRCMD_ERROR
 2850 12F9  18 15       	JR	DONE_ERRS
 2851 12FB              NOT_WRCMD91:
 2852 12FB  FE A8       	CP	A,WRCMD95	;Was it a sector write cmd 1795
 2853 12FD  20 05       	JR	NZ,NOT_WRCMD95
 2854 12FF  21 3292     	LD	HL,WRCMD_ERROR
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  50
VF      Z80

 2855 1302  18 0C       	JR	DONE_ERRS
 2856 1304              NOT_WRCMD95:
 2857 1304  FE 5C       	CP	A,STEPIN	;Was it a step-in CMD
 2858 1306  20 05       	JR	NZ,NOT_STEPIN
 2859 1308  21 31E2     	LD	HL,STEPIN_ERROR
 2860 130B  18 03       	JR	DONE_ERRS
 2861 130D              NOT_STEPIN:
 2862 130D  21 2DD2     	LD	HL,UNKNOWN_ERROR
 2863 1310              DONE_ERRS:
 2864 1310  CD 1903     	CALL	PMSG
 2865 1313  3A 3908     	LD	A,(ERSTAT)
 2866 1316  CD 19A7     	CALL	ZBITS		;Drop in bit pattern
 2867 1319  21 2DD0     	LD	HL,CLOSE_BRACKET
 2868 131C  CD 1903     	CALL	PMSG
 2869 131F  CD 1920     	CALL	ZCRLF		;Always end with CRLF
 2870 1322  3A 3908     	LD	A,(ERSTAT)	;Return with error in A
 2871 1325  C9          	RET
 2872                   ;
 2873                   ;
 2874                   ; This routine simply checks the written and re-read sectors in memory are the same.
 2875                   ; Z if all OK. NZ, if error(s)
 2876                   ;
 2877 1326              CMP_BUFFERS:
 2878 1326  21 5000     	LD	HL,FBUFFER
 2879 1329  11 6000     	LD	DE,FBUFFER2
 2880 132C  0E 00       	LD	C,0		;Will flag errors
 2881 132E  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2882 1331  06 80       	LD	B,NBYTES
 2883 1333  B7          	OR	A,A		;Block size count
 2884 1334  28 13       	JR	Z,C128256	;Do 128 byte compare
 2885 1336  06 00       	LD	B,0
 2886 1338  FE 01       	CP	A,1
 2887 133A  28 0D       	JR	Z,C128256	;Do 256 byte read
 2888 133C  FE 02       	CP	A,2
 2889 133E  28 06       	JR	Z,C512		;Do 512 byte read
 2890 1340  CD 134F     	CALL	CHECK_BLOCK	;Must be 1024 byte sectors so 4X256		
 2891 1343  CD 134F     	CALL	CHECK_BLOCK
 2892 1346  CD 134F     C512:	CALL	CHECK_BLOCK	;256X2 bytes
 2893 1349  CD 134F     C128256:CALL	CHECK_BLOCK
 2894 134C  AF          	XOR	A,A
 2895 134D  B9          	CP	A,C
 2896 134E  C9          	RET	
 2897 134F              CHECK_BLOCK:
 2898 134F  1A          	LD	A,(DE)
 2899 1350  BE          	CP	A,(HL)		;Do they match
 2900 1351  C4 1359     	CALL	NZ,MIS_MATCH
 2901 1354  23          	INC	HL
 2902 1355  13          	INC	DE
 2903 1356  10 F7       	DJNZ	CHECK_BLOCK	;Decrease count
 2904 1358  C9          	RET
 2905 1359              MIS_MATCH:
 2906 1359  0E 01       	LD	C,1		;Flag for error
 2907 135B  C9          	RET	
 2908                   ;
 2909                   ; Fill memory buffer with a byte [C]. Is be used for sector write and CPM86
 2910                   ; disk initilization
 2911                   ; Return with [HL] pointing to end of sector buffer +1
 2912 135C              FILL_BUFFER:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  51
VF      Z80

 2913 135C  21 5000     	LD	HL,FBUFFER
 2914 135F  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2915 1362  06 80       	LD	B,NBYTES
 2916 1364  B7          	OR	A,A		;Block size count
 2917 1365  28 13       	JR	Z,B128256	;Do 128 byte compare
 2918 1367  06 00       	LD	B,0
 2919 1369  FE 01       	CP	A,1
 2920 136B  28 0D       	JR	Z,B128256	;Do 256 byte read
 2921 136D  FE 02       	CP	A,2
 2922 136F  28 06       	JR	Z,B512		;Do 512 byte read
 2923 1371  CD 137E     	CALL	BUILD_BLOCK	;Must be 1024 byte sectors so 4X256		
 2924 1374  CD 137E     	CALL	BUILD_BLOCK
 2925 1377  CD 137E     B512:	CALL	BUILD_BLOCK	;256X2 bytes
 2926 137A  CD 137E     B128256:CALL	BUILD_BLOCK
 2927 137D  C9          	RET
 2928                   
 2929 137E              BUILD_BLOCK:
 2930 137E  71          	LD	(HL),C		;Drop in the fill character	
 2931 137F  23          	INC	HL
 2932 1380  10 FC       	DJNZ	BUILD_BLOCK	;Decrease count
 2933 1382  C9          	RET
 2934                   ;
 2935                   ;
 2936                   ;
 2937                   ;
 2938                   ;---------------- BUILD TRACK IMAGE IN RAM ------------------------
 2939                   ; Assumes	IX points to the table or relevent Disk paramaters and
 2940                   ;		(TADDR) points to the buffer in RAM to build the track.
 2941                   ;		Requires valid (TADDR),(TRK),(SCTR) & (SIDE)
 2942                   ;		For maximum flexibility I have used seperate routines 
 2943                   ;		for Single and Double density formats. This routine is 
 2944                   ;		a very sensitive. Don't change unless you know what
 2945                   ;		you are doing.
 2946                   ;
 2947                   ;	Build in memory (@5000H)a complete SD Track.
 2948                   ;
 2949 1383              BUILD_TRACK:
 2950 1383  FD E5       	PUSH	IY			;Save the "main" IY pointer to TRACK,SIDE,SECTOR
 2951 1385  FD 7E 00    	LD	A,(IY+TRK)
 2952 1388  32 3917     	LD	(F_TRK),A		;store trk & side numbers locally
 2953 138B  FD 7E 01    	LD	A,(IY+SIDE)
 2954 138E  32 3918     	LD	(F_SIDE),A
 2955                   
 2956 1391  DD 66 10    	LD	H,(IX+SKEW1)		;IY Now points to the table containing the order of 
 2957 1394  DD 6E 0F    	LD	L,(IX+SKEW)		;the sector numbers on a track (usually 1,2,3,4...
 2958 1397  E5          	PUSH	HL			;but not always
 2959 1398  FD E1       	POP	IY			;HL->IY
 2960                   
 2961 139A  2A 0040     	LD	HL,(TADDR)		;This will be FBUFFER where track ins built in RAM
 2962 139D  DD CB 02 76 	BIT	6,(IX+HW_BYTE)		;Will build a different track image for SD or DD disks
 2963 13A1  C2 147B     	JP	NZ,DD_TRACKS		;Seperate sector image for DD tracks
 2964                   
 2965 13A4              SD_TRACKS:	
 2966 13A4  CD 13BE     	CALL	SD_TRK_HEADER		;Drop in header and Index mark BEFORE first sector
 2967                   					
 2968 13A7  FD 56 00    	LD	D,(IY+0)		;sector# in D, usually 1 at the start
 2969 13AA  DD 5E 00    	LD	E,(IX+NSCTRS)		;Total Sectors/side
 2970 13AD              NEXT_SEC:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  52
VF      Z80

 2971 13AD  CD 13DD     	CALL	SD_BUILD_SEC		;<<< Build a sector >>>>>
 2972 13B0  FD 23       	INC	IY			;point to next sector number in sec skew table
 2973 13B2  FD 56 00    	LD	D,(IY+0)		;store sector # in D
 2974 13B5  1D          	DEC	E
 2975 13B6  20 F5       	JR	NZ,NEXT_SEC		;All sectors are in RAM
 2976                   	
 2977 13B8  CD 1460     	CALL	SD_TRK_END		;Now need to flush out track to end
 2978 13BB  FD E1       	POP	IY			;Get back the main IY pointer
 2979 13BD  C9          	RET
 2980                   ;
 2981                   ;	Build in memory (@5000H)a complete Single Density Track.
 2982                   ;
 2983 13BE              SD_TRK_HEADER:				;Lay down the track header before the 1st sector
 2984 13BE  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Do not alter [D]= Sec# or [E]= Sec/side
 2985 13C1  DD 46 03    	LD	B,(IX+HEADR)		;Header has 40 (FF's)
 2986 13C4  CD 1476     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 2987 13C7  AF          	XOR	A,A			;Now 6 0's
 2988 13C8  06 06       	LD	B,6
 2989 13CA  CD 1476     	CALL	DROP
 2990 13CD  3E FC       	LD	A,0FCH			;Index ID mark
 2991 13CF  77          	LD	(HL),A			;drop into image
 2992 13D0  23          	INC	HL
 2993 13D1  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Now 26 (FF's)
 2994 13D4  06 1A       	LD	B,26			;Header has the count of fill characters required
 2995 13D6  CD 1476     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 2996 13D9  22 3919     	LD	(INDEX_MARK),HL		;pointer+1 to end of track header
 2997 13DC  C9          	RET				;return with [HL] pointing to first sector byte
 2998                   ;
 2999 13DD              SD_BUILD_SEC:				;Lay down a sector at current [HL]. Do not alter [D] or [E]
 3000 13DD  AF          	XOR	A,A
 3001 13DE  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 6,0's for IMB 3740, 8")
 3002 13E1  CD 1476     	CALL	DROP
 3003 13E4  3E FE       	LD	A,0FEH			;Sector ID Address mark
 3004 13E6  77          	LD	(HL),A			;drop it in the growing image
 3005 13E7  23          	INC	HL
 3006 13E8  3A 3917     	LD	A,(F_TRK)		;Drop in the track #
 3007 13EB  77          	LD	(HL),A
 3008 13EC  23          	INC	HL
 3009 13ED  3A 3918     	LD	A,(F_SIDE)		;Side#, 0 for A side, 02H for B side
 3010 13F0  B7          	OR	A,A
 3011 13F1  3E 00       	LD	A,0
 3012 13F3  28 02       	JR	Z,BLD_ASIDE
 3013 13F5  3E 01       	LD	A,1			
 3014 13F7              BLD_ASIDE:			
 3015 13F7  77          	LD	(HL),A			;0 here for A side, 1 for B side
 3016 13F8  23          	INC	HL
 3017 13F9  72          	LD	(HL),D			;Drop in sector #
 3018 13FA  23          	INC	HL
 3019 13FB  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2, 1024=3
 3020 13FE  77          	LD	(HL),A			;drop in sector length byte
 3021 13FF  23          	INC	HL	
 3022 1400  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 179x 	
 3023 1402  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3024 1403  23          	INC	HL
 3025 1404  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3026 1407  DD 46 05    	LD	B,(IX+GAP2)		;<---- (eg. 11,FF's for IMB 3740, 8")
 3027 140A  CD 1476     	CALL	DROP
 3028 140D  AF          	XOR	A,A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  53
VF      Z80

 3029 140E  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 6,0's for IMB 3740, 8")
 3030 1411  CD 1476     	CALL	DROP
 3031 1414  3E FB       	LD	A,0FBH			;Data address mark for 1791/5 	
 3032 1416  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3033 1417  23          	INC	HL
 3034 1418  7A          	LD	A,D
 3035 1419  FE 01       	CP	A,1			;If first sector then store data marker
 3036 141B  20 03       	JR	NZ,SDATA_FIELD 
 3037 141D  22 391B     	LD	(S_DATA_MARK),HL	;Pointer to start of sector data area
 3038 1420              SDATA_FIELD:				;Now write in the sector data field itself
 3039 1420  DD 7E 09    	LD	A,(IX+SIZE)		;128,256,512 or 1024 byte sector size
 3040 1423  06 80       	LD	B,NBYTES
 3041 1425  0E 01       	LD	C,1			;1 loop of 128 bytes in WR_DATA_FIELD below
 3042 1427  B7          	OR	A,A
 3043 1428  28 10       	JR	Z,SD_DATA_FIELD		;Do 128 byte write (B=128)
 3044 142A  06 00       	LD	B,0			;Need 256 bytes for the rest of possible sectors
 3045 142C  0E 01       	LD	C,1			;One loop
 3046 142E  FE 01       	CP	A,1
 3047 1430  28 08       	JR	Z,SD_DATA_FIELD		;Do 256 byte write
 3048 1432  0E 02       	LD	C,2			;2 loops of 256 bytes in WRITE_DATA_FIELD
 3049 1434  FE 02       	CP	A,2
 3050 1436  28 02       	JR	Z,SD_DATA_FIELD		;Do 512 byte read
 3051 1438  0E 04       	LD	C,4			;(must be 3) so 1024 byte sector
 3052 143A              SD_DATA_FIELD:
 3053 143A  DD 7E 0B    	LD	A,(IX+DATA_FILL_CHAR)	;get the sector fill character (usually E5)
 3054 143D  CD 1476     SDF0:	CALL	DROP
 3055 1440  0D          	DEC	C
 3056 1441  20 FA       	JR	NZ,SDF0			;Decrese [C] to 0
 3057 1443  7A          	LD	A,D
 3058 1444  FE 01       	CP	A,1			;If first sector then store image mark 
 3059 1446  20 03       	JR	NZ,NOT_FIRST
 3060 1448  22 391D     	LD	(E_DATA_MARK),HL	;For first sector will  diaplay data late
 3061 144B              NOT_FIRST:
 3062 144B  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 1791/5 
 3063 144D  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3064 144E  23          	INC	HL
 3065 144F  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3066 1452  DD 46 06    	LD	B,(IX+GAP3)		;<---- (eg. 27,FF's for IMB 3740, 8")
 3067 1455  CD 1476     	CALL	DROP
 3068 1458  7A          	LD	A,D
 3069 1459  FE 01       	CP	A,1			;If first sector then store image mark 
 3070 145B  C0          	RET	NZ
 3071 145C  22 391F     	LD	(E_SEC_MARK),HL		;For first sector will diaplay data later
 3072 145F  C9          	RET
 3073                   ;
 3074 1460              SD_TRK_END
 3075 1460  22 3921     	LD	(S_GAP4_MARK),HL	;Mark beginning of end of track field (GAP4)
 3076 1463  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3077 1466  DD 46 07    	LD	B,(IX+GAP4)		;<---- (eg 247,FF's  for IMB 3740, 8")
 3078 1469  DD 4E 08    	LD	C,(IX+GAP4R)		;Times to repeat DROP
 3079 146C  CD 1476     SD_TRK1:CALL	DROP
 3080 146F  0D          	DEC	C
 3081 1470  20 FA       	JR	NZ,SD_TRK1
 3082 1472  22 3923     	LD	(E_GAP4_MARK),HL	;Mark end of Track
 3083 1475  C9          	RET
 3084                   ;
 3085 1476  77          DROP:	LD	(HL),A			;DATA block loader
 3086 1477  23          	INC	HL			;B= byte count,HL pointer
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  54
VF      Z80

 3087 1478  10 FC       	DJNZ	DROP			;A = value to drop into image. Count in B
 3088 147A  C9          	RET
 3089                   ;
 3090                   ;
 3091                   ;
 3092                   ;	Build in memory (@5000H)a complete Double Density Track.
 3093                   ;
 3094 147B              DD_TRACKS:				;Same thing for DD Trdcks. Extra stuff req.
 3095 147B  CD 1495     	CALL	DD_TRK_HEADER		;Drop in header and Index mark BEFORE first sector
 3096                   	
 3097 147E  FD 56 00    	LD	D,(IY+0)		;sector# in D, usually 1 at the start
 3098 1481  DD 5E 00    	LD	E,(IX+NSCTRS)		;Total Sectors/side
 3099 1484              DD_NEXT_SEC:
 3100 1484  CD 14BB     	CALL	DD_BUILD_SEC		;<<< Build a DD sector >>>>>
 3101 1487  FD 23       	INC	IY			;point to next sector number in sec skew table
 3102 1489  FD 56 00    	LD	D,(IY+0)		;store sector # in D
 3103 148C  1D          	DEC	E
 3104 148D  20 F5       	JR	NZ,DD_NEXT_SEC		;All sectors are in RAM
 3105                   	
 3106 148F  CD 154C     	CALL	DD_TRK_END		;Now need to flush out track to end
 3107 1492  FD E1       	POP	IY			;get back the main IY pointer
 3108 1494  C9          	RET
 3109                   ;
 3110                   ;
 3111 1495              DD_TRK_HEADER:				;Lay down the track header before the 1st sector
 3112 1495  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Do not alter [D]= Sec# or [E]= Sec/side
 3113 1498  DD 46 03    	LD	B,(IX+HEADR)		;Header has 80 (4E's)
 3114 149B  CD 1476     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3115 149E  AF          	XOR	A,A			;Now 12 0's
 3116 149F  06 0C       	LD	B,12
 3117 14A1  CD 1476     	CALL	DROP
 3118 14A4  3E F6       	LD	A,0F6H			;3 of F6's
 3119 14A6  06 03       	LD	B,3
 3120 14A8  CD 1476     	CALL	DROP
 3121 14AB  3E FC       	LD	A,0FCH			;Index ID mark (FC)
 3122 14AD  77          	LD	(HL),A			;drop into image
 3123 14AE  23          	INC	HL
 3124 14AF  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Now 50 (4Es)
 3125 14B2  06 32       	LD	B,50			;Header has the count of fill characters required
 3126 14B4  CD 1476     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3127 14B7  22 3919     	LD	(INDEX_MARK),HL		;pointer+1 to end of track header
 3128 14BA  C9          	RET				;return with [HL] pointing to first sector byte
 3129                   ;
 3130 14BB              DD_BUILD_SEC:				;Lay down a sector at current [HL]. Do not alter [D] or [E]
 3131 14BB  AF          	XOR	A,A
 3132 14BC  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 12,0's for IBM System 34 Format)
 3133 14BF  CD 1476     	CALL	DROP
 3134 14C2  3E F5       	LD	A,0F5H			;Special DD bytes
 3135 14C4  06 03       	LD	B,3
 3136 14C6  CD 1476     	CALL	DROP
 3137 14C9  3E FE       	LD	A,0FEH			;Sector ID Address mark
 3138 14CB  77          	LD	(HL),A			;drop it in the growing image
 3139 14CC  23          	INC	HL
 3140 14CD  3A 3917     	LD	A,(F_TRK)			;Drop in the track #
 3141 14D0  77          	LD	(HL),A
 3142 14D1  23          	INC	HL
 3143 14D2  3A 3918     	LD	A,(F_SIDE)		;Side#, 0 for A side, 02H for B side
 3144 14D5  B7          	OR	A,A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  55
VF      Z80

 3145 14D6  3E 00       	LD	A,0
 3146 14D8  28 02       	JR	Z,DBLD_ASIDE
 3147 14DA  3E 01       	LD	A,1			;1 for side B
 3148 14DC              DBLD_ASIDE:			
 3149 14DC  77          	LD	(HL),A			;0 here for A side, 1 for B side
 3150 14DD  23          	INC	HL
 3151 14DE  72          	LD	(HL),D			;Drop in sector #
 3152 14DF  23          	INC	HL
 3153 14E0  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2, 1024=3
 3154 14E3  77          	LD	(HL),A			;drop in sector length byte
 3155 14E4  23          	INC	HL	
 3156 14E5  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 179x 	
 3157 14E7  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3158 14E8  23          	INC	HL
 3159 14E9  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3160 14EC  DD 46 05    	LD	B,(IX+GAP2)		;<----(eg 22,4E's for IBM System 34 Format)
 3161 14EF  CD 1476     	CALL	DROP
 3162 14F2  AF          	XOR	A,A
 3163 14F3  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg 8,0's for IBM System 34 Format)
 3164 14F6  CD 1476     	CALL	DROP
 3165 14F9  3E F5       	LD	A,0F5H			;Special DD bytes
 3166 14FB  06 03       	LD	B,3
 3167 14FD  CD 1476     	CALL	DROP
 3168 1500  3E FB       	LD	A,0FBH			;Data address mark for 1791/5 	
 3169 1502  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3170 1503  23          	INC	HL
 3171 1504  7A          	LD	A,D			;Get sec #
 3172 1505  FE 01       	CP	A,1			;If first sector then store data marker
 3173 1507  20 03       	JR	NZ,DDATA_FIELD 
 3174 1509  22 391B     	LD	(S_DATA_MARK),HL	;Pointer to start of sector data area
 3175 150C              DDATA_FIELD:				;Now write in the sector data field itself
 3176 150C  DD 7E 09    	LD	A,(IX+SIZE)		;128,256,512 or 1024 byte sector size
 3177 150F  06 80       	LD	B,NBYTES
 3178 1511  0E 01       	LD	C,1			;1 loop of 128 bytes in WR_DATA_FIELD below
 3179 1513  B7          	OR	A,A
 3180 1514  28 10       	JR	Z,DD_DATA_FIELD		;Do 128 byte write (B=128)
 3181 1516  06 00       	LD	B,0			;Need 256 bytes for the rest of possible sectors
 3182 1518  0E 01       	LD	C,1			;One loop
 3183 151A  FE 01       	CP	A,1
 3184 151C  28 08       	JR	Z,DD_DATA_FIELD		;Do 256 byte write
 3185 151E  0E 02       	LD	C,2			;2 loops of 256 bytes in WRITE_DATA_FIELD
 3186 1520  FE 02       	CP	A,2
 3187 1522  28 02       	JR	Z,DD_DATA_FIELD		;Do 512 byte read
 3188 1524  0E 04       	LD	C,4			;(must be 3) so 1024 byte sector
 3189 1526              DD_DATA_FIELD:
 3190 1526  DD 7E 0B    	LD	A,(IX+DATA_FILL_CHAR)	;get the sector fill character (usually E5)
 3191 1529  CD 1476     DDF0:	CALL	DROP
 3192 152C  0D          	DEC	C
 3193 152D  20 FA       	JR	NZ,DDF0			;Decrease [C] to 0
 3194 152F  7A          	LD	A,D			;Get back sec #
 3195 1530  FE 01       	CP	A,1			;If first sector then store image mark 
 3196 1532  20 03       	JR	NZ,DNOT_FIRST
 3197 1534  22 391D     	LD	(E_DATA_MARK),HL	;For first sector will  diaplay data late
 3198 1537              DNOT_FIRST:
 3199 1537  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 1791/5 
 3200 1539  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3201 153A  23          	INC	HL
 3202 153B  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  56
VF      Z80

 3203 153E  DD 46 06    	LD	B,(IX+GAP3)		;<---- (54,4E's for IBM System 34 Format)
 3204 1541  CD 1476     	CALL	DROP
 3205 1544  7A          	LD	A,D
 3206 1545  FE 01       	CP	A,1			;If first sector then store image mark 
 3207 1547  C0          	RET	NZ
 3208 1548  22 391F     	LD	(E_SEC_MARK),HL		;For first sector will diaplay data later
 3209 154B  C9          	RET
 3210                   ;
 3211 154C              DD_TRK_END
 3212 154C  22 3921     	LD	(S_GAP4_MARK),HL	;Mark beginning of end of track field (GAP4)
 3213 154F  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3214 1552  DD 46 07    	LD	B,(IX+GAP4)		;<---- (eg 598 4E's for IBM System 34 Format)
 3215 1555  DD 4E 08    	LD	C,(IX+GAP4R)		;Times to repeat DROP
 3216 1558  CD 1476     DD_TRK1:CALL	DROP
 3217 155B  0D          	DEC	C
 3218 155C  20 FA       	JR	NZ,DD_TRK1
 3219 155E  22 3923     	LD	(E_GAP4_MARK),HL	;Mark end of Double density Track
 3220 1561  C9          	RET
 3221                   ;
 3222                   ; This routine initilized the first sector of a CPM86 5" Disk. 
 3223                   ; For DDDS CPM86 disks the last byte of the first sector has to be a 01.
 3224                   ; (For a DDSS CPM86 disk BTW it has to be 00)
 3225                   ;
 3226 1562              INIT_CPM86:
 3227 1562  21 29BF     	LD	HL,INITCPM_MSG	;Say Initilizing disk for CPM86
 3228 1565  CD 1903     	CALL	PMSG
 3229 1568  AF          	XOR	A,A		;Setup for the BIOS below
 3230 1569  FD 77 00    	LD	(IY+TRK),A	;Track 0 
 3231 156C  FD 77 01    	LD	(IY+SIDE),A	;Side A 
 3232 156F  3C          	INC	A
 3233 1570  FD 77 02    	LD	(IY+SCTR),A	;Sector 1 
 3234 1573  CD 11FF     	CALL	SET_SIDE	;Make sure IX+HW_BYTE is set for correct side
 3235 1576  CD 11AE     	CALL	START_DRIVE_1	;Select the drive in hardware
 3236 1579  CD 0E2D     	CALL	HOME	
 3237 157C  C4 12A0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
 3238                   
 3239 157F  21 5000     	LD	HL,FBUFFER	;Sector data to be written is here
 3240 1582  22 0040     	LD	(TADDR),HL	;Setup DMA address for BIOS
 3241 1585  0E E5       	LD	C,0E5H		;Data fill character (for CPM86 always 0E5H)
 3242 1587  CD 135C     	CALL	FILL_BUFFER	;Fill buffer with character E5's 
 3243 158A  2B          	DEC	HL		;Backup to last data byte
 3244 158B  3E 01       	LD	A,01
 3245 158D  77          	LD	(HL),A		;drop in the 01 flag at end.
 3246                   	
 3247 158E  CD 101E     	CALL	WRITE_SECTOR	;Write sector back to disk
 3248 1591  C4 12A0     	CALL	NZ,SHOW_ERRORS	;If any, show error flags
 3249 1594  AF          	XOR	A,A		;Return Z so no further special commands will 
 3250 1595  C9          	RET			;be picked up.
 3251                   
 3252                   ;
 3253                   ;
 3254                   ; Setup the "current drive" hardware selection bits for (A:,B:,C: or D:)
 3255                   ; Store bits in memory location (DRIVE_1)
 3256                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3257                   ;
 3258 1596              SELECT_DR_1:
 3259 1596  21 1A51     	LD	HL,GETDRV_MSG	;Ask which drive is the current drive
 3260 1599  CD 1903     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  57
VF      Z80

 3261 159C  CD 190E     	CALL	GETCMD		;Get the input option
 3262 159F  FE 1B       	CP	A,ESC		;Abort if ESC character
 3263 15A1  CA 15C7     	JP	Z,ABORT_CMD
 3264 15A4  FE 41       	CP	A,'A'
 3265 15A6  20 04       	JR	NZ,NOT_A1
 3266 15A8  3E 01       	LD	A,1
 3267 15AA  18 16       	JR	GOT_DRIVE1
 3268 15AC  FE 42       NOT_A1:	CP	A,'B'
 3269 15AE  20 04       	JR	NZ,NOT_B1
 3270 15B0  3E 02       	LD	A,2
 3271 15B2  18 0E       	JR	GOT_DRIVE1
 3272 15B4  FE 43       NOT_B1:	CP	A,'C'
 3273 15B6  20 04       	JR	NZ,NOT_C1
 3274 15B8  3E 04       	LD	A,4
 3275 15BA  18 06       	JR	GOT_DRIVE1
 3276 15BC  FE 44       NOT_C1:	CP	A,'D'
 3277 15BE  20 0C       	JR	NZ,INVALID_DR
 3278 15C0  3E 08       	LD	A,8
 3279 15C2              GOT_DRIVE1:
 3280 15C2  32 0046     	LD	(DRIVE_1),A
 3281 15C5  AF          	XOR	A,A
 3282 15C6  C9          	RET
 3283                   ;
 3284 15C7              ABORT_CMD:
 3285 15C7  AF          	XOR	A,A		;Abort with z flag but ESC in A
 3286 15C8  3D          	DEC	A		;Make NZ
 3287 15C9  3E 1B       	LD	A,ESC
 3288 15CB  C9          	RET
 3289                   ;
 3290 15CC              INVALID_DR:
 3291 15CC  AF          	XOR	A,A		;Abort with z flag but FF in A
 3292 15CD  3D          	DEC	A		;Make NZ
 3293 15CE  C9          	RET
 3294                   ;
 3295                   ;
 3296                   ; Setup the "second drive" hardware selection bits for (A:,B:,C: or D:)
 3297                   ; Store bits in memory location (DRIVE_21)
 3298                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3299                   ;
 3300 15CF              SELECT_DR_2:
 3301 15CF  21 1A51     	LD	HL,GETDRV_MSG	;Ask which drive is the current drive
 3302 15D2  CD 1903     	CALL	PMSG
 3303 15D5  CD 190E     	CALL	GETCMD		;Get the input option
 3304 15D8  FE 1B       	CP	A,ESC		;Abort if ESC character
 3305 15DA  CA 15C7     	JP	Z,ABORT_CMD
 3306 15DD  FE 41       	CP	A,'A'
 3307 15DF  20 04       	JR	NZ,NOT_A2
 3308 15E1  3E 01       	LD	A,1
 3309 15E3  18 16       	JR	GOT_DRIVE2
 3310 15E5  FE 42       NOT_A2:	CP	A,'B'
 3311 15E7  20 04       	JR	NZ,NOT_B2
 3312 15E9  3E 02       	LD	A,2
 3313 15EB  18 0E       	JR	GOT_DRIVE2
 3314 15ED  FE 43       NOT_B2:	CP	A,'C'
 3315 15EF  20 04       	JR	NZ,NOT_C2
 3316 15F1  3E 04       	LD	A,4
 3317 15F3  18 06       	JR	GOT_DRIVE2
 3318 15F5  FE 44       NOT_C2:	CP	A,'D'
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  58
VF      Z80

 3319 15F7  20 D3       	JR	NZ,INVALID_DR
 3320 15F9  3E 08       	LD	A,8
 3321 15FB              GOT_DRIVE2:
 3322 15FB  32 0047     	LD	(DRIVE_2),A
 3323 15FE  AF          	XOR	A,A
 3324 15FF  C9          	RET
 3325                   
 3326                   
 3327                   ;------Select the appropiate disk parameter table ----------------------
 3328                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3329                   ; [IX] to Drive paramater table 
 3330                   ;
 3331 1600              SELECT_IX:
 3332 1600  CD 1920     	CALL	ZCRLF
 3333 1603              SELECT_IX1:
 3334 1603  21 1A98     	LD	HL,GETSIZE_MSG	;Ask if 5" or 8"
 3335 1606  CD 1903     	CALL	PMSG
 3336 1609  CD 190E     	CALL	GETCMD		;get the input option
 3337 160C  FE 1B       	CP	A,ESC		;Abort if ESC character
 3338 160E  CA 15C7     	JP	Z,ABORT_CMD
 3339 1611  FE 35       	CP	A,'5'
 3340 1613  28 48       	JR	Z,GET_TABLE_5
 3341 1615  FE 38       	CP	A,'8'
 3342 1617  28 09       	JR	Z,GET_TABLE_8
 3343 1619  21 255A     BAD_CMD:LD	HL,BADCMD
 3344 161C  CD 1903     	CALL	PMSG
 3345 161F  AF          	XOR	A,A		;NZ Flag to indicate no selection
 3346 1620  3D          	DEC	A
 3347 1621  C9          	RET
 3348                   
 3349 1622              GET_TABLE_8:
 3350 1622  21 1ABB     	LD	HL,DISK_8_FORMATS	;Pointer for 8" disk table
 3351 1625  CD 1903     	CALL	PMSG		
 3352 1628  CD 190E     	CALL	GETCMD		;SELECT A DISK PARAMATER TABLE
 3353 162B  FE 1B       	CP	A,ESC		;Abort if ESC character
 3354 162D  CA 15C7     	JP	Z,ABORT_CMD
 3355 1630  FE 41       	CP	A,'A'		;128 bytes/sec
 3356 1632  DD 21 32CC  	LD	IX,STDSDT	;Set to 128 byte sectors 8" SD IBM Disk
 3357 1636  C8          	RET	Z
 3358 1637  FE 42       	CP	A,'B'
 3359 1639  DD 21 331D  	LD	IX,STDDDT	;Set to 128 byte sectors 8" DD format
 3360 163D  C8          	RET	Z
 3361 163E  FE 43       	CP	A,'C'
 3362 1640  DD 21 3388  	LD	IX,DDT256	;Set to 256 byte sectors IBM DDDS disk
 3363 1644  C8          	RET	Z		
 3364 1645  FE 44       	CP	A,'D'
 3365 1647  DD 21 33E5  	LD	IX,DDT512	;Set for 512 byte sectors 8" DDDS disk
 3366 164B  C8          	RET	Z		
 3367 164C  FE 45       	CP	A,'E'
 3368 164E  DD 21 3422  	LD	IX,DDT1K	;Set for 1024 byte sectors 8" DDSS disk
 3369 1652  C8          	RET	Z
 3370 1653  FE 46       	CP	A,'F'
 3371 1655  DD 21 3472  	LD	IX,DDT1K2	;Set for 1024 byte sectors 8" DDDS disk
 3372 1659  C8          	RET	Z
 3373 165A  C3 1619     	JP	BAD_CMD
 3374                   
 3375 165D              GET_TABLE_5:
 3376 165D  21 1C44     	LD	HL,DISK_5_FORMATS	;Pointer for 5" disk table
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  59
VF      Z80

 3377 1660  CD 1903     	CALL	PMSG		
 3378 1663  CD 190E     	CALL	GETCMD		;SELECT A DISK PARAMATER TABLE
 3379 1666  FE 1B       	CP	A,ESC		;Abort if ESC character
 3380 1668  CA 15C7     	JP	Z,ABORT_CMD
 3381 166B  FE 41       	CP	A,'A'
 3382 166D  DD 21 3561  	LD	IX,MINCPM	;Set for 512 byte CPM-86 5" DD disk
 3383 1671  C8          	RET	Z
 3384 1672  FE 42       	CP	A,'B'
 3385 1674  DD 21 34C2  	LD	IX,MINSDT	;Set for 128 byte 5" SD disk
 3386 1678  C8          	RET	Z
 3387 1679  FE 43       	CP	A,'C'
 3388 167B  DD 21 350C  	LD	IX,MINDDT	;Set for 128 byte 5" DD disk
 3389 167F  C8          	RET	Z
 3390 1680  FE 44       	CP	A,'D'
 3391 1682  DD 21 35AE  	LD	IX,DEC		;Set for 512 byte 5" DEC-VT180 DD disk
 3392 1686  C8          	RET	Z
 3393 1687  FE 45       	CP	A,'E'
 3394 1689  DD 21 35F8  	LD	IX,TOSHIBA	;Set for TOSHIBA DD disk
 3395 168D  C8          	RET	Z
 3396 168E  FE 46       	CP	A,'F'
 3397 1690  DD 21 364D  	LD	IX,CDOS		;Set for CDOS SD disk
 3398 1694  C8          	RET	Z
 3399 1695  FE 47       	CP	A,'G'
 3400 1697  DD 21 369A  	LD	IX,CDOSDD	;Set for CDOS DD disk
 3401 169B  C8          	RET	Z
 3402 169C  FE 48       	CP	A,'H'
 3403 169E  DD 21 36E4  	LD	IX,EPSON	;Set for EPSON QX-10 DD disk
 3404 16A2  C8          	RET	Z
 3405 16A3  FE 49       	CP	A,'I'
 3406 16A5  DD 21 3728  	LD	IX,MORROW	;Set for MORROW DD disk
 3407 16A9  C8          	RET	Z
 3408 16AA  FE 4A       	CP	A,'J'
 3409 16AC  DD 21 3770  	LD	IX,ZENITH	;Set for ZENITH Z-100 DD disk
 3410 16B0  C8          	RET	Z
 3411 16B1  FE 4B       	CP	A,'K'
 3412 16B3  DD 21 37BC  	LD	IX,SUPER	;Set for SUPERBRAIN DD disk
 3413 16B7  C8          	RET	Z
 3414 16B8  FE 4C       	CP	A,'L'
 3415 16BA  DD 21 380C  	LD	IX,MSDOS	;Set for MSDOS 1.1 DD disk
 3416 16BE  C8          	RET	Z
 3417 16BF  FE 4D       	CP	A,'M'
 3418 16C1  DD 21 385B  	LD	IX,MSDOS2	;Set for MSDOS 2.2 DD disk
 3419 16C5  C8          	RET	Z
 3420 16C6  FE 4E       	CP	A,'N'
 3421 16C8  DD 21 38AB  	LD	IX,TRS80	;Set for TRS80 III DD disk
 3422 16CC  C8          	RET	Z
 3423 16CD  C3 1619     	JP	BAD_CMD
 3424                   ;
 3425                   ;
 3426                   ;-------------------------------------------------------------------------
 3427                   ; Describe on one line the type of disk format selected
 3428                   ; Assumes a valid IX pointer to relevent disk table
 3429                   ;
 3430 16D0              SHOW_HW_TITLE:
 3431 16D0  21 20E4     	LD	HL,DISK_INFO		;CR,LF,'Current drive:-'
 3432 16D3  CD 1903     	CALL	PMSG
 3433 16D6  DD E5       	PUSH	IX			;IX->HL
 3434 16D8  E1          	POP	HL
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  60
VF      Z80

 3435 16D9  11 0013     	LD	DE,TITLE		;add in offset
 3436 16DC  19          	ADD	HL,DE			;HL now points to the title entry of the selected disk
 3437 16DD  CD 1903     	CALL	PMSG			;Show the title line
 3438 16E0  C9          	RET
 3439                   ;
 3440                   ;--------------------------------------------------------------------------
 3441                   ; Decode the IOBYTE byte and print out hardware disk parameters on one line
 3442                   ; Assumes a valid IX pointer to relevent disk table
 3443                   ;
 3444 16E1              SHOW_HW_BYTE:
 3445 16E1  21 20F7     	LD	HL,DISK_INFO0		;CR,LF,'Drive '
 3446 16E4  CD 1903     	CALL	PMSG
 3447 16E7  3A 0048     	LD	A,(IOBYTE)		;Obtain the current drive letter (A;,B:....)
 3448 16EA  E6 03       	AND	A,03H			
 3449 16EC  FE 01       	CP	A,1			
 3450 16EE  20 04       	JR	NZ,NOT_A_DR
 3451 16F0  3E 41       	LD	A,'A'
 3452 16F2  18 12       	JR	DRV_DONE
 3453 16F4              NOT_A_DR:
 3454 16F4  FE 02       	CP	A,2
 3455 16F6  20 04       	JR	NZ,NOT_B_DR
 3456 16F8  3E 42       	LD	A,'B'
 3457 16FA  18 0A       	JR	DRV_DONE
 3458 16FC              NOT_B_DR
 3459 16FC  FE 04       	CP	A,4
 3460 16FE  20 04       	JR	NZ,NOT_C_DR
 3461 1700  3E 43       	LD	A,'C'
 3462 1702  18 02       	JR	DRV_DONE
 3463 1704              NOT_C_DR
 3464 1704  3E 44       	LD	A,'D'
 3465 1706              DRV_DONE:
 3466 1706  4F          	LD	C,A			;Drop it on to the CRT/LCD
 3467 1707  CD 011B     	CALL	CO
 3468 170A  21 2100     	LD	HL,DISK_INFO1
 3469 170D  CD 1903     	CALL	PMSG
 3470 1710  3A 0048     	LD	A,(IOBYTE)
 3471 1713  CD 19A7     	CALL	ZBITS			;Print out bit pattern in IOBYTE for hardware
 3472 1716  21 210C     	LD	HL,DISK_INFO2
 3473 1719  CD 1903     	CALL	PMSG
 3474 171C  DD CB 02 6E 	BIT	5,(IX+HW_BYTE)		;Say whether 8" or 5"
 3475 1720  28 04       	JR	Z,INCH8
 3476 1722  0E 35       	LD	C,'5'
 3477 1724  18 02       	JR	NEXT2
 3478 1726  0E 38       INCH8:	LD	C,'8'
 3479 1728  CD 011B     NEXT2:	CALL	CO
 3480 172B  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Say whether Single or Double sided disk
 3481 172F  28 05       	JR	Z,S_SIDE
 3482 1731  21 2114     	LD	HL,DISK_INFO3
 3483 1734  18 03       	JR	NEXT3
 3484 1736  21 2127     S_SIDE:	LD	HL,DISK_INFO4
 3485 1739  CD 1903     NEXT3:	CALL	PMSG
 3486 173C  DD CB 02 76 	BIT	6,(IX+HW_BYTE)		;Say whether SD or DD disk
 3487 1740  28 05       	JR	Z,DD_DSK
 3488 1742  21 213A     	LD	HL,DISK_INFO5
 3489 1745  18 03       	JR	NEXT4
 3490 1747  21 214F     DD_DSK:	LD	HL,DISK_INFO6
 3491 174A  CD 1903     NEXT4:	CALL	PMSG
 3492 174D  C9          	RET
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  61
VF      Z80

 3493                   ;
 3494                   ;
 3495                   ;----------------------------------------------------------
 3496                   ; Display the disk paramater table pointed to by IX
 3497                   ;
 3498 174E              SHOW_IX_TABLE:
 3499 174E  21 2164     	LD	HL,DISK_INFO7		;Print sectors/track
 3500 1751  CD 1903     	CALL	PMSG
 3501 1754  DD 7E 00    	LD	A,(IX+NSCTRS)
 3502 1757  CD 1989     	CALL	PACC
 3503 175A  21 218A     	LD	HL,DISK_INFO8		;Print tracks/side
 3504 175D  CD 1903     	CALL	PMSG
 3505 1760  DD 7E 01    	LD	A,(IX+NTRKS)
 3506 1763  CD 1989     	CALL	PACC
 3507 1766  21 219A     	LD	HL,DISK_INFO9		;Sector Size
 3508 1769  DD 7E 09    	LD	A,(IX+SIZE)
 3509 176C  B7          	OR	A,A
 3510 176D  20 05       	JR	NZ,NOT_128
 3511 176F  21 21A7     	LD	HL,DISK_INFO10		;128 Bytes/sector
 3512 1772  18 15       	JR	DONE_IX_TABLE
 3513 1774  FE 01       NOT_128:CP	1
 3514 1776  20 05       	JR	NZ,NOT_256
 3515 1778  21 21BA     	LD	HL,DISK_INFO11		;256 Bytes/Sector
 3516 177B  18 0C       	JR	DONE_IX_TABLE
 3517 177D  FE 02       NOT_256:CP	2
 3518 177F  20 05       	JR	NZ,NOT_512
 3519 1781  21 21CD     	LD	HL,DISK_INFO12		;512 Bytes/sector
 3520 1784  18 03       	JR	DONE_IX_TABLE
 3521 1786  21 21E0     NOT_512:LD	HL,DISK_INFO13		;1024 Bytes/Sector
 3522 1789              DONE_IX_TABLE:
 3523 1789  CD 1903     	CALL	PMSG
 3524 178C  C9          	RET
 3525                   ;
 3526                   ;----------------------------------------------------------
 3527                   ; Display the current track ID Field.
 3528                   ; NOTE this is NOT the current sector read. It's whatever sector 
 3529                   ; the head happens to be over at the time.
 3530                   ;
 3531 178D              SHOW_ID:
 3532 178D  21 21F3     	LD	HL,IDMSG0		;'Track/Side/Sec/Size/(CRC) TRACK ID field='
 3533 1790  CD 1903     	CALL	PMSG
 3534 1793  21 3900     	LD	HL,IDSV			;Point to where data was saved
 3535 1796  06 04       	LD	B,4			;4+2 bytes in ID
 3536 1798  7E          IDLOOP1:LD	A,(HL)
 3537 1799  CD 1989     	CALL	PACC			;Print [A] in ASCII
 3538 179C  23          	INC	HL
 3539 179D  05          	DEC	B
 3540 179E  20 F8       	JR	NZ,IDLOOP1
 3541 17A0  0E 20       	LD	C,' '
 3542 17A2  CD 011B     	CALL	CO
 3543 17A5  0E 28       	LD	C,'('
 3544 17A7  CD 011B     	CALL	CO
 3545 17AA  06 02       	LD	B,2
 3546 17AC  7E          IDLOOP5:LD	A,(HL)
 3547 17AD  CD 1989     	CALL	PACC			;Print CRC value
 3548 17B0  23          	INC	HL
 3549 17B1  05          	DEC	B
 3550 17B2  20 F8       	JR	NZ,IDLOOP5
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  62
VF      Z80

 3551 17B4  0E 29       	LD	C,')'
 3552 17B6  CD 011B     	CALL	CO
 3553 17B9  C9          	RET
 3554                   ;
 3555                   ;
 3556                   ; Display Bits of Versafloppy II Status Port
 3557                   ; Return with bits in [A]
 3558                   ;
 3559 17BA              SHOW_STAT_BITS:
 3560 17BA  21 27E6     	LD	HL,STATUS_179x
 3561 17BD  CD 1903     	CALL	PMSG
 3562 17C0  DB 54       	IN	A,(STATUS)
 3563 17C2  CD 19A7     	CALL	ZBITS			;display bit pattern of [A]
 3564 17C5  C9          	RET				;Will return with error in [A]
 3565                   ;
 3566                   ; Check to see if disk is write protected
 3567                   ; Z if not protected, NZ if write protected
 3568                   ;
 3569 17C6              CHECK_WP:
 3570 17C6  DB 54       	IN	A,(STATUS)		;Remember data is inverted
 3571 17C8  CB 77       	BIT	6,A
 3572 17CA  C8          	RET	Z
 3573 17CB  21 2994     	LD	HL,DISK_WP_MSG		;This disk is currently write protected
 3574 17CE  CD 1903     	CALL	PMSG
 3575 17D1  AF          	XOR	A,A
 3576 17D2  3D          	DEC	A
 3577 17D3  C9          	RET				;Will return with error in [A]
 3578                   ;
 3579                   ;
 3580                   ;
 3581                   ;--------------------- DISPLAY SECTOR DATA CONTENTS -------------------------
 3582                   ;Display the Sector read from disk to RAM location at (TADDR)
 3583 17D4              SEC_DISPLAY:
 3584 17D4  3A 38FF     	LD	A,(CRTDISP)	;Do we have the more detail display option on
 3585 17D7  B7          	OR	A,A
 3586 17D8  C8          	RET	Z		;If not just return
 3587 17D9  F5          	PUSH	AF
 3588 17DA  C5          	PUSH	BC
 3589 17DB  D5          	PUSH	DE
 3590 17DC  E5          	PUSH	HL
 3591 17DD  21 252B     	LD	HL,SEC_MSG
 3592 17E0  CD 1903     	CALL	PMSG
 3593 17E3  2A 0040     	LD	HL,(TADDR)	;Move Transfer address into HL
 3594 17E6  DD 7E 09    	LD	A,(IX+SIZE)	;Get sector size
 3595 17E9  B7          	OR	A,A
 3596 17EA  11 0080     	LD	DE,NBYTES	;128 byte sectors
 3597 17ED  28 11       	JR	Z,DISP1
 3598 17EF  FE 01       	CP	A,1
 3599 17F1  11 0100     	LD	DE,NBYTES*2	;256 byte sectors
 3600 17F4  28 0A       	JR	Z,DISP1
 3601 17F6  FE 02       	CP	A,2
 3602 17F8  11 0200     	LD	DE,NBYTES*4	;512 byte sectors
 3603 17FB  28 03       	JR	Z,DISP1
 3604 17FD  11 0400     	LD	DE,NBYTES*8	;Must be 1024 byte sectors
 3605                   
 3606 1800  7B          DISP1:	LD	A,E
 3607 1801  E6 3F       	AND	A,00111111B	;64 characters /line
 3608 1803  20 03       	JR	NZ,NOCR
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  63
VF      Z80

 3609 1805  CD 1920     	CALL	ZCRLF
 3610 1808  7E          NOCR:	LD	A,(HL)
 3611 1809  E6 7F       	AND	A,7FH
 3612 180B  FE 20       	CP	' ' 		;FILTER OUT CONTROL CHARACTERS'
 3613 180D  30 02       	JR	NC,T33
 3614 180F  3E 2E       T22:	LD	A,'.'
 3615 1811  FE 7C       T33:	CP	A,07CH
 3616 1813  30 FA       	JR	NC,T22
 3617 1815  4F          	LD	C,A	
 3618 1816  CD 011B     	CALL	CO
 3619 1819  23          	INC	HL
 3620 181A  1B          	DEC	DE		;Decrease DE count by 1
 3621 181B  7B          	LD	A,E
 3622 181C  B7          	OR	A,A		;Not XX00 at least
 3623 181D  20 E1       	JR	NZ,DISP1
 3624 181F  B2          	OR	A,D		
 3625 1820  20 DE       	JR	NZ,DISP1	;Not 0000
 3626 1822  CD 1920     	CALL	ZCRLF
 3627 1825  E1          NODISP:	POP	HL
 3628 1826  D1          	POP	DE
 3629 1827  C1          	POP	BC
 3630 1828  F1          	POP	AF
 3631 1829  C9          	RET
 3632                   ;
 3633                   ;------------ SHOW DETAILS OF RAW SECTOR IMAGE FOR TRACK WRITE -------------
 3634 182A              FORMAT_INFO:
 3635 182A  F5          	PUSH	AF		;Save everything since track formating uses all
 3636 182B  C5          	PUSH	BC
 3637 182C  D5          	PUSH	DE
 3638 182D  E5          	PUSH	HL
 3639 182E  21 2604     	LD	HL,FORM_TRK	;Formatting track...
 3640 1831  CD 1903     	CALL	PMSG
 3641 1834  FD 7E 00    	LD	A,(IY+TRK)
 3642 1837  CD 1989     	CALL	PACC
 3643                   ;
 3644 183A  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 3645 183E  28 10       	JR	Z,NO_SIDESF	;If 1 sided then skip sides info
 3646 1840  FD 7E 01    	LD	A,(IY+SIDE)
 3647 1843  B7          	OR	A,A		;If 0 we have done A side now do B
 3648 1844  20 05       	JR	NZ,B_SIDEF	;is B side
 3649 1846  21 2501     	LD	HL,HEAD0_MSG
 3650 1849  18 08       	JR	SEC_INFO1
 3651 184B  21 250B     B_SIDEF:LD	HL,HEAD1_MSG
 3652 184E  18 03       	JR	SEC_INFO1
 3653 1850              NO_SIDESF:
 3654 1850  21 2515     	LD	HL,H_MSG	;H.
 3655 1853              SEC_INFO1:
 3656 1853  CD 1903     	CALL	PMSG
 3657 1856  3A 38FF     	LD	A,(CRTDISP)	;Do we have the more detail display option on
 3658 1859  B7          	OR	A,A
 3659 185A  CA 18FE     	JP	Z,NO_TDISPLAY	;If Z do not list the sector contents.
 3660                   
 3661                   				;OK we are going to step along the image one
 3662                   				;section at a time. Key locations were stored 
 3663                   				;previously in the SCTRIM: routine.  
 3664 185D  21 2618     	LD	HL,TRACK_MSG	
 3665 1860  CD 1903     	CALL	PMSG
 3666 1863  11 5000     	LD	DE,FBUFFER	;Move Start of track image into DE
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  64
VF      Z80

 3667 1866  D5          	PUSH	DE		;save it
 3668 1867  2A 3919     	LD	HL,(INDEX_MARK)	;End+1 of track header
 3669 186A  2B          	DEC	HL
 3670 186B  ED 52       	SBC	HL,DE
 3671 186D  EB          	EX	DE,HL		;Count now in DE
 3672 186E  E1          	POP	HL		;DE on stack to HL
 3673 186F  7E          HDRX:	LD	A,(HL)
 3674 1870  CD 1989     	CALL	PACC		;Print out HEX values of HEADER Field
 3675 1873  23          	INC	HL		
 3676 1874  1B          	DEC	DE		;Decrease DE count by 1
 3677 1875  7B          	LD	A,E
 3678 1876  B7          	OR	A,A		;Not XX00 at least
 3679 1877  20 F6       	JR	NZ,HDRX
 3680 1879  B2          	OR	A,D		
 3681 187A  20 F3       	JR	NZ,HDRX		;Not 0000
 3682                   
 3683                   				;Now display the FIRST sector ID field area
 3684 187C  21 264A     	LD	HL,SECTOR_MSG	
 3685 187F  CD 1903     	CALL	PMSG
 3686 1882  ED 5B 3919  	LD	DE,(INDEX_MARK)		;Move Start of sector image into DE
 3687 1886  D5          	PUSH	DE			;save it
 3688 1887  2A 391B     	LD	HL,(S_DATA_MARK)	;End+1 of sec ID field (allow the +1 to capture the FB byte)
 3689 188A  ED 52       	SBC	HL,DE
 3690 188C  EB          	EX	DE,HL		;Count now in DE
 3691 188D  E1          	POP	HL		;DE on stack to HL
 3692 188E  7E          HSECX:	LD	A,(HL)
 3693 188F  CD 1989     	CALL	PACC		;Print out HEX values of 1st Sector ID Field
 3694 1892  23          	INC	HL		
 3695 1893  1B          	DEC	DE		;Decrease DE count by 1
 3696 1894  7B          	LD	A,E
 3697 1895  B7          	OR	A,A		;Not XX00 at least
 3698 1896  20 F6       	JR	NZ,HSECX
 3699 1898  B2          	OR	A,D		
 3700 1899  20 F3       	JR	NZ,HSECX	;Not 0000
 3701                   
 3702                   				;Now display the FIRST sector DATA field area
 3703 189B  21 265F     	LD	HL,SEC_DATA_MSG	
 3704 189E  CD 1903     	CALL	PMSG
 3705 18A1  ED 5B 391B  	LD	DE,(S_DATA_MARK)	;Move Start of sector image into DE
 3706 18A5  D5          	PUSH	DE			;save it
 3707 18A6  2A 391D     	LD	HL,(E_DATA_MARK)	;End+1 of DATA field
 3708 18A9  2B          	DEC	HL
 3709 18AA  ED 52       	SBC	HL,DE
 3710 18AC  EB          	EX	DE,HL		;Count now in DE
 3711 18AD  E1          	POP	HL		;DE on stack to HL
 3712 18AE  7E          HDATAX:	LD	A,(HL)
 3713 18AF  CD 1989     	CALL	PACC		;Print out HEX values of 1st Sector DATA Field
 3714 18B2  23          	INC	HL		
 3715 18B3  1B          	DEC	DE		;Decrease DE count by 1
 3716 18B4  7B          	LD	A,E
 3717 18B5  B7          	OR	A,A		;Not XX00 at least
 3718 18B6  20 F6       	JR	NZ,HDATAX
 3719 18B8  B2          	OR	A,D		
 3720 18B9  20 F3       	JR	NZ,HDATAX	;Not 0000
 3721                   
 3722                   				;Now display the FIRST sector GAP3 field area
 3723 18BB  21 2676     	LD	HL,SEC_GAP3_MSG	
 3724 18BE  CD 1903     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  65
VF      Z80

 3725 18C1  ED 5B 391D  	LD	DE,(E_DATA_MARK)	;Move Start of sector image into DE
 3726 18C5  D5          	PUSH	DE			;save it
 3727 18C6  2A 391F     	LD	HL,(E_SEC_MARK)		;End+1 of GAP3 field
 3728 18C9  2B          	DEC	HL
 3729 18CA  ED 52       	SBC	HL,DE
 3730 18CC  EB          	EX	DE,HL		;Count now in DE
 3731 18CD  E1          	POP	HL		;DE on stack to HL
 3732 18CE  7E          HGAP3X:	LD	A,(HL)
 3733 18CF  CD 1989     	CALL	PACC		;Print out HEX values of 1st Sector GAP3 Field
 3734 18D2  23          	INC	HL		
 3735 18D3  1B          	DEC	DE		;Decrease DE count by 1
 3736 18D4  7B          	LD	A,E
 3737 18D5  B7          	OR	A,A		;Not XX00 at least
 3738 18D6  20 F6       	JR	NZ,HGAP3X
 3739 18D8  B2          	OR	A,D		
 3740 18D9  20 F3       	JR	NZ,HGAP3X	;Not 0000
 3741                   
 3742                   				;Now display the Track GAP4 field area
 3743 18DB  21 268D     	LD	HL,SEC_GAP4_MSG	
 3744 18DE  CD 1903     	CALL	PMSG
 3745 18E1  ED 5B 3921  	LD	DE,(S_GAP4_MARK)	;Start of sector GAP4 into DE
 3746 18E5  D5          	PUSH	DE		;save it
 3747 18E6  2A 3923     	LD	HL,(E_GAP4_MARK)	;End+1 of GAP3 field
 3748 18E9  2B          	DEC	HL
 3749 18EA  ED 52       	SBC	HL,DE
 3750 18EC  EB          	EX	DE,HL		;Count now in DE
 3751 18ED  E1          	POP	HL		;DE on stack to HL
 3752 18EE  7E          HGAP4X:	LD	A,(HL)
 3753 18EF  CD 1989     	CALL	PACC		;Print out HEX values of 1st Sector GAP3 Field
 3754 18F2  23          	INC	HL		
 3755 18F3  1B          	DEC	DE		;Decrease DE count by 1
 3756 18F4  7B          	LD	A,E
 3757 18F5  B7          	OR	A,A		;Not XX00 at least
 3758 18F6  20 F6       	JR	NZ,HGAP4X
 3759 18F8  B2          	OR	A,D
 3760 18F9  20 F3       	JR	NZ,HGAP4X	;Not 0000
 3761 18FB  CD 1920     	CALL	ZCRLF
 3762                   ;
 3763 18FE              NO_TDISPLAY:
 3764 18FE  E1          	POP	HL
 3765 18FF  D1          	POP	DE
 3766 1900  C1          	POP	BC
 3767 1901  F1          	POP	AF
 3768 1902  C9          	RET
 3769                   ;
 3770                   ;
 3771                   ;====================== SUPPORT ROUTINES ==================================
 3772                   ;
 3773 1903  7E          PMSG:	LD	A,(HL)		;PRINT MESSAGE STRING in [HL] up to 0
 3774 1904  B7          	OR	A
 3775 1905  C8          	RET	Z
 3776 1906  4F          	LD	C,A
 3777 1907  CD 011B     	CALL	CO
 3778 190A  23          	INC	HL
 3779 190B  C3 1903     	JP	PMSG
 3780                   ;
 3781 190E  CD 0112     GETCMD:	CALL	CI		;GET A CHARACTER, convert to UC, ECHO it
 3782 1911  CD 192F     	CALL	UCASE
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  66
VF      Z80

 3783 1914  FE 1B       	CP	A,ESC
 3784 1916  C8          	RET	Z		;Don't echo an ESC
 3785 1917  F5          	PUSH	AF		;Save it
 3786 1918  C5          	PUSH	BC
 3787 1919  4F          	LD	C,A
 3788 191A  CD 011B     	CALL	CO		;Echo it
 3789 191D  C1          	POP	BC
 3790 191E  F1          	POP	AF		;get it back
 3791 191F  C9          	RET
 3792                   
 3793 1920  F5          ZCRLF:	PUSH	AF		;Send CR/LF to CRT
 3794 1921  C5          	PUSH	BC
 3795 1922  0E 0D       	LD	C,CR
 3796 1924  CD 011B     	CALL	CO
 3797 1927  0E 0A       	LD	C,LF
 3798 1929  CD 011B     	CALL	CO
 3799 192C  C1          	POP	BC
 3800 192D  F1          	POP	AF
 3801 192E  C9          	RET
 3802                   ;				;Convert LC to UC
 3803 192F  FE 61       UCASE:	CP	A,'a'		;must be >= lowercase a
 3804 1931  D8          	RET	C		; else go back...
 3805 1932  FE 7B       	CP	A,'z'+1		;must be <= lowercase z
 3806 1934  D0          	RET	NC		; else go back...
 3807 1935  D6 20       	SUB	A,'a'-'A'	;subtract lowercase bias
 3808 1937  C9          	RET
 3809                   ;
 3810                   ;
 3811                   ; Return with 2 HEX digits in [A]. If abort, Carry flag set + ESC in [A]
 3812 1938              GET_HEX:
 3813 1938  C5          	PUSH	BC			
 3814 1939  CD 190E     	CALL	GETCMD		;Get a character from keyboard & ECHO
 3815 193C  FE 1B       	CP	A,ESC
 3816 193E  28 2A       	JR	Z,HEX_ABORT
 3817 1940  FE 2F       	CP	'/'		;check 0-9, A-F
 3818 1942  38 26       	JR	C,HEX_ABORT
 3819 1944  FE 47       	CP	'F'+1
 3820 1946  30 22       	JR	NC,HEX_ABORT
 3821 1948  CD 1981     	CALL	ASBIN		;Convert to binary
 3822 194B  CB 27       	SLA	A
 3823 194D  CB 27       	SLA	A
 3824 194F  CB 27       	SLA	A
 3825 1951  CB 27       	SLA	A		;Shift to high nibble	
 3826 1953  47          	LD	B,A		;Store it
 3827 1954  CD 190E     	CALL	GETCMD		;Get 2nd character from keyboard & ECHO
 3828 1957  FE 1B       	CP	A,ESC
 3829 1959  28 0F       	JR	Z,HEX_ABORT
 3830 195B  FE 2F       	CP	'/'		;check 0-9, A-F
 3831 195D  38 0B       	JR	C,HEX_ABORT
 3832 195F  FE 47       	CP	'F'+1
 3833 1961  30 07       	JR	NC,HEX_ABORT
 3834 1963  CD 1981     	CALL	ASBIN		;Convert to binary
 3835 1966  B0          	OR	A,B		;add in the first digit
 3836 1967  B7          	OR	A,A		;To return NC
 3837 1968  C1          	POP	BC
 3838 1969  C9          	RET
 3839 196A              HEX_ABORT:
 3840 196A  37          	SCF			;Set Carry flag 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  67
VF      Z80

 3841 196B  3E 1B       	LD	A,ESC
 3842 196D  C1          	POP	BC
 3843 196E  C9          	RET
 3844                   ;
 3845                   ;
 3846                   ; Put 4 HEX characters in [HL] (To set RAM location etc.)
 3847                   ;
 3848 196F              GET_HEX4:	
 3849 196F  26 00       	LD      H,0000H
 3850 1971  CD 1938     	CALL	GET_HEX		;get 2 HEX digits
 3851 1974  38 09       	JR	C,SCAN_ABORT
 3852 1976  67          	LD	H,A
 3853 1977  CD 1938     	CALL	GET_HEX		;get 2 more HEX digits
 3854 197A  38 03       	JR	C,SCAN_ABORT
 3855 197C  6F          	LD	L,A
 3856 197D  B7          	OR	A,A		;To return NC
 3857 197E  C9          	RET
 3858 197F              SCAN_ABORT:
 3859 197F  37          	SCF			;Set Carry flag 
 3860 1980  C9          	RET
 3861                   
 3862                   ; ASCII TO BINARY CONVERSION ROUTINE
 3863 1981  D6 30       ASBIN:	SUB	30H 
 3864 1983  FE 0A       	CP	0AH 
 3865 1985  F8          	RET	M
 3866 1986  D6 07       	SUB	07H 
 3867 1988  C9          	RET
 3868                   
 3869                   ;Print the acccumulator value on CRT in HEX-ASCII
 3870 1989  F5          PACC:	PUSH	AF
 3871 198A  C5          	PUSH	BC
 3872 198B  F5          	PUSH	AF
 3873 198C  0F          	RRCA
 3874 198D  0F          	RRCA
 3875 198E  0F          	RRCA
 3876 198F  0F          	RRCA
 3877 1990  CD 199A     	CALL	ZCONV
 3878 1993  F1          	POP	AF
 3879 1994  CD 199A     	CALL	ZCONV
 3880 1997  C1          	POP	BC
 3881 1998  F1          	POP	AF
 3882 1999  C9          	RET
 3883                   
 3884 199A  E6 0F       ZCONV:	AND	A,0FH		;HEX to ASCII
 3885 199C  C6 90       	ADD	90H
 3886 199E  27          	DAA
 3887 199F  CE 40       	ADC	40H
 3888 19A1  27          	DAA
 3889 19A2  4F          	LD	C,A
 3890 19A3  CD 011B     	CALL	CO
 3891 19A6  C9          	RET
 3892                   ;
 3893                   ;DISPLAY BIT PATTERN IN [A]
 3894                   ;
 3895 19A7  F5          ZBITS:	PUSH	AF
 3896 19A8  C5          	PUSH	BC
 3897 19A9  D5          	PUSH	DE
 3898 19AA  5F          	LD	E,A		
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  68
VF      Z80

 3899 19AB  06 08       	LD	B,8
 3900 19AD  CB 23       BQ2:	SLA	E
 3901 19AF  3E 18       	LD	A,18H
 3902 19B1  8F          	ADC	A
 3903 19B2  4F          	LD	C,A
 3904 19B3  CD 011B     	CALL	CO
 3905 19B6  10 F5       	DJNZ	BQ2
 3906 19B8  D1          	POP	DE
 3907 19B9  C1          	POP	BC
 3908 19BA  F1          	POP	AF
 3909 19BB  C9          	RET
 3910                   ;
 3911                   ;
 3912                   ; CHECK IF AN ABORT (ESC) CHARACTER IS PRESENT AT THE CONSOL
 3913                   ; HOLD EVERYTHING IF SPACEBAR IS PRESSED
 3914                   ;
 3915 19BC              CHECKABORT:			;see if an abort is required
 3916 19BC  CD 010A     	CALL	CONST
 3917 19BF  C8          	RET	Z	
 3918 19C0  CD 0112     CHECK1:	CALL	CI
 3919 19C3  FE 1B       	CP	A,ESC		;ESC to abort
 3920 19C5  28 06       	JR	Z,CABORT
 3921 19C7  FE 20       	CP	A,' '		;If spacebar then freeze CRT display
 3922 19C9  28 F5       	JR	Z,CHECK1
 3923 19CB  AF          	XOR	A,A
 3924 19CC  C9          	RET
 3925 19CD  AF          CABORT:	XOR	A,A		;Was ESC, so return with NZ flag
 3926 19CE  3D          	DEC	A		;return NZ, & 0FFH in A if ESC there
 3927 19CF  C9          	RET
 3928                   ;
 3929                   ;
 3930                   ;
 3931                   ;---------- Debug Routines -----------------------------
 3932 19D0              DEBUG_A:			;Display contents of A of CRT
 3933 19D0  F5          	PUSH	AF
 3934 19D1  C5          	PUSH	BC
 3935 19D2  D5          	PUSH	DE
 3936 19D3  E5          	PUSH	HL
 3937 19D4  F5          	PUSH	AF
 3938 19D5  0E 3E       	LD	C,'>'
 3939 19D7  CD 011B     	CALL	CO
 3940 19DA  F1          	POP	AF
 3941 19DB  CD 1989     	CALL	PACC
 3942 19DE  0E 3C       	LD	C,'<'
 3943 19E0  CD 011B     	CALL	CO
 3944 19E3  E1          	POP	HL
 3945 19E4  D1          	POP	DE
 3946 19E5  C1          	POP	BC
 3947 19E6  F1          	POP	AF
 3948 19E7  C9          	RET
 3949                   ;
 3950 19E8              DEBUG_B				;Display A on CRT wait for keyboard
 3951 19E8  CD 19D0     	CALL	DEBUG_A
 3952 19EB  F5          	PUSH	AF
 3953 19EC  CD 0112     	CALL	CI
 3954 19EF  F1          	POP	AF
 3955 19F0  C9          	RET
 3956                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  69
VF      Z80

 3957 19F1              DEBUG_HL			;Display HL on CRT
 3958 19F1  F5          	PUSH	AF
 3959 19F2  7C          	LD	A,H
 3960 19F3  CD 19D0     	CALL	DEBUG_A
 3961 19F6  7D          	LD	A,L
 3962 19F7  CD 19D0     	CALL	DEBUG_A
 3963 19FA  F1          	POP	AF
 3964 19FB  C9          	RET 
 3965                   ;
 3966                   ;
 3967                   ;
 3968                   ;---------------------------------------------------------------------------
 3969                   ;
 3970 19FC  0D 0A 0A    SIGNON:		DB	CR,LF,LF
 3971         0000      	    if	CHIP_1795
 3974                   	     endif
 3975                   
 3976         0001      	    if	CHIP_1791
 3977 19FF  56 65 72 73 		DB	'Versafloppy II (for 1791 chip) Diagnostic Program. '
 3978 1A32  28 56 31 2E 		DB	'(V1.01 by John Monahan 2009)',CR,LF,0
 3979                   	    endif
 3980                   
 3981 1A51  50 6C 65 61 GETDRV_MSG:	DB	'Please select a drive. (A,B,C or D): ',0
 3982                   	
 3983 1A77  0D 0A 53 6F XXXDRV:		DB	CR,LF,	'Sorry that is an invalid drive',0
 3984 1A98  0D 0A 49 73 GETSIZE_MSG:	DB	CR,LF,	'Is this a 5" or 8" Drive (5,8): ',0	
 3985 1ABB  0D 0A 0A 50 DISK_8_FORMATS:	DB	CR,LF,LF,'Possible 8" disk formats:-'
 3986 1AD8  0D 0A 41 20 		DB	CR,LF,	'A = 128 Bytes/Sec, 26 Sec/Ttk. 8" SDSS. (IBM 3740 Format)'  
 3987 1B13  0D 0A 42 20 		DB	CR,LF,	'B = 128 Bytes/Sec, 50 Sec/Ttk. 8" DDSS. (SD Systems 8" DD Format)'  
 3988 1B56  0D 0A 43 20 		DB	CR,LF,	'C = 256 Bytes/Sec, 26 Sec/Ttk. 8" DDDS. (IBM System 34 Format)'  
 3989 1B96  0D 0A 44 20 		DB	CR,LF,	'D = 512 Bytes/Sec, 15 Sec/Trk. 8" DDDS. '
 3990 1BC0  0D 0A 45 20 		DB	CR,LF,	'E = 1024 Bytes/Sec, 9 Sec/Trk. 8" DDSS. (For CPM3 System)'
 3991 1BFB  0D 0A 46 20 		DB	CR,LF,	'F = 1024 Bytes/Sec, 9 Sec/Trk. 8" DDDS.'
 3992 1C24  0D 0A 50 6C 		DB	CR,LF,	'Please select a disk format: ',0
 3993 1C44  0D 0A 0A 50 DISK_5_FORMATS:	DB	CR,LF,LF,'Possible 5" disk formats:-'
 3994 1C61  0D 0A 41 20 		DB	CR,LF,	'A = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (CPM3 & IBM PC CPM-86 Format)'
 3995 1CA7  0D 0A 42 20 		DB	CR,LF,	'B = 128 Bytes/Sec, 18 Sec/Ttk. 5" SDSS. (SD Systems 5" SD Format)'  
 3996 1CEA  0D 0A 43 20 		DB	CR,LF,	'C = 128 Bytes/Sec, 29 Sec/Ttk. 5" DDSS. (SD Systems 5" DD Format)'  
 3997 1D2D  0D 0A 44 20 		DB	CR,LF,	'D = 512 Bytes/Sec, 9 Sec/Ttk. 5" DDDS. (DEC VT180 Format)'
 3998 1D68  0D 0A 45 20 		DB	CR,LF,	'E = 256 Bytes/Sec, 16 Sec/Ttk. 5" DDDS. (TOSHIBA T-100 Format)'
 3999 1DA8  0D 0A 46 20 		DB	CR,LF,	'F = 128 Bytes/Sec, 18 Sec/Ttk. 5" SDDS. (CROMEMCO-SD CDOS Format)'
 4000 1DEB  0D 0A 47 20 		DB	CR,LF,	'G = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDDS. (CROMEMCO-DD CDOS Format)'
 4001 1E2E  0D 0A 48 20 		DB	CR,LF,	'H = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDDS. (EPSON QX-10 Format)'
 4002 1E6C  0D 0A 49 20 		DB	CR,LF,	'I = 1024 Bytes/Sec, 5 Sec/Ttk. 5" DDDS. (MORROW MD3 Format)'
 4003 1EA9  0D 0A 4A 20 		DB	CR,LF,	'J = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (ZENITH Z-100 Format)'
 4004 1EE7  0D 0A 4B 20 		DB	CR,LF,	'K = 256 Bytes/Sec, 16 Sec/Ttk. 5" DDDS. (SUPERBRAIN QD Format)'
 4005 1F27  0D 0A 4C 20 		DB	CR,LF,	'L = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (IBM PC, MSDOS 1.1 Format)'
 4006 1F6A  0D 0A 4D 20 		DB	CR,LF,	'M = 512 Bytes/Sec, 9 Sec/Ttk. 5" DDDS. (IBM PC, MSDOS 2.x Format)'
 4007 1FAD  0D 0A 4E 20 		DB	CR,LF,	'N = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDSS. (TRS-80 MOD III Format)'
 4008 1FEE  0D 0A 50 6C 		DB	CR,LF,	'Please select a disk format: ',0
 4009 200E  0D 0A 53 6F OPTION_ERROR:	DB	CR,LF,	'Sorry invalid option',0
 4010 2025  0D 0A 53 65 SEC_COUNT_ERR	DB	CR,LF,	'Sector count error',0
 4011 203A  0D 0A 49 6E RAM_ERROR	DB	CR,LF,	'Invalid RAM location error',0
 4012                   
 4013 2057  0D 0A 0A 56 MAIN_MENU0:	DB	CR,LF,LF,'VERSAFLOPPY II DIAGNOSTICS ---- MAIN MENU ---- (Detail Display OFF)',0
 4014 209E  0D 0A 0A 56 MAIN_MENU1:	DB	CR,LF,LF,'VERSAFLOPPY II DIAGNOSTICS ---- MAIN MENU ---- (Detail Display ON)',0
 4015 20E4  0D 0A 43 75 DISK_INFO	DB	CR,LF,'Current drive:- ',0
 4016 20F7  0D 0A 44 72 DISK_INFO0:	DB	CR,LF,'Drive ',0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  70
VF      Z80

 4017 2100  3A 20 28 49 DISK_INFO1:	DB		': (IOBYTE)=',0
 4018 210C  20 20 53 69 DISK_INFO2:	DB		'  Size=',0
 4019 2114  22 2C 20 44 DISK_INFO3:	DB		'", Double Sided,  ',0
 4020 2127  22 2C 20 53 DISK_INFO4:	DB		'", Single Sided,  ',0
 4021 213A  44 6F 75 62 DISK_INFO5:	DB		'Double Density disk.',0
 4022 214F  53 69 6E 67 DISK_INFO6:	DB		'Single Density disk.',0
 4023                   
 4024 2164  0D 0A 43 75 DISK_INFO7:	DB	CR,LF,	'Current Disk [IX] Table: Sec/Track=',0
 4025 218A  48 2C 20 54 DISK_INFO8:	DB		'H, Tracks/Side=',0
 4026 219A  48 2C 20 53 DISK_INFO9:	DB		'H, Sec Size=',0
 4027 21A7  48 2C 20 20 DISK_INFO10:	DB		'H,  128 Bytes/Sec.',0
 4028 21BA  48 2C 20 20 DISK_INFO11:	DB		'H,  256 Bytes/Sec.',0
 4029 21CD  48 2C 20 20 DISK_INFO12:	DB		'H,  512 Bytes/Sec.',0
 4030 21E0  48 2C 20 31 DISK_INFO13:	DB		'H, 1024 Bytes/Sec.',0
 4031 21F3  54 72 61 63 IDMSG0:		DB		'Track/Side/Sec/Size/(CRC) TRACK ID field= ',0
 4032                   
 4033 221E  0D 0A 0A 30 MENU_OPTIONS	DB	CR,LF,LF, '0 = Select a DRIVE/DISK to analyze'
 4034 2243  0D 0A 31 20 		DB	CR,LF,	'1 = Seek Test                    2 = Sequental Read Sector Test'
 4035 2284  0D 0A 33 20 		DB	CR,LF,	'3 = Sequental Write Sector Test  4 = Sequental R/W Sector Test'
 4036 22C4  0D 0A 35 20 		DB	CR,LF,	'5 = Random Track/Sector R/W Test 6 = Continously Read sectors from a Track'
 4037 2310  0D 0A 37 20 		DB	CR,LF,	'7 = Examine one complet track    8 = Load disk sctors to RAM'
 4038 234E  0D 0A 39 20 		DB	CR,LF,	'9 = Write RAM to disk sectors    C = Copy current disk to another disk'
 4039 2396  0D 0A 46 20 		DB	CR,LF,	'F = Format the current disk      S = Copy CPM system tracks from ' 
 4040 23D9  61 6E 6F 74 		DB		'another disk.'
 4041 23E6  0D 0A 56 20 		DB	CR,LF,	'V = Verify sectors disk to disk  I = Quick Format of 8" CPM SSSD Disk in B:',0
 4042                   
 4043 2434  0D 0A 44 20 MENU1_MSG:	DB	CR,LF,	'D = Turn ON detailed display.    ESC To return to CPM'
 4044 246B  0D 0A 50 6C 		DB	CR,LF,	'Please enter a command:- ',0
 4045                   
 4046 2487  0D 0A 44 20 MENU2_MSG:	DB	CR,LF,	'D = Turn OFF detailed display.   ESC To return to CPM'
 4047 24BE  0D 0A 50 6C 		DB	CR,LF,	'Please enter a command:- ',0
 4048                   
 4049 24DA  0D 0A 44 69 SEKMSG		DB	CR,LF,  'Disk seek test.',CR,LF,0
 4050 24EE  20 54 52 41 ATTRK:		DB		' TRACK ',0
 4051 24F6  48 2C 20 53 ATSEC:		DB		'H, SECTOR ',0
 4052 2501  48 2C 20 53 HEAD0_MSG	DB		'H, SIDE A',0
 4053 250B  48 2C 20 53 HEAD1_MSG	DB		'H, SIDE B',0
 4054 2515  48 2E 20 00 H_MSG		DB		'H. ',0
 4055 2519  20 53 49 44 ATHEAD0		DB		' SIDE A ',0 
 4056 2522  20 53 49 44 ATHEAD1		DB		' SIDE B ',0 
 4057 252B  0D 0A 53 65 SEC_MSG:	DB	CR,LF,	'Sector Contents=',0
 4058 253E  0D 0A 46 6F FORMATTING_MSG:	DB	CR,LF,	'Formating Disk.  Format= ',0
 4059 255A  0D 0A 07 49 BADCMD		DB	CR,LF,BELL, 'Invalid command selected.',0
 4060 2577  0D 0A 07 44 FORM_ERRMSG:	DB	CR,LF,BELL,'Disk formatting aborted or write error.',0
 4061 25A2  0D 0A 44 69 END_FORM_MSG:	DB	CR,LF,	'Disk has been formatted correctly. Each track is ',0
 4062 25D6  48 20 42 79 END_FORM1_MSG	DB	        'H Bytes long.',0
 4063 25E4  0D 0A 53 6F CODE_NOT_DONE:	DB	CR,LF,	'Sorry Code not done yet. HALT',0
 4064 2604  0D 0A 46 6F FORM_TRK:	DB	CR,LF,	'Formatting TRACK ',0
 4065 2618  54 72 61 63 TRACK_MSG:	DB		'Track Image:- '
 4066 2626  0D 0A 49 6E 		DB	CR,LF,	'Index field up to First sector=',CR,LF,0
 4067 264A  0D 0A 53 65 SECTOR_MSG:	DB	CR,LF,	'Sector ID Field=',CR,LF,0
 4068 265F  0D 0A 53 65 SEC_DATA_MSG:	DB	CR,LF,	'Sector DATA Field=',CR,LF,0
 4069 2676  0D 0A 53 65 SEC_GAP3_MSG:	DB	CR,LF,	'Sector GAP3 Field=',CR,LF,0
 4070 268D  0D 0A 45 6E SEC_GAP4_MSG:	DB	CR,LF,	'End of Track GAP4 Field=',CR,LF,0
 4071 26AA  0D 0A 50 6C GET_TRACK_MSG:	DB	CR,LF,	'Please enter track number. (Enter 2 HEX digits): ',0
 4072 26DE  0D 0A 50 6C GET_SIDE_MSG:	DB	CR,LF,	'Please select Disk SIDE A or B (A,B): ',0
 4073 2707  0D 0A 07 49 SIDE_ERROR:	DB	CR,LF,BELL, 'Invalid SIDE selection',0
 4074 2721  0D 0A 50 6C GET_SEC_MSG:	DB	CR,LF,	'Please enter sector number. (Enter 2 HEX digits): ',0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  71
VF      Z80

 4075 2756  0D 0A 54 72 TRACK_CONTENTS:	DB	CR,LF,	'Track contents:-',CR,LF,0
 4076 276B  0D 0A 44 6F MORE_MSG:	DB	CR,LF,	'Do you wish to see more (Y/N): ',0
 4077 278D  0D 0A 49 6E SEC_ERROR:	DB	CR,LF,	'Invalid sector number selection',0
 4078 27AF  0D 0A 47 41 GAP3_MSG:	DB	CR,LF,	'GAP3=',0
 4079 27B7  0D 0A 47 41 GAP1_MSG:	DB	CR,LF,	'GAP1=',0
 4080 27BF  0D 0A 53 65 ID_MSG:		DB	CR,LF,	'Sector ID Mark=',0
 4081 27D1  0D 0A 47 41 GAP2_MSG:	DB	CR,LF,	'GAP2=',0
 4082 27D9  0D 0A 44 61 SYNC_MSG:	DB	CR,LF,	'Data Sync=',0
 4083 27E6  0D 0A 53 74 STATUS_179x:	DB	CR,LF,	'Status Bits of 1791/5 Chip= ',0
 4084 2805  0D 0A 07 44 ENDMSG:		DB	CR,LF,BELL,'Disk has been formatted ',CR,LF,0
 4085 2823  0D 0A 07 53 ERRMSG:		DB	CR,LF,BELL,'SORRY COULD NOT SEEK NEXT TRACK',CR,LF,0
 4086 2848  0D 0A 07 54 TRACK_ERROR:	DB	CR,LF,BELL,'That track is out of range for this disk',0
 4087 2874  0D 0A 52 65 SEC_READ_RETRY:	DB	CR,LF,	'Re-reading SECTOR ',0
 4088 2889  0D 0A 52 65 SEC_WR_RETRY:	DB	CR,LF,	'Re-writing SECTOR ',0
 4089 289E  0D 0A 52 65 SEC_RH_RETRY	DB	CR,LF, 'Re-Seeking head for re-reading SECTOR ',0
 4090 28C7  0D 0A 52 65 SEC_WH_RETRY	DB	CR,LF, 'Re-Seeking head for re-writing SECTOR ',0
 4091 28F0  0D 0A 07 53 SEC_V_ERROR	DB	CR,LF,BELL,'Sector Verify Error found -----',0
 4092 2913  0D 0A 53 65 RDTST_MSG	DB	CR,LF,	'Sequental Read Sectors Test',0
 4093 2931  0D 0A 53 65 WRTST_MSG	DB	CR,LF,	'Sequental Write Sectors Test',0
 4094 2950  0D 0A 53 65 RDWRTST_MSG	DB	CR,LF,	'Sequental R/W Sectors Test',0
 4095 296D  0D 0A 52 61 RAND_TST_MSG	DB	CR,LF,	'Random Track/Sector R/W Sectors Test',0
 4096 2994  0D 0A 07 54 DISK_WP_MSG	DB	CR,LF,BELL, 'This disk is currently Write Protected.',0
 4097 29BF  0D 0A 53 70 INITCPM_MSG	DB	CR,LF,	'Special modification of first sector for CPM86 done.',0
 4098 29F6  0D 0A 07 53 TRK_SIZE_ERR	DB	CR,LF,BELL, 'Size of track (TRK_SIZE) in the disk paramater table is invalid',0
 4099 2A39  0D 0A 4E 75 SEC_COUNT_MSG	DB	CR,LF,	'Number of sectors (Enter 2 HEX digits): ',0
 4100 2A64  0D 0A 45 6E GET_DMA_MSG	DB	CR,LF,	'Enter RAM loaction to recieve the data (Enter 4 HEX digits): ',0
 4101 2AA4  0D 0A 45 6E GET_DMAD_MSG	DB	CR,LF,	'Enter RAM loaction of data to write (Enter 4 HEX digits): ',0
 4102 2AE1  0D 0A 4C 6F LOADING_MSG:	DB	CR,LF,	'Loading data ',0
 4103 2AF1  20 54 6F 20 LOADING1_MSG:	DB	' To RAM at ',0
 4104 2AFD  0D 0A 07 45 ERR_TK_MSG:	DB	CR,LF,BELL, 'ERROR. Ran out of tracks!',0
 4105 2B1A  0D 0A 44 61 LOAD_DONE_MSG:	DB	CR,LF,	'Data read correctly.',0
 4106 2B31  0D 0A 4C 6F TRK_DUMP_MSG	DB	CR,LF,	'Load a selected track from current disk into RAM',0
 4107 2B64  0D 0A 4C 6F LOAD_MSG	DB	CR,LF,	'Load sector(s) from disk to RAM',0
 4108 2B86  0D 0A 57 72 DUMP_MSG	DB	CR,LF,	'Write sector(s) to disk with data from RAM location.',0
 4109 2BBD  0D 0A 57 72 DUMPING_MSG:	DB	CR,LF,	'Writing data ',0
 4110 2BCD  20 46 72 6F DUMPING1_MSG:	DB	' From RAM at ',0
 4111 2BDB  0D 0A 44 61 DUMP_DONE_MSG:	DB	CR,LF,	'Data written correctly.',0
 4112 2BF5  0D 0A 07 46 TIMEOUT_ERR:	DB	CR,LF,BELL,'Forced a 1791/5 chip RESET because the status port was hung up busy!'
 4113 2C3C  0D 0A 43 68 		DB	CR,LF,	'Check hardware such as drive type, connections etc.',0
 4114 2C72  0D 0A 43 6F COPY_MSG:	DB	CR,LF,	'Copy current disk to another disk (Note: Disks MUST be same format).',0
 4115 2CB9  0D 0A 46 6F COPY2_MSG	DB	CR,LF,	'For the destination disk: ',0
 4116 2CD6  0D 0A 43 6F HOW_MANY_TRKS	DB	CR,LF,	'Copy just the System tracks or all tracks.  (S or A): ',0 
 4117 2D0F  0D 0A 07 49 INVALID_TRK_CT	DB	CR,LF,BELL, 'Invalid track option.',0
 4118 2D28  0D 0A 44 69 COPYING_DONE	DB	CR,LF,	'Disk Copying done.',0
 4119 2D3D  0D 0A 52 65 COPY_AT_TRK:	DB	CR,LF,	'Reading data from ',0
 4120 2D52  20 57 72 69 WRITE_AT_TRK:	DB	' Writing data to ',0
 4121                   
 4122 2D64  0D 0A 52 65 READ_AT_TRK:	DB	CR,LF,	'Reading ',0
 4123 2D6F  20 56 65 72 VERIFY_AT_TRK:	DB		' Verify ',0
 4124 2D78  0D 0A 44 69 VERIFY_DONE	DB	CR,LF,	'Disk verifying done',0
 4125 2D8E  0D 0A 53 65 VERIFY_MSG	DB	CR,LF,	'Sector by Sector verifying of two disks',0
 4126 2DB8  0D 0A 46 6F VERIFY2_MSG	DB	CR,LF,	'For the second disk: ',0
 4127 2DD0  29 00       CLOSE_BRACKET:	DB		')',0
 4128 2DD2  0D 0A 07 55 UNKNOWN_ERROR:	DB	CR,LF,BELL,'Unknown Error. Status Bits= (',0
 4129 2DF3  0D 0A 57 69 SYS_COPY_MSG:	DB	CR,LF,	'Will copy CPM system tracks FROM another disk and ' 
 4130 2E27  77 72 69 74 		DB		'write it TO the current disk',0
 4131 2E44  0D 0A 53 6F SYS_COPY_MSG1:	DB	CR,LF,	'Source disk for CPM system tracks:',0
 4132 2E69  0D 0A 43 6F COPY_SYS_TRK	DB	CR,LF,	'Copying CPM from ',0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  72
VF      Z80

 4133 2E7D  20 57 72 69 WRITE_SYS_TRK	DB		' Writing CPM to ',0
 4134 2E8E  0D 0A 43 50 DONE_SYS_MSG	DB	CR,LF,	'CPM System tracks copied OK.',0
 4135 2EAD  0D 0A 51 75 IBM_FORMAT	DB	CR,LF,	'Quick formatting of a blank SSSD 8" IBM disk in B: drive for CPM.',0
 4136 2EF1  0D 0A 46 6F IBM_FORMAT1	DB	CR,LF,	'Formatting in progress',CR,LF,0
 4137 2F0C  0D 0A 44 69 END_FORM_MSG1:	DB	CR,LF,	'Disk has been formatted as a SSSD 8" disk (IBM 3740 Format).',0
 4138 2F4B  0D 0A 0A 07 ERRORS_SEEN:	DB	CR,LF,LF,BELL, 'Errors encountered. Format not reliable',0
 4139 2F77  0D 0A 44 6F COPY_SYSTRKS	DB	CR,LF,	'Do you wish to copy CPM from the system tracks of drive A:'
 4140 2FB3  0D 0A 4E 6F 		DB	CR,LF,	'Note: It must be on an IBM 3740 formatted disk. (Y/N)',0
 4141 2FEB  0D 0A 43 6F COPYING_CPM	DB	CR,LF,	'Copying CPM from system tracks of Drive A:',0
 4142 3018  0D 0A 44 69 END_FORM_MSG2:	DB	CR,LF,	'Disk B: has been formatted and CPM system installed on it correctly.',0
 4143 305F  0D 41 74 20 FORM_TRK_MSG	DB	CR,	'At Track ',0
 4144 306A  0D 0A 0A 07 BAD_COPY_MSG	DB	CR,LF,LF,BELL, 'Errors encountered during disk copying. Copy may not be valid',0
 4145                   ;
 4146                   ;
 4147                   ;	
 4148 30AC  0D 0A 07 53 SEC_READ_ERROR: DB	CR,LF,BELL,'SEC READ Error.'
 4149 30BE  20 42 69 74 		DB	' Bits: DNR,0,Record Type,RNF,'
 4150 30DB  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4151                   
 4152 30EF  0D 0A 07 53 SEEKNV_ERROR:	DB	CR,LF,BELL,'SEEK (NV) Error.'
 4153 3102  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4154 311A  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4155                   
 4156 3130  0D 0A 07 52 RSCMD_ERROR:	DB	CR,LF,BELL,'RESTORE Error.'
 4157 3141  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4158 3159  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4159                   
 4160 316F  0D 0A 07 53 SEC_ID_ERROR:	DB	CR,LF,BELL,'SEC ID Error.'
 4161 317F  20 42 69 74 		DB	' Bits: DNR,0,0,RNF,'
 4162 3192  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4163                   
 4164 31A6  0D 0A 07 53 SKCMD_ERROR:	DB	CR,LF,BELL,'SEEK Error.'
 4165 31B4  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4166 31CC  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4167                   
 4168 31E2  0D 0A 07 53 STEPIN_ERROR:	DB	CR,LF,BELL,'STEP-IN Error.'
 4169 31F3  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4170 320B  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4171                   
 4172 3221  0D 0A 07 54 RDTCMD_ERROR:	DB	CR,LF,BELL,'TRACK Read Error.'
 4173 3235  20 42 69 74 		DB	' Bits: DNR,0,0,0,'
 4174 3246  30 2C 44 41 		DB	'0,DATA,DRQ,Busy (',0
 4175                   
 4176 3258  0D 0A 07 54 WRTCMD_ERROR:	DB	CR,LF,BELL,'TRACK Write Error.'
 4177 326D  20 42 69 74 		DB	' Bits: DNR,WP,WF,0,'
 4178 3280  30 2C 44 41 		DB	'0,DATA,DRQ,Busy (',0
 4179                   
 4180 3292  0D 0A 07 53 WRCMD_ERROR:	DB	CR,LF,BELL,'SEC WRITE Error.'
 4181 32A5  20 42 69 74 		DB	' Bits: DNR,WP,WF,0,'
 4182 32B8  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4183                   ;
 4184                   ;
 4185                   ;---------------------------------------------------------------------------------------------------
 4186                   ;
 4187                   ;	LOOKUP TABLES OF DISK PARAMETERS
 4188                   ;
 4189                   ;	8" SINGLE DENSITY DRIVE VARIABLES (IBM 3740 Format)
 4190 32CC  1A          STDSDT:	DB	26		;SECTORS PER TRACK
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  73
VF      Z80

 4191 32CD  4D          	DB	77		;TRACKS PER SIDE
 4192 32CE  00          	DB	00000000B	;Disk HW_BYTE (SDSS)
 4193 32CF  28          	DB	40		;HEADER GAP (SD-Systems has 100-27, IBM is 40!)
 4194 32D0  06          	DB	6		;GAP 1 (0's)
 4195 32D1  0B          	DB	11		;GAP 2 (FF's)
 4196 32D2  1B          	DB	27		;GAP 3 (FF's)
 4197 32D3  F7          	DB	247		;GAP 4 (FF's)
 4198 32D4  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4199 32D5  00          	DB	0		;128 Bytes/sec
 4200 32D6  FF          	DB	0FFH		;GAP Format fill character
 4201 32D7  E5          	DB	0E5H		;Data area fill character
 4202 32D8  1423        	DW	1423H		;Size in bytes of 1 formatted track
 4203 32DA  00          	DB     	0H     	       	;No special post format
 4204 32DB  3303        	DW	SKEW_IBM	;Location of this disks sector skew table
 4205 32DD  01          	DB	1H		;Each format will have a unique number. For disk to disk copy
 4206 32DE  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4207 32DF  38 22 20 53 	DB	'8" SINGLE DENSITY (IBM 3740 Format)',0
 4208 3303              SKEW_IBM:
 4209 3303  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4210 3312  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH
 4211                   
 4212                   
 4213                   ;	8" DOUBLE DENSITY (128 BYTE SECTORS)
 4214 331D  32          STDDDT:	DB	50		;SECTORS PER TRACK
 4215 331E  4D          	DB	77		;TRACKS PER SIDE
 4216 331F  40          	DB	01000000B	;Disk HW_BYTE  (DDSS)
 4217 3320  50          	DB	80		;HEADER GAP (SD-Systems has 100-16, IBM is 80!)
 4218 3321  08          	DB	8		;GAP 1 (4E's) 
 4219 3322  16          	DB	22		;GAP 2 (4E's)
 4220 3323  10          	DB	16		;GAP 3 (4E's)
 4221 3324  C7          	DB	199		;GAP 4 (4E's) (X3 = 597)
 4222 3325  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4223 3326  00          	DB	0		;128 Bytes/sec
 4224 3327  4E          	DB	4EH		;GAP Format fill character
 4225 3328  E5          	DB	0E5H		;Data area fill character
 4226 3329  29A0        	DW	29A0H		;Size in bytes of 1 formatted track
 4227 332B  00          	DB	0H		;No special post formating modifications of disk req
 4228 332C  3356        	DW	SKEW_SDT	;Location of this disks sector skew table
 4229 332E  02          	DB	2H		;Each format will have a unique number. For disk to disk copy
 4230 332F  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4231 3330  38 22 20 44 	DB	'8" DOUBLE DENSITY (SD_Systems Format)',0
 4232 3356              SKEW_SDT:
 4233 3356  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4234 3365  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH,1BH,1CH,1DH,1EH,1FH
 4235 3375  20 21 22 23 	db	20H,21H,22H,23H,24H,25H,26H,27H,28H,29H,2AH,2BH,2CH,2DH,2EH,2FH
 4236 3385  30 31 32    	db	30H,31H,32H
 4237                   
 4238                   ;
 4239                   ;	8" DOUBLE DENSITY (256 BYTE SECTORS) (IBM System 34 Format)
 4240 3388  1A          DDT256:	DB	26		;NBR SECTORS PER TRACK
 4241 3389  4D          	DB	77		;NBR TRACKS PER SIDE
 4242 338A  50          	DB	01010000B	;Disk HW_BYTE (DDDS)
 4243 338B  50          	DB	80		;HEADER GAP (SD-Systems has 100-54, IBM is 80!)
 4244 338C  0C          	DB	12		;GAP 1
 4245 338D  16          	DB	22		;GAP 2
 4246 338E  36          	DB	54		;GAP 3
 4247 338F  C7          	DB	199		;GAP 4 (4E's) (X3 = 597)
 4248 3390  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  74
VF      Z80

 4249 3391  01          	DB	1		;256 Bytes/sec
 4250 3392  4E          	DB	4EH		;GAP Format fill character
 4251 3393  E5          	DB	0E5H		;Data area fill character
 4252 3394  28EC        	DW	28ECH		;Size in bytes of 1 formatted track
 4253 3396  00          	DB	0H		;No special post formating modifications of disk req
 4254 3397  33CB        	DW	SKEW_256	;Location of this disks sector skew table
 4255 3399  03          	DB	3H		;Each format will have a unique number. For disk to disk copy
 4256 339A  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4257 339B  38 22 20 44 	DB	'8" DD (256 BYTE SECTORS) (IBM System 34 Format)',0
 4258 33CB              SKEW_256:
 4259 33CB  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4260 33DA  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH
 4261                   
 4262                   ;
 4263                   ;	8" DOUBLE DENSITY (512 BYTE SECTORS) 
 4264 33E5  0F          DDT512:	DB	15		;NBR SECTORS PER TRACK
 4265 33E6  4D          	DB	77		;NBR TRACKS PER SIDE
 4266 33E7  50          	DB	01010000B	;Disk HW_BYTE (DDDS)
 4267 33E8  50          	DB	80		;HEADER GAP (SD-Systems has 100-54, IBM is 80!)
 4268 33E9  0C          	DB	12		;GAP 1
 4269 33EA  16          	DB	22		;GAP 2
 4270 33EB  54          	DB	84		;GAP 3
 4271 33EC  C8          	DB	200		;GAP 4 (4E's) (X3 = 597)
 4272 33ED  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4273 33EE  02          	DB	2		;512 Bytes/sec
 4274 33EF  4E          	DB	4EH		;GAP Format fill character
 4275 33F0  E5          	DB	0E5H		;Data area fill character
 4276 33F1  0000        	DW	0H		;Size in bytes of 1 formatted track
 4277 33F3  00          	DB	0H		;No special post formating modifications of disk req
 4278 33F4  3413        	DW	SKEW_512	;Location of this disks sector skew table
 4279 33F6  04          	DB	4H		;Each format will have a unique number. For disk to disk copy
 4280 33F7  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4281 33F8  38 22 20 44 	DB	'8" DDDS (512 BYTE SECTORS)',0
 4282 3413              SKEW_512:
 4283 3413  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4284                   
 4285                   
 4286                   ;
 4287                   ;	8" DOUBLE DENSITY (1024 BYTE SECTORS - Single Sided) 
 4288 3422  09          DDT1K:	DB	9		;NBR SECTORS PER TRACK
 4289 3423  4D          	DB	77		;NBR TRACKS PER SIDE
 4290 3424  40          	DB	01000000B	;Disk HW_BYTE (DDDS) ;
 4291 3425  50          	DB	80		;INDEX HEADER GAP
 4292 3426  0C          	DB	12		;NBR GAP 1
 4293 3427  16          	DB	22		;NBR GAP 2
 4294 3428  36          	DB	54		;NBR GAP 3
 4295 3429  C7          	DB	199		;GAP 4 
 4296 342A  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4297 342B  03          	DB	3		;1024 Bytes/sec
 4298 342C  4E          	DB	4EH		;GAP Format fill character
 4299 342D  E5          	DB	0E5H		;Data area fill character
 4300 342E  2B5A        	DW	2B5AH		;Size in bytes of 1 formatted track
 4301 3430  00          	DB	0H		;No special post formating modifications of disk req
 4302 3431  3469        	DW	SKEW_1K		;Location of this disks sector skew table
 4303 3433  05          	DB	5H		;Each format will have a unique number. For disk to disk copy
 4304 3434  01          	DB	1		;Tracks set aside for operating system (eg CPM 2)
 4305 3435  38 22 20 44 	DB	'8" DOUBLE DENSITY, SINGLE SIDED (1024 BYTE SECTORS)',0 
 4306 3469              SKEW_1K:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  75
VF      Z80

 4307 3469  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4308                   ;
 4309                   ;	8" DOUBLE DENSITY (1024 BYTE SECTORS - Double Sided)
 4310 3472  09          DDT1K2:	DB	9		;NBR SECTORS PER TRACK
 4311 3473  4D          	DB	77		;NBR TRACKS PER SIDE
 4312 3474  50          	DB	01010000B	;Disk HW_BYTE (DDDS) ;
 4313 3475  50          	DB	80		;INDEX HEADER GAP
 4314 3476  0C          	DB	12		;NBR GAP 1
 4315 3477  16          	DB	22		;NBR GAP 2
 4316 3478  36          	DB	54		;NBR GAP 3
 4317 3479  C7          	DB	199		;GAP 4 
 4318 347A  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4319 347B  03          	DB	3		;1024 Bytes/sec
 4320 347C  4E          	DB	4EH		;GAP Format fill character
 4321 347D  E5          	DB	0E5H		;Data area fill character
 4322 347E  2B5A        	DW	2B5AH		;Size in bytes of 1 formatted track
 4323 3480  00          	DB	0H		;No special post formating modifications of disk req
 4324 3481  34B9        	DW	SKEW_1KDS	;Location of this disks sector skew table
 4325 3483  06          	DB	6H		;Each format will have a unique number. For disk to disk copy
 4326 3484  01          	DB	1		;Tracks set aside for operating system (eg CPM 2)
 4327 3485  38 22 20 44 	DB	'8" DOUBLE DENSITY, DOUBLE SIDED (1024 BYTE SECTORS)',0 
 4328 34B9              SKEW_1KDS:
 4329 34B9  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4330                   
 4331                   ;
 4332                   ;	
 4333                   ; 5", 128 byte, SD SD-Systems Format
 4334 34C2  12          MINSDT: DB	18		;sectors per track
 4335 34C3  23          	DB	35		;tracks per side
 4336 34C4  20          	DB	00100000B	;Disk HW_BYTE (SDSS)
 4337 34C5  0C          	DB	20-8		;index header gap
 4338 34C6  06          	DB	6		;GAP 1
 4339 34C7  0B          	DB	11		;GAP 2
 4340 34C8  08          	DB	8		;GAP 3
 4341 34C9  DD          	DB	221		;GAP 4 (FF's)
 4342 34CA  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4343 34CB  00          	DB	0		;128 Bytes/sec
 4344 34CC  FF          	DB	0FFH		;GAP Format fill character
 4345 34CD  E5          	DB	0E5H		;Data area fill character
 4346 34CE  0CC7        	DW	0CC7H		;Size in bytes of 1 formatted track
 4347 34D0  00          	DB	0H		;No special post formating modifications of disk req
 4348 34D1  34FB        	DW	SKEW_MINSD	;Location of this disks sector skew table
 4349 34D3  07          	DB	7H		;Each format will have a unique number. For disk to disk copy
 4350 34D4  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4351 34D5  35 22 2C 20 	DB	'5", SDSS, 128 byte, SD-Systems Format',0
 4352 34FB              SKEW_MINSD:
 4353 34FB  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH,10H,11H
 4354                   
 4355                   ;
 4356                   ; 5", 128 byte, DD SD-Systems Format
 4357 350C  1D          MINDDT: DB	29		;sectors per track
 4358 350D  23          	DB	35		;tracks per side
 4359 350E  60          	DB	01100000B	;Disk HW_BYTE (DDSS)
 4360 350F  54          	DB	100-16		;index header gap
 4361 3510  08          	DB	8		;GAP 1
 4362 3511  16          	DB	22		;GAP 2
 4363 3512  10          	DB	16		;GAP 3
 4364 3513  F7          	DB	247		;GAP 4
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  76
VF      Z80

 4365 3514  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4366 3515  00          	DB	0		;128 Bytes/sec
 4367 3516  4E          	DB	4EH		;GAP Format fill character
 4368 3517  E5          	DB	0E5H		;Data area fill character
 4369 3518  17C0        	DW	17C0H		;Size in bytes of 1 formatted track
 4370 351A  00          	DB	0H		;No special post formating modifications of disk req
 4371 351B  3545        	DW	SKEW_MINDD	;Location of this disks sector skew table
 4372 351D  08          	DB	8H		;Each format will have a unique number. For disk to disk copy
 4373 351E  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4374 351F  35 22 2C 20 	DB	'5", DDSS. 128 byte, SD-Systems Format',0
 4375 3545              SKEW_MINDD:
 4376 3545  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4377 3554  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH,1BH,1CH
 4378                   
 4379                   ;
 4380                   ; 5", 512 byte, DDDS, 8 sector IBM PC CPM-86 format
 4381 3561  08          MINCPM: DB	8		;sectors per track
 4382 3562  28          	DB	40		;tracks per side
 4383 3563  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4384 3564  50          	DB	80		;index header gap
 4385 3565  0C          	DB	12		;GAP 1
 4386 3566  16          	DB	22		;GAP 2
 4387 3567  50          	DB	80		;GAP 3
 4388 3568  CF          	DB	207		;GAP 4 (4E's) (1038)
 4389 3569  05          	DB	5		;GAPR (Flag for multiple repeats of GAP4)
 4390 356A  02          	DB	2		;512 Bytes/sec
 4391 356B  4E          	DB	04EH		;GAP Format fill character
 4392 356C  E5          	DB	0E5H		;Data area fill character (for CPM86)
 4393 356D  19C0        	DW	19C0H		;Size in bytes of 1 formatted track
 4394 356F  01          	DB	CPM86_FLAG	;Special post formating modifications of disk req
 4395 3570  35A6        	DW	SKEW_CPM86	;Location of this disks sector skew table
 4396 3572  09          	DB	9H		;Each format will have a unique number. For disk to disk copy
 4397 3573  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4398 3574  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector IBM PC CPM-86 format',0
 4399 35A6              SKEW_CPM86:
 4400 35A6  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4401                   ;
 4402                   ;
 4403                   ; 5", 512 byte, DDDS, 9 sector DEC VT180 format
 4404 35AE  09          DEC:	DB	9		;sectors per track
 4405 35AF  28          	DB	40		;tracks per side
 4406 35B0  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4407 35B1  50          	DB	80		;index header gap
 4408 35B2  0C          	DB	12		;GAP 1
 4409 35B3  16          	DB	22		;GAP 2
 4410 35B4  1A          	DB	26		;GAP 3
 4411 35B5  DA          	DB	218		;GAP 4 (4E's) (872)
 4412 35B6  04          	DB	4		;GAPR (Flag for multiple repeats of GAP4)
 4413 35B7  02          	DB	2		;512 Bytes/sec
 4414 35B8  4E          	DB	04EH		;GAP Format fill character
 4415 35B9  E5          	DB	0E5H		;Data area fill character (for CPM)
 4416 35BA  1971        	DW	1971H		;Size in bytes of 1 formatted track
 4417 35BC  00          	DB	0		;No special post formating modifications of disk req
 4418 35BD  35EF        	DW	SKEW_DEC	;Location of this disks sector skew table
 4419 35BF  0A          	DB	0AH		;Each format will have a unique number. For disk to disk copy
 4420 35C0  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4421 35C1  35 22 2C 20 	DB	'5", DDDS, 512 byte, 9 sector DEC VT180 format',0
 4422 35EF              SKEW_DEC:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  77
VF      Z80

 4423 35EF  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4424                   ;
 4425                   ;
 4426                   ; 5", 256 byte, DDDS, 16 sector TOSHIBA T-100 format
 4427 35F8  10          TOSHIBA: DB	16		;sectors per track
 4428 35F9  23          	DB	35		;tracks per side
 4429 35FA  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4430 35FB  50          	DB	80		;index header gap
 4431 35FC  0C          	DB	12		;GAP 1
 4432 35FD  16          	DB	22		;GAP 2
 4433 35FE  32          	DB	50		;GAP 3
 4434 35FF  B7          	DB	183		;GAP 4 (4E's) (366)
 4435 3600  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4436 3601  01          	DB	1		;256 Bytes/sec
 4437 3602  4E          	DB	04EH		;GAP Format fill character
 4438 3603  E5          	DB	0E5H		;Data area fill character (for CPM)
 4439 3604  1928        	DW	1928H		;Size in bytes of 1 formatted track
 4440 3606  00          	DB	0		;No special post formating modifications of disk req
 4441 3607  363E        	DW	SKEW_TOSH	;Location of this disks sector skew table
 4442 3609  0B          	DB	0BH		;Each format will have a unique number. For disk to disk copy
 4443 360A  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4444 360B  35 22 2C 20 	DB	'5", DDDS, 256 byte, 16 sector TOSHIBA T-100 format',0
 4445 363E              SKEW_TOSH:
 4446 363E  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4447                   ;
 4448                   ;
 4449                   ; 5", 128 byte, CROMEMCO CDOS (SINGLE density) Format
 4450 364D  12          CDOS:	DB	18		;sectors per track
 4451 364E  28          	DB	40		;tracks per side
 4452 364F  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4453 3650  0C          	DB	20-8		;index header gap
 4454 3651  06          	DB	6		;GAP 1
 4455 3652  0B          	DB	11		;GAP 2
 4456 3653  08          	DB	8		;GAP 3
 4457 3654  B9          	DB	185		;GAP 4 (FF's)
 4458 3655  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4459 3656  00          	DB	0		;128 Bytes/sec
 4460 3657  FF          	DB	0FFH		;GAP Format fill character
 4461 3658  E5          	DB	0E5H		;Data area fill character
 4462 3659  0CA3        	DW	0CA3H		;Size in bytes of 1 formatted track
 4463 365B  00          	DB	0H		;No special post formating modifications of disk req
 4464 365C  3689        	DW	SKEW_CDOS	;Location of this disks sector skew table
 4465 365E  0C          	DB	0CH		;Each format will have a unique number. For disk to disk copy
 4466 365F  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4467 3660  35 22 2C 20 	DB	'5", SDDS, 128 byte, CROMEMCO CDOS Format',0
 4468 3689              SKEW_CDOS:
 4469 3689  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH,10H,11H
 4470                   ;
 4471                   ; 5", 512 byte, CROMEMCO CDOS w/INTL TERM. CP/M Format
 4472 369A  0A          CDOSDD:	DB	10		;sectors per track
 4473 369B  28          	DB	40		;tracks per side
 4474 369C  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4475 369D  50          	DB	80		;index header gap
 4476 369E  0C          	DB	12		;GAP 1
 4477 369F  16          	DB	22		;GAP 2
 4478 36A0  1E          	DB	30		;GAP 3
 4479 36A1  D6          	DB	214		;GAP 4 (FF's)
 4480 36A2  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  78
VF      Z80

 4481 36A3  02          	DB	2		;512 Bytes/sec
 4482 36A4  FF          	DB	0FFH		;GAP Format fill character
 4483 36A5  E5          	DB	0E5H		;Data area fill character
 4484 36A6  188E        	DW	188EH		;Size in bytes of 1 formatted track
 4485 36A8  00          	DB	0H		;No special post formating modifications of disk req
 4486 36A9  36DA        	DW	SKEW_CDOS2	;Location of this disks sector skew table
 4487 36AB  0D          	DB	0DH		;Each format will have a unique number. For disk to disk copy
 4488 36AC  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4489 36AD  35 22 2C 20 	DB	'5", DDDS, 512 byte, CROMEMCO CDOS/CPM Format',0
 4490 36DA              SKEW_CDOS2:
 4491 36DA  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4492                   
 4493                   ; 5", 512 byte, EPSON QX-10 Format
 4494 36E4  0A          EPSON:	DB	10		;sectors per track
 4495 36E5  28          	DB	40		;tracks per side
 4496 36E6  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4497 36E7  50          	DB	80		;index header gap
 4498 36E8  0C          	DB	12		;GAP 1
 4499 36E9  16          	DB	22		;GAP 2
 4500 36EA  1E          	DB	30		;GAP 3
 4501 36EB  D6          	DB	214		;GAP 4 (FF's)
 4502 36EC  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4503 36ED  02          	DB	2		;512 Bytes/sec
 4504 36EE  FF          	DB	0FFH		;GAP Format fill character
 4505 36EF  E5          	DB	0E5H		;Data area fill character
 4506 36F0  188E        	DW	188EH		;Size in bytes of 1 formatted track
 4507 36F2  00          	DB	0H		;No special post formating modifications of disk req
 4508 36F3  371E        	DW	SKEW_EPSON	;Location of this disks sector skew table
 4509 36F5  0E          	DB	0EH		;Each format will have a unique number. For disk to disk copy
 4510 36F6  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4511 36F7  35 22 2C 20 	DB	'5", DDDS, 512 byte, EPSON QX-10 Format',0
 4512 371E              SKEW_EPSON:
 4513 371E  01 03 05 07 	DB	1H,3H,5H,7H,9H,2H,4H,6H,8H,0AH		;<-- note skew table
 4514                   ;
 4515                   ;
 4516                   ; 5", 1K byte, DDDS, 5 sector MORROW MD3 format
 4517 3728  05          MORROW: DB	5		;sectors per track
 4518 3729  28          	DB	40		;tracks per side
 4519 372A  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4520 372B  50          	DB	80		;index header gap
 4521 372C  0C          	DB	12		;GAP 1
 4522 372D  16          	DB	22		;GAP 2
 4523 372E  32          	DB	50		;GAP 3
 4524 372F  C0          	DB	192		;GAP 4 (4E's) (574)
 4525 3730  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4526 3731  03          	DB	3		;1024 Bytes/sec
 4527 3732  4E          	DB	04EH		;GAP Format fill character
 4528 3733  E5          	DB	0E5H		;Data area fill character (for CPM)
 4529 3734  1977        	DW	1977H		;Size in bytes of 1 formatted track
 4530 3736  00          	DB	0		;No special post formating modifications of disk req
 4531 3737  376B        	DW	SKEW_MORROW	;Location of this disks sector skew table
 4532 3739  0F          	DB	0FH		;Each format will have a unique number. For disk to disk copy
 4533 373A  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4534 373B  35 22 2C 20 	DB	'5", DDDS, 1024 byte, 9 sector MORROW MD3 format',0
 4535 376B              SKEW_MORROW:
 4536 376B  01 02 03 04 	DB	1H,2H,3H,4H,5H
 4537                   ;
 4538                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  79
VF      Z80

 4539                   ; 5", 512 byte, DDDS, 5 sector ZENITH Z-100 format
 4540 3770  08          ZENITH: DB	8		;sectors per track
 4541 3771  28          	DB	40		;tracks per side
 4542 3772  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4543 3773  50          	DB	80		;index header gap
 4544 3774  0C          	DB	12		;GAP 1
 4545 3775  16          	DB	22		;GAP 2
 4546 3776  1A          	DB	26		;GAP 3
 4547 3777  F2          	DB	242		;GAP 4 (4E's) (1454)
 4548 3778  06          	DB	6		;GAPR (Flag for multiple repeats of GAP4)
 4549 3779  02          	DB	2		;512 Bytes/sec
 4550 377A  4E          	DB	04EH		;GAP Format fill character
 4551 377B  E5          	DB	0E5H		;Data area fill character (for CPM)
 4552 377C  1933        	DW	1933H		;Size in bytes of 1 formatted track
 4553 377E  00          	DB	0		;No special post formating modifications of disk req
 4554 377F  37B4        	DW	SKEW_ZENITH	;Location of this disks sector skew table
 4555 3781  10          	DB	10H		;Each format will have a unique number. For disk to disk copy
 4556 3782  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4557 3783  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector ZENITH Z-100 format',0
 4558 37B4              SKEW_ZENITH:
 4559 37B4  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4560                   ;
 4561                   ;
 4562                   ; 5", 512 byte, DDDS, 10 sector SUPERBRAIN QD format
 4563 37BC  0A          SUPER: DB	10		;sectors per track
 4564 37BD  23          	DB	35		;tracks per side
 4565 37BE  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4566 37BF  50          	DB	80		;index header gap
 4567 37C0  0C          	DB	12		;GAP 1
 4568 37C1  16          	DB	22		;GAP 2
 4569 37C2  10          	DB	16		;GAP 3
 4570 37C3  B1          	DB	177		;GAP 4 (4E's) (354)
 4571 37C4  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4572 37C5  02          	DB	2		;512 Bytes/sec
 4573 37C6  4E          	DB	04EH		;GAP Format fill character
 4574 37C7  E5          	DB	0E5H		;Data area fill character (for CPM)
 4575 37C8  193A        	DW	193AH		;Size in bytes of 1 formatted track
 4576 37CA  00          	DB	0		;No special post formating modifications of disk req
 4577 37CB  3802        	DW	SKEW_SUPER	;Location of this disks sector skew table
 4578 37CD  11          	DB	11H		;Each format will have a unique number. For disk to disk copy
 4579 37CE  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4580 37CF  35 22 2C 20 	DB	'5", DDDS, 512 byte, 10 sector SUPERBRAIN QD format',0
 4581 3802              SKEW_SUPER:
 4582 3802  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4583                   ;
 4584                   ;
 4585                   ; 5", IBM PC, MSDOS 1.1, 512 byte, DDDS, 8 sector format
 4586 380C  08          MSDOS:	DB	8		;sectors per track
 4587 380D  28          	DB	40		;tracks per side
 4588 380E  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4589 380F  50          	DB	80		;index header gap
 4590 3810  0C          	DB	12		;GAP 1
 4591 3811  16          	DB	22		;GAP 2
 4592 3812  50          	DB	80		;GAP 3
 4593 3813  C1          	DB	193		;GAP 4 (4E's)
 4594 3814  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4595 3815  02          	DB	2		;512 Bytes/sec
 4596 3816  4E          	DB	04EH		;GAP Format fill character
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  80
VF      Z80

 4597 3817  E5          	DB	0E5H		;Data area fill character
 4598 3818  16B2        	DW	16B2H		;Size in bytes of 1 formatted track
 4599 381A  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4600 381B  3853        	DW	SKEW_DOS1	;Location of this disks sector skew table
 4601 381D  12          	DB	12H		;Each format will have a unique number. For disk to disk copy
 4602 381E  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4603 381F  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector IBMPC MSDOS 1.1 format',0
 4604 3853              SKEW_DOS1:
 4605 3853  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4606                   ;
 4607                   ;
 4608                   ; 5", IBM PC, MSDOS 2.x, 512 byte, DDDS, 9 sector format
 4609 385B  09          MSDOS2:	DB	9		;sectors per track
 4610 385C  28          	DB	40		;tracks per side
 4611 385D  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4612 385E  50          	DB	80		;index header gap
 4613 385F  0C          	DB	12		;GAP 1
 4614 3860  16          	DB	22		;GAP 2
 4615 3861  50          	DB	80		;GAP 3
 4616 3862  C1          	DB	193		;GAP 4 (4E's)
 4617 3863  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4618 3864  02          	DB	2		;512 Bytes/sec
 4619 3865  4E          	DB	04EH		;GAP Format fill character
 4620 3866  E5          	DB	0E5H		;Data area fill character
 4621 3867  193E        	DW	193EH		;Size in bytes of 1 formatted track
 4622 3869  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4623 386A  38A2        	DW	SKEW_DOS2	;Location of this disks sector skew table
 4624 386C  13          	DB	13H		;Each format will have a unique number. For disk to disk copy
 4625 386D  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4626 386E  35 22 2C 20 	DB	'5", DDDS, 512 byte, 9 sector IBMPC MSDOS 2.x format',0
 4627 38A2              SKEW_DOS2:
 4628 38A2  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4629                   ;
 4630                   ;
 4631                   ; 5", TRS-80 MOD-III, 512 byte, DDDS, 10 sector format
 4632 38AB  0A          TRS80:	DB	10		;sectors per track
 4633 38AC  28          	DB	40		;tracks per side
 4634 38AD  60          	DB	01100000B	;Disk HW_BYTE (DDSS)
 4635 38AE  50          	DB	80		;index header gap
 4636 38AF  0C          	DB	12		;GAP 1
 4637 38B0  16          	DB	22		;GAP 2
 4638 38B1  1A          	DB	26		;GAP 3
 4639 38B2  89          	DB	137		;GAP 4 (4E's)
 4640 38B3  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4641 38B4  02          	DB	2		;512 Bytes/sec
 4642 38B5  4E          	DB	04EH		;GAP Format fill character
 4643 38B6  E5          	DB	0E5H		;Data area fill character
 4644 38B7  1976        	DW	1976H		;Size in bytes of 1 formatted track
 4645 38B9  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4646 38BA  38F2        	DW	SKEW_TRS	;Location of this disks sector skew table
 4647 38BC  14          	DB	14H		;Each format will have a unique number. For disk to disk copy
 4648 38BD  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4649 38BE  35 22 2C 20 	DB	'5", DDSS, 512 byte, 10 sector TRS-80 MOD-III format',0
 4650 38F2              SKEW_TRS:
 4651 38F2  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4652                   ;
 4653                   ;
 4654                   ;----------------------------------------------------------------------------------------
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  81
VF      Z80

 4655                   ;
 4656                   ;
 4657                   ; THE FOLLOWING RAM LOCATIONS ARE REQ
 4658                   ;
 4659 38FC  0000        IX_OLD_STORE	DW	0000H
 4660 38FE  00          ERRORS_FLAG	DB	0H	;Will keep tarck of errors during a routine
 4661 38FF  00          CRTDISP		DB	0H
 4662 3900    0006      IDSV		DS	6H
 4663 3906  00          CMD_STORE	DB	0H	;Menu CMD Store (Note: NOT CHIP CMD,CHIP_CMDSV)
 4664 3907  00          ERMASK		DB	0H	;ERROR MASK
 4665 3908  00          ERSTAT		DB	0H	;PRESENT ERROR STORE
 4666 3909  00          CHIP_CMDSV	DB	0H	;COMMAND TO 1791/5 SAVE
 4667 390A  0000        SP_SAVE		DW	0000H	;SP SAVE
 4668 390C  00          SEC_RT_COUNT	DB	0H	;Number of sector reads before setting error flag
 4669 390D  00          SEEK_RT_COUNT	DB	0H	;Number of seek retrys
 4670 390E  00          TRK_RT_COUNT	DB	0H	;Number of track reads before setting error flag
 4671 390F  0000        TRACK_SIZE	DW	0000H	;Size in bytes of current formatted track
 4672 3911  00          SEC_COUNT	DB	0H	;number of sectors to load
 4673 3912  0000        DMA_NEXT	DW	0	;Store for next (TADDR) for multiple sec R/W's 
 4674 3914  00          COPY_TRK_COUNT:	DB	0H	;Used for disk to disk track copying
 4675 3915  00          COPY_TRK	DB	0H
 4676 3916  00          DRIVE_STORE	DB	0H	;For 8' quick formatting
 4677                   ;
 4678 3917  00          F_TRK		DB	0H	;for building format track image
 4679 3918  00          F_SIDE		DB	0H	;for building format track image
 4680 3919  0000        INDEX_MARK	DW	0000H	;End of Index field +1
 4681 391B  0000        S_DATA_MARK	DW	0000H	;Pointer to start of Data area
 4682 391D  0000        E_DATA_MARK	DW	0000H	;Pointer to end of Data area+1
 4683 391F  0000        E_SEC_MARK	DW	0000H	;End Sector image +1
 4684 3921  0000        S_GAP4_MARK	DW	0000H	;start GAP4 area
 4685 3923  0000        E_GAP4_MARK	DW	0000H	;End track +1
 4686                   	
 4687 3925    0100      		DS	100H
 4688         3A25      STACK	EQU	$
 4689                   
 4690                   ;END
 4691                   
 0 Error(s) Detected.
 14629 Absolute Bytes. 611 Symbols Detected.
