Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   1
VF      Z80

    1                   ;  THIS IS A PROGRAM TO EXAMINE & FORMAT CPM DISKS USEING A VERSAFLOPPY II DISK 
    2                   ;  CONTROLLER. NOTE IT IS SELF A CONTAINED PROGRAM (EXCEPT FOR CONSOLE I/O)
    3                   ;
    4                   ; It is a completely new Diagnostic program and utilizes a new set of core BIOS
    5                   ; like functions that can easily be adapted for CPM+ etc. It does not utilze
    6                   ; any of the old SD_Systems BIOS/Diagnostic code (which I found to be convoluted, difficult 
    7                   ; to modify and specific for a few disk formats). This program utilizes a disk parameter
    8                   ; table driven approach for many common 8" & 5" formats. Others can be easily added.
    9                   ; It works with both the 1791 & 1795 chips (Set the EQU's below). 
   10                   ;
   11                   ; The program requires a Z80 CPU and utilizes the marvelous Z80 assembler (ZASMB) written 
   12                   ; by P.F Ridler in 1984. See (http://retrotechnology.com/herbs_stuff/s_sd.html#other) 
   13                   ; on Herbs site. The assembler here was setup to take long label names (see the docs). 
   14                   ; However most common Z80 assemblers should work, with minor changes to a few lines of code.
   15                   ; ZASMB allows the use uses a few more logical OP codes that Zilog left out 
   16                   ; (eg CP A,20H rather than CP 20H). This assembler is extremely fast and generates 
   17                   ; direct .com code. It does however have limited ifdef etc options.
   18                   ;
   19                   ;
   20                   ;	JOHN MONAHAN	(monahan@vitasoft.org)	27/4/2009	VERSION	1.0
   21                   ;
   22                   ;	V0.1	Basic Sector ID field working
   23                   ;	V0.2	Seek test jumpy
   24                   ;	V0.3	Seek done, before read sector core stuff
   25                   ;	V0.5	Sector read OK for 8" SD
   26                   ;	V0.7	Sector Read blanked out menu, itself OK. Seek redone.
   27                   ;	V0.8	Reading 128 byte sectors with my READ_SECTOR routine OK
   28                   ;	V0.9	Block read for sectors
   29                   ;	V0.10	Start of Formatting OK
   30                   ;	V0.11	Filled in comments of formatting
   31                   ;	V0.12	Start of sector track write image display
   32                   ;	V0.14	Fixed abort etc. Sec formatting display working, ESC to stop display 
   33                   ;	V0.15	Sec ID errors on display. general cleanup of abort stuff
   34                   ;	V0.16	Variable sec size display. Second side not working
   35                   ;	V0.17	Second side working before splitting UNIT into two sections (Hardware & Software)
   36                   ;	V0.18	New format using IO_BYTE and IX pointer to tables for disk/drive info.
   37                   ;	V0.19	Before simplifying moving IO_BYTE data to Disk paramater table
   38                   ;	V0.20	Start of HW_BYTE in disk paramater table. No format yet.
   39                   ;	V0.21	8" format done with new layout.
   40                   ;	V0.22	Before New Format Routine & Tables
   41                   ;	V0.24	Before switching to my memory track build routines
   42                   ;	V0.25	My track image not working yet
   43                   ;	V0.27	Software SD Track (no sides) working. No hardware yet
   44                   ;	V0.28	8" format (CPM cannot read it). Cannot access 5" drives
   45                   ;	V0.29	Straightened our 5". (DW in table). Still CPM read problem
   46                   ;	V0.30	Start of track dump SD 8" Format now working
   47                   ;	V0.31	Cleaned up seek no verify functions to one general function
   48                   ;	V0.33	Seems to be working now
   49                   ;	V0.34	Random sector read test working (write not done yet)
   50                   ;	V0.35	Start or read sec & seek error returns. Have seperate flag on CMD's 
   51                   ;	V0.37	New error routines Seek done. Modeled after VF1 Bios
   52                   ;	V0.38	New error routines, centralized Home, Seek etc started. 
   53                   ;	V0.39	New format for sec read with seek_V done
   54                   ;	V0.40	New side selection and redo of odds and ends
   55                   ;	V0.41	Split menu's for 5" & 8" drives. All OK on Sec reads
   56                   ;	V0.42	Dump track working again.
   57                   ;	V0.43	Format not working
   58                   ;	V0.44	Re-did disk format menues and selection. Started on Format stuff 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   2
VF      Z80

   59                   ;	V0.45	Combine IY & IX reg flags into a single IX+HW_BYTE flag
   60                   ;	V0.46	Put track size info in tables and use it for track dumps.
   61                   ;	V0.48	Cleaned up things. END_ROUTINE put in.
   62                   ;	V0.50	Sector Read/write done (track format broken)
   63                   ;	V0.51	Format not working.
   64                   ;	V0.52	Format SSSD 8" seems to be OK now. Need READ_ID at start
   65                   ;	V0.53	Format was still not working. Changed chip and used Restore with V flag on.
   66                   ;	V0.54	SOLID FORMATTING of 8'. Moved all 1791/5 CMD's to drive tables. (Need to up 5")
   67                   ;	V0.55	Formating of al 8" SS disks working
   68                   ;	V0.56	Combined all sec R/W tests into one core routine
   69                   ;	V0.58	Working on side selection, fixed some formatting issues including CPM86 disks
   70                   ;	V0.59	Fixed side_sel to actully select the proper side (Note debug display present)
   71                   ;	V0.60	Formatting 5' DDDS disk now working and compatable with CPM3
   72                   ;	V0.61	Many formats added for 5" disks
   73                   ;	V0.62	Before skew tables for formatting (Removed HP & KAYPRO)
   74                   ;	V0.63	Skew table for formatting done DD & SD
   75                   ;	V0.64	All formats done and working. Corrected (DRIVE)->IY problem
   76                   ;	V0.65	Load CMD done
   77                   ;	V0.66	Both sector dump and load working. repaired disk selection again.
   78                   ;	V0.67	Split out all the sector R/W functions again into seperate routines - easier to mentain.
   79                   ;	V0.68	Moved 179x CMDS to start. Take care of 1795 side bits. Rearranged main menu
   80                   ;	V0.69	Solve status port hang-up in invalid hardware.
   81                   ;	V0.70	Started Disk copy
   82                   ;	V0.71	Disk copying of 8" done. Slow with no sector skews
   83                   ;	V0.72	Skew for disk copying inserted - still slow
   84                   ;	V0.73	Went to multi-sec R/W but errors so far
   85                   ;	V0.74	Installed Verify cmd as well. Copy now working for 128 byte sectors
   86                   ;	V0.75	Improvements to M_SEC_RD/WR
   87                   ;	V0.76	Multi sector R/W working. 
   88                   ;	V0.77	Step-in CMD implemented but copy still requires HOME on A:
   89                   ;	V0.78	System copy done but needs work. Need to have global COPY,COMPARE  etc.
   90                   ;	V0.79	Copy disk generealized/global now working on DS disks
   91                   ;	V0.80	Verify command now generalized and working 
   92                   ;	V0.81	Sys copy done, 1795/91 mods added
   93                   ;	V0.82	Problems with 1795 seek & drive select.
   94                   ;	V0.83	Complete rearrangement of hardware selection. Seek working up to before Format
   95                   ;	V0.84	All cleaned up for 1791 chip
   96                   ;	V0.85	Had to flip A & B side hardware I/O selections for 1795 chip
   97                   ;	V0.86	Hardware side select finally straightened out. Before IY usage
   98                   ;	V0.87	Initial IY usage - untested
   99                   ;	V0.88	IY working throughout. Seems solid for 1791 & 1795 chips.
  100                   ;	V1.01	Set 1 track for 1K sector  8" CPM system tracks instead of 2
  101                   ;
  102                   ;	To Do:-
  103                   ;;	Add 5" dos sectors format initilization
  104                   ;
  105                   ;
  106                   ;
  107                   ;	
  108         0000      FALSE	EQU	0
  109         0001      TRUE	EQU	1
  110                   ;
  111         0001      CHIP_1795 EQU	TRUE		;<---- RD & WR sector cmd's bit patterns are different for these chips!
  112         0000      CHIP_1791 EQU	FALSE
  113                   
  114         0080      NBYTES	EQU	128		;BYTES PER SECTOR UNIT (eg, *2 FOR 256 BYTE SECTORS)
  115         000A      LF	EQU	0AH
  116         000D      CR	EQU	0DH
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   3
VF      Z80

  117         0007      BELL	EQU	07H
  118         001A      CLEAR	EQU	1AH		;SD Systems Video Board Clear Screen
  119         0009      TAB	EQU	09H
  120         001B      ESC	EQU	1BH
  121         001C      EOL	EQU	1CH		;SD Systems Video Board Clear to end of line
  122         0010      PAGE_SIZE EQU	16		;Number of lines at a time to display memory contents on CRT
  123         0005      STATUS_DELAY EQU 5		;Time-out for waiting for status port to ho not busy. (~5 seconds @ 4MHz)
  124                   ;
  125         0001      RO_FLAG	EQU	01		;Flag for sequental sectors R test (Read sectors)
  126         0002      WO_FLAG	EQU	02		;Flag for sequental sectors W test (Write to sectors)
  127         0003      RW_FLAG	EQU	03		;Flag for sequental sectors R/W test (Both)
  128         0004      RRW_FLAG EQU	04		;Flag for random track and sector R/W test
  129         0005      TRK_RO_FLAG EQU	05		;Flag for reading sectors from just one track continously
  130         0001      CPM86_FLAG  EQU	01		;Flag to indicate after 5" disk formating CPM86 first sector
  131                   				;needs to be modified
  132         0001      TEST_FILL EQU	01		;Character to write for sector write test.
  133                   ;
  134         0000      SIMPLE	EQU	00h		;Output information detail to CRT
  135         00FF      COMPLEX	EQU	0FFH	
  136                   ;
  137                   				;Will place these values here for easy RAM analysis if a crash
  138                   				;The rest go to the end of the program
  139         0040      TADDR	EQU	40H		;STORE FOR DMA ADDRESS
  140         0043      @TRK	EQU	43H		;NEW TRACK <---- DO not change the order of these locations 
  141         0044      @SIDE	EQU	44H		;NEW SIDE        the IY register will ALWAYS point to TRK
  142         0045      @SCTR	EQU	45H		;NEW SECTOR
  143         0046      DRIVE_1	EQU	46H		;CURRENT DRIVE SELECT BITS
  144         0047      DRIVE_2	EQU	47H		;SECOND DRIVE SELECT BITS (For copy, verify, sysgen etc)
  145         0048      IOBYTE	EQU	48H		;Combined drive selection, density, side and size bits for hardware
  146                   ;				;is inverted and sent to the VFII "SELECT" port
  147                   ;
  148                   ;	PORTS & COMMANDS FOR FOR 1791 or 1795
  149                   ;
  150         0060      RSET	EQU	60H		;<----- VERSAFLOPPY BASE PORT ADDRESS (I use Port 50H, SD-Systems uses 60H)
  151         0063      SELECT	EQU	63H		;DRIVE SELECT PORT
  152         0064      STATUS	EQU	64H		;STATUS PORT
  153         0065      TRACK	EQU	65H		;TRACK PORT
  154         0066      SECTOR	EQU	66H		;SECTOR PORT
  155         0067      DATA	EQU	67H		;DATA PORT
  156         0064      CMD	EQU	64H		;COMMAND PORT
  157         0005      DEBUG	EQU 05H
  158                   ;
  159                   ;Note: the 1791/5 chip for most commands used bits 0&1 to set the head
  160                   ;motor stepping rate. 00 being 3ms (@2MH clock),11 being 15 ms. My
  161                   ;Tandon 8" drives take the fastest rate. Older drives may not.
  162                   ;
  163         000C      RSCMD	EQU	00001100B	;(0CH),RESTORE CMD	<------ (Some drives require 
  164         0018      SKNCMD	EQU	00011000B	;(18H),SEEK NO VERIFY CMD <--  (a slower stepping rate r1,r0)
  165         001C      SKCMD	EQU	00011100B	;(1CH),SEEK WITH VERIFY CMD <---
  166         00C4      RDACMD	EQU	11000100B	;(C0H),READ TRACK/SECTOR ID CMD	
  167         005C      STEPIN	EQU	01011100B	; Step-in verify on dstination track
  168                   	
  169         0080      RDCMD91	EQU	10000000B	;(80H),READ SECTOR CMD	1791 chip
  170         00A0      WRCMD91	EQU	10100000B	;(A0H),WRITE SECTOR CMD 
  171                   
  172         0088      RDCMD95	EQU	10001000B	;(88H),READ SECTOR CMD	1795 chip
  173         00A8      WRCMD95	EQU	10101000B	;(A8H),WRITE SECTOR CMD
  174                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   4
VF      Z80

  175         00F4      WRTCMD	EQU	11110100B	;(F4H),Write a whole track command
  176         00E4      RDTCMD	EQU	11100100B	;(E4H),Read a whole track command
  177                   ;
  178                   ;
  179         0004      SEC_RETRY_MAX	EQU	4	;Number of times to try R/W a sector before returning an error
  180         0002      SEEK_RETRY_MAX	EQU	2	;Number of times to try R/W a sector before returning an error
  181         0080      HOME_ERR_MASK   EQU	80H	;Error mask for Type I Home CMD
  182         0090      SIN_ERR_MASK	EQU	90H	;Step head in one track command error bits
  183         0090      SK_ERR_MASK     EQU	90H	;Track Seek error bits 
  184         009F      ID_ERR_MASK     EQU	9FH	;Sector ID read error mask
  185         00BF      RS_ERR_MASK     EQU	0BFH	;Read sector data error mask
  186         00AF      MRS_ERR_MASK    EQU	0AFH	;Multi-sector Read data error mask
  187         00EF      WS_ERR_MASK	EQU	0EFh	;Write sector data error mask
  188         00EF      MWS_ERR_MASK	EQU	0EFh	;Multi-sector Write data error mask
  189         0080      RT_ERR_MASK     EQU	80H	;Read Track error mask
  190         00E0      WT_ERR_MASK     EQU	0E0H	;Write Track error mask
  191                   ;
  192                   ;
  193         5000      FBUFFER	EQU    5000H		;Buffer to build track image OR display sectors reads
  194         6000      FBUFFER2 EQU   6000H		;2nd buffer here for sector R/W test	
  195                   ;
  196                   ;The Index register IX is used throughout the program to point to the disk paramater
  197                   ;table of the currently selected drive/disk format
  198                   ;(IOBYTE) will point to (DRIVE) and will contain the current DRIVE 
  199                   ;hardware selection bits. Drive select 0,1,2,3 and side A or side B bits as well as
  200                   ;other flags (see below) 
  201                   ;Remember the bits for disk selection, density and side selection are inverted on 
  202                   ;the actual Versafloppy II board hardware
  203                   ;Register IX is not used for anything else in this program.
  204                   ;
  205                   ;The Index register IY is used throughout the program to point to the current/requested
  206                   ;Track, Side & Sector being worked on. Thet are at memory locations @TRK... IY will
  207                   ;always point to @TRK and assumes the others follow. Do not relocate or change the order.
  208                   ;
  209                   ; 
  210                   
  211                   ; EQUATES FOR [IX] REGISTAR INTO DISK PARAMATER TABLE
  212                   ;
  213         0000      NSCTRS	EQU	0	;Sectors/Track for disk
  214         0001      NTRKS	EQU	1	;Tracks/Side
  215         0002      HW_BYTE	EQU	2	;Will contain bit flags for:-
  216                   					;Bits 0,1 are used for drive selection
  217                   					;Bits 2 & 3 are currently unused
  218                   					;Bit 4=0 For SS disk hardware, 1= DS disk
  219                   					;Bit 5=0 8" disk, 1= 5" disk
  220                   					;Bit 6=0 Single density, 1= Double density
  221                   					;Bit 7=0 if CURRENT selected side is A
  222                   					;      1 if CURRENT selected side is B
  223                   					;Note: handle this byte with care it is
  224                   					;central to many functions within the 
  225                   					;program.
  226         0003      HEADR	EQU	3	;For Formatting
  227         0004      GAP1	EQU	4	;	"
  228         0005      GAP2	EQU	5	;	"
  229         0006      GAP3	EQU	6	;	"
  230         0007      GAP4	EQU	7	;	"
  231         0008      GAP4R	EQU	8	;	"
  232         0009      SIZE	EQU	9	;1=128 Byte sectors.....4=1024 Byte sectors
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   5
VF      Z80

  233         000A      GAP_FILL_CHAR  EQU 10	;Byte used in disk formating
  234         000B      DATA_FILL_CHAR EQU 11	;     "       "       "
  235         000C      TRK_SIZE       EQU 12	;TWO bytes containing the track size of that disks format
  236         000E      SPECIAL_FLAG   EQU 14	;flag byte for cases where after formatting disk need to be initilized
  237                   			;normally 0, CPM86_FLAG = 1
  238         000F      SKEW	       EQU 15	;Low address of sector skew table
  239         0010      SKEW1          EQU 16	;High address of sector skew table
  240         0011      FORMAT_NUM     EQU 17	;Each format will have a unique number. 
  241         0012      SYS_TRKS       EQU 18	;How many tracks for system usually 2 for 8-inch disks
  242         0013      TITLE	       EQU 19	;Text string describing the disk format
  243                   ;
  244                   ;
  245                   ; EQUATES FOR [IY] REGISTAR FOR TRACK, SIDE, SECTOR locations
  246                   ;
  247         0000      TRK	EQU	0
  248         0001      SIDE	EQU	1
  249         0002      SCTR	EQU	2
  250                   ;
  251                   ;------------------------------------------------------------------------------
  252         0100      	ORG	100H
  253                   ;
  254 0100  ED 73 393A  	LD	(SP_SAVE),SP
  255 0104  31 3A55     	LD	SP,STACK
  256 0107  C3 0125     	JP	START
  257                   ;------------------------------------------------------------------------
  258                   ;		HARDWARE DEPENDENT STUFF
  259                   ; The only other hardware links are through the Versafloppy II board. 
  260                   ; Remember to make sure it is set to the correct 1791/5 & base port mentioned above.
  261                   ;
  262                   ; 
  263 010A  DB 00       CONST:	IN	A,(0)		;console status for SD Systems 8024 Video board
  264 010C  E6 02       	AND	A,02H		;anything there
  265 010E  C8          	RET	Z		;return 0 if nothing
  266 010F  AF          	XOR	A,A
  267 0110  3D          	DEC	A		;return NZ, & 0FFH in A if something there
  268 0111  C9          	RET
  269                   ;
  270 0112  DB 00       CI:	IN	A,(0)		;console input
  271 0114  E6 02       	AND	A,02H
  272 0116  28 FA       	JR	Z,CI
  273 0118  DB 01       	IN	A,(1)		;return with character in A
  274 011A  C9          	RET
  275                   ;		
  276 011B  DB 00       CO:	IN	A,(0)		;console output (arrive with character in C)
  277 011D  E6 04       	AND	A,04H		;Note character is in C and A on return.
  278 011F  28 FA       	JR	Z,CO
  279 0121  79          	LD	A,C
  280 0122  D3 01       	OUT	(1),A
  281 0124  C9          	RET
  282                   ;-------------------------------------------------------------------------
  283 0125  3E 00       START:	LD	A,SIMPLE
  284 0127  32 392F     	LD	(CRTDISP),A	;Start off with simple diagnostic display
  285 012A  21 1A2C     OVER:	LD	HL,SIGNON
  286 012D  CD 1933     	CALL	PMSG
  287 0130  FD 21 0043  	LD	IY,@TRK		;Always points here
  288 0134  AF          	XOR	A,A		;set everything to zero
  289 0135  FD 77 00    	LD	(IY+TRK),A
  290 0138  FD 77 01    	LD	(IY+SIDE),A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   6
VF      Z80

  291 013B  3C          	INC	A
  292 013C  FD 77 02    	LD	(IY+SCTR),A	;Track 0, side A, sector 1
  293                   
  294 013F  CD 15C6     	CALL	SELECT_DR_1	;Put current drive hardware selection in (DRIVE_1)
  295 0142  28 0E       	JR	Z,GET_DR_TABLE	;Get the current disk format from user, point IX to table
  296 0144  FE FF       	CP	A,0FFH		
  297 0146  28 E2       	JR	Z,OVER		;Invalid drive, start over
  298 0148  CD 1950     	CALL	ZCRLF		;Must be an abort ESC
  299 014B  ED 7B 393A  	LD	SP,(SP_SAVE)
  300 014F  C3 0000     	JP	0H		;Reboot CP/M if ESC
  301                   
  302 0152              GET_DR_TABLE:
  303 0152  CD 1630     	CALL	SELECT_IX	;Set IX to point to the current drive table
  304 0155  28 0E       	JR	Z,LOOP		
  305 0157  FE FF       	CP	A,0FFH		
  306 0159  28 CF       	JR	Z,OVER		;Invalid drive, start over
  307 015B  CD 1950     	CALL	ZCRLF		;Must be an abort ESC
  308 015E  ED 7B 393A  	LD	SP,(SP_SAVE)
  309 0162  C3 0000     	JP	0H		;Reboot CP/M if ESC
  310                   ;
  311 0165  3A 392F     LOOP:	LD	A,(CRTDISP)	;Check if detailed display flag is on
  312 0168  B7          	OR	A,A
  313 0169  20 05       	JR	NZ,MENU1
  314 016B  21 2087     	LD	HL,MAIN_MENU0	;Main Menu loop (Detailed Diaplay OFF)
  315 016E  18 03       	JR	LOOP1
  316 0170  21 20CE     MENU1:	LD	HL,MAIN_MENU1	;Main Menu loop	(Detailed Display ON)
  317 0173  CD 1933     LOOP1:	CALL	PMSG
  318 0176  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware 
  319                   
  320 0179  CD 1700     	CALL	SHOW_HW_TITLE	;Describe the currently selected drive
  321 017C  CD 1711     	CALL	SHOW_HW_BYTE	;Print out HW_BYTE info
  322                   	
  323 017F  21 5000     	LD	HL,FBUFFER	;The DMA RAM address will be here for sector R/W's
  324 0182  22 0040     	LD	(TADDR),HL
  325                   				
  326 0185  CD 0E2D     	CALL	HOME		;Move head to track 0 with a RESTORE CMD
  327 0188  C4 12D0     	CALL	NZ,SHOW_ERRORS	;If an error in restoring head to TRK 0 say so.
  328                   	
  329 018B  CB 47       	BIT	0,A		;If NZ, then timeout on Status port, bad hardware
  330 018D  20 13       	JR	NZ,TO_MENU	;Try another drive or format disk
  331                   
  332 018F  CD 177E     	CALL	SHOW_IX_TABLE	;Show info about current disk parameters
  333                   
  334 0192  CD 0EB8     	CALL	READ_ID		;Get Actual track ID
  335 0195  28 05       	JR	Z,ID_FINE	;Was there errors
  336 0197  CD 12D0     	CALL	SHOW_ERRORS	;If an error show bit flags
  337 019A  18 06       	JR	TO_MENU
  338                   
  339 019C  CD 1950     ID_FINE:CALL	ZCRLF
  340 019F  CD 17BD     	CALL	SHOW_ID		;Show a typical Track ID field on track 0
  341                   				
  342 01A2              TO_MENU:
  343 01A2  21 224E     	LD	HL,MENU_OPTIONS
  344 01A5  CD 1933     	CALL	PMSG
  345 01A8  3A 392F     	LD	A,(CRTDISP)	;Two menu lists (Set using menu #D)
  346 01AB  B7          	OR	A,A		;A detailed display or a simple one.
  347 01AC  20 05       	JR	NZ,MENUA
  348 01AE  21 2464     	LD	HL,MENU1_MSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   7
VF      Z80

  349 01B1  18 03       	JR	MENUB
  350 01B3  21 24B7     MENUA:	LD	HL,MENU2_MSG
  351 01B6  CD 1933     MENUB:	CALL	PMSG
  352                   				;-----MAIN MENU----
  353 01B9  CD 193E     	CALL	GETCMD		;Find out Menu Option in A
  354 01BC  32 3936     	LD	(CMD_STORE),A
  355 01BF  FE 1B       	CP	A,ESC		;Abort if ESC character
  356 01C1  28 53       	JR	Z,FIN
  357 01C3  FE 30       	CP	A,'0'		;Get a new current disk
  358 01C5  CA 012A     	JP	Z,OVER
  359 01C8  FE 31       	CP	A,'1'
  360 01CA  CC 022B     	CALL	Z,SEEK_TEST	;Seek test
  361 01CD  FE 32       	CP	A,'2'
  362 01CF  CC 0281     	CALL	Z,SEC_READ_TEST	;Sequental Read sectors test. 
  363 01D2  FE 33       	CP	A,'3'
  364 01D4  CC 02ED     	CALL	Z,SEC_WRITE_TEST;Sequental Write sectors test. 
  365 01D7  FE 34       	CP	A,'4'
  366 01D9  CC 036A     	CALL	Z,SEC_RW_TEST	;Sequental sec R/W test
  367 01DC  FE 35       	CP	A,'5'		
  368 01DE  CC 03FC     	CALL	Z,RAND_SEC_TEST	;Random Track/Sector read/write test
  369 01E1  FE 36       	CP	A,'6'
  370 01E3  CC 04A1     	CALL	Z,TRACK_TEST	;Read continously sectors from a specific track
  371 01E6  FE 37       	CP	A,'7'
  372 01E8  CC 054A     	CALL	Z,TRACK_DUMP	;Load one whole track to RAM (at location 5000H)
  373 01EB  FE 38       	CP	A,'8'
  374 01ED  CC 0644     	CALL	Z,LOAD_SECTORS	;Load sectors into RAM
  375 01F0  FE 39       	CP	A,'9'
  376 01F2  CC 078A     	CALL	Z,DUMP_SECTORS	;Write sectors to disk
  377 01F5  FE 46       	CP	A,'F'
  378 01F7  CC 08D6     	CALL	Z,FORMAT_DISK	;Go to disk formatting section
  379 01FA  FE 43       	CP	A,'C'
  380 01FC  CC 0B22     	CALL	Z,COPY_DISK	;Copy disk A: to B:
  381 01FF  FE 56       	CP	A,'V'
  382 0201  CC 0C2C     	CALL	Z,VERIFY_DISK	;Verify disk A:=B:
  383 0204  FE 44       	CP	A,'D'
  384 0206  CC 0220     	CALL	Z,TOGGLE_CRT	;Switch on/off detail info display option
  385 0209  FE 53       	CP	A,'S'
  386 020B  CC 0D40     	CALL	Z,COPY_CPM3_SYS	;Copy CPM system tracks to another disk.
  387 020E  FE 49       	CP	A,'I'
  388 0210  CC 09DE     	CALL	Z,IBMFORM_DISK	;Quick format of blank 8" disk in B:
  389 0213  C3 0165     	JP	LOOP
  390 0216  CD 1950     FIN:	CALL	ZCRLF
  391 0219  ED 7B 393A  	LD	SP,(SP_SAVE)
  392 021D  CA 0000     	JP	Z,0H		;Return to CPM
  393                   
  394                   ;
  395                   ;
  396                   ;-------- TOGGLE ON/OFF DETAILED INFORMATION DISPLAY ON CRT/LCD FOR SOME COMMANDS
  397 0220              TOGGLE_CRT:
  398 0220  3A 392F     	LD	A,(CRTDISP)
  399 0223  2F          	CPL
  400 0224  32 392F     	LD	(CRTDISP),A
  401 0227  3A 3936     	LD	A,(CMD_STORE)	;So we dont pick up other menu items
  402 022A  C9          	RET			;Back to main menu
  403                   ;
  404                   ;
  405                   ;------------------ SEEK DIAGNOSTIC TEST --------------------
  406                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   8
VF      Z80

  407                   ;Simply tests head movement control
  408 022B              SEEK_TEST:
  409 022B  21 250A     	LD	HL,SEKMSG
  410 022E  CD 1933     	CALL	PMSG
  411 0231  AF          	XOR	A,A		;Setup for the BIOS below
  412 0232  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  413 0235  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  414 0238  3C          	INC	A
  415 0239  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  416 023C  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  417 023F  CD 0E2D     	CALL	HOME		;Restore head to track 0
  418 0242  C4 12D0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  419                   
  420 0245  CD 1950     SEKT:	CALL	ZCRLF
  421 0248  CD 0E70     	CALL	SEEK_TRACK_V	;Test SEEK ability/timing of chip
  422                   ;	CALL	STEP_IN_CMD	;Can also test Step in head one track & verify	
  423 024B  C4 12D0     	CALL	NZ,SHOW_ERRORS	;If Error show error flags
  424                   
  425 024E  CD 12AD     	CALL	SHOW_T_LOC	;Print out current track #
  426 0251  CD 0EB8     	CALL	READ_ID		;Get current track ID
  427 0254  C4 12D0     	CALL	NZ,SHOW_ERRORS	;print out the track ID errors
  428 0257  CD 17BD     	CALL	SHOW_ID		;Show track ID
  429                   
  430 025A  CD 19EC     	CALL	CHECKABORT	;SP will halt, ESC will abort
  431 025D  20 14       	JR	NZ,END_CMD	;Return back to main menu
  432                   
  433 025F  FD 34 00    	INC	(IY+TRK)	;Need to bump track up one
  434 0262  FD 7E 00    	LD	A,(IY+TRK)	;Store here
  435 0265  DD BE 01    	CP	A,(IX+NTRKS)	;Are we at the end yet
  436 0268  20 DB       	JR	NZ,SEKT
  437 026A  FD 36 00 00 	LD	(IY+TRK),0
  438 026E  CD 1950     	CALL	ZCRLF		;Extra CR/LF fro another loop
  439 0271  28 D2       	JR	Z,SEKT		;start again
  440                   ;
  441 0273              END_CMD:
  442 0273  AF          	XOR	A,A
  443 0274  FD 77 00    	LD	(IY+TRK),A	;Always back to Track 0, Side A
  444 0277  FD 77 01    	LD	(IY+SIDE),A
  445 027A  CD 0E2D     	CALL	HOME		;Move head back to Track 0
  446 027D  3A 3936     	LD	A,(CMD_STORE)	;So we dont pick up other menu items IF we return from here
  447 0280  C9          	RET
  448                   
  449                   ; ------------------- READ SECTORS TEST -------------
  450                   ; This routine will sequentially read all sectors on a disk. Both sides
  451                   ; if a 2 sided disk.
  452                   ;
  453 0281              SEC_READ_TEST:
  454 0281  21 2943     	LD	HL,RDTST_MSG		;Say read test
  455 0284  CD 1933     	CALL	PMSG
  456 0287  CD 1950     	CALL	ZCRLF
  457 028A  AF          	XOR	A,A			;Setup for the BIOS below
  458 028B  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  459 028E  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  460 0291  3C          	INC	A
  461 0292  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  462                   
  463 0295  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  464 0298  CD 0E2D     	CALL	HOME		
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   9
VF      Z80

  465 029B  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  466                   
  467 029E              READ_LOOP1:
  468 029E  CD 1950     	CALL	ZCRLF
  469 02A1  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  470 02A4  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  471                   
  472 02A7  21 5000     	LD	HL,FBUFFER		;Place sector data here
  473 02AA  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  474                   
  475 02AD  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  476 02B0  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  477                   	
  478 02B3  CD 1272     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  479 02B6  CD 1804     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  480                   
  481 02B9  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  482 02BC  FD 7E 02    	LD	A,(IY+SCTR)		;Store new sec # in A
  483 02BF  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  484 02C0  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  485 02C3  20 16       	JR	NZ,SECTRK_DONE1
  486                   
  487 02C5  CD 1210     	CALL	SWAP_SIDES		;Sides swap check
  488 02C8  3E 01       	LD	A,1			;Back to sector 1 no matter what
  489 02CA  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  490 02CD  20 0C       	JR	NZ,SECTRK_DONE1		;If B side (NZ), same track, back to sec 1
  491                   
  492 02CF  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  493 02D2  FD 7E 00    	LD	A,(IY+TRK)		;Store here
  494 02D5  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
  495 02D8  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  496                   ;	
  497 02DB              SECTRK_DONE1:
  498 02DB  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
  499 02DE  28 BE       	JR	Z,READ_LOOP1		;Loop until abort or all tracks done
  500 02E0  3A 392F     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  501 02E3  B7          	OR	A,A			;will switch it off
  502 02E4  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  503 02E7  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  504 02E8  32 392F     	LD	(CRTDISP),A
  505 02EB  18 B1       	JR	READ_LOOP1
  506                   ;
  507                   ;
  508                   ; ------------------- WRITE SECTORS TEST -------------
  509                   ; This routine will sequentially write to all sectors on a disk. Both sides
  510                   ; if a 2 sided disk. It will write the character TEST_FILL in each sector
  511                   ;
  512 02ED              SEC_WRITE_TEST:
  513 02ED  21 2961     	LD	HL,WRTST_MSG		;Say write test
  514 02F0  CD 1933     	CALL	PMSG
  515 02F3  CD 1950     	CALL	ZCRLF			;CR,LF at start. 
  516 02F6  AF          	XOR	A,A			;Setup for the BIOS below
  517 02F7  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  518 02FA  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  519 02FD  3C          	INC	A
  520 02FE  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  521 0301  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  522 0304  CD 0E2D     	CALL	HOME	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  10
VF      Z80

  523 0307  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  524                   
  525 030A  21 5000     	LD	HL,FBUFFER		;Sector data to be written is here
  526 030D  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  527                   
  528 0310  0E 01       	LD	C,TEST_FILL		;Data fill character (01H)
  529 0312  CD 138C     	CALL	FILL_BUFFER		;Fill buffer with character to be written
  530                   
  531 0315  CD 17F6     	CALL	CHECK_WP		;See if disk is write protected
  532 0318  C2 0273     	JP	NZ,END_CMD		;Abort
  533                   ;
  534 031B              WRITE_LOOP1:
  535 031B  CD 1950     	CALL	ZCRLF
  536 031E  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  537 0321  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  538                   	
  539 0324  21 5000     	LD	HL,FBUFFER		;Place sector data here
  540 0327  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  541                   
  542 032A  CD 103C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  543 032D  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  544                   	
  545 0330  CD 1272     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  546 0333  CD 1804     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  547                   
  548 0336  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  549 0339  FD 7E 02    	LD	A,(IY+SCTR)		;Store new sec # in A
  550 033C  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  551 033D  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  552 0340  20 16       	JR	NZ,SECTRK_DONE2
  553                   
  554 0342  CD 1210     	CALL	SWAP_SIDES		;Sides swap check
  555 0345  3E 01       	LD	A,1			;Back to sector 1 no matter what
  556 0347  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  557 034A  20 0C       	JR	NZ,SECTRK_DONE2		;If B side (NZ), same track, back to sec 1
  558                   
  559 034C  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  560 034F  FD 7E 00    	LD	A,(IY+TRK)		;Next track
  561 0352  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
  562 0355  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  563                   ;	
  564 0358              SECTRK_DONE2:
  565 0358  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
  566 035B  28 BE       	JR	Z,WRITE_LOOP1		;Loop until abort or all tracks done
  567 035D  3A 392F     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  568 0360  B7          	OR	A,A			;will switch it off
  569 0361  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  570 0364  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  571 0365  32 392F     	LD	(CRTDISP),A
  572 0368  18 B1       	JR	WRITE_LOOP1
  573                   ;
  574                   ;
  575                   ; ------------------- SEQUENTAL READ/WRITE SECTORS TEST -------------
  576                   ; This routine will read and write back to randomly selected tracks and 
  577                   ; sectors on a disk. Both sides, if a 2 sided disk.
  578                   ;
  579 036A              SEC_RW_TEST:
  580 036A  21 2980     	LD	HL,RDWRTST_MSG		;Say R/W test
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  11
VF      Z80

  581 036D  CD 1933     	CALL	PMSG
  582 0370  CD 1950     	CALL	ZCRLF			;CR,LF at start. 
  583 0373  AF          	XOR	A,A			;Setup for the BIOS below
  584 0374  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  585 0377  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  586 037A  3C          	INC	A
  587 037B  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  588 037E  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  589 0381  CD 0E2D     	CALL	HOME	
  590 0384  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  591                   
  592 0387  CD 17F6     	CALL	CHECK_WP		;See if disk is write protected
  593 038A  C2 0273     	JP	NZ,END_CMD		;Abort
  594                   ;
  595 038D              RW_LOOP1:
  596 038D  CD 1950     	CALL	ZCRLF
  597 0390  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  598 0393  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  599                   	
  600 0396  21 5000     	LD	HL,FBUFFER		;Place sector data here
  601 0399  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  602                   
  603 039C  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  604 039F  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  605                   	
  606 03A2  CD 1272     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  607 03A5  CD 1804     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  608                   
  609 03A8  CD 103C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  610 03AB  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  611                   
  612 03AE  21 6000     	LD	HL,FBUFFER2		;Place new sector data here
  613 03B1  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  614                   
  615 03B4  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  616 03B7  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  617                   
  618 03BA  CD 1356     	CALL	CMP_BUFFERS		;Check for errors
  619 03BD  28 09       	JR	Z,COMPARE_OK
  620 03BF  21 2920     	LD	HL,SEC_V_ERROR		;R/W Error found 
  621 03C2  CD 1933     	CALL	PMSG
  622 03C5  CD 1272     	CALL	SHOW_TSS_LOC		;trk,sec,head
  623                   
  624 03C8              COMPARE_OK:
  625 03C8  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  626 03CB  FD 7E 02    	LD	A,(IY+SCTR)
  627 03CE  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  628 03CF  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  629 03D2  20 16       	JR	NZ,SECTRK_DONE3
  630                   
  631 03D4  CD 1210     	CALL	SWAP_SIDES		;Sides swap check
  632 03D7  3E 01       	LD	A,1			;Back to sector 1 no matter what
  633 03D9  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  634 03DC  20 0C       	JR	NZ,SECTRK_DONE3		;If B side (NZ), same track, back to sec 1
  635                   
  636 03DE  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  637 03E1  FD 7E 00    	LD	A,(IY+TRK)		;Next track
  638 03E4  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  12
VF      Z80

  639 03E7  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  640                   ;	
  641 03EA              SECTRK_DONE3:
  642 03EA  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
  643 03ED  28 9E       	JR	Z,RW_LOOP1		;Loop until abort or all tracks done
  644 03EF  3A 392F     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  645 03F2  B7          	OR	A,A			;Will switch it off
  646 03F3  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  647 03F6  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  648 03F7  32 392F     	LD	(CRTDISP),A
  649 03FA  18 91       	JR	RW_LOOP1		;try again
  650                   ;
  651                   ;
  652                   ; ------------------- RANDOM TRK/SEC READ/WRITE SECTORS TEST -------------
  653                   ; This routine will read and write back to randomly selected tracks and 
  654                   ; sectors on a disk. Both sides, if a 2 sided disk.
  655                   ;
  656 03FC              RAND_SEC_TEST:
  657 03FC  21 299D     	LD	HL,RAND_TST_MSG		;Say R/W test
  658 03FF  CD 1933     	CALL	PMSG
  659 0402  CD 1950     	CALL	ZCRLF			;CR,LF at start. 
  660 0405  AF          	XOR	A,A			;Setup for the BIOS below
  661 0406  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  662 0409  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  663 040C  3C          	INC	A
  664 040D  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  665 0410  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  666 0413  CD 0E2D     	CALL	HOME		
  667 0416  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  668                   
  669 0419  CD 17F6     	CALL	CHECK_WP		;See if disk is write protected
  670 041C  C2 0273     	JP	NZ,END_CMD		;Abort
  671                   ;
  672 041F              RAND_LOOP1:
  673 041F  CD 1950     	CALL	ZCRLF
  674 0422  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  675 0425  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  676                   
  677 0428  21 5000     	LD	HL,FBUFFER		;Place sector data here
  678 042B  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  679                   
  680 042E  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  681 0431  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  682                   	
  683 0434  CD 1272     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  684 0437  CD 1804     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  685                   
  686 043A  CD 103C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  687 043D  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  688                   
  689 0440  21 6000     	LD	HL,FBUFFER2		;Place new sector data here
  690 0443  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  691                   
  692 0446  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  693 0449  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  694                   
  695 044C  CD 1356     	CALL	CMP_BUFFERS		;Check for errors
  696 044F  28 09       	JR	Z,RAND_OK
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  13
VF      Z80

  697 0451  21 2920     	LD	HL,SEC_V_ERROR		;R/W Error found 
  698 0454  CD 1933     	CALL	PMSG
  699 0457  CD 1272     	CALL	SHOW_TSS_LOC		;At trk,sec,head
  700                   
  701 045A              RAND_OK:
  702 045A  CD 0496     	CALL	RANDOM			;Get a random sector#
  703 045D  DD 46 00    	LD	B,(IX+NSCTRS)
  704 0460  A0          	AND	A,B			;strip off extra bits
  705 0461  B7          	OR	A,A			;No sector 0
  706 0462  20 01       	JR	NZ,RAND_SEC_OK
  707 0464  3C          	INC	A
  708 0465              RAND_SEC_OK:	
  709 0465  FD 77 02    	LD	(IY+SCTR),A		;Store for SEC display and sector read routine
  710                   
  711 0468  CD 0496     	CALL	RANDOM			;Get a random track #
  712 046B  DD 46 01    	LD	B,(IX+NTRKS)
  713 046E  05          	DEC	B			;Tracks numbered 0,1,2...NTRKS-1
  714 046F  A0          	AND	A,B			;strip off extra bits
  715 0470  FD 77 00    	LD	(IY+TRK),A		;Store for SEC display and sector read routine
  716                   
  717 0473  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
  718 0477  28 0B       	JR	Z,SECTRK_DONE4		;If 1 sided then skip sides swap
  719                   
  720 0479  CD 0496     	CALL	RANDOM			;Get a random SIDE 
  721 047C  E6 02       	AND	02H			;Isolate the SIDE bit
  722 047E  FD 77 01    	LD	(IY+SIDE),A		;Will be either 0 or 02H
  723 0481  CD 122F     	CALL	SET_SIDE
  724                   
  725 0484              SECTRK_DONE4:
  726 0484  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
  727 0487  28 96       	JR	Z,RAND_LOOP1		;Loop until abort 
  728 0489  3A 392F     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  729 048C  B7          	OR	A,A			;will switch it off
  730 048D  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  731 0490  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  732 0491  32 392F     	LD	(CRTDISP),A
  733 0494  18 89       	JR	RAND_LOOP1		;try again
  734                   ;
  735                   ; Simple random number generator
  736 0496  ED 5F       RANDOM:	LD	A,R			;Seed will be differentd each time
  737 0498  47          	LD	B,A		
  738 0499  87          	ADD	A,A
  739 049A  87          	ADD	A,A
  740 049B  80          	ADD	A,B
  741 049C  CB 1F       	RR	A
  742 049E  C6 07       	ADD	A,7
  743 04A0  C9          	RET
  744                   ;
  745                   ;
  746                   ; ------------------- CONTINOUSLY READ SECTORS FROM ONE TRACK TEST -------------
  747                   ; This routine will read sectors continously from one track. Both sides, if a 
  748                   ; a 2 sided disk. Can be used with a scope to do a 'CATS EYES' hardware test.
  749                   ;
  750 04A1              TRACK_TEST:
  751 04A1  21 2943     	LD	HL,RDTST_MSG	;Say read test
  752 04A4  CD 1933     	CALL	PMSG
  753 04A7  AF          	XOR	A,A		;Setup for the BIOS below
  754 04A8  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  14
VF      Z80

  755 04AB  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  756 04AE  3C          	INC	A
  757 04AF  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  758 04B2  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  759 04B5  CD 0E2D     	CALL	HOME		
  760 04B8  C4 12D0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  761                   
  762 04BB  CD 1950     	CALL	ZCRLF
  763 04BE  21 26DA     	LD	HL,GET_TRACK_MSG ;get the required track
  764 04C1  CD 1933     	CALL	PMSG
  765 04C4  CD 1968     	CALL	GET_HEX		;get 2 digits
  766 04C7  DA 0273     	JP	C,END_CMD	;Abort if C returned
  767                   	
  768 04CA  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  769 04CD  B8          	CP	A,B
  770 04CE  38 08       	JR	C,GET_TSIDES	;Yes we are 
  771 04D0  21 2878     	LD	HL,TRACK_ERROR
  772 04D3  CD 1933     	CALL	PMSG
  773 04D6  18 C9       	JR	TRACK_TEST	;Try again
  774                   
  775 04D8              GET_TSIDES:
  776 04D8  FD 77 00    	LD	(IY+TRK),A	;Store requested track
  777                   
  778 04DB  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
  779 04DF  28 25       	JR	Z,TRACK_TEST2	;If 1 sided then skip side question
  780                   
  781 04E1  21 270E     	LD	HL,GET_SIDE_MSG ;get required track
  782 04E4  CD 1933     	CALL	PMSG
  783 04E7  CD 193E     	CALL	GETCMD		;get the input option
  784 04EA  FE 1B       	CP	A,ESC		;Abort if ESC character
  785 04EC  CA 0273     	JP	Z,END_CMD
  786 04EF  FE 42       	CP	A,'B'
  787 04F1  20 07       	JR	NZ,MUST_BE_TA
  788 04F3  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
  789 04F5  FD 77 01    	LD	(IY+SIDE),A
  790 04F8  18 0C       	JR	TRACK_TEST2
  791 04FA              MUST_BE_TA:
  792 04FA  FE 41       	CP	A,'A'
  793 04FC  28 08       	JR	Z,TRACK_TEST2	;Already on A
  794 04FE  21 2737     	LD	HL,SIDE_ERROR	;Not 'A' or 'B' must be error
  795 0501  CD 1933     	CALL	PMSG
  796 0504  18 9B       	JR	TRACK_TEST	;Try again
  797                   
  798 0506              TRACK_TEST2:
  799 0506  CD 1950     	CALL	ZCRLF
  800 0509  CD 122F     	CALL	SET_SIDE		;Update the side hardware (if required)	
  801 050C  CD 0E70     	CALL	SEEK_TRACK_V		;seek to the new track position	
  802 050F  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  803                   ;	
  804 0512              READ_LOOP2:
  805 0512  CD 1950     	CALL	ZCRLF
  806 0515  21 5000     	LD	HL,FBUFFER		;Place sector data here
  807 0518  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  808                   
  809 051B  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  810 051E  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  811                   	
  812 0521  CD 1272     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  15
VF      Z80

  813 0524  CD 1804     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  814                   
  815 0527  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  816 052A  FD 7E 02    	LD	A,(IY+SCTR)
  817 052D  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  818 052E  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  819 0531  20 05       	JR	NZ,SEC_DONE4
  820 0533  3E 01       	LD	A,1			;Cycle back to sector 1
  821 0535  FD 77 02    	LD	(IY+SCTR),A
  822                   
  823 0538              SEC_DONE4:
  824 0538  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
  825 053B  28 D5       	JR	Z,READ_LOOP2		;Loop until abort or all tracks done
  826 053D  3A 392F     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  827 0540  B7          	OR	A,A			;will switch it off
  828 0541  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  829 0544  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  830 0545  32 392F     	LD	(CRTDISP),A
  831 0548  18 C8       	JR	READ_LOOP2
  832                   ;
  833                   ;
  834                   ;
  835                   ;------------------------------------------------------------------------------
  836                   ;Read one whole track to RAM (5000H). This is used to see what the Format routine actully
  837                   ;placed on the disk and/or to see what track formats other computers used.
  838                   ;
  839                   ;
  840 054A              TRACK_DUMP:
  841 054A  21 2B61     	LD	HL,TRK_DUMP_MSG ;Say track dump msg
  842 054D  CD 1933     	CALL	PMSG
  843 0550  AF          	XOR	A,A		;Setup for the BIOS below
  844 0551  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  845 0554  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  846 0557  3C          	INC	A
  847 0558  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  848 055B  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  849 055E  CD 0E2D     	CALL	HOME		
  850 0561  C4 12D0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  851                   
  852 0564  CD 1950     	CALL	ZCRLF
  853 0567  21 26DA     	LD	HL,GET_TRACK_MSG ;get required track
  854 056A  CD 1933     	CALL	PMSG
  855 056D  CD 1968     	CALL	GET_HEX		;get 2 digits in [A]
  856 0570  DA 0273     	JP	C,END_CMD
  857 0573  CD 1950     	CALL	ZCRLF
  858                   	
  859 0576  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  860 0579  B8          	CP	A,B
  861 057A  38 08       	JR	C,GET_SIDES	;Yes we are 
  862 057C  21 2878     	LD	HL,TRACK_ERROR
  863 057F  CD 1933     	CALL	PMSG
  864 0582  18 C6       	JR	TRACK_DUMP	;Try again
  865 0584              GET_SIDES:
  866 0584  FD 77 00    	LD	(IY+TRK),A	;Store requested track
  867                   
  868 0587  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
  869 058B  28 25       	JR	Z,GET_TRK	;If 1 sided then skip side question
  870                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  16
VF      Z80

  871 058D  21 270E     	LD	HL,GET_SIDE_MSG ;get required track
  872 0590  CD 1933     	CALL	PMSG
  873 0593  CD 193E     	CALL	GETCMD		;get the input option
  874 0596  FE 1B       	CP	A,ESC		;Abort if ESC character
  875 0598  CA 0273     	JP	Z,END_CMD
  876 059B  FE 42       	CP	A,'B'
  877 059D  20 07       	JR	NZ,MUST_BE_A
  878 059F  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
  879 05A1  FD 77 01    	LD	(IY+SIDE),A
  880 05A4  18 0C       	JR	GET_TRK
  881 05A6              MUST_BE_A:
  882 05A6  FE 41       	CP	A,'A'
  883 05A8  28 08       	JR	Z,GET_TRK	;Already on A
  884 05AA  21 2737     	LD	HL,SIDE_ERROR
  885 05AD  CD 1933     	CALL	PMSG
  886 05B0  18 98       	JR	TRACK_DUMP	;Try again
  887                   
  888 05B2              GET_TRK:
  889 05B2  CD 1950     	CALL	ZCRLF
  890 05B5  CD 122F     	CALL	SET_SIDE	;Update the side hardware (if required)	
  891                   
  892 05B8  CD 0E70     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
  893 05BB  C4 12D0     	CALL	NZ,SHOW_ERRORS	;If any show error flags
  894                   ;
  895 05BE  21 5000     	LD	HL,FBUFFER	;Will build the complete sector image here (5000H)
  896 05C1  22 0040     	LD	(TADDR),HL	;Store the pointer here.
  897 05C4  DD 56 0D    	LD	D,(IX+TRK_SIZE+1) ;Need to find out how large the track is
  898 05C7  DD 5E 0C    	LD	E,(IX+TRK_SIZE)	;Number of bytes per track for this disk into [DE]
  899 05CA  7A          	LD	A,D		;check that it is not 0 (ie. data not filled in table)
  900 05CB  B7          	OR	A,A
  901 05CC  20 09       	JR	NZ,SIZE_OK
  902 05CE  21 2A26     	LD	HL,TRK_SIZE_ERR
  903 05D1  CD 1933     	CALL	PMSG
  904 05D4  C3 0273     	JP	END_CMD
  905 05D7              SIZE_OK:
  906 05D7  ED 53 393F  	LD	(TRACK_SIZE),DE ;Store for below also
  907                   
  908 05DB  06 00       	LD	B,0
  909 05DD  70          Z_LOOP:	LD	(HL),B		;Fill RAM with 0's before starting
  910 05DE  23          	INC	HL
  911 05DF  1B          	DEC	DE
  912 05E0  7B          	LD	A,E
  913 05E1  B7          	OR	A,A
  914 05E2  20 F9       	JR	NZ,Z_LOOP
  915 05E4  B2          	OR	A,D
  916 05E5  20 F6       	JR	NZ,Z_LOOP	;Have we done DE bytes yet
  917                   	
  918 05E7  21 5000     	LD	HL,FBUFFER	;Start again
  919 05EA  22 0040     	LD	(TADDR),HL
  920 05ED  ED 5B 393F  	LD	DE,(TRACK_SIZE)	;Number of bytes per track 
  921                   				
  922 05F1  CD 1009     	CALL	READ_TRACK	;<<<<<< Read one whole track
  923 05F4  C4 12D0     	CALL	NZ,SHOW_ERRORS	;If any, show error flags
  924                   	
  925 05F7  CD 12C1     	CALL	SHOW_TS_LOC
  926                   	
  927 05FA  21 2786     	LD	HL,TRACK_CONTENTS
  928 05FD  CD 1933     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  17
VF      Z80

  929 0600  2E 10       	LD	L,PAGE_SIZE	;20 lines per page
  930 0602  ED 5B 393F  	LD	DE,(TRACK_SIZE)	;to count down 
  931 0606  01 0000     	LD	BC,0		;to count up
  932 0609  D9          	EXX
  933 060A  21 5000     	LD	HL,FBUFFER	;will use alt reg HL' for data pointer
  934 060D  D9          	EXX
  935 060E  D9          RAMDUMP:EXX
  936 060F  7E          	LD	A,(HL)
  937 0610  CD 19B9     	CALL	PACC
  938 0613  23          	INC	HL
  939 0614  D9          	EXX
  940 0615  03          	INC	BC
  941 0616  79          	LD	A,C
  942 0617  E6 1F       	AND	A,00011111B	;32 characters /line
  943 0619  20 1A       	JR	NZ,NOCRX
  944 061B  CD 1950     	CALL	ZCRLF
  945 061E  2D          	DEC	L
  946 061F  20 14       	JR	NZ,NOCRX
  947 0621  E5          	PUSH	HL
  948 0622  21 279B     	LD	HL,MORE_MSG
  949 0625  CD 1933     	CALL	PMSG
  950 0628  CD 193E     	CALL	GETCMD		;Ask if we wish to continue
  951 062B  E1          	POP	HL
  952 062C  FE 59       	CP	A,'Y'
  953 062E  20 0D       	JR	NZ,DONECR
  954 0630  CD 1950     	CALL	ZCRLF
  955 0633  2E 10       	LD	L,PAGE_SIZE
  956 0635  1B          NOCRX:	DEC	DE
  957 0636  7B          	LD	A,E
  958 0637  B7          	OR	A,A
  959 0638  20 D4       	JR	NZ,RAMDUMP
  960 063A  B2          	OR	A,D
  961 063B  20 D1       	JR	NZ,RAMDUMP	;Have we sent DE bytes yet
  962 063D  D9          DONECR:	EXX			;We are done
  963 063E  CD 1266     	CALL	FRCINT		;Need to clear the 1791/5 because we may have 
  964                   ;				;overrun reading the track
  965 0641  C3 0273     	JP	END_CMD		;All done back to main menu
  966                   ;
  967                   ;
  968                   ;
  969                   ;**************** LOAD SECTORS FROM DISK TO RAM ROUTINE ********
  970                   ;Note sectors from only one side.
  971                   
  972 0644              LOAD_SECTORS:
  973 0644  21 2B94     	LD	HL,LOAD_MSG	;Load msg
  974 0647  CD 1933     	CALl	PMSG
  975 064A  AF          	XOR	A,A		;Setup for the BIOS below
  976 064B  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  977 064E  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  978 0651  3C          	INC	A
  979 0652  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  980 0655  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  981 0658  CD 0E2D     	CALL	HOME		
  982 065B  C4 12D0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  983                   
  984 065E  CD 1950     	CALL	ZCRLF
  985 0661  21 26DA     	LD	HL,GET_TRACK_MSG ;get required track
  986 0664  CD 1933     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  18
VF      Z80

  987 0667  CD 1968     	CALL	GET_HEX		;get 2 digits
  988 066A  DA 0273     	JP	C,END_CMD
  989                   
  990 066D  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  991 0670  B8          	CP	A,B
  992 0671  38 09       	JR	C,LGET_SIDES	;Yes we are 
  993 0673  21 2878     	LD	HL,TRACK_ERROR
  994 0676  CD 1933     	CALL	PMSG
  995 0679  C3 0644     	JP	LOAD_SECTORS	;Try again
  996 067C              LGET_SIDES:
  997 067C  FD 77 00    	LD	(IY+TRK),A	;Store requested track for below
  998                   
  999 067F  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 1000 0683  28 29       	JR	Z,GET_START_SEC	;If 1 sided then skip side question
 1001                   
 1002 0685  CD 1950     	CALL	ZCRLF
 1003 0688  21 270E     	LD	HL,GET_SIDE_MSG ;get required track
 1004 068B  CD 1933     	CALL	PMSG
 1005 068E  CD 193E     	CALL	GETCMD		;get the input option
 1006 0691  FE 1B       	CP	A,ESC		;Abort if ESC character
 1007 0693  CA 0273     	JP	Z,END_CMD
 1008 0696  FE 42       	CP	A,'B'
 1009 0698  20 07       	JR	NZ,LMUST_BE_A
 1010 069A  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
 1011 069C  FD 77 01    	LD	(IY+SIDE),A
 1012 069F  18 0D       	JR	GET_START_SEC
 1013                   
 1014 06A1              LMUST_BE_A:
 1015 06A1  FE 41       	CP	A,'A'
 1016 06A3  28 09       	JR	Z,GET_START_SEC	;Already on A
 1017 06A5  21 2737     	LD	HL,SIDE_ERROR
 1018 06A8  CD 1933     	CALL	PMSG
 1019 06AB  C3 0644     	JP	LOAD_SECTORS	;Try again
 1020                   
 1021 06AE              GET_START_SEC:
 1022 06AE  21 2751     	LD	HL,GET_SEC_MSG	;Get starting sector
 1023 06B1  CD 1933     	CALL	PMSG
 1024 06B4  CD 1968     	CALL	GET_HEX		;get 2 digits
 1025 06B7  DA 0273     	JP	C,END_CMD
 1026 06BA  CD 1950     	CALL	ZCRLF
 1027 06BD  DD 46 00    	LD	B,(IX+NSCTRS)	;Are we within disk range
 1028 06C0  B8          	CP	A,B
 1029 06C1  38 09       	JR	C,GSTART1	;Yes we are 
 1030 06C3  21 27BD     GSTART0:LD	HL,SEC_ERROR
 1031 06C6  CD 1933     	CALL	PMSG
 1032 06C9  C3 0644     	JP	LOAD_SECTORS	;Try again
 1033 06CC  B7          GSTART1:OR	A,A		;Sectors numbered 1,2,3... 
 1034 06CD  28 F4       	JR	Z,GSTART0
 1035                   
 1036 06CF  FD 77 02    	LD	(IY+SCTR),A	;Store start sector
 1037                   
 1038 06D2  21 2A69     	LD	HL,SEC_COUNT_MSG   ;Get no. of sectors to load
 1039 06D5  CD 1933     	CALL	PMSG
 1040 06D8  CD 1968     	CALL	GET_HEX		;get 2 digits
 1041 06DB  D2 06E7     	JP	NC,GSTART2
 1042 06DE              GSTART3:
 1043 06DE  21 2055     	LD	HL,SEC_COUNT_ERR
 1044 06E1  CD 1933     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  19
VF      Z80

 1045 06E4  C3 0273     	JP	END_CMD
 1046 06E7  B7          GSTART2:OR	A,A		;cannot have 0 sectors
 1047 06E8  28 F4       	JR	Z,GSTART3
 1048                   	
 1049 06EA  32 3941     	LD	(SEC_COUNT),A	;store count of sectors
 1050                   	
 1051 06ED  21 2A94     	LD	HL,GET_DMA_MSG  ;Get DMA Aaddress
 1052 06F0  CD 1933     	CALL	PMSG
 1053 06F3  CD 199F     	CALL	GET_HEX4	;get 4 digits
 1054 06F6  D2 0702     	JP	NC,GSTART4
 1055 06F9  21 206A     	LD	HL,RAM_ERROR
 1056 06FC  CD 1933     	CALL	PMSG
 1057 06FF  C3 0273     	JP	END_CMD
 1058 0702              GSTART4:
 1059 0702  22 0040     	LD	(TADDR),HL	;Store the DMA address
 1060 0705  CD 122F     	CALL	SET_SIDE	;Update the side hardware (if required)	
 1061 0708  CD 1950     	CALL	ZCRLF
 1062                   
 1063 070B              MORE_LOAD:
 1064 070B  CD 0E70     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
 1065 070E  C4 12D0     	CALL	NZ,SHOW_ERRORS	;If any show error flags
 1066                   ;	
 1067 0711  21 2B11     	LD	HL,LOADING_MSG
 1068 0714  CD 1933     	CALL	PMSG
 1069 0717  CD 1272     	CALL	SHOW_TSS_LOC
 1070 071A  21 2B21     	LD	HL,LOADING1_MSG
 1071 071D  CD 1933     	CALL	PMSG
 1072 0720  2A 0040     	LD	HL,(TADDR)
 1073 0723  7C          	LD	A,H
 1074 0724  CD 19B9     	CALL	PACC
 1075 0727  7D          	LD	A,L
 1076 0728  CD 19B9     	CALL	PACC
 1077 072B  21 2545     	LD	HL,H_MSG		;H. at end of message
 1078 072E  CD 1933     	CALL	PMSG
 1079                   
 1080 0731  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
 1081 0734  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1082                   ;
 1083 0737  2A 3942     	LD	HL,(DMA_NEXT)		;Update the next RAM location
 1084 073A  22 0040     	LD	(TADDR),HL
 1085                   
 1086 073D  3A 3941     	LD	A,(SEC_COUNT)
 1087 0740  3D          	DEC	A
 1088 0741  28 35       	JR	Z,DONE_LOAD_OK
 1089 0743  32 3941     	LD	(SEC_COUNT),A		;Store for next time
 1090                   
 1091 0746  FD 34 02    	INC	(IY+SCTR)
 1092 0749  FD 7E 02    	LD	A,(IY+SCTR)
 1093 074C  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1094 074D  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1095 0750  20 10       	JR	NZ,LSECTRK_OK
 1096                   
 1097 0752  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1098 0754  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1099                   
 1100 0757  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
 1101 075A  FD 7E 00    	LD	A,(IY+TRK)
 1102 075D  DD BE 01    	CP	A,(IX+NTRKS)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  20
VF      Z80

 1103 0760  28 1F       	JR	Z,ERROR_LOAD		;Ran out of tracks
 1104                   ;
 1105 0762              LSECTRK_OK:
 1106 0762  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1107 0765  20 03       	JR	NZ,DONE_LR
 1108 0767  C3 070B     	JP	MORE_LOAD		;Loop until abort or all sectors are done
 1109 076A  3A 392F     DONE_LR:LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1110 076D  B7          	OR	A,A			;will switch it off
 1111 076E  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
 1112 0771  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1113 0772  32 392F     	LD	(CRTDISP),A
 1114 0775  C3 070B     	JP	MORE_LOAD
 1115                   ;
 1116 0778              DONE_LOAD_OK:
 1117 0778  21 2B4A     	LD	HL,LOAD_DONE_MSG
 1118 077B  CD 1933     	CALL	PMSG			
 1119 077E  C3 0273     	JP	END_CMD
 1120                   ;
 1121 0781              ERROR_LOAD:
 1122 0781  21 2B2D     	LD	HL,ERR_TK_MSG
 1123 0784  CD 1933     	CALL	PMSG
 1124 0787  C3 0273     	JP	END_CMD
 1125                   ;
 1126                   ;
 1127                   ;
 1128                   ;;**************** DUMP SECTORS FROM RAM TO DISK ROUTINE ********
 1129                   ;
 1130 078A              DUMP_SECTORS:
 1131 078A  21 2BB6     	LD	HL,DUMP_MSG	;Load msg
 1132 078D  CD 1933     	CALl	PMSG
 1133 0790  AF          	XOR	A,A		;Setup for the BIOS below
 1134 0791  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
 1135 0794  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
 1136 0797  3C          	INC	A
 1137 0798  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
 1138 079B  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
 1139 079E  CD 0E2D     	CALL	HOME		
 1140 07A1  C4 12D0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
 1141                   
 1142 07A4  CD 17F6     	CALL	CHECK_WP	;See if disk is write protected
 1143 07A7  C2 0273     	JP	NZ,END_CMD	
 1144                   
 1145 07AA              WR_T_OK:
 1146 07AA  CD 1950     	CALL	ZCRLF
 1147 07AD  21 26DA     	LD	HL,GET_TRACK_MSG ;get required track
 1148 07B0  CD 1933     	CALL	PMSG
 1149 07B3  CD 1968     	CALL	GET_HEX		;get 2 digits
 1150 07B6  DA 0273     	JP	C,END_CMD
 1151 07B9  CD 1950     	CALL	ZCRLF
 1152 07BC  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
 1153 07BF  B8          	CP	A,B
 1154 07C0  38 09       	JR	C,DGET_SIDES	;Yes we are 
 1155 07C2  21 2878     	LD	HL,TRACK_ERROR
 1156 07C5  CD 1933     	CALL	PMSG
 1157 07C8  C3 078A     	JP	DUMP_SECTORS	;Try again
 1158 07CB              DGET_SIDES:
 1159 07CB  FD 77 00    	LD	(IY+TRK),A	;Store requested track for below
 1160                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  21
VF      Z80

 1161 07CE  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
 1162 07D2  28 29       	JR	Z,GET_START_DSEC	;If 1 sided then skip side question
 1163 07D4  CD 1950     	CALL	ZCRLF
 1164                   
 1165 07D7  21 270E     	LD	HL,GET_SIDE_MSG ;get required track
 1166 07DA  CD 1933     	CALL	PMSG
 1167 07DD  CD 193E     	CALL	GETCMD		;get the input option
 1168 07E0  FE 1B       	CP	A,ESC		;Abort if ESC character
 1169 07E2  CA 0273     	JP	Z,END_CMD
 1170 07E5  FE 42       	CP	A,'B'
 1171 07E7  20 07       	JR	NZ,DMUST_BE_A
 1172 07E9  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
 1173 07EB  FD 77 01    	LD	(IY+SIDE),A
 1174 07EE  18 0D       	JR	GET_START_DSEC
 1175 07F0              DMUST_BE_A:
 1176 07F0  FE 41       	CP	A,'A'
 1177 07F2  28 09       	JR	Z,GET_START_DSEC	;Already on A
 1178 07F4  21 2737     	LD	HL,SIDE_ERROR
 1179 07F7  CD 1933     	CALL	PMSG
 1180 07FA  C3 078A     	JP	DUMP_SECTORS		;Try again
 1181                   
 1182 07FD              GET_START_DSEC:
 1183 07FD  21 2751     	LD	HL,GET_SEC_MSG	;Get starting sector
 1184 0800  CD 1933     	CALL	PMSG
 1185 0803  CD 1968     	CALL	GET_HEX		;get 2 digits
 1186 0806  DA 0273     	JP	C,END_CMD
 1187 0809  CD 1950     	CALL	ZCRLF
 1188 080C  DD 46 00    	LD	B,(IX+NSCTRS)	;Are we within disk range
 1189 080F  B8          	CP	A,B
 1190 0810  38 09       	JR	C,DSTART1	;Yes we are 
 1191 0812  21 27BD     DSTART0:LD	HL,SEC_ERROR
 1192 0815  CD 1933     	CALL	PMSG
 1193 0818  C3 078A     	JP	DUMP_SECTORS	;Try again
 1194 081B  B7          DSTART1:OR	A,A		;Sectors numbered 1,2,3... 
 1195 081C  28 F4       	JR	Z,DSTART0
 1196                   
 1197 081E  FD 77 02    	LD	(IY+SCTR),A	;Store start sector
 1198                   
 1199 0821  21 2A69     	LD	HL,SEC_COUNT_MSG   ;Get no. of sectors to write
 1200 0824  CD 1933     	CALL	PMSG
 1201 0827  CD 1968     	CALL	GET_HEX		;get 2 digits
 1202 082A  D2 0836     	JP	NC,DSTART2
 1203 082D              DSTART3:
 1204 082D  21 2055     	LD	HL,SEC_COUNT_ERR
 1205 0830  CD 1933     	CALL	PMSG
 1206 0833  C3 0273     	JP	END_CMD
 1207 0836  B7          DSTART2:OR	A,A		;cannot have 0 sectors
 1208 0837  28 F4       	JR	Z,DSTART3
 1209                   	
 1210 0839  32 3941     	LD	(SEC_COUNT),A	;store count of sectors
 1211                   	
 1212 083C  21 2AD4     	LD	HL,GET_DMAD_MSG  ;Get DMA Aaddress
 1213 083F  CD 1933     	CALL	PMSG
 1214 0842  CD 199F     	CALL	GET_HEX4	;get 4 digits
 1215 0845  D2 0851     	JP	NC,DSTART4
 1216 0848  21 206A     	LD	HL,RAM_ERROR
 1217 084B  CD 1933     	CALL	PMSG
 1218 084E  C3 0273     	JP	END_CMD
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  22
VF      Z80

 1219 0851              DSTART4:
 1220 0851  22 0040     	LD	(TADDR),HL	;Store the DMA address
 1221 0854  CD 122F     	CALL	SET_SIDE	;Update the side hardware (if required)	
 1222 0857              MORE_DUMP:
 1223 0857  CD 0E70     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
 1224 085A  C4 12D0     	CALL	NZ,SHOW_ERRORS	;If any show error flags
 1225                   ;	
 1226 085D  21 2BED     	LD	HL,DUMPING_MSG
 1227 0860  CD 1933     	CALL	PMSG
 1228 0863  CD 1272     	CALL	SHOW_TSS_LOC
 1229 0866  21 2BFD     	LD	HL,DUMPING1_MSG
 1230 0869  CD 1933     	CALL	PMSG
 1231 086C  2A 0040     	LD	HL,(TADDR)
 1232 086F  7C          	LD	A,H
 1233 0870  CD 19B9     	CALL	PACC
 1234 0873  7D          	LD	A,L
 1235 0874  CD 19B9     	CALL	PACC
 1236 0877  21 2545     	LD	HL,H_MSG		;H. at end of message
 1237 087A  CD 1933     	CALL	PMSG
 1238                   
 1239 087D  CD 103C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
 1240 0880  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1241                   ;
 1242 0883  2A 3942     	LD	HL,(DMA_NEXT)		;Update the next RAM location
 1243 0886  22 0040     	LD	(TADDR),HL
 1244                   
 1245 0889  3A 3941     	LD	A,(SEC_COUNT)
 1246 088C  3D          	DEC	A
 1247 088D  28 35       	JR	Z,DONE_DUMP_OK
 1248 088F  32 3941     	LD	(SEC_COUNT),A		;Store for next time
 1249                   
 1250 0892  FD 34 02    	INC	(IY+SCTR)		;Get next sector
 1251 0895  FD 7E 02    	LD	A,(IY+SCTR)
 1252 0898  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1253 0899  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1254 089C  20 10       	JR	NZ,DSECTRK_OK
 1255                   
 1256 089E  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1257 08A0  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1258                   
 1259 08A3  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
 1260 08A6  FD 7E 00    	LD	A,(IY+TRK)			
 1261 08A9  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
 1262 08AC  28 1F       	JR	Z,ERROR_DUMP		;Ran out of tracks
 1263                   ;	
 1264 08AE              DSECTRK_OK:
 1265 08AE  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1266 08B1  20 03       	JR	NZ,DONE_LX
 1267 08B3  C3 0857     	JP	MORE_DUMP		;Loop until abort or all sectors are done
 1268 08B6  3A 392F     DONE_LX:LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1269 08B9  B7          	OR	A,A			;will switch it off
 1270 08BA  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
 1271 08BD  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1272 08BE  32 392F     	LD	(CRTDISP),A
 1273 08C1  C3 0857     	JP	MORE_DUMP
 1274                   ;
 1275 08C4              DONE_DUMP_OK:
 1276 08C4  21 2C0B     	LD	HL,DUMP_DONE_MSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  23
VF      Z80

 1277 08C7  CD 1933     	CALL	PMSG			
 1278 08CA  C3 0273     	JP	END_CMD
 1279                   ;
 1280 08CD              ERROR_DUMP:
 1281 08CD  21 2B2D     	LD	HL,ERR_TK_MSG
 1282 08D0  CD 1933     	CALL	PMSG
 1283 08D3  C3 0273     	JP	END_CMD
 1284                   ;
 1285                   ;
 1286                   ;**************** CURRENT DISK, FORMAT ROUTINE ***************************
 1287                   ;
 1288 08D6              FORMAT_DISK:
 1289 08D6  DD 22 392C  	LD	(IX_OLD_STORE),IX	;Save current IX in case of an abort
 1290                   
 1291 08DA  DD CB 02 6E 	BIT	5,(IX+HW_BYTE)		;See if current selected disk is 5" or 8"
 1292 08DE  20 0D       	JR	NZ,FORM_TABLE5
 1293 08E0  CD 1652     	CALL	GET_TABLE_8		;Setup IX to (new) table parameters for 8"
 1294 08E3  28 15       	JR	Z,TABLE_OK
 1295 08E5  21 258A     	LD	HL,BADCMD
 1296 08E8  CD 1933     	CALL	PMSG
 1297 08EB  18 30       	JR	FABORT
 1298 08ED              FORM_TABLE5:
 1299 08ED  CD 168D     	CALL	GET_TABLE_5		;Setup IX to (new) table parameters for 5"
 1300 08F0  28 08       	JR	Z,TABLE_OK
 1301 08F2  21 258A     	LD	HL,BADCMD
 1302 08F5  CD 1933     	CALL	PMSG
 1303 08F8  18 23       	JR	FABORT
 1304 08FA              TABLE_OK:	
 1305 08FA  21 256E     	LD	HL,FORMATTING_MSG
 1306 08FD  CD 1933     	CALL	PMSG
 1307 0900  DD E5       	PUSH	IX			;IX->HL
 1308 0902  E1          	POP	HL
 1309 0903  11 0013     	LD	DE,TITLE		;add in offset
 1310 0906  19          	ADD	HL,DE			;HL now points to the title entry of the selected disk
 1311 0907  CD 1933     	CALL	PMSG
 1312                   
 1313 090A  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1314 090D  CD 0E2D     	CALL	HOME			;Restore disk head
 1315 0910  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1316                   	
 1317 0913  CD 17F6     	CALL	CHECK_WP		;See if disk is write protected
 1318 0916  CA 0924     	JP	Z,FORMWP_OK		;Go to the core test routine
 1319 0919  DD 2A 392C  	LD	IX,(IX_OLD_STORE)	;Nothing altered go back to main menu
 1320 091D  CD 11D6     FABORT:	CALL	START_DRIVE_1		;RE-select to old drive disk format, Side A
 1321 0920  3A 3936     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1322 0923  C9          	RET				;return back to MENU
 1323                   	
 1324 0924              FORMWP_OK:
 1325 0924  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here
 1326 0927  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1327                   
 1328 092A  3E 01       	LD	A,1
 1329 092C  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1330 092F  AF          	XOR	A,A			;Setup for the BIOS below
 1331 0930  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1332 0933  CD 122F     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1333 0936  AF          	XOR	A,A
 1334                   					;Fall through with 0 in [A] for trk 0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  24
VF      Z80

 1335 0937              NEXT_TRK:			
 1336 0937  FD 77 00    	LD	(IY+TRK),A		;store track info for eack loop
 1337                   	
 1338 093A  CD 13B3     	CALL	BUILD_TRACK		;Build a complete track image in RAM
 1339                   
 1340 093D  CD 185A     	CALL	FORMAT_INFO		;Display the track if detailed info is on
 1341                   	
 1342 0940  FD 7E 01    	LD	A,(IY+SIDE)	
 1343 0943  FE 02       	CP	A,02H			;If B side no seek necessary
 1344 0945  28 09       	JR	Z,SKIP_SEEK
 1345                   
 1346 0947  FD 7E 00    	LD	A,(IY+TRK)		;Get new track#
 1347 094A  CD 0E81     	CALL	SEEK_TRACK_NV		;Seek with verify command to 1791/5
 1348 094D  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1349                   
 1350 0950              SKIP_SEEK:
 1351 0950  11 5000     	LD	DE,FBUFFER		;Move Start of track image into DE
 1352 0953  D5          	PUSH	DE			;save it
 1353 0954  2A 3953     	LD	HL,(E_GAP4_MARK)	;End+1 of track header
 1354 0957  2B          	DEC	HL
 1355 0958  ED 52       	SBC	HL,DE
 1356 095A  EB          	EX	DE,HL			;Count now in DE
 1357                   
 1358 095B  21 393F     	LD	HL,TRACK_SIZE		;Side step, need to store track byte count
 1359 095E  72          	LD	(HL),D			;for display at end of format etc.
 1360 095F  23          	INC	HL
 1361 0960  73          	LD	(HL),E
 1362 0961  E1          	POP	HL			;DE on stack to --> HL
 1363                   
 1364 0962  CD 1156     	CALL	WRITE_TRACK		;<<<< Write track with hardware >>>>>
 1365 0965  C4 12D0     	CALL	NZ,SHOW_ERRORS
 1366                   
 1367 0968  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1368 096B  20 58       	JR	NZ,CHECK_ABORT
 1369 096D              AGAIN1:
 1370 096D  DD 7E 02    	LD	A,(IX+HW_BYTE)		;Check if side B is req
 1371 0970  CB 67       	BIT	4,A
 1372 0972  28 1C       	JR	Z,AGAIN			;SS drive go to next track
 1373                   
 1374 0974  FD 7E 01    	LD	A,(IY+SIDE)
 1375 0977  B7          	OR	A,A			;If 0 we have done A side, now do B
 1376 0978  28 09       	JR	Z,FORM_B_SIDE		;switch over to B side
 1377 097A  AF          	XOR	A,A
 1378 097B  FD 77 01    	LD	(IY+SIDE),A
 1379 097E  CD 122F     	CALL	SET_SIDE		;update the hardware
 1380 0981  18 0D       	JR	AGAIN			;Need track increase now we are back on side A
 1381 0983              FORM_B_SIDE:
 1382 0983  3E 02       	LD	A,02H			;Flag for B side
 1383 0985  FD 77 01    	LD	(IY+SIDE),A	
 1384 0988  CD 122F     	CALL	SET_SIDE		;Update the hardware
 1385 098B  FD 7E 00    	LD	A,(IY+TRK)	
 1386 098E  18 A7       	JR	NEXT_TRK		;Do everything again with this track on B side
 1387                   
 1388 0990  FD 34 00    AGAIN:	INC	(IY+TRK)		;What was the last track number just done
 1389 0993  FD 7E 00    	LD	A,(IY+TRK)
 1390 0996  DD BE 01    	CP	A,(IX+NTRKS)		;Check if we are on the last tarck
 1391 0999  20 9C       	JR	NZ,NEXT_TRK		;If not then back to updating tracks and doing it again.
 1392                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  25
VF      Z80

 1393 099B  21 25D2     	LD	HL,END_FORM_MSG
 1394 099E  CD 1933     	CALL	PMSG
 1395 09A1  21 393F     	LD	HL,TRACK_SIZE
 1396 09A4  7E          	LD	A,(HL)			;Fill in total byte count of a track
 1397 09A5  CD 19B9     	CALL	PACC			;Is useful for building tables and track disply
 1398 09A8  23          	INC	HL			;was obtained from WRITE_1_TRACK below
 1399 09A9  7E          	LD	A,(HL)
 1400 09AA  CD 19B9     	CALL	PACC
 1401 09AD  21 2606     	LD	HL,END_FORM1_MSG	;end of formatting
 1402 09B0  CD 1933     	CALL	PMSG
 1403                   
 1404 09B3  DD 7E 0E    	LD	A,(IX+SPECIAL_FLAG)	;Is any post formatting mods required?
 1405 09B6  B7          	OR	A,A
 1406 09B7  28 05       	JR	Z,NO_MODS
 1407 09B9  FE 01       	CP	A,CPM86_FLAG
 1408 09BB  CC 1592     	CALL	Z,INIT_CPM86		;Must modify first 5" disk sector for CPM86
 1409 09BE              NO_MODS:
 1410 09BE  CD 11D6     	CALL	START_DRIVE_1		;Select disk with new IX table format, Side A
 1411 09C1  3A 3936     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1412 09C4  C9          	RET				;return back to MENU
 1413                   ;
 1414 09C5              CHECK_ABORT:
 1415 09C5  3A 392F     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1416 09C8  B7          	OR	A,A			;will switch it off
 1417 09C9  CA 09D2     	JP	Z,FORM_ABORT		;If Z do not list the sector contents.
 1418 09CC  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1419 09CD  32 392F     	LD	(CRTDISP),A
 1420 09D0  18 9B       	JR	AGAIN1
 1421                   ;
 1422 09D2              FORM_ABORT:
 1423 09D2  21 25A7     	LD	HL,FORM_ERRMSG		;Say error formatting disk
 1424 09D5  CD 1933     	CALL	PMSG	
 1425 09D8  31 3A55     	LD	SP,STACK
 1426 09DB  C3 0125     	JP	START			;Must abort everything because disk status is unknown
 1427                   ;
 1428                   ;
 1429                   ;
 1430                   ; QUICK 8" IBM SSSD FORMAT of a blank disk in B: drive
 1431                   ; This is for quickly making CPM 8" disks. Not really a disgnostic
 1432                   ; This assumes an 8" disk is in B: drive.
 1433                   ;
 1434 09DE              IBMFORM_DISK:
 1435 09DE  AF          	XOR	A,A
 1436 09DF  32 392E     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1437                   
 1438 09E2  DD 22 392C  	LD	(IX_OLD_STORE),IX	;Store current disk paramater table
 1439 09E6  3A 0046     	LD	A,(DRIVE_1)		;Because we may not already be on B:
 1440 09E9  32 3946     	LD	(DRIVE_STORE),A
 1441                   
 1442 09EC  21 2EDD     	LD	HL,IBM_FORMAT
 1443 09EF  CD 1933     	CALL	PMSG
 1444                   
 1445 09F2  DD 21 32FC  	LD	IX,STDSDT		;Force current drive to 8" IBM SSSD
 1446 09F6  3E 02       	LD	A,2
 1447 09F8  32 0046     	LD	(DRIVE_1),A		;Force B: drive hardware selection
 1448 09FB  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1449 09FE  CD 0E2D     	CALL	HOME			;Restore disk head
 1450 0A01  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  26
VF      Z80

 1451                   	
 1452 0A04  CD 17F6     	CALL	CHECK_WP		;See if disk is write protected
 1453 0A07  CA 0A1B     	JP	Z,IBMFORM_OK1		;Go to the core routine
 1454                   
 1455 0A0A  DD 2A 392C  	LD	IX,(IX_OLD_STORE)	;Nothing altered go back to main menu
 1456 0A0E  3A 3946     	LD	A,(DRIVE_STORE)
 1457 0A11  32 0046     	LD	(DRIVE_1),A		;Get back origional drive
 1458 0A14  CD 11D6     	CALL	START_DRIVE_1		;RE-select to old drive disk format, Side A
 1459 0A17  3A 3936     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1460 0A1A  C9          	RET				;return back to MENU
 1461                   
 1462 0A1B              IBMFORM_OK1:
 1463 0A1B  21 2F21     	LD	HL,IBM_FORMAT1		;Formatting started
 1464 0A1E  CD 1933     	CALL	PMSG
 1465 0A21              IBMFORM_OK:
 1466 0A21  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here
 1467 0A24  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1468                   
 1469 0A27  3E 01       	LD	A,1
 1470 0A29  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1471 0A2C  AF          	XOR	A,A			;Setup for the BIOS below
 1472 0A2D  FD 77 01    	LD	(IY+SIDE),A		;Side A 
 1473 0A30  CD 122F     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1474 0A33  AF          	XOR	A,A
 1475                   					;Fall through with 0 in [A] for trk 0
 1476 0A34              IBM_NEXT_TRK:			
 1477 0A34  FD 77 00    	LD	(IY+TRK),A		;store track info for eack loop
 1478 0A37  CD 13B3     	CALL	BUILD_TRACK		;Build a complete track image in RAM
 1479                   
 1480 0A3A  CD 0E81     	CALL	SEEK_TRACK_NV		;Seek with verify command to 1791/5
 1481 0A3D  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1482                   
 1483 0A40  21 308F     	LD	HL,FORM_TRK_MSG		;At track xx
 1484 0A43  CD 1933     	CALL	PMSG
 1485 0A46  FD 7E 00    	LD	A,(IY+TRK)
 1486 0A49  CD 19B9     	CALL	PACC
 1487                   
 1488 0A4C  11 5000     	LD	DE,FBUFFER		;Move Start of track image into DE
 1489 0A4F  D5          	PUSH	DE			;save it
 1490 0A50  2A 3953     	LD	HL,(E_GAP4_MARK)	;End+1 of track header
 1491 0A53  2B          	DEC	HL
 1492 0A54  ED 52       	SBC	HL,DE
 1493 0A56  EB          	EX	DE,HL			;Count now in DE
 1494 0A57  E1          	POP	HL			;DE on stack to --> HL
 1495                   	
 1496 0A58  CD 1156     	CALL	WRITE_TRACK		;<<<< Write track with hardware >>>>>
 1497 0A5B  C4 12D0     	CALL	NZ,SHOW_ERRORS
 1498                   
 1499 0A5E  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1500 0A61  C2 0B16     	JP	NZ,IBMF_ABORT
 1501                   
 1502 0A64  FD 34 00    	INC	(IY+TRK)		;what was the last track number just done
 1503 0A67  FD 7E 00    	LD	A,(IY+TRK)
 1504 0A6A  DD BE 01    	CP	A,(IX+NTRKS)		;Check if we are on the last tarck
 1505 0A6D  20 C5       	JR	NZ,IBM_NEXT_TRK		;If not then back to updating tracks and doing it again.
 1506                   ;
 1507 0A6F  21 2FA7     	LD	HL,COPY_SYSTRKS		;Do you wish to copy CPM from the system tracks of drive A:
 1508 0A72  CD 1933     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  27
VF      Z80

 1509 0A75  CD 193E     	CALL	GETCMD			;Ask if we wish to continue
 1510 0A78  FE 59       	CP	A,'Y'
 1511 0A7A  C2 0B06     	JP	NZ,IBMF_DONE1		;If not return
 1512 0A7D  21 301B     	LD	HL,COPYING_CPM
 1513 0A80  CD 1933     	CALL	PMSG
 1514 0A83  DD 7E 12    	LD	A,(IX+SYS_TRKS)
 1515 0A86  32 3944     	LD	(COPY_TRK_COUNT),A	;Count down 2 tracks
 1516                   
 1517 0A89  3E 01       	LD	A,1			;Second drive on A: set (DRIVE_2) to it
 1518 0A8B  32 0047     	LD	(DRIVE_2),A
 1519                   ;
 1520 0A8E              IBM_CPM_LOOP				;Now copy CPM from A: Drive to B: drive. IX is already 8" IBM
 1521 0A8E  CD 11DB     	CALL	START_DRIVE_2		;Select for A: drive in hardware, Side A
 1522 0A91  CD 0E2D     	CALL	HOME		
 1523 0A94  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1524                   
 1525 0A97  3A 3945     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1526 0A9A  FD 77 00    	LD	(IY+TRK),A
 1527                   
 1528 0A9D  CD 0E70     	CALL	SEEK_TRACK_V
 1529 0AA0  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1530                   
 1531 0AA3  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1532 0AA6  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1533 0AA9  1E 01       	LD	E,1			;Start with 1st sector 
 1534 0AAB  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1535                   ;
 1536 0AAE  CD 0F87     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1537 0AB1  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1538                   ;
 1539                   ;---					
 1540                   ;					;<<<<< WRITE TO Destination drive
 1541 0AB4  CD 11D6     	CALL	START_DRIVE_1		;Select for B: drive in hardware, Side A
 1542 0AB7  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1543 0ABA  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1544                   
 1545 0ABD  3A 3945     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1546 0AC0  FD 77 00    	LD	(IY+TRK),A
 1547                   
 1548 0AC3  CD 0E70     	CALL	SEEK_TRACK_V
 1549 0AC6  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1550                   
 1551 0AC9  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1552 0ACC  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1553 0ACF  1E 01       	LD	E,1			;Start with 1st sector 
 1554 0AD1  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1555                   ;
 1556 0AD4  CD 10D4     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1557 0AD7  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1558                   ;
 1559 0ADA  3A 3945     	LD	A,(COPY_TRK)		;bump up a track
 1560 0ADD  3C          	INC	A
 1561 0ADE  32 3945     	LD	(COPY_TRK),A
 1562 0AE1  3A 3944     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1563 0AE4  3D          	DEC	A
 1564 0AE5  32 3944     	LD	(COPY_TRK_COUNT),A	
 1565 0AE8  CA 0AF3     	JP	Z,IBMF_DONE2
 1566                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  28
VF      Z80

 1567 0AEB  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1568 0AEE  20 16       	JR	NZ,IBMF_DONE1		;Loop until abort or all tracks done
 1569 0AF0  C3 0A8E     	JP	IBM_CPM_LOOP
 1570                   ;
 1571 0AF3              IBMF_DONE2
 1572 0AF3  3A 392E     	LD	A,(ERRORS_FLAG)		;Were there errors
 1573 0AF6  B7          	OR	A,A
 1574 0AF7  20 1D       	JR	NZ,IBMF_ABORT
 1575 0AF9  21 3048     	LD	HL,END_FORM_MSG2
 1576 0AFC  CD 1933     	CALL	PMSG
 1577 0AFF  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1578 0B02  3A 3936     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1579 0B05  C9          	RET				;return back to MENU
 1580                   ;
 1581 0B06              IBMF_DONE1:
 1582 0B06  3A 392E     	LD	A,(ERRORS_FLAG)		;Were there errors
 1583 0B09  B7          	OR	A,A
 1584 0B0A  20 0A       	JR	NZ,IBMF_ABORT
 1585 0B0C  21 2F3C     	LD	HL,END_FORM_MSG1
 1586 0B0F  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1587 0B12  3A 3936     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1588 0B15  C9          	RET				;return back to MENU
 1589                   ;
 1590 0B16              IBMF_ABORT:
 1591 0B16  21 25A7     	LD	HL,FORM_ERRMSG		;Say error formatting disk
 1592 0B19  CD 1933     	CALL	PMSG	
 1593 0B1C  31 3A55     	LD	SP,STACK
 1594 0B1F  C3 0125     	JP	START			;Must abort everything because disk status is unknown
 1595                   ;
 1596                   ;
 1597                   ;
 1598                   ;
 1599                   ;***************** DISK TO DISK COPY *********************************
 1600                   ; Unlike much of this program, this module is somewhat hardware specific in that it assumes 
 1601                   ; the source and destination disks are identical and are using the SAME disk formats. 
 1602                   ; Normall they are 8" drives but it should be OK with two 5" drives as well. (5" was not tested)
 1603                   ; I decided not to use whole track R/W's because there is no CRC error checking of the data. 
 1604                   ; Uses the 1791/5 multi sector read command. Will do both sides if DS disk
 1605                   ; 
 1606 0B22              COPY_DISK:
 1607 0B22  AF          	XOR	A,A
 1608 0B23  32 392E     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1609                   
 1610 0B26  21 2CA2     	LD	HL,COPY_MSG		;Announce the disk copy msg
 1611 0B29  CD 1933     	CALL	PMSG
 1612 0B2C  AF          	XOR	A,A			;Setup for the BIOS below
 1613 0B2D  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1614 0B30  32 3945     	LD	(COPY_TRK),A
 1615 0B33  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1616 0B36  CD 11D6     	CALL	START_DRIVE_1		;Start "the current drive" hardware, Side A
 1617 0B39  CD 0E2D     	CALL	HOME		
 1618 0B3C  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1619 0B3F  C2 0C1E     	JP	NZ,DONE_COPY
 1620                   ;
 1621 0B42              GET_CDEST:				;<<< DESTINATION DRIVE
 1622 0B42  21 2CE9     	LD	HL,COPY2_MSG		;Destination disk 
 1623 0B45  CD 1933     	CALL	PMSG
 1624 0B48  CD 15FF     	CALL	SELECT_DR_2		;Get second drive, put it in (DRIVE_2)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  29
VF      Z80

 1625 0B4B  FE FF       	CP	A,0FFH		
 1626 0B4D  28 F3       	JR	Z,GET_CDEST		;Invalid drive, start over
 1627 0B4F  FE 1B       	CP	A,ESC
 1628 0B51  CA 0C1E     	JP	Z,DONE_COPY
 1629                   ;
 1630 0B54              FORMATS_OK:
 1631 0B54  CD 11DB     	CALL	START_DRIVE_2		;Select for second drive in hardware, Side A
 1632 0B57  CD 0E2D     	CALL	HOME		
 1633 0B5A  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1634 0B5D  C2 0C1E     	JP	NZ,DONE_COPY		;If errors abort
 1635                   	
 1636 0B60  CD 17F6     	CALL	CHECK_WP		;See if disk is write protected
 1637 0B63  C2 0C1E     	JP	NZ,DONE_COPY		;Abort if second drive is write protected
 1638                   ;
 1639 0B66              COPYWP_OK:
 1640 0B66  21 2D06     	LD	HL,HOW_MANY_TRKS
 1641 0B69  CD 1933     	CALL	PMSG
 1642 0B6C  CD 193E     	CALL	GETCMD
 1643 0B6F  FE 1B       	CP	A,ESC			;Abort if ESC character
 1644 0B71  CA 0C1E     	JP	Z,DONE_COPY
 1645 0B74  FE 53       	CP	A,'S'
 1646 0B76  20 04       	JR	NZ,NOT_S
 1647 0B78  3E 02       	LD	A,2
 1648 0B7A  18 11       	JR	GOT_TRK_CNT
 1649 0B7C  FE 41       NOT_S:	CP	A,'A'
 1650 0B7E  20 05       	JR	NZ,NOT_ALL
 1651 0B80  DD 7E 01    	LD	A,(IX+NTRKS)
 1652 0B83  18 08       	JR	GOT_TRK_CNT
 1653 0B85  21 2D3F     NOT_ALL:LD	HL,INVALID_TRK_CT	;Must be S or All
 1654 0B88  CD 1933     	CALL	PMSG
 1655 0B8B  18 D9       	JR	COPYWP_OK
 1656                   ;
 1657 0B8D              GOT_TRK_CNT:
 1658 0B8D  32 3944     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1659                   	
 1660 0B90              COPY_R_LOOP:				; <<<< READ FROM Source drive
 1661 0B90  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1662 0B93  CD 122F     	CALL	SET_SIDE		;Make sure drive is set for correct side
 1663 0B96  CD 0E2D     	CALL	HOME		
 1664 0B99  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1665                   
 1666 0B9C  3A 3945     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1667 0B9F  FD 77 00    	LD	(IY+TRK),A
 1668                   
 1669 0BA2  CD 0E70     	CALL	SEEK_TRACK_V		;Get appropiate track
 1670 0BA5  C4 12D0     	CALL	NZ,SHOW_ERRORS		;not clear why this is so. 
 1671                   	
 1672 0BA8  21 2D6D     	LD	HL,COPY_AT_TRK
 1673 0BAB  CD 1933     	CALL	PMSG
 1674 0BAE  CD 12C1     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1675                   
 1676 0BB1  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1677 0BB4  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1678 0BB7  1E 01       	LD	E,1			;Start with 1st sector 
 1679 0BB9  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1680                   ;
 1681 0BBC  CD 0F87     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1682 0BBF  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  30
VF      Z80

 1683                   ;
 1684                   ;---					
 1685                   ;					;<<<<< WRITE TO Destination drive
 1686 0BC2  CD 11DB     	CALL	START_DRIVE_2		;Start "the second drive" in hardware, Side A
 1687 0BC5  CD 122F     	CALL	SET_SIDE		;Update the side hardware 
 1688 0BC8  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1689 0BCB  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1690                   
 1691 0BCE  3A 3945     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1692 0BD1  FD 77 00    	LD	(IY+TRK),A
 1693                   
 1694 0BD4  CD 0E70     	CALL	SEEK_TRACK_V		;Get appropiate track
 1695 0BD7  C4 12D0     	CALL	NZ,SHOW_ERRORS		;not clear why this is so. 
 1696                   
 1697 0BDA  21 2D82     	LD	HL,WRITE_AT_TRK
 1698 0BDD  CD 1933     	CALL	PMSG
 1699 0BE0  CD 12C1     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1700                   
 1701 0BE3  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1702 0BE6  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1703 0BE9  1E 01       	LD	E,1			;Start with 1st sector 
 1704 0BEB  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1705                   ;
 1706 0BEE  CD 10D4     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1707 0BF1  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1708                   ;
 1709 0BF4  CD 1210     	CALL	SWAP_SIDES		;Sides swap check
 1710 0BF7  20 11       	JR	NZ,R_TRK_OK		;If B side (NZ), same track
 1711                   ;					;Else see if more tracks are required
 1712 0BF9  3A 3945     	LD	A,(COPY_TRK)		;bump up a track
 1713 0BFC  3C          	INC	A
 1714 0BFD  32 3945     	LD	(COPY_TRK),A
 1715 0C00  3A 3944     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1716 0C03  3D          	DEC	A
 1717 0C04  32 3944     	LD	(COPY_TRK_COUNT),A	
 1718 0C07  CA 0C12     	JP	Z,DONE_COPY2
 1719                   ;
 1720 0C0A              R_TRK_OK:
 1721 0C0A  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1722 0C0D  20 0F       	JR	NZ,DONE_COPY		;Loop until abort or all tracks done
 1723 0C0F  C3 0B90     	JP	COPY_R_LOOP
 1724                   ;
 1725 0C12              DONE_COPY2:				;We are done restore both drives
 1726 0C12  3A 392E     	LD	A,(ERRORS_FLAG)		;Were there errors
 1727 0C15  B7          	OR	A,A
 1728 0C16  20 0C       	JR	NZ,BAD_COPY
 1729 0C18  21 2D58     	LD	HL,COPYING_DONE		;Announce we are finished
 1730 0C1B  CD 1933     	CALL	PMSG
 1731 0C1E              DONE_COPY:
 1732 0C1E  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1733 0C21  C3 0273     	JP	END_CMD
 1734                   ;
 1735 0C24  21 309A     BAD_COPY:LD	HL,BAD_COPY_MSG		;errors seen so say bad copy
 1736 0C27  CD 1933     	CALL	PMSG
 1737 0C2A  18 F2       	JR	DONE_COPY
 1738                   ;
 1739                   ;***************** VERIFY TWO DISKS ARE THE SAME SECTOR BY SECTOR******************************
 1740                   ; This module assumes the disks sizes are identical and are using the same disk formats. 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  31
VF      Z80

 1741                   ; Normall they are 8" drives but it should be OK with two 5" drives as well. (5" was not tested)
 1742                   ;
 1743 0C2C              VERIFY_DISK:
 1744 0C2C  21 2DBE     	LD	HL,VERIFY_MSG		;Announce the disk copy msg
 1745 0C2F  CD 1933     	CALl	PMSG
 1746 0C32  AF          	XOR	A,A			;Setup for the BIOS below
 1747 0C33  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1748 0C36  32 3945     	LD	(COPY_TRK),A
 1749 0C39  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A of A:
 1750 0C3C  3C          	INC	A
 1751 0C3D  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1752 0C40  CD 11D6     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1753 0C43  CD 0E2D     	CALL	HOME		
 1754 0C46  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1755 0C49  C2 0273     	JP	NZ,END_CMD
 1756                   ;
 1757 0C4C              GET_VDEST:				;<<< DESTINATION DRIVE
 1758 0C4C  21 2DE8     	LD	HL,VERIFY2_MSG		;Destination disk 
 1759 0C4F  CD 1933     	CALL	PMSG
 1760 0C52  CD 15FF     	CALL	SELECT_DR_2		;Ask user which drive for second drive
 1761 0C55  FE FF       	CP	A,0FFH			;Note IX will be the same for both disks
 1762 0C57  28 F3       	JR	Z,GET_VDEST		;Invalid drive, start over
 1763 0C59  FE 1B       	CP	A,ESC
 1764 0C5B  CA 0273     	JP	Z,END_CMD
 1765                   ;
 1766 0C5E              HOW_MANY:
 1767 0C5E  21 2D06     	LD	HL,HOW_MANY_TRKS
 1768 0C61  CD 1933     	CALL	PMSG
 1769 0C64  CD 193E     	CALL	GETCMD
 1770 0C67  FE 1B       	CP	A,ESC			;Abort if ESC character
 1771 0C69  CA 0273     	JP	Z,END_CMD
 1772 0C6C  FE 53       	CP	A,'S'
 1773 0C6E  20 04       	JR	NZ,NOT_VS
 1774 0C70  3E 02       	LD	A,2
 1775 0C72  18 11       	JR	VGOT_TRK_CNT
 1776 0C74  FE 41       NOT_VS:	CP	A,'A'
 1777 0C76  20 05       	JR	NZ,NOT_VALL
 1778 0C78  DD 7E 01    	LD	A,(IX+NTRKS)
 1779 0C7B  18 08       	JR	VGOT_TRK_CNT
 1780 0C7D              NOT_VALL:
 1781 0C7D  21 2D3F     	LD	HL,INVALID_TRK_CT	;Must be S or All
 1782 0C80  CD 1933     	CALL	PMSG
 1783 0C83  18 D9       	JR	HOW_MANY
 1784                   ;
 1785 0C85              VGOT_TRK_CNT:
 1786 0C85  32 3944     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1787                   ;	
 1788 0C88              VERIFY_R_LOOP:
 1789 0C88  CD 11D6     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1790 0C8B  CD 122F     	CALL	SET_SIDE		;Update the side hardware 
 1791 0C8E  FD 7E 02    	LD	A,(IY+SCTR)		;Is it a new track
 1792 0C91  FE 01       	CP	A,1
 1793 0C93  20 12       	JR	NZ,VR_1
 1794 0C95  CD 0E2D     	CALL	HOME			;If a new track need to seek
 1795 0C98  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1796 0C9B  3A 3945     	LD	A,(COPY_TRK)
 1797 0C9E  FD 77 00    	LD	(IY+TRK),A
 1798                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  32
VF      Z80

 1799 0CA1  CD 0E70     	CALL	SEEK_TRACK_V		;seek to the new track position	
 1800 0CA4  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1801 0CA7              VR_1:	
 1802 0CA7  21 2D94     	LD	HL,READ_AT_TRK
 1803 0CAA  CD 1933     	CALL	PMSG
 1804 0CAD  CD 1272     	CALL	SHOW_TSS_LOC		;Announce current Track/Sec 
 1805                   
 1806 0CB0  21 5000     	LD	HL,FBUFFER		;Will place the complete sector image here (5000H)
 1807 0CB3  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1808                   ;
 1809 0CB6  CD 0EEF     	CALL	READ_SECTOR		;<<<<<< Read sector of A: Drive>>>>>>>
 1810 0CB9  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1811                   ;
 1812 0CBC  CD 11DB     	CALL	START_DRIVE_2		;Start the drive hardware (A side)
 1813 0CBF  CD 122F     	CALL	SET_SIDE		;Update the side hardware -- assume side A only
 1814 0CC2  FD 7E 02    	LD	A,(IY+SCTR)		;Is it a new track
 1815 0CC5  FE 01       	CP	A,1
 1816 0CC7  20 12       	JR	NZ,VR_2
 1817 0CC9  CD 0E2D     	CALL	HOME			;Not clear why but get a seek error without this!
 1818 0CCC  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1819 0CCF  3A 3945     	LD	A,(COPY_TRK)
 1820 0CD2  FD 77 00    	LD	(IY+TRK),A
 1821                   
 1822 0CD5  CD 0E70     	CALL	SEEK_TRACK_V		;seek to the new track position
 1823 0CD8  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1824 0CDB              VR_2:	
 1825 0CDB  21 2D9F     	LD	HL,VERIFY_AT_TRK
 1826 0CDE  CD 1933     	CALL	PMSG
 1827 0CE1  CD 1272     	CALL	SHOW_TSS_LOC		;Announce current Track 
 1828                   
 1829 0CE4  21 6000     	LD	HL,FBUFFER2		;Will place  the complete sector image here (5000H)
 1830 0CE7  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1831                   
 1832 0CEA  CD 0EEF     	CALL	READ_SECTOR		;<<<<<< Read sector on B: Drive
 1833 0CED  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1834                   ;
 1835 0CF0  CD 1356     	CALL	CMP_BUFFERS		;Check for errors
 1836 0CF3  28 09       	JR	Z,VCOMPARE_OK
 1837 0CF5  21 2920     	LD	HL,SEC_V_ERROR		;R/W Error found 
 1838 0CF8  CD 1933     	CALL	PMSG
 1839 0CFB  CD 1272     	CALL	SHOW_TSS_LOC		;trk,sec,head
 1840                   
 1841 0CFE              VCOMPARE_OK:
 1842 0CFE  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1843 0D01  C2 0D33     	JP	NZ,DONE_VERIFY1		;Abort if requested
 1844                   
 1845 0D04  FD 34 02    	INC	(IY+SCTR)		;Get next sector
 1846 0D07  FD 7E 02    	LD	A,(IY+SCTR)
 1847 0D0A  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1848 0D0B  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1849 0D0E  C2 0C88     	JP	NZ,VERIFY_R_LOOP
 1850                   
 1851 0D11  CD 1210     	CALL	SWAP_SIDES		;Sides swap check
 1852 0D14  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1853 0D16  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1854 0D19  C2 0C88     	JP	NZ,VERIFY_R_LOOP	;If B side (NZ), same track, back to sec 1
 1855                   
 1856 0D1C  3A 3945     	LD	A,(COPY_TRK)		;bump up a track
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  33
VF      Z80

 1857 0D1F  3C          	INC	A
 1858 0D20  32 3945     	LD	(COPY_TRK),A
 1859 0D23  3A 3944     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1860 0D26  3D          	DEC	A
 1861 0D27  32 3944     	LD	(COPY_TRK_COUNT),A	
 1862 0D2A  C2 0C88     	JP	NZ,VERIFY_R_LOOP
 1863                   ;
 1864 0D2D              END_VERIFY:				;We are done restore both drives
 1865 0D2D  21 2DA8     	LD	HL,VERIFY_DONE
 1866 0D30  CD 1933     	CALL	PMSG
 1867                   ;
 1868 0D33              DONE_VERIFY1:
 1869 0D33  CD 11D6     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1870 0D36  CD 0E2D     	CALL	HOME			;Will set TRK to 0
 1871 0D39  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1872 0D3C  3A 3936     	LD	A,(CMD_STORE)		;So we dont pick up other menu items
 1873 0D3F  C9          	RET				;Back to main menu	
 1874                   ;
 1875                   ;
 1876                   ;
 1877                   ; This routine will copy the CPM system tracks FROM another current disk and writes it TO 
 1878                   ; the current disk. Its just a modification of COPY_DISK where the number of tracks set aside
 1879                   ; is picked off from the Disk paramater table
 1880                   ; It should be OK with any disk format but so far has just been checked out on 
 1881                   ; standard 8" SSSD IBM 3740 disks. Both disks must use the same format. (untested for 5" disks)
 1882                   ;
 1883 0D40              COPY_CPM3_SYS:
 1884 0D40  AF          	XOR	A,A
 1885 0D41  32 392E     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1886                   
 1887 0D44  21 2E23     	LD	HL,SYS_COPY_MSG
 1888 0D47  CD 1933     	CALL	PMSG
 1889 0D4A  AF          	XOR	A,A			;Setup for the BIOS below
 1890 0D4B  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1891 0D4E  32 3945     	LD	(COPY_TRK),A
 1892 0D51  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1893                   
 1894 0D54  CD 11D6     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1895 0D57  CD 0E2D     	CALL	HOME		
 1896 0D5A  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1897 0D5D  C2 0273     	JP	NZ,END_CMD
 1898                   
 1899 0D60  CD 17F6     	CALL	CHECK_WP		;See if disk is write protected
 1900 0D63  C2 0273     	JP	NZ,END_CMD
 1901                   
 1902 0D66              GET_SDEST:				;<<<  SOURCE DRIVE
 1903 0D66  21 2E74     	LD	HL,SYS_COPY_MSG1	;Source disk of CPM 
 1904 0D69  CD 1933     	CALL	PMSG
 1905 0D6C  CD 15FF     	CALL	SELECT_DR_2		;Ask user which drive to get the CPM system tracks from
 1906 0D6F  FE FF       	CP	A,0FFH			;Note IX will be the same for both disks
 1907 0D71  28 F3       	JR	Z,GET_SDEST		;Invalid drive, start over
 1908 0D73  FE 1B       	CP	A,ESC
 1909 0D75  CA 0273     	JP	Z,END_CMD
 1910                   
 1911 0D78  CD 11DB     	CALL	START_DRIVE_2		;Start the drive hardware (A side)
 1912 0D7B  CD 0E2D     	CALL	HOME
 1913 0D7E  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1914 0D81  C2 0273     	JP	NZ,END_CMD
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  34
VF      Z80

 1915                   	
 1916 0D84              COPYWP_SOK:
 1917 0D84  DD 7E 12    	LD	A,(IX+SYS_TRKS)		;How many tracks for CPM system on this disk	
 1918 0D87  32 3944     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1919                   	
 1920 0D8A              SYS_R_LOOP:				; <<<< READ FROM Source drive
 1921 0D8A  CD 11DB     	CALL	START_DRIVE_2		;Start the source drive hardware (A side)
 1922 0D8D  CD 122F     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1923 0D90  CD 0E2D     	CALL	HOME		
 1924 0D93  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1925                   
 1926 0D96  3A 3945     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1927 0D99  FD 77 00    	LD	(IY+TRK),A
 1928 0D9C  CD 0E70     	CALL	SEEK_TRACK_V
 1929 0D9F  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1930                   
 1931 0DA2  21 2E99     	LD	HL,COPY_SYS_TRK
 1932 0DA5  CD 1933     	CALL	PMSG
 1933 0DA8  CD 12C1     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1934                   
 1935 0DAB  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1936 0DAE  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1937 0DB1  1E 01       	LD	E,1			;Start with 1st sector 
 1938 0DB3  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1939                   ;
 1940 0DB6  CD 0F87     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1941 0DB9  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1942                   ;
 1943                   ;---					
 1944                   ;					;<<<<< WRITE TO Destination drive
 1945 0DBC  CD 11D6     	CALL	START_DRIVE_1		;Start the destination drive hardware (A side)
 1946 0DBF  CD 122F     	CALL	SET_SIDE		;Update the side hardware (A)
 1947 0DC2  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1948 0DC5  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1949                   
 1950 0DC8  3A 3945     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1951 0DCB  FD 77 00    	LD	(IY+TRK),A
 1952 0DCE  CD 0E70     	CALL	SEEK_TRACK_V
 1953 0DD1  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1954                   
 1955 0DD4  21 2EAD     	LD	HL,WRITE_SYS_TRK
 1956 0DD7  CD 1933     	CALL	PMSG
 1957 0DDA  CD 12C1     	CALL	SHOW_TS_LOC		;Shows current (TRK,SIDE)
 1958                   
 1959 0DDD  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1960 0DE0  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1961 0DE3  1E 01       	LD	E,1			;Start with 1st sector 
 1962 0DE5  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1963                   ;
 1964 0DE8  CD 10D4     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1965 0DEB  C4 12D0     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1966                   ;
 1967 0DEE  CD 1210     	CALL	SWAP_SIDES		;Sides swap check
 1968 0DF1  20 11       	JR	NZ,R_TRK_SOK		;If B side (NZ), same track
 1969                   ;					;Else see if more tracks are required
 1970 0DF3  3A 3945     	LD	A,(COPY_TRK)		;bump up a track
 1971 0DF6  3C          	INC	A
 1972 0DF7  32 3945     	LD	(COPY_TRK),A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  35
VF      Z80

 1973 0DFA  3A 3944     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1974 0DFD  3D          	DEC	A
 1975 0DFE  32 3944     	LD	(COPY_TRK_COUNT),A	
 1976 0E01  CA 0E0C     	JP	Z,DONE_SYS2
 1977                   ;
 1978 0E04              R_TRK_SOK:
 1979 0E04  CD 19EC     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1980 0E07  20 0F       	JR	NZ,DONE_SYS1		;Loop until abort or all tracks done
 1981 0E09  C3 0D8A     	JP	SYS_R_LOOP
 1982                   ;
 1983 0E0C              DONE_SYS2:				;We are done restore both drives
 1984 0E0C  3A 392E     	LD	A,(ERRORS_FLAG)		;Were there errors
 1985 0E0F  B7          	OR	A,A
 1986 0E10  20 13       	JR	NZ,ERROR_SYS3
 1987 0E12  21 2EBE     	LD	HL,DONE_SYS_MSG		;Announce we are finished
 1988 0E15  CD 1933     	CALL	PMSG
 1989 0E18              DONE_SYS1:
 1990 0E18  CD 11D6     	CALL	START_DRIVE_1		;Start the source drive hardware (A side)
 1991 0E1B  CD 0E2D     	CALL	HOME			;Will set TRK to 0
 1992 0E1E  C4 12D0     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1993 0E21  3A 3936     	LD	A,(CMD_STORE)		;So we dont pick up other menu items
 1994 0E24  C9          	RET				;Back to main menu	
 1995                   ;
 1996 0E25              ERROR_SYS3:
 1997 0E25  21 2F7B     	LD	HL,ERRORS_SEEN		;errors encountered
 1998 0E28  CD 1933     	CALL	PMSG
 1999 0E2B  18 EB       	JR	DONE_SYS1
 2000                   
 2001                   ;
 2002                   ;
 2003                   ;
 2004                   ;==============================================================================
 2005                   ;================== 1791/5 COMMAND ROUTINES ===================================
 2006                   ;==============================================================================
 2007                   ;
 2008                   ; SEND A RESTORE COMMAND FOR THE CURRENT DISK. 
 2009                   ; On return: Z if no errors. NZ if errors with errors in (ERSTAT)and [A]
 2010                   ; Note (TRK) IS set to 0, (IX+HW_BYTE) SIDE_BIT (7) is not changed
 2011                   ;
 2012 0E2D  3E 80       HOME:	LD	A,HOME_ERR_MASK		;Error mask for Type I RESTORE CMD
 2013 0E2F  32 3937     	LD	(ERMASK),A		;Save error mask for end/error routine
 2014 0E32  AF          	XOR	A,A
 2015 0E33  FD 77 00    	LD	(IY+TRK),A	
 2016 0E36  DB 64       HOME2:	IN	A,(STATUS)
 2017 0E38  E6 01       	AND	A,1
 2018 0E3A  20 FA       	JR	NZ,HOME2		;Wait until 1791/5 is ready
 2019 0E3C  CD 1258     	CALL	WAIT_OFF		;Disable Wait State Hardware (just in case it is on)
 2020 0E3F  3E 88       	LD A, 088H
 2021 0E41  D3 05       	OUT (DEBUG),A
 2022 0E43  3E 0C       	LD	A,RSCMD
 2023 0E45  32 3939     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2024 0E48  D3 64       	OUT	(CMD),A
 2025 0E4A  3E 99       	LD A, 099H
 2026 0E4C  D3 05       	OUT (DEBUG),A
 2027 0E4E  CD 1185     	CALL	END_ROUTINE		;Wait, check status and return
 2028 0E51  C9          	RET
 2029                   ;
 2030                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  36
VF      Z80

 2031                   ; SEND A HEAD STEP-IN COMMAND TO THE CURRENT DRIVE 
 2032                   ; On return: Z if no errors. NZ if errors with errors in (ERSTAT)and [A]
 2033                   ; Note (TRK) is NOT updated to new track position, (IX+HW_BYTE) SIDE_BIT (7) is unchanged
 2034                   ;
 2035 0E52              STEP_IN_CMD:
 2036 0E52  3E 90       	LD	A,SIN_ERR_MASK		;Error mask for Type I CMD
 2037 0E54  32 3937     	LD	(ERMASK),A		;Save error mask for end/error routine
 2038 0E57  3E 5C       	LD	A,STEPIN		;Send Step-in (with verify) CMD
 2039 0E59  32 3939     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2040 0E5C              STEP_IN2:
 2041 0E5C  DB 64       	IN	A,(STATUS)
 2042 0E5E  E6 01       	AND	A,1
 2043 0E60  20 FA       	JR	NZ,STEP_IN2		;Wait until 1791/5 is ready
 2044 0E62  CD 1258     	CALL	WAIT_OFF		;Disable Wait State Hardware (just in case it is on)
 2045 0E65  3E 5C       	LD	A,STEPIN
 2046 0E67  32 3939     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2047 0E6A  D3 64       	OUT	(CMD),A
 2048 0E6C  CD 1185     	CALL	END_ROUTINE		;Wait, check status and return
 2049 0E6F  C9          	RET
 2050                   ;
 2051                   ; Seek with track WITH verify. Assumes valid track in (TRK)
 2052                   ; On return: Z if no errors. NZ if errors, (ERSTAT)and [A] has errors 
 2053                   ; Note (TRK) is NOT updated to new track position
 2054                   ;
 2055 0E70              SEEK_TRACK_V:
 2056 0E70  3E 90       	LD	A,SK_ERR_MASK		;Error mask for Type I Seek CMD
 2057 0E72  32 3937     	LD	(ERMASK),A		;Save error mask for end/error routine
 2058 0E75  3E 1C       	LD	A,SKCMD			;Send seek (with verify) CMD
 2059 0E77  32 3939     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2060 0E7A  3E 02       	LD	A,SEEK_RETRY_MAX	;In case of errors will retry seeking
 2061 0E7C  32 393D     	LD	(SEEK_RT_COUNT),A	;a few times
 2062 0E7F  18 0F       	JR	SEEK_TRK
 2063                   
 2064                   ;
 2065                   ;
 2066                   ; Seek track with NO verify. Assumes valid track in (TRK)
 2067                   ; On return: Z if no errors. NZ if errors, (ERSTAT)and [A] has errors 
 2068                   ; Note (TRK) is NOT updated to new track position
 2069                   ;
 2070 0E81              SEEK_TRACK_NV:	
 2071 0E81  3E 90       	LD	A,SK_ERR_MASK		;Error mask for Type I Seek CMD
 2072 0E83  32 3937     	LD	(ERMASK),A		;Save error mask for end/error routine
 2073 0E86  3E 18       	LD	A,SKNCMD		;Send seek CMD ((with NO verify)
 2074 0E88  32 3939     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2075 0E8B  3E 02       	LD	A,SEEK_RETRY_MAX	;In case of errors will retry seeking
 2076 0E8D  32 393D     	LD	(SEEK_RT_COUNT),A	;a few times
 2077 0E90              SEEK_TRK:
 2078 0E90  DB 64       	IN	A,(STATUS)
 2079 0E92  E6 01       	AND	A,1
 2080 0E94  20 FA       	JR	NZ,SEEK_TRK		;wait until 1791/5 is ready
 2081 0E96  CD 1258     	CALL	WAIT_OFF		;Disable Wait State Hardware (in case it was on)
 2082 0E99  FD 7E 00    	LD	A,(IY+TRK)		;Send required track to 1791/5
 2083 0E9C  D3 67       	OUT	(DATA),A
 2084 0E9E  3A 3939     	LD	A,(CHIP_CMDSV)		;Was it a seek or seek_nv
 2085 0EA1  D3 64       	OUT	(CMD),A			;Send seek cmd		
 2086 0EA3  CD 1185     	CALL	END_ROUTINE		;Wait, check status and return
 2087 0EA6  C8          	RET	Z			;Return if no errors
 2088                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  37
VF      Z80

 2089 0EA7  3A 393D     	LD	A,(SEEK_RT_COUNT)
 2090 0EAA  3D          	DEC	A			;Retrys 2,1... Will reseek
 2091 0EAB  32 393D     	LD	(SEEK_RT_COUNT),A
 2092 0EAE  28 02       	JR	Z,BAD_SEEK
 2093 0EB0  18 DE       	JR	SEEK_TRK		;Try re-reading the sector
 2094 0EB2              BAD_SEEK:
 2095 0EB2  AF          	XOR	A,A
 2096 0EB3  3D          	DEC	A			;Set to NZ
 2097 0EB4  3A 3938     	LD	A,(ERSTAT)
 2098 0EB7  C9          	RET	
 2099                   ;
 2100                   ;
 2101                   ;
 2102                   ;
 2103                   ; Read an ID from the track. Assumes valid track in (TRK) 
 2104                   ; Note any Sector ID from the track will be obtained depending where the head falls
 2105                   ; The currently selected side at (SIDE) is read
 2106                   ;
 2107 0EB8  3E 9F       READ_ID:LD	A,ID_ERR_MASK
 2108 0EBA  32 3937     	LD	(ERMASK),A		;Store for error display
 2109 0EBD  3E AA       RDSC_1: LD A, 0AAH	
 2110 0EBF  D3 05       	OUT (DEBUG), A
 2111 0EC1  DB 64       	IN	A,(STATUS)
 2112 0EC3  E6 01       	AND	A,1
 2113 0EC5  20 F6       	JR	NZ,RDSC_1		;wait until 1791/5 is ready
 2114                   
 2115 0EC7  21 3930     	LD	HL,IDSV			;Will store the 6 bytes here
 2116 0ECA  01 0667     	LD	BC,600H+DATA		;6 bytes in B, Data port in C below
 2117 0ECD  CD 125F     	CALL	WAIT_ON			;Enable hardware wait states
 2118 0ED0  3E C4       	LD	A,RDACMD		;Send the Read Track ID CMD
 2119 0ED2  32 3939     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2120 0ED5  F3          	DI				;Just in case
 2121 0ED6  D3 64       	OUT	(CMD),A
 2122 0ED8  18 00       	JR	MM2			;Slight delay
 2123 0EDA  18 00       MM2:	JR	MM3
 2124 0EDC  3E BB       MM3:	LD A, 0BBH	
 2125 0EDE  D3 05       	OUT (DEBUG), A
 2126 0EE0  ED B2       	INIR				;Block input 6 bytes
 2127 0EE2  3E CC       	LD A, 0CCH	
 2128 0EE4  D3 05       	OUT (DEBUG), A
 2129 0EE6  FB          	EI
 2130 0EE7  CD 1185     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status 
 2131 0EEA  3E DD       	LD A, 0DDH	
 2132 0EEC  D3 05       	OUT (DEBUG), A
 2133 0EEE  C9          	RET				;and return
 2134                   ;	
 2135                   ;
 2136                   ;
 2137                   ; <<< CORE SECTOR READ ROUTINE>>>. Assumes valid track in (TRK)&(SEC) 
 2138                   ; Address in (TADDR). The currently selected side at (SIDE) is setup
 2139                   ; Note: (TADDR) is unaltered, (DMA_NEXT) is updated for repetative calls to this routine
 2140                   ;
 2141 0EEF              READ_SECTOR:
 2142 0EEF  3E BF       	LD	A,RS_ERR_MASK	;Error mask from 1791/5 after read is done
 2143 0EF1  32 3937     	LD	(ERMASK),A
 2144 0EF4  3E 04       	LD	A,SEC_RETRY_MAX		;In case of errors will retry reading sector 
 2145 0EF6  32 393C     	LD	(SEC_RT_COUNT),A	;a few times
 2146 0EF9              AGAIN_RD:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  38
VF      Z80

 2147 0EF9  2A 0040     	LD	HL,(TADDR)	;Deposit sector info here
 2148 0EFC  FD 7E 02    	LD	A,(IY+SCTR)
 2149 0EFF  D3 66       	OUT	(SECTOR),A
 2150 0F01  0E 67       	LD	C,DATA		;C = DATA port for INIR below
 2151 0F03  CD 125F     	CALL	WAIT_ON
 2152                   
 2153         0000           if	CHIP_1791
 2156                        endif
 2157                   
 2158         0001           if	CHIP_1795
 2159 0F06  3E 88       	LD	A,RDCMD95	;Read sector command to 1795
 2160 0F08  32 3939     	LD	(CHIP_CMDSV),A	;store cmd here for Error display (if any)
 2161 0F0B  FD B6 01    	OR	A,(IY+SIDE)	;If B side, need to OR in bit 1 (02H).
 2162                        endif
 2163                   	
 2164 0F0E  F3          	DI
 2165 0F0F  D3 64       	OUT	(CMD),A
 2166 0F11  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2167 0F14  06 80       	LD	B,NBYTES
 2168 0F16  B7          	OR	A,A		;Block input [B] Bytes->[HL] from port [C]
 2169 0F17  28 10       	JR	Z,R128256	;Do 128 byte read
 2170 0F19  06 00       	LD	B,0
 2171 0F1B  FE 01       	CP	A,1
 2172 0F1D  28 0A       	JR	Z,R128256	;Do 256 byte read
 2173 0F1F  FE 02       	CP	A,2
 2174 0F21  28 04       	JR	Z,R512		;Do 512 byte read
 2175 0F23  ED B2       	INIR			;Must be 1024 byte sectors so 4X256		
 2176 0F25  ED B2       	INIR
 2177 0F27  ED B2       R512:	INIR			;256X2 bytes
 2178 0F29  ED B2       R128256:INIR			;128 or 256 bytes (B=128 or 0)
 2179 0F2B  FB          	EI
 2180 0F2C  22 3942     	LD	(DMA_NEXT),HL	;Store next byte of DMA
 2181 0F2F  CD 1185     	CALL	END_ROUTINE	;Wait, turn off wait hware, check status and return
 2182 0F32  C8          	RET	Z		;RET Z if all is OK
 2183                   				;Read failed. Do we retry again
 2184 0F33  3A 392F     	LD	A,(CRTDISP)	;Check if detailed display flag is on
 2185 0F36  B7          	OR	A,A
 2186 0F37  28 12       	JR	Z,MM6
 2187 0F39  21 28A4     	LD	HL,SEC_READ_RETRY     ;'Re-reading SECTOR XXH.'
 2188 0F3C  CD 1933     	CALL	PMSG
 2189 0F3F  FD 7E 02    	LD	A,(IY+SCTR)
 2190 0F42  CD 19B9     	CALL	PACC
 2191 0F45  21 2545     	LD	HL,H_MSG
 2192 0F48  CD 1933     	CALL	PMSG
 2193 0F4B  3A 393C     MM6:	LD	A,(SEC_RT_COUNT)
 2194 0F4E  3D          	DEC	A			;Retrys 4,3 2,1... Will reseek on 3rd re-read try
 2195 0F4F  32 393C     	LD	(SEC_RT_COUNT),A
 2196 0F52  28 2D       	JR	Z,BAD_RD
 2197 0F54  FE 02       	CP	A,2
 2198 0F56  20 A1       	JR	NZ,AGAIN_RD		;Try re-reading the sector
 2199 0F58  3A 392F     	LD	A,(CRTDISP)		;Check if detailed display flag is on
 2200 0F5B  B7          	OR	A,A
 2201 0F5C  28 12       	JR	Z,MM7B
 2202 0F5E  21 28CE     	LD	HL,SEC_RH_RETRY		;'Re-Seeking head for re-reading SECTOR XXH.'
 2203 0F61  CD 1933     	CALL	PMSG
 2204 0F64  FD 7E 02    	LD	A,(IY+SCTR)
 2205 0F67  CD 19B9     	CALL	PACC
 2206 0F6A  21 2545     	LD	HL,H_MSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  39
VF      Z80

 2207 0F6D  CD 1933     	CALL	PMSG
 2208 0F70              MM7B:
 2209 0F70  FD 7E 00    	LD	A,(IY+TRK)	;If it failed a second time, home, reseek and try again
 2210 0F73  F5          	PUSH	AF		;Save TRK because HOME sets it to 0
 2211 0F74  CD 0E2D     	CALL	HOME		;Restore to track 0 (Note assumes TRK is unchanged in HOME)
 2212 0F77  F1          	POP	AF
 2213 0F78  FD 77 00    	LD	(IY+TRK),A
 2214 0F7B  CD 0E70     	CALL	SEEK_TRACK_V	;Re-seek to track
 2215 0F7E  C3 0EF9     	JP	AGAIN_RD
 2216 0F81  AF          BAD_RD	XOR	A,A
 2217 0F82  3D          	DEC	A		;Set to NZ
 2218 0F83  3A 3938     	LD	A,(ERSTAT)
 2219 0F86  C9          	RET	
 2220                   ;
 2221                   ;
 2222                   ; Multi_sector Read of ALL sectors on a TRACK. Assumes head is over relevent track in (TRK)
 2223                   ; Will place data at (TADDR). The currently selected side at (SIDE) is read.
 2224                   ; (DMA_NEXT) is updated for repetative calls to this routine
 2225                   ; [D] = the number of sectors (Max IX+NSCTRS), [E] = the starting sector number.
 2226                   ; Note this can be easily modified for CPM3 to multi sector write by adjusting [D] & [E]. 
 2227                   ; Also note, actual timing for data I/O is quite tight for slow CPU's. Thus the strange layout.
 2228                   ;
 2229 0F87              MULTI_SEC_RD:
 2230 0F87  3E AF       	LD	A,MRS_ERR_MASK		;Setup for error checking
 2231 0F89  32 3937     	LD	(ERMASK),A
 2232 0F8C  2A 0040     	LD	HL,(TADDR)
 2233 0F8F  FD 7E 00    	LD	A,(IY+TRK)
 2234 0F92  D3 65       	OUT	(TRACK),A
 2235 0F94  7B          	LD	A,E			;first sector (usually 1)
 2236 0F95  FD 77 02    	LD	(IY+SCTR),A		;For error dump (Actully error could be any sector on the track)
 2237 0F98  D3 66       	OUT	(SECTOR),A
 2238 0F9A  0E 67       	LD	C,DATA			;C = DATA port for INIR below
 2239                   
 2240 0F9C  CD 125F     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2241                   
 2242         0000          if	CHIP_1791
 2245                       endif
 2246                   
 2247         0001          if	CHIP_1795
 2248 0F9F  3E 88       	LD	A,RDCMD95		;Read sector command to 1795
 2249 0FA1  32 3939     	LD	(CHIP_CMDSV),A		;store cmd here for Error display (if any)
 2250 0FA4  FD B6 01    	OR	A,(IY+SIDE)		;If B side, need to OR in bit 1 (02H).
 2251                        endif
 2252                   
 2253 0FA7  CB E7       	SET	4,A			;Set "Multi sec bit"
 2254 0FA9  F5          	PUSH	AF			;Store until we get sec size info
 2255 0FAA  F3          	DI				;Disable Interrupts
 2256                   ;
 2257 0FAB  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2 or 1024=3 byte sector size
 2258 0FAE  B7          	OR	A,A			;Block input [B] Bytes->[HL] from port [C]
 2259 0FAF  28 0A       	JR	Z,MR128			;Do 128 byte read
 2260 0FB1  FE 01       	CP	A,1
 2261 0FB3  28 14       	JR	Z,MR256			;Do 256 byte read
 2262 0FB5  FE 02       	CP	A,2
 2263 0FB7  28 1E       	JR	Z,MR512			;Do 512 byte read
 2264 0FB9  18 2C       	JR	MR1K			;Must be 1K sectors
 2265                   
 2266 0FBB  06 80       MR128:	LD	B,128
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  40
VF      Z80

 2267 0FBD  F1          	POP	AF
 2268 0FBE  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2269 0FC0  ED B2       MR128A:	INIR				;128 bytes (B=128)
 2270 0FC2  06 80       	LD	B,128
 2271 0FC4  15          	DEC	D
 2272 0FC5  20 F9       	JR	NZ,MR128A
 2273 0FC7  18 32       	JR	DONE_MR
 2274                   
 2275 0FC9  06 00       MR256:	LD	B,0
 2276 0FCB  F1          	POP	AF
 2277 0FCC  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2278 0FCE  ED B2       MR256A:	INIR				;256 bytes 
 2279 0FD0  06 00       	LD	B,0
 2280 0FD2  15          	DEC	D
 2281 0FD3  20 F9       	JR	NZ,MR256A
 2282 0FD5  18 24       	JR	DONE_MR
 2283                   
 2284 0FD7  06 00       MR512:	LD	B,0
 2285 0FD9  F1          	POP	AF
 2286 0FDA  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2287 0FDC  ED B2       MR512A:	INIR				;512 = 256x2
 2288 0FDE  ED B2       	INIR
 2289 0FE0  06 00       	LD	B,0
 2290 0FE2  15          	DEC	D
 2291 0FE3  20 F7       	JR	NZ,MR512A
 2292 0FE5  18 14       	JR	DONE_MR
 2293                   
 2294 0FE7  06 00       MR1K:	LD	B,0
 2295 0FE9  F1          	POP	AF
 2296 0FEA  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2297 0FEC  ED B2       MR1KA:	INIR				;1K = 256x4
 2298 0FEE  ED B2       	INIR
 2299 0FF0  ED B2       	INIR
 2300 0FF2  ED B2       	INIR
 2301 0FF4  06 00       	LD	B,0
 2302 0FF6  15          	DEC	D
 2303 0FF7  20 F3       	JR	NZ,MR1KA
 2304 0FF9  18 00       	JR	DONE_MR
 2305                   
 2306 0FFB              DONE_MR:
 2307 0FFB  FB          	EI
 2308 0FFC  22 3942     	LD	(DMA_NEXT),HL		;Store "next location". Used by other routines
 2309 0FFF  CD 1185     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2310 1002  C8          	RET	Z			;RET Z if all is OK
 2311 1003  AF          	XOR	A,A
 2312 1004  3D          	DEC	A			;Set to NZ
 2313 1005  3A 3938     	LD	A,(ERSTAT)		;Return with error bits
 2314 1008  C9          	RET	
 2315                   ;
 2316                   ;
 2317                   ; Read Track. Assumes head is over relevent track in (TRK)
 2318                   ; Will place data at (TADDR)
 2319                   ; The currently selected side at (SIDE) is read
 2320                   ; The total size of a  track in bytes is in [DE]
 2321                   
 2322 1009              READ_TRACK:
 2323 1009  3E 80       	LD	A,RT_ERR_MASK		;Setup for error checking
 2324 100B  32 3937     	LD	(ERMASK),A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  41
VF      Z80

 2325 100E  2A 0040     	LD	HL,(TADDR)
 2326 1011  FD 7E 00    	LD	A,(IY+TRK)
 2327 1014  D3 65       	OUT	(TRACK),A
 2328 1016  CD 125F     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2329 1019  3E E4       	LD	A,RDTCMD		;setup for 179x read track command
 2330 101B  32 3939     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2331 101E  F3          	DI				;Disable Interrupts
 2332 101F  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port
 2333 1021  18 00       	JR	MM7			;Slight delay
 2334 1023  18 00       MM7:	JR	R_LOOP
 2335                   
 2336 1025  DB 67       R_LOOP:	IN	A,(DATA)		;Get all track bytes
 2337 1027  77          	LD	(HL),A
 2338 1028  23          	INC	HL
 2339 1029  1B          	DEC	DE			;Track size is in DE
 2340 102A  7B          	LD	A,E
 2341 102B  B7          	OR	A,A
 2342 102C  20 F7       	JR	NZ,R_LOOP
 2343 102E  B2          	OR	A,D
 2344 102F  20 F4       	JR	NZ,R_LOOP		;Have we sent DE bytes yet
 2345 1031  FB          	EI
 2346 1032  CD 1185     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2347 1035  C8          	RET	Z			;RET Z if all is OK
 2348 1036  AF          	XOR	A,A
 2349 1037  3D          	DEC	A			;Set to NZ
 2350 1038  3A 3938     	LD	A,(ERSTAT)		;Return with error bits
 2351 103B  C9          	RET	
 2352                   ;
 2353                   ;
 2354                   ; <<< CORE SECTOR WRITE ROUTINE >>> . Assumes valid track in (TRK) & (SEC) 
 2355                   ; Address in (TADDR). The currently selected side at (SIDE) is setup
 2356                   ; Note: (TADDR) is unaltered, (DMA_NEXT) is updated for repetative calls to this routine
 2357                   ;
 2358 103C              WRITE_SECTOR:
 2359 103C  3E EF       	LD	A,WS_ERR_MASK	;Error mask from 1791/5 after read is done
 2360 103E  32 3937     	LD	(ERMASK),A
 2361 1041  3E 04       	LD	A,SEC_RETRY_MAX	;In case of errors will retry reading sector 
 2362 1043  32 393C     	LD	(SEC_RT_COUNT),A	;a few times
 2363 1046              AGAIN_WR:
 2364 1046  2A 0040     	LD	HL,(TADDR)	;Deposit sector info here
 2365 1049  FD 7E 02    	LD	A,(IY+SCTR)
 2366 104C  D3 66       	OUT	(SECTOR),A
 2367 104E  0E 67       	LD	C,DATA		;C = DATA port for OTIR below
 2368 1050  CD 125F     	CALL	WAIT_ON
 2369                   
 2370         0000           if	CHIP_1791
 2373                        endif
 2374                   
 2375         0001           if	CHIP_1795
 2376 1053  3E A8       	LD	A,WRCMD95	;Read sector command to 1795
 2377 1055  32 3939     	LD	(CHIP_CMDSV),A	;store cmd here for Error display (if any)
 2378 1058  FD B6 01    	OR	A,(IY+SIDE)	;If B side, need to OR in bit 1 (02H).
 2379                         endif
 2380                   
 2381 105B  F3          	DI
 2382 105C  D3 64       	OUT	(CMD),A
 2383 105E  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2384 1061  06 80       	LD	B,NBYTES
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  42
VF      Z80

 2385 1063  B7          	OR	A,A		;Block input [B] Bytes->[HL] from port [C]
 2386 1064  28 10       	JR	Z,W128256	;Do 128 byte read
 2387 1066  06 00       	LD	B,0
 2388 1068  FE 01       	CP	A,1
 2389 106A  28 0A       	JR	Z,W128256	;Do 256 byte read
 2390 106C  FE 02       	CP	A,2
 2391 106E  28 04       	JR	Z,W512		;Do 512 byte read
 2392 1070  ED B3       	OTIR			;Must be 1024 byte sectors so 4X256		
 2393 1072  ED B3       	OTIR
 2394 1074  ED B3       W512:	OTIR			;256X2 bytes
 2395 1076  ED B3       W128256:OTIR			;128 or 256 bytes (B=128 or 0)
 2396 1078  FB          	EI
 2397 1079  22 3942     	LD	(DMA_NEXT),HL	;Store next byte of DMA (for multiple sec R/W's)
 2398 107C  CD 1185     	CALL	END_ROUTINE	;Wait, turn off wait hware, check status and return
 2399 107F  C8          	RET	Z		;RET Z if all is OK
 2400                   				;Read failed. Do we retry again
 2401 1080  3A 392F     	LD	A,(CRTDISP)	;Check if detailed display flag is on
 2402 1083  B7          	OR	A,A
 2403 1084  28 12       	JR	Z,MM6W
 2404 1086  21 28B9     	LD	HL,SEC_WR_RETRY  ;'Re-writing SECTOR XXH.'
 2405 1089  CD 1933     	CALL	PMSG
 2406 108C  FD 7E 02    	LD	A,(IY+SCTR)
 2407 108F  CD 19B9     	CALL	PACC
 2408 1092  21 2545     	LD	HL,H_MSG
 2409 1095  CD 1933     	CALL	PMSG
 2410 1098  3A 393C     MM6W:	LD	A,(SEC_RT_COUNT)
 2411 109B  3D          	DEC	A			;Retrys 4,3 2,1... Will reseek on 3rd re-read try
 2412 109C  32 393C     	LD	(SEC_RT_COUNT),A
 2413 109F  28 2D       	JR	Z,BAD_WR
 2414 10A1  FE 02       	CP	A,2
 2415 10A3  20 A1       	JR	NZ,AGAIN_WR		;Try re-reading the sector
 2416 10A5  3A 392F     	LD	A,(CRTDISP)		;Check if detailed display flag is on
 2417 10A8  B7          	OR	A,A
 2418 10A9  28 12       	JR	Z,MM7W
 2419 10AB  21 28F7     	LD	HL,SEC_WH_RETRY		;'Re-Seeking head for re-reading SECTOR XXH.'
 2420 10AE  CD 1933     	CALL	PMSG
 2421 10B1  FD 7E 02    	LD	A,(IY+SCTR)
 2422 10B4  CD 19B9     	CALL	PACC
 2423 10B7  21 2545     	LD	HL,H_MSG
 2424 10BA  CD 1933     	CALL	PMSG
 2425 10BD              MM7W:
 2426 10BD  FD 7E 00    	LD	A,(IY+TRK)	;If it failed a second time, home, reseek and try again
 2427 10C0  F5          	PUSH	AF
 2428 10C1  CD 0E2D     	CALL	HOME		;Restore to track 0 
 2429 10C4  F1          	POP	AF
 2430 10C5  FD 77 00    	LD	(IY+TRK),A
 2431 10C8  CD 0E70     	CALL	SEEK_TRACK_V	;Re-seek to track
 2432 10CB  C3 0EF9     	JP	AGAIN_RD
 2433 10CE  AF          BAD_WR	XOR	A,A
 2434 10CF  3D          	DEC	A		;Set to NZ
 2435 10D0  3A 3938     	LD	A,(ERSTAT)	;Return with error bits
 2436 10D3  C9          	RET	
 2437                   ;
 2438                   ; Multi_sector Write of multiple sectors on a TARCK. Assumes head is over relevent track in (TRK)
 2439                   ; Will place data at (TADDR) The currently selected side at (SIDE) is read
 2440                   ; (DMA_NEXT) is updated for repetative calls to this routine.
 2441                   ; [D] contains the number of sectors (Max IX+NSCTRS), [E] the starting sector number.
 2442                   ; Note this can be easily modified for CPM3 to multi sector write by adjusting [D] & [E]. 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  43
VF      Z80

 2443                   ; Also note, actual timing for data I/O is quite tight for slow CPU's. Thus the strange layout.
 2444                   ;
 2445 10D4              MULTI_SEC_WR:
 2446 10D4  3E EF       	LD	A,WS_ERR_MASK		;Setup for error checking
 2447 10D6  32 3937     	LD	(ERMASK),A
 2448 10D9  2A 0040     	LD	HL,(TADDR)
 2449 10DC  FD 7E 00    	LD	A,(IY+TRK)
 2450 10DF  D3 65       	OUT	(TRACK),A
 2451 10E1  7B          	LD	A,E			;first sector (usually 1)
 2452 10E2  FD 77 02    	LD	(IY+SCTR),A		;For error dump (Actully error could be any sector on the track)
 2453 10E5  D3 66       	OUT	(SECTOR),A
 2454 10E7  0E 67       	LD	C,DATA			;C = DATA port for INIR below
 2455                   
 2456 10E9  CD 125F     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2457                   
 2458         0000          if	CHIP_1791
 2461                        endif
 2462                   
 2463         0001           if	CHIP_1795
 2464 10EC  3E A8       	LD	A,WRCMD95		;Read sector command to 1795
 2465 10EE  32 3939     	LD	(CHIP_CMDSV),A		;store cmd here for Error display (if any)
 2466 10F1  FD B6 01    	OR	A,(IY+SIDE)		;If B side need to OR in bit 1 (02H).
 2467                        endif
 2468                   
 2469 10F4  CB E7       	SET	4,A			;Multi sec bit
 2470 10F6  F5          	PUSH	AF			;Store for now
 2471 10F7  F3          	DI				;Disable Interrupts
 2472                   
 2473 10F8  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2 or 1024=3 byte sector size
 2474 10FB  B7          	OR	A,A			;Block input [B] Bytes->[HL] from port [C]
 2475 10FC  28 0A       	JR	Z,MW128			;Do 128 byte read
 2476 10FE  FE 01       	CP	A,1
 2477 1100  28 14       	JR	Z,MW256			;Do 256 byte read
 2478 1102  FE 02       	CP	A,2
 2479 1104  28 1E       	JR	Z,MW512			;Do 512 byte read
 2480 1106  18 2C       	JR	MW1K			;Must be 1K sectors
 2481                   
 2482 1108  06 80       MW128:	LD	B,128			;Note the code is spread out like this with
 2483 110A  F1          	POP	AF			;each sector having its own module because of timing
 2484 110B  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2485 110D  ED B3       MW128A:	OTIR				;128 bytes (B=128)
 2486 110F  06 80       	LD	B,128
 2487 1111  15          	DEC	D
 2488 1112  20 F9       	JR	NZ,MW128A
 2489 1114  18 32       	JR	DONE_MW
 2490                   
 2491 1116  06 00       MW256:	LD	B,0
 2492 1118  F1          	POP	AF
 2493 1119  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2494 111B  ED B3       MW256A:	OTIR				;256 bytes 
 2495 111D  06 00       	LD	B,0
 2496 111F  15          	DEC	D
 2497 1120  20 F9       	JR	NZ,MW256A
 2498 1122  18 24       	JR	DONE_MW
 2499                   
 2500 1124  06 00       MW512:	LD	B,0
 2501 1126  F1          	POP	AF
 2502 1127  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  44
VF      Z80

 2503 1129  ED B3       MW512A:	OTIR				;512 = 256x2
 2504 112B  ED B3       	OTIR
 2505 112D  06 00       	LD	B,0
 2506 112F  15          	DEC	D
 2507 1130  20 F7       	JR	NZ,MW512A
 2508 1132  18 14       	JR	DONE_MW
 2509                   
 2510 1134  06 00       MW1K:	LD	B,0
 2511 1136  F1          	POP	AF
 2512 1137  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2513 1139  ED B3       MW1KA:	OTIR				;1K = 256x4
 2514 113B  ED B3       	OTIR
 2515 113D  ED B3       	OTIR
 2516 113F  ED B3       	OTIR
 2517 1141  06 00       	LD	B,0
 2518 1143  15          	DEC	D
 2519 1144  20 F3       	JR	NZ,MW1KA
 2520 1146  18 00       	JR	DONE_MW
 2521                   
 2522 1148              DONE_MW:
 2523 1148  FB          	EI
 2524 1149  22 3942     	LD	(DMA_NEXT),HL		;Store "next" location. Used by other routines
 2525 114C  CD 1185     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2526 114F  C8          	RET	Z			;RET Z if all is OK
 2527 1150  AF          	XOR	A,A
 2528 1151  3D          	DEC	A			;Set to NZ
 2529 1152  3A 3938     	LD	A,(ERSTAT)		;Return with error bits
 2530 1155  C9          	RET	
 2531                   ;
 2532                   ;
 2533                   ;	
 2534                   ; Write Track. Assumes head is over relevent track in (TRK)
 2535                   ; Track data at (TADDR)
 2536                   ; The currently selected side at (SIDE) is written to
 2537                   ; The total size of a track in bytes is in [DE]
 2538                   ;
 2539 1156              WRITE_TRACK:
 2540 1156  3E E0       	LD	A,WT_ERR_MASK		;Setup for error checking
 2541 1158  32 3937     	LD	(ERMASK),A
 2542 115B  2A 0040     	LD	HL,(TADDR)
 2543 115E  FD 7E 00    	LD	A,(IY+TRK)
 2544 1161  D3 65       	OUT	(TRACK),A
 2545 1163  CD 125F     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2546 1166  3E F4       	LD	A,WRTCMD		;setup for 179x WRITE track command
 2547 1168  32 3939     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2548 116B  F3          	DI				;Disable Interrupts
 2549 116C  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port
 2550 116E  7E          W_LOOP:	LD	A,(HL)
 2551 116F  D3 67       	OUT	(DATA),A		;Send all track bytes
 2552 1171  23          	INC	HL
 2553 1172  1B          	DEC	DE
 2554 1173  7B          	LD	A,E
 2555 1174  B7          	OR	A,A
 2556 1175  20 F7       	JR	NZ,W_LOOP
 2557 1177  B2          	OR	A,D
 2558 1178  20 F4       	JR	NZ,W_LOOP	;Have we sent DE bytes yet
 2559 117A  FB          	EI
 2560 117B  CD 1185     	CALL	END_ROUTINE	;Wait,  turn off wait hware, check status and return
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  45
VF      Z80

 2561 117E  C8          	RET	Z		;RET Z if all is OK
 2562 117F  AF          	XOR	A,A
 2563 1180  3D          	DEC	A		;Set to NZ
 2564 1181  3A 3938     	LD	A,(ERSTAT)
 2565 1184  C9          	RET	
 2566                   ;
 2567                   ;
 2568                   ; END Routine comes after each Type I command is completed. It waits for the 1791/5 
 2569                   ; chip to time out then switches off the wait state generator and checks for errors. 
 2570                   ; Returns Z if no errors, otherewise NZ with error in (ERSTAT). If chip gets hung waiting
 2571                   ; for status it forces a 1791/5 Interrupt CMD after ~ 5 seconds.  This is usually due to
 2572                   ; a hardware problem.
 2573                   ;
 2574 1185              END_ROUTINE:
 2575 1185  CD 11F6     	CALL	DELAY		;Delay for hardware
 2576 1188  C5          	PUSH	BC		;Setup a loop count
 2577 1189  D5          	PUSH	DE
 2578 118A  E5          	PUSH	HL
 2579 118B  01 0000     	LD	BC,0
 2580 118E  1E 05       	LD	E,STATUS_DELAY	;time out about 5 seconds
 2581 1190  3E EE       	LD A, 0EEH	
 2582 1192  D3 05       	OUT (DEBUG), A
 2583 1194  DB 64       ENDR2:	IN	A,(STATUS)	;Wait until chip is not busy
 2584 1196  E6 01       	AND	A,1
 2585 1198  28 25       	JR	Z,ENDR2_OK
 2586 119A  10 F8       	DJNZ	ENDR2		;Try for ~5 seconds
 2587 119C  05          	DEC	B
 2588 119D  0D          	DEC	C
 2589 119E  20 F4       	JR	NZ,ENDR2
 2590 11A0  05          	DEC	B
 2591 11A1  0D          	DEC	C
 2592 11A2  1D          	DEC	E
 2593 11A3  20 EF       	JR	NZ,ENDR2
 2594 11A5  CD 1258     	CALL	WAIT_OFF	;Disable Hardware wait states
 2595 11A8  21 2C25     	LD	HL,TIMEOUT_ERR
 2596 11AB  CD 1933     	CALL	PMSG
 2597 11AE  CD 17EA     	CALL	SHOW_STAT_BITS
 2598 11B1  32 3938     	LD	(ERSTAT),A	
 2599 11B4  CD 1950     	CALL	ZCRLF
 2600 11B7  CD 1266     	CALL	FRCINT
 2601 11BA  E1          	POP	HL
 2602 11BB  D1          	POP	DE
 2603 11BC  C1          	POP	BC
 2604 11BD  18 11       	JR	ENDR3
 2605 11BF              ENDR2_OK:
 2606 11BF  E1          	POP	HL
 2607 11C0  D1          	POP	DE
 2608 11C1  C1          	POP	BC
 2609 11C2  CD 1258     	CALL	WAIT_OFF	;Disable Hardware wait states
 2610 11C5  DB 64       	IN	A,(STATUS)	;(May already be off anyway for Seeks etc)
 2611 11C7  57          	LD	D,A
 2612 11C8  3A 3937     	LD	A,(ERMASK)	;Error mask was stored here
 2613 11CB  A2          	AND	A,D
 2614 11CC  32 3938     	LD	(ERSTAT),A	;Save error status for error routine
 2615 11CF  C8          	RET	Z		;RET Z if all is OK
 2616 11D0  AF          ENDR3:	XOR	A,A
 2617 11D1  3D          	DEC	A		;Set to NZ
 2618 11D2  3A 3938     	LD	A,(ERSTAT)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  46
VF      Z80

 2619 11D5  C9          	RET	
 2620                   ;
 2621                   ;
 2622                   ;
 2623                   ;
 2624                   ; SELECT DRIVE IN HARDWARE, WILL BE THE NEW CURRENT DRIVE 
 2625                   ; (IX+HW_BYTE) points to relevent drive selection, density and 
 2626                   ; side(s) info for the current disk. Note: Sets head to Side A - ALWAYS
 2627                   ;
 2628 11D6              START_DRIVE_1:
 2629 11D6  3A 0046     	LD	A,(DRIVE_1)	;Get the drive selection bit
 2630 11D9  18 03       	JR	START_DR
 2631                   
 2632 11DB              START_DRIVE_2:
 2633 11DB  3A 0047     	LD	A,(DRIVE_2)	;Get the drive selection bit
 2634 11DE              START_DR:
 2635 11DE  DD B6 02    	OR	A,(IX+HW_BYTE)	;OR in the density,side and size bits
 2636 11E1  32 0048     	LD	(IOBYTE),A	;For diagnostic display	
 2637 11E4  E6 7F       	AND	A,7FH		;Strip off the current side bit flag of (IOBYTE)
 2638 11E6  2F          	CPL			;Hardware is inverted
 2639 11E7  CB E7       	SET	4,A		;Force to side A
 2640 11E9  D3 63       	OUT	(SELECT),A
 2641 11EB  CD 11F6     	CALL	DELAY
 2642 11EE  DB 64       RDYCK:	IN	A,(STATUS)	;Drive select delay
 2643 11F0  E6 80       	AND	80H
 2644 11F2  C2 11EE     	JP	NZ,RDYCK	;Return when ready
 2645 11F5  C9          	RET
 2646                   ;
 2647                   ; Delay for drive select hardware. Different for 8" and 5" drives
 2648                   ;
 2649 11F6  DD CB 02 6E DELAY:	BIT	5,(IX+HW_BYTE)	;8" or 5"
 2650 11FA  3E 11       	LD A, 011H
 2651 11FC  D3 05       	OUT (DEBUG),A
 2652 11FE  3E 27       	LD	A,39
 2653 1200  28 02       	JR	Z,DELAY1  
 2654 1202  3E 3C       	LD	A,60
 2655 1204  06 00       DELAY1:	LD	B,0
 2656 1206  10 FE       M0:	DJNZ	M0
 2657 1208  3D          	DEC	A
 2658 1209  20 F9       	JR	NZ,DELAY1  
 2659 120B  3E 22       	LD A, 022H
 2660 120D  D3 05       	OUT (DEBUG),A
 2661 120F  C9          	RET
 2662                   ;	
 2663                   ; This routine switches the active side of the current disk.
 2664                   ; Returns Z if no sides OR new side is A, NZ if new side is B. 
 2665                   ;
 2666 1210              SWAP_SIDES:
 2667 1210  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
 2668 1214  C8          	RET	Z			;If 1 sided then return Z
 2669                   
 2670 1215  FD 7E 01    	LD	A,(IY+SIDE)
 2671 1218  B7          	OR	A,A			;If 0 we have done A side now do B
 2672 1219  28 09       	JR	Z,GOTO_B_SIDE1		;switch over to B side
 2673 121B  AF          	XOR	A,A
 2674 121C  FD 77 01    	LD	(IY+SIDE),A
 2675 121F  CD 122F     	CALL	SET_SIDE		;update the hardware
 2676 1222  AF          	XOR	A,A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  47
VF      Z80

 2677 1223  C9          	RET				;Return Z
 2678 1224              GOTO_B_SIDE1:
 2679 1224  3E 02       	LD	A,02H
 2680 1226  FD 77 01    	LD	(IY+SIDE),A	
 2681 1229  CD 122F     	CALL	SET_SIDE		;Update the hardware	
 2682 122C  AF          	XOR	A,A
 2683 122D  3D          	DEC	A
 2684 122E  C9          	RET				;Returns NZ
 2685                   ;
 2686                   ;
 2687                   ; SELECT DRIVE SIDE IN HARDWARE
 2688                   ; Set side for sector R/W if different than current side
 2689                   ; (SIDE) = 0 if A side, (SIDE)= 02H if B side.
 2690                   ; Note Hardware bit 7 of HW_BYTE is updated here!
 2691                   ;
 2692 122F              SET_SIDE:
 2693 122F  DD 7E 02    	LD	A,(IX+HW_BYTE)	;Get current side info
 2694 1232  CB 67       	BIT	4,A		;Is it a 1 or 2 sided disk
 2695 1234  C8          	RET	Z		;Return if single sided
 2696                   
 2697 1235  FD 7E 01    	LD	A,(IY+SIDE)	;Which side do we want. (0 for A, 02H for B)
 2698 1238  B7          	OR	A,A
 2699 1239  20 0C       	JR	NZ,SET_HW_B
 2700 123B  DB 63       	IN	A,(SELECT)	;get hardware selection
 2701 123D  CB E7       	SET	4,A		;Port hardware for side selection (1=A, 0=B)
 2702 123F  D3 63       	OUT	(SELECT),A	;Select side A in hardware (inverted)
 2703 1241  DD CB 02 BE 	RES	7,(IX+HW_BYTE)	;Set to side to A (Will show up in IOBYTE info)
 2704 1245  18 0A       	JR	DONE_SET_SIDES
 2705 1247              SET_HW_B:
 2706 1247  DB 63       	IN	A,(SELECT)	;get hardware selection
 2707 1249  CB A7       	RES	4,A		;Port hardware for side selection (1=A, 0=B)
 2708 124B  D3 63       	OUT	(SELECT),A	;Select side B in hardware
 2709 124D  DD CB 02 FE 	SET	7,(IX+HW_BYTE)	;Set to side to B (Will show up in IOBYTE info)
 2710                   ;
 2711 1251              DONE_SET_SIDES:
 2712 1251  C5          	PUSH	BC
 2713 1252  06 FF       	LD	B,0FFH		;Slight delay for hardware
 2714 1254  10 FE       DELYS:	DJNZ	DELYS
 2715 1256  C1          	POP	BC
 2716 1257  C9          	RET
 2717                   ;
 2718                   ;
 2719                   ;
 2720                   ;
 2721                   ; Turn on or off the hardware wait state generator. This hardware stops and starts the CPU
 2722                   ; as bytes are read/written to the 179x/Disk
 2723                   ;
 2724                   ;	DISABLE WAIT STATES
 2725 1258              WAIT_OFF:
 2726 1258  DB 63       	IN	A,(SELECT)
 2727 125A  F6 80       	OR	80H
 2728 125C  D3 63       	OUT	(SELECT),A
 2729 125E  C9          	RET
 2730                   ;
 2731                   ;	ENABLE WAIT STATES
 2732 125F              WAIT_ON:
 2733 125F  DB 63       	IN	A,(SELECT)
 2734 1261  E6 7F       	AND	7FH
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  48
VF      Z80

 2735 1263  D3 63       	OUT	(SELECT),A
 2736 1265  C9          	RET
 2737                   ;
 2738                   ;
 2739                   ;	FORCE CHIP INTERUPT
 2740 1266  3E D0       FRCINT:	LD	A,0D0H
 2741 1268  D3 64       	OUT	(CMD),A
 2742 126A  3E 0A       	LD	A,10
 2743 126C  3D          FRC1:	DEC	A
 2744 126D  20 FD       	JR	NZ,FRC1
 2745 126F  DB 64       	IN	A,(STATUS)
 2746 1271  C9          	RET
 2747                   ;
 2748                   ;
 2749                   ;
 2750                   ; General routine to show the current location of the active disk head.
 2751                   ; Will display track, sector and side if two sided drive/disk
 2752                   ; Format is 'At TRACK xxH, SCETOR yyH, SIDE A/B.' 
 2753                   ; Note: NO CR/LF at start of string
 2754                   ;
 2755 1272              SHOW_TSS_LOC:
 2756 1272  E5          	PUSH	HL
 2757 1273  21 251E     	LD	HL,ATTRK	;Announce current track position
 2758 1276  CD 1933     	CALL	PMSG
 2759 1279  DB 65       	IN	A,(TRACK)		
 2760 127B  CD 19B9     	CALL	PACC
 2761 127E  21 2526     	LD	HL,ATSEC	;and sector position
 2762 1281  CD 1933     	CALL	PMSG
 2763 1284  DB 66       	IN	A,(SECTOR)		
 2764 1286  CD 19B9     	CALL	PACC
 2765 1289              SHOW_SIDES:			;Announce head if 2 sided disk
 2766 1289  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 2767 128D  28 16       	JR	Z,RW_SKIP_SIDES	;If 1 sided then skip side swap
 2768 128F  DB 63       	IN	A,(SELECT)	;Get hardware selection
 2769 1291  CB 67       	BIT	4,A		;Port Hardware for side selection (1=A, 0=B)
 2770 1293  28 08       	JR	Z,RW_B_SIDE	
 2771 1295  21 2531     	LD	HL,HEAD0_MSG	;Announce side 0 (or A)
 2772 1298  CD 1933     	CALL	PMSG
 2773 129B  E1          	POP	HL
 2774 129C  C9          	RET
 2775 129D              RW_B_SIDE:
 2776 129D  21 253B     	LD	HL,HEAD1_MSG	;Announce side 1 (or B)
 2777 12A0  CD 1933     	CALL	PMSG
 2778 12A3  E1          	POP	HL
 2779 12A4  C9          	RET
 2780 12A5              RW_SKIP_SIDES:
 2781 12A5  21 2545     	LD	HL,H_MSG	;If SS disk, no need for a HEAD# message
 2782 12A8  CD 1933     	CALL	PMSG
 2783 12AB  E1          	POP	HL
 2784 12AC  C9          	RET
 2785                   ;
 2786                   ;
 2787                   ;
 2788                   ; General routine to show the current TRACK location of the active disk head.
 2789                   ; Will display track only.  The format is 'At TRACK xxH.'
 2790                   ; Note: NO CR,LF at start of string
 2791                   ;
 2792 12AD              SHOW_T_LOC:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  49
VF      Z80

 2793 12AD  E5          	PUSH	HL
 2794 12AE  21 251E     	LD	HL,ATTRK
 2795 12B1  CD 1933     	CALL	PMSG
 2796 12B4  DB 65       	IN	A,(TRACK)	;Say what track we are now on.
 2797 12B6  CD 19B9     	CALL	PACC		;Display current track number 
 2798 12B9  21 2545     	LD	HL,H_MSG
 2799 12BC  CD 1933     	CALL	PMSG
 2800 12BF  E1          	POP	HL
 2801 12C0  C9          	RET
 2802                   ;
 2803                   ;
 2804                   ; General routine to show the current TRACK & SIDE location of the active 
 2805                   ; disk head. The format is 'At TRACK xxH Side A/B.'
 2806                   ; Note: NO CR,LF at start of string
 2807                   ;
 2808 12C1              SHOW_TS_LOC:
 2809 12C1  E5          	PUSH	HL
 2810 12C2  21 251E     	LD	HL,ATTRK
 2811 12C5  CD 1933     	CALL	PMSG
 2812 12C8  DB 65       	IN	A,(TRACK)	;Say what track we are now on.
 2813 12CA  CD 19B9     	CALL	PACC		;Display current track number 
 2814 12CD  C3 1289     	JP	SHOW_SIDES
 2815                   ;
 2816                   ;
 2817                   ; General routine to print out the error status returned by the 1791/5 chip
 2818                   ; after seeks, sector reads etc. 
 2819                   ; Note: will end with CRLF and error bits in [A]
 2820                   ;
 2821 12D0              SHOW_ERRORS:
 2822 12D0  3A 392E     	LD	A,(ERRORS_FLAG)
 2823 12D3  3C          	INC	A
 2824 12D4  32 392E     	LD	(ERRORS_FLAG),A	;Assuming we have less than 256 errors!
 2825                   
 2826 12D7  3A 3939     	LD	A,(CHIP_CMDSV)	;What was the last command to the chip
 2827 12DA  FE 80       	CP	A,RDCMD91	;Was it a read sector 1791 CMD?
 2828 12DC  20 05       	JR	NZ,NOT_RDCMD91
 2829 12DE  21 30DC     	LD	HL,SEC_READ_ERROR 
 2830 12E1  18 5D       	JR	DONE_ERRS
 2831 12E3              NOT_RDCMD91:
 2832 12E3  FE 88       	CP	A,RDCMD95	;Was it a read sector 1795 CMD?
 2833 12E5  20 05       	JR	NZ,NOT_RDCMD95
 2834 12E7  21 30DC     	LD	HL,SEC_READ_ERROR 
 2835 12EA  18 54       	JR	DONE_ERRS
 2836 12EC              NOT_RDCMD95:
 2837 12EC  FE 18       	CP	A,SKNCMD	;Was it a seek no verify cmd 
 2838 12EE  20 05       	JR	NZ,NOT_SKNCMD
 2839 12F0  21 311F     	LD	HL,SEEKNV_ERROR
 2840 12F3  18 4B       	JR	DONE_ERRS
 2841 12F5              NOT_SKNCMD:
 2842 12F5  FE 0C       	CP	A,RSCMD		;Was it a restore CMD 
 2843 12F7  20 05       	JR	NZ,NOT_RSCMD
 2844 12F9  21 3160     	LD	HL,RSCMD_ERROR
 2845 12FC  18 42       	JR	DONE_ERRS
 2846 12FE              NOT_RSCMD:
 2847 12FE  FE C4       	CP	A,RDACMD	;Was it a read track address command
 2848 1300  20 05       	JR	NZ,NOT_RDACMD
 2849 1302  21 319F     	LD	HL,SEC_ID_ERROR
 2850 1305  18 39       	JR	DONE_ERRS
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  50
VF      Z80

 2851 1307              NOT_RDACMD:
 2852 1307  FE 1C       	CP	A,SKCMD		;Was it seek cmd with verify
 2853 1309  20 05       	JR	NZ,NOT_SKCMD
 2854 130B  21 31D6     	LD	HL,SKCMD_ERROR
 2855 130E  18 30       	JR	DONE_ERRS
 2856 1310              NOT_SKCMD:
 2857 1310  FE E4       	CP	A,RDTCMD	;Was it a read track command
 2858 1312  20 05       	JR	NZ,NOT_RDTCMD
 2859 1314  21 3251     	LD	HL,RDTCMD_ERROR
 2860 1317  18 27       	JR	DONE_ERRS
 2861 1319              NOT_RDTCMD:
 2862 1319  FE F4       	CP	A,WRTCMD	;Was it a write track cmd
 2863 131B  20 05       	JR	NZ,NOT_WRTCMD
 2864 131D  21 3288     	LD	HL,WRTCMD_ERROR
 2865 1320  18 1E       	JR	DONE_ERRS
 2866 1322              NOT_WRTCMD:
 2867 1322  FE A0       	CP	A,WRCMD91	;Was it a sector write cmd 1791
 2868 1324  20 05       	JR	NZ,NOT_WRCMD91
 2869 1326  21 32C2     	LD	HL,WRCMD_ERROR
 2870 1329  18 15       	JR	DONE_ERRS
 2871 132B              NOT_WRCMD91:
 2872 132B  FE A8       	CP	A,WRCMD95	;Was it a sector write cmd 1795
 2873 132D  20 05       	JR	NZ,NOT_WRCMD95
 2874 132F  21 32C2     	LD	HL,WRCMD_ERROR
 2875 1332  18 0C       	JR	DONE_ERRS
 2876 1334              NOT_WRCMD95:
 2877 1334  FE 5C       	CP	A,STEPIN	;Was it a step-in CMD
 2878 1336  20 05       	JR	NZ,NOT_STEPIN
 2879 1338  21 3212     	LD	HL,STEPIN_ERROR
 2880 133B  18 03       	JR	DONE_ERRS
 2881 133D              NOT_STEPIN:
 2882 133D  21 2E02     	LD	HL,UNKNOWN_ERROR
 2883 1340              DONE_ERRS:
 2884 1340  CD 1933     	CALL	PMSG
 2885 1343  3A 3938     	LD	A,(ERSTAT)
 2886 1346  CD 19D7     	CALL	ZBITS		;Drop in bit pattern
 2887 1349  21 2E00     	LD	HL,CLOSE_BRACKET
 2888 134C  CD 1933     	CALL	PMSG
 2889 134F  CD 1950     	CALL	ZCRLF		;Always end with CRLF
 2890 1352  3A 3938     	LD	A,(ERSTAT)	;Return with error in A
 2891 1355  C9          	RET
 2892                   ;
 2893                   ;
 2894                   ; This routine simply checks the written and re-read sectors in memory are the same.
 2895                   ; Z if all OK. NZ, if error(s)
 2896                   ;
 2897 1356              CMP_BUFFERS:
 2898 1356  21 5000     	LD	HL,FBUFFER
 2899 1359  11 6000     	LD	DE,FBUFFER2
 2900 135C  0E 00       	LD	C,0		;Will flag errors
 2901 135E  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2902 1361  06 80       	LD	B,NBYTES
 2903 1363  B7          	OR	A,A		;Block size count
 2904 1364  28 13       	JR	Z,C128256	;Do 128 byte compare
 2905 1366  06 00       	LD	B,0
 2906 1368  FE 01       	CP	A,1
 2907 136A  28 0D       	JR	Z,C128256	;Do 256 byte read
 2908 136C  FE 02       	CP	A,2
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  51
VF      Z80

 2909 136E  28 06       	JR	Z,C512		;Do 512 byte read
 2910 1370  CD 137F     	CALL	CHECK_BLOCK	;Must be 1024 byte sectors so 4X256		
 2911 1373  CD 137F     	CALL	CHECK_BLOCK
 2912 1376  CD 137F     C512:	CALL	CHECK_BLOCK	;256X2 bytes
 2913 1379  CD 137F     C128256:CALL	CHECK_BLOCK
 2914 137C  AF          	XOR	A,A
 2915 137D  B9          	CP	A,C
 2916 137E  C9          	RET	
 2917 137F              CHECK_BLOCK:
 2918 137F  1A          	LD	A,(DE)
 2919 1380  BE          	CP	A,(HL)		;Do they match
 2920 1381  C4 1389     	CALL	NZ,MIS_MATCH
 2921 1384  23          	INC	HL
 2922 1385  13          	INC	DE
 2923 1386  10 F7       	DJNZ	CHECK_BLOCK	;Decrease count
 2924 1388  C9          	RET
 2925 1389              MIS_MATCH:
 2926 1389  0E 01       	LD	C,1		;Flag for error
 2927 138B  C9          	RET	
 2928                   ;
 2929                   ; Fill memory buffer with a byte [C]. Is be used for sector write and CPM86
 2930                   ; disk initilization
 2931                   ; Return with [HL] pointing to end of sector buffer +1
 2932 138C              FILL_BUFFER:
 2933 138C  21 5000     	LD	HL,FBUFFER
 2934 138F  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2935 1392  06 80       	LD	B,NBYTES
 2936 1394  B7          	OR	A,A		;Block size count
 2937 1395  28 13       	JR	Z,B128256	;Do 128 byte compare
 2938 1397  06 00       	LD	B,0
 2939 1399  FE 01       	CP	A,1
 2940 139B  28 0D       	JR	Z,B128256	;Do 256 byte read
 2941 139D  FE 02       	CP	A,2
 2942 139F  28 06       	JR	Z,B512		;Do 512 byte read
 2943 13A1  CD 13AE     	CALL	BUILD_BLOCK	;Must be 1024 byte sectors so 4X256		
 2944 13A4  CD 13AE     	CALL	BUILD_BLOCK
 2945 13A7  CD 13AE     B512:	CALL	BUILD_BLOCK	;256X2 bytes
 2946 13AA  CD 13AE     B128256:CALL	BUILD_BLOCK
 2947 13AD  C9          	RET
 2948                   
 2949 13AE              BUILD_BLOCK:
 2950 13AE  71          	LD	(HL),C		;Drop in the fill character	
 2951 13AF  23          	INC	HL
 2952 13B0  10 FC       	DJNZ	BUILD_BLOCK	;Decrease count
 2953 13B2  C9          	RET
 2954                   ;
 2955                   ;
 2956                   ;
 2957                   ;
 2958                   ;---------------- BUILD TRACK IMAGE IN RAM ------------------------
 2959                   ; Assumes	IX points to the table or relevent Disk paramaters and
 2960                   ;		(TADDR) points to the buffer in RAM to build the track.
 2961                   ;		Requires valid (TADDR),(TRK),(SCTR) & (SIDE)
 2962                   ;		For maximum flexibility I have used seperate routines 
 2963                   ;		for Single and Double density formats. This routine is 
 2964                   ;		a very sensitive. Don't change unless you know what
 2965                   ;		you are doing.
 2966                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  52
VF      Z80

 2967                   ;	Build in memory (@5000H)a complete SD Track.
 2968                   ;
 2969 13B3              BUILD_TRACK:
 2970 13B3  FD E5       	PUSH	IY			;Save the "main" IY pointer to TRACK,SIDE,SECTOR
 2971 13B5  FD 7E 00    	LD	A,(IY+TRK)
 2972 13B8  32 3947     	LD	(F_TRK),A		;store trk & side numbers locally
 2973 13BB  FD 7E 01    	LD	A,(IY+SIDE)
 2974 13BE  32 3948     	LD	(F_SIDE),A
 2975                   
 2976 13C1  DD 66 10    	LD	H,(IX+SKEW1)		;IY Now points to the table containing the order of 
 2977 13C4  DD 6E 0F    	LD	L,(IX+SKEW)		;the sector numbers on a track (usually 1,2,3,4...
 2978 13C7  E5          	PUSH	HL			;but not always
 2979 13C8  FD E1       	POP	IY			;HL->IY
 2980                   
 2981 13CA  2A 0040     	LD	HL,(TADDR)		;This will be FBUFFER where track ins built in RAM
 2982 13CD  DD CB 02 76 	BIT	6,(IX+HW_BYTE)		;Will build a different track image for SD or DD disks
 2983 13D1  C2 14AB     	JP	NZ,DD_TRACKS		;Seperate sector image for DD tracks
 2984                   
 2985 13D4              SD_TRACKS:	
 2986 13D4  CD 13EE     	CALL	SD_TRK_HEADER		;Drop in header and Index mark BEFORE first sector
 2987                   					
 2988 13D7  FD 56 00    	LD	D,(IY+0)		;sector# in D, usually 1 at the start
 2989 13DA  DD 5E 00    	LD	E,(IX+NSCTRS)		;Total Sectors/side
 2990 13DD              NEXT_SEC:
 2991 13DD  CD 140D     	CALL	SD_BUILD_SEC		;<<< Build a sector >>>>>
 2992 13E0  FD 23       	INC	IY			;point to next sector number in sec skew table
 2993 13E2  FD 56 00    	LD	D,(IY+0)		;store sector # in D
 2994 13E5  1D          	DEC	E
 2995 13E6  20 F5       	JR	NZ,NEXT_SEC		;All sectors are in RAM
 2996                   	
 2997 13E8  CD 1490     	CALL	SD_TRK_END		;Now need to flush out track to end
 2998 13EB  FD E1       	POP	IY			;Get back the main IY pointer
 2999 13ED  C9          	RET
 3000                   ;
 3001                   ;	Build in memory (@5000H)a complete Single Density Track.
 3002                   ;
 3003 13EE              SD_TRK_HEADER:				;Lay down the track header before the 1st sector
 3004 13EE  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Do not alter [D]= Sec# or [E]= Sec/side
 3005 13F1  DD 46 03    	LD	B,(IX+HEADR)		;Header has 40 (FF's)
 3006 13F4  CD 14A6     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3007 13F7  AF          	XOR	A,A			;Now 6 0's
 3008 13F8  06 06       	LD	B,6
 3009 13FA  CD 14A6     	CALL	DROP
 3010 13FD  3E FC       	LD	A,0FCH			;Index ID mark
 3011 13FF  77          	LD	(HL),A			;drop into image
 3012 1400  23          	INC	HL
 3013 1401  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Now 26 (FF's)
 3014 1404  06 1A       	LD	B,26			;Header has the count of fill characters required
 3015 1406  CD 14A6     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3016 1409  22 3949     	LD	(INDEX_MARK),HL		;pointer+1 to end of track header
 3017 140C  C9          	RET				;return with [HL] pointing to first sector byte
 3018                   ;
 3019 140D              SD_BUILD_SEC:				;Lay down a sector at current [HL]. Do not alter [D] or [E]
 3020 140D  AF          	XOR	A,A
 3021 140E  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 6,0's for IMB 3740, 8")
 3022 1411  CD 14A6     	CALL	DROP
 3023 1414  3E FE       	LD	A,0FEH			;Sector ID Address mark
 3024 1416  77          	LD	(HL),A			;drop it in the growing image
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  53
VF      Z80

 3025 1417  23          	INC	HL
 3026 1418  3A 3947     	LD	A,(F_TRK)		;Drop in the track #
 3027 141B  77          	LD	(HL),A
 3028 141C  23          	INC	HL
 3029 141D  3A 3948     	LD	A,(F_SIDE)		;Side#, 0 for A side, 02H for B side
 3030 1420  B7          	OR	A,A
 3031 1421  3E 00       	LD	A,0
 3032 1423  28 02       	JR	Z,BLD_ASIDE
 3033 1425  3E 01       	LD	A,1			
 3034 1427              BLD_ASIDE:			
 3035 1427  77          	LD	(HL),A			;0 here for A side, 1 for B side
 3036 1428  23          	INC	HL
 3037 1429  72          	LD	(HL),D			;Drop in sector #
 3038 142A  23          	INC	HL
 3039 142B  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2, 1024=3
 3040 142E  77          	LD	(HL),A			;drop in sector length byte
 3041 142F  23          	INC	HL	
 3042 1430  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 179x 	
 3043 1432  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3044 1433  23          	INC	HL
 3045 1434  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3046 1437  DD 46 05    	LD	B,(IX+GAP2)		;<---- (eg. 11,FF's for IMB 3740, 8")
 3047 143A  CD 14A6     	CALL	DROP
 3048 143D  AF          	XOR	A,A
 3049 143E  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 6,0's for IMB 3740, 8")
 3050 1441  CD 14A6     	CALL	DROP
 3051 1444  3E FB       	LD	A,0FBH			;Data address mark for 1791/5 	
 3052 1446  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3053 1447  23          	INC	HL
 3054 1448  7A          	LD	A,D
 3055 1449  FE 01       	CP	A,1			;If first sector then store data marker
 3056 144B  20 03       	JR	NZ,SDATA_FIELD 
 3057 144D  22 394B     	LD	(S_DATA_MARK),HL	;Pointer to start of sector data area
 3058 1450              SDATA_FIELD:				;Now write in the sector data field itself
 3059 1450  DD 7E 09    	LD	A,(IX+SIZE)		;128,256,512 or 1024 byte sector size
 3060 1453  06 80       	LD	B,NBYTES
 3061 1455  0E 01       	LD	C,1			;1 loop of 128 bytes in WR_DATA_FIELD below
 3062 1457  B7          	OR	A,A
 3063 1458  28 10       	JR	Z,SD_DATA_FIELD		;Do 128 byte write (B=128)
 3064 145A  06 00       	LD	B,0			;Need 256 bytes for the rest of possible sectors
 3065 145C  0E 01       	LD	C,1			;One loop
 3066 145E  FE 01       	CP	A,1
 3067 1460  28 08       	JR	Z,SD_DATA_FIELD		;Do 256 byte write
 3068 1462  0E 02       	LD	C,2			;2 loops of 256 bytes in WRITE_DATA_FIELD
 3069 1464  FE 02       	CP	A,2
 3070 1466  28 02       	JR	Z,SD_DATA_FIELD		;Do 512 byte read
 3071 1468  0E 04       	LD	C,4			;(must be 3) so 1024 byte sector
 3072 146A              SD_DATA_FIELD:
 3073 146A  DD 7E 0B    	LD	A,(IX+DATA_FILL_CHAR)	;get the sector fill character (usually E5)
 3074 146D  CD 14A6     SDF0:	CALL	DROP
 3075 1470  0D          	DEC	C
 3076 1471  20 FA       	JR	NZ,SDF0			;Decrese [C] to 0
 3077 1473  7A          	LD	A,D
 3078 1474  FE 01       	CP	A,1			;If first sector then store image mark 
 3079 1476  20 03       	JR	NZ,NOT_FIRST
 3080 1478  22 394D     	LD	(E_DATA_MARK),HL	;For first sector will  diaplay data late
 3081 147B              NOT_FIRST:
 3082 147B  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 1791/5 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  54
VF      Z80

 3083 147D  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3084 147E  23          	INC	HL
 3085 147F  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3086 1482  DD 46 06    	LD	B,(IX+GAP3)		;<---- (eg. 27,FF's for IMB 3740, 8")
 3087 1485  CD 14A6     	CALL	DROP
 3088 1488  7A          	LD	A,D
 3089 1489  FE 01       	CP	A,1			;If first sector then store image mark 
 3090 148B  C0          	RET	NZ
 3091 148C  22 394F     	LD	(E_SEC_MARK),HL		;For first sector will diaplay data later
 3092 148F  C9          	RET
 3093                   ;
 3094 1490              SD_TRK_END
 3095 1490  22 3951     	LD	(S_GAP4_MARK),HL	;Mark beginning of end of track field (GAP4)
 3096 1493  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3097 1496  DD 46 07    	LD	B,(IX+GAP4)		;<---- (eg 247,FF's  for IMB 3740, 8")
 3098 1499  DD 4E 08    	LD	C,(IX+GAP4R)		;Times to repeat DROP
 3099 149C  CD 14A6     SD_TRK1:CALL	DROP
 3100 149F  0D          	DEC	C
 3101 14A0  20 FA       	JR	NZ,SD_TRK1
 3102 14A2  22 3953     	LD	(E_GAP4_MARK),HL	;Mark end of Track
 3103 14A5  C9          	RET
 3104                   ;
 3105 14A6  77          DROP:	LD	(HL),A			;DATA block loader
 3106 14A7  23          	INC	HL			;B= byte count,HL pointer
 3107 14A8  10 FC       	DJNZ	DROP			;A = value to drop into image. Count in B
 3108 14AA  C9          	RET
 3109                   ;
 3110                   ;
 3111                   ;
 3112                   ;	Build in memory (@5000H)a complete Double Density Track.
 3113                   ;
 3114 14AB              DD_TRACKS:				;Same thing for DD Trdcks. Extra stuff req.
 3115 14AB  CD 14C5     	CALL	DD_TRK_HEADER		;Drop in header and Index mark BEFORE first sector
 3116                   	
 3117 14AE  FD 56 00    	LD	D,(IY+0)		;sector# in D, usually 1 at the start
 3118 14B1  DD 5E 00    	LD	E,(IX+NSCTRS)		;Total Sectors/side
 3119 14B4              DD_NEXT_SEC:
 3120 14B4  CD 14EB     	CALL	DD_BUILD_SEC		;<<< Build a DD sector >>>>>
 3121 14B7  FD 23       	INC	IY			;point to next sector number in sec skew table
 3122 14B9  FD 56 00    	LD	D,(IY+0)		;store sector # in D
 3123 14BC  1D          	DEC	E
 3124 14BD  20 F5       	JR	NZ,DD_NEXT_SEC		;All sectors are in RAM
 3125                   	
 3126 14BF  CD 157C     	CALL	DD_TRK_END		;Now need to flush out track to end
 3127 14C2  FD E1       	POP	IY			;get back the main IY pointer
 3128 14C4  C9          	RET
 3129                   ;
 3130                   ;
 3131 14C5              DD_TRK_HEADER:				;Lay down the track header before the 1st sector
 3132 14C5  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Do not alter [D]= Sec# or [E]= Sec/side
 3133 14C8  DD 46 03    	LD	B,(IX+HEADR)		;Header has 80 (4E's)
 3134 14CB  CD 14A6     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3135 14CE  AF          	XOR	A,A			;Now 12 0's
 3136 14CF  06 0C       	LD	B,12
 3137 14D1  CD 14A6     	CALL	DROP
 3138 14D4  3E F6       	LD	A,0F6H			;3 of F6's
 3139 14D6  06 03       	LD	B,3
 3140 14D8  CD 14A6     	CALL	DROP
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  55
VF      Z80

 3141 14DB  3E FC       	LD	A,0FCH			;Index ID mark (FC)
 3142 14DD  77          	LD	(HL),A			;drop into image
 3143 14DE  23          	INC	HL
 3144 14DF  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Now 50 (4Es)
 3145 14E2  06 32       	LD	B,50			;Header has the count of fill characters required
 3146 14E4  CD 14A6     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3147 14E7  22 3949     	LD	(INDEX_MARK),HL		;pointer+1 to end of track header
 3148 14EA  C9          	RET				;return with [HL] pointing to first sector byte
 3149                   ;
 3150 14EB              DD_BUILD_SEC:				;Lay down a sector at current [HL]. Do not alter [D] or [E]
 3151 14EB  AF          	XOR	A,A
 3152 14EC  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 12,0's for IBM System 34 Format)
 3153 14EF  CD 14A6     	CALL	DROP
 3154 14F2  3E F5       	LD	A,0F5H			;Special DD bytes
 3155 14F4  06 03       	LD	B,3
 3156 14F6  CD 14A6     	CALL	DROP
 3157 14F9  3E FE       	LD	A,0FEH			;Sector ID Address mark
 3158 14FB  77          	LD	(HL),A			;drop it in the growing image
 3159 14FC  23          	INC	HL
 3160 14FD  3A 3947     	LD	A,(F_TRK)			;Drop in the track #
 3161 1500  77          	LD	(HL),A
 3162 1501  23          	INC	HL
 3163 1502  3A 3948     	LD	A,(F_SIDE)		;Side#, 0 for A side, 02H for B side
 3164 1505  B7          	OR	A,A
 3165 1506  3E 00       	LD	A,0
 3166 1508  28 02       	JR	Z,DBLD_ASIDE
 3167 150A  3E 01       	LD	A,1			;1 for side B
 3168 150C              DBLD_ASIDE:			
 3169 150C  77          	LD	(HL),A			;0 here for A side, 1 for B side
 3170 150D  23          	INC	HL
 3171 150E  72          	LD	(HL),D			;Drop in sector #
 3172 150F  23          	INC	HL
 3173 1510  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2, 1024=3
 3174 1513  77          	LD	(HL),A			;drop in sector length byte
 3175 1514  23          	INC	HL	
 3176 1515  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 179x 	
 3177 1517  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3178 1518  23          	INC	HL
 3179 1519  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3180 151C  DD 46 05    	LD	B,(IX+GAP2)		;<----(eg 22,4E's for IBM System 34 Format)
 3181 151F  CD 14A6     	CALL	DROP
 3182 1522  AF          	XOR	A,A
 3183 1523  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg 8,0's for IBM System 34 Format)
 3184 1526  CD 14A6     	CALL	DROP
 3185 1529  3E F5       	LD	A,0F5H			;Special DD bytes
 3186 152B  06 03       	LD	B,3
 3187 152D  CD 14A6     	CALL	DROP
 3188 1530  3E FB       	LD	A,0FBH			;Data address mark for 1791/5 	
 3189 1532  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3190 1533  23          	INC	HL
 3191 1534  7A          	LD	A,D			;Get sec #
 3192 1535  FE 01       	CP	A,1			;If first sector then store data marker
 3193 1537  20 03       	JR	NZ,DDATA_FIELD 
 3194 1539  22 394B     	LD	(S_DATA_MARK),HL	;Pointer to start of sector data area
 3195 153C              DDATA_FIELD:				;Now write in the sector data field itself
 3196 153C  DD 7E 09    	LD	A,(IX+SIZE)		;128,256,512 or 1024 byte sector size
 3197 153F  06 80       	LD	B,NBYTES
 3198 1541  0E 01       	LD	C,1			;1 loop of 128 bytes in WR_DATA_FIELD below
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  56
VF      Z80

 3199 1543  B7          	OR	A,A
 3200 1544  28 10       	JR	Z,DD_DATA_FIELD		;Do 128 byte write (B=128)
 3201 1546  06 00       	LD	B,0			;Need 256 bytes for the rest of possible sectors
 3202 1548  0E 01       	LD	C,1			;One loop
 3203 154A  FE 01       	CP	A,1
 3204 154C  28 08       	JR	Z,DD_DATA_FIELD		;Do 256 byte write
 3205 154E  0E 02       	LD	C,2			;2 loops of 256 bytes in WRITE_DATA_FIELD
 3206 1550  FE 02       	CP	A,2
 3207 1552  28 02       	JR	Z,DD_DATA_FIELD		;Do 512 byte read
 3208 1554  0E 04       	LD	C,4			;(must be 3) so 1024 byte sector
 3209 1556              DD_DATA_FIELD:
 3210 1556  DD 7E 0B    	LD	A,(IX+DATA_FILL_CHAR)	;get the sector fill character (usually E5)
 3211 1559  CD 14A6     DDF0:	CALL	DROP
 3212 155C  0D          	DEC	C
 3213 155D  20 FA       	JR	NZ,DDF0			;Decrease [C] to 0
 3214 155F  7A          	LD	A,D			;Get back sec #
 3215 1560  FE 01       	CP	A,1			;If first sector then store image mark 
 3216 1562  20 03       	JR	NZ,DNOT_FIRST
 3217 1564  22 394D     	LD	(E_DATA_MARK),HL	;For first sector will  diaplay data late
 3218 1567              DNOT_FIRST:
 3219 1567  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 1791/5 
 3220 1569  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3221 156A  23          	INC	HL
 3222 156B  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3223 156E  DD 46 06    	LD	B,(IX+GAP3)		;<---- (54,4E's for IBM System 34 Format)
 3224 1571  CD 14A6     	CALL	DROP
 3225 1574  7A          	LD	A,D
 3226 1575  FE 01       	CP	A,1			;If first sector then store image mark 
 3227 1577  C0          	RET	NZ
 3228 1578  22 394F     	LD	(E_SEC_MARK),HL		;For first sector will diaplay data later
 3229 157B  C9          	RET
 3230                   ;
 3231 157C              DD_TRK_END
 3232 157C  22 3951     	LD	(S_GAP4_MARK),HL	;Mark beginning of end of track field (GAP4)
 3233 157F  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3234 1582  DD 46 07    	LD	B,(IX+GAP4)		;<---- (eg 598 4E's for IBM System 34 Format)
 3235 1585  DD 4E 08    	LD	C,(IX+GAP4R)		;Times to repeat DROP
 3236 1588  CD 14A6     DD_TRK1:CALL	DROP
 3237 158B  0D          	DEC	C
 3238 158C  20 FA       	JR	NZ,DD_TRK1
 3239 158E  22 3953     	LD	(E_GAP4_MARK),HL	;Mark end of Double density Track
 3240 1591  C9          	RET
 3241                   ;
 3242                   ; This routine initilized the first sector of a CPM86 5" Disk. 
 3243                   ; For DDDS CPM86 disks the last byte of the first sector has to be a 01.
 3244                   ; (For a DDSS CPM86 disk BTW it has to be 00)
 3245                   ;
 3246 1592              INIT_CPM86:
 3247 1592  21 29EF     	LD	HL,INITCPM_MSG	;Say Initilizing disk for CPM86
 3248 1595  CD 1933     	CALL	PMSG
 3249 1598  AF          	XOR	A,A		;Setup for the BIOS below
 3250 1599  FD 77 00    	LD	(IY+TRK),A	;Track 0 
 3251 159C  FD 77 01    	LD	(IY+SIDE),A	;Side A 
 3252 159F  3C          	INC	A
 3253 15A0  FD 77 02    	LD	(IY+SCTR),A	;Sector 1 
 3254 15A3  CD 122F     	CALL	SET_SIDE	;Make sure IX+HW_BYTE is set for correct side
 3255 15A6  CD 11D6     	CALL	START_DRIVE_1	;Select the drive in hardware
 3256 15A9  CD 0E2D     	CALL	HOME	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  57
VF      Z80

 3257 15AC  C4 12D0     	CALL	NZ,SHOW_ERRORS	;print out errors if any
 3258                   
 3259 15AF  21 5000     	LD	HL,FBUFFER	;Sector data to be written is here
 3260 15B2  22 0040     	LD	(TADDR),HL	;Setup DMA address for BIOS
 3261 15B5  0E E5       	LD	C,0E5H		;Data fill character (for CPM86 always 0E5H)
 3262 15B7  CD 138C     	CALL	FILL_BUFFER	;Fill buffer with character E5's 
 3263 15BA  2B          	DEC	HL		;Backup to last data byte
 3264 15BB  3E 01       	LD	A,01
 3265 15BD  77          	LD	(HL),A		;drop in the 01 flag at end.
 3266                   	
 3267 15BE  CD 103C     	CALL	WRITE_SECTOR	;Write sector back to disk
 3268 15C1  C4 12D0     	CALL	NZ,SHOW_ERRORS	;If any, show error flags
 3269 15C4  AF          	XOR	A,A		;Return Z so no further special commands will 
 3270 15C5  C9          	RET			;be picked up.
 3271                   
 3272                   ;
 3273                   ;
 3274                   ; Setup the "current drive" hardware selection bits for (A:,B:,C: or D:)
 3275                   ; Store bits in memory location (DRIVE_1)
 3276                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3277                   ;
 3278 15C6              SELECT_DR_1:
 3279 15C6  21 1A81     	LD	HL,GETDRV_MSG	;Ask which drive is the current drive
 3280 15C9  CD 1933     	CALL	PMSG
 3281 15CC  CD 193E     	CALL	GETCMD		;Get the input option
 3282 15CF  FE 1B       	CP	A,ESC		;Abort if ESC character
 3283 15D1  CA 15F7     	JP	Z,ABORT_CMD
 3284 15D4  FE 41       	CP	A,'A'
 3285 15D6  20 04       	JR	NZ,NOT_A1
 3286 15D8  3E 01       	LD	A,1
 3287 15DA  18 16       	JR	GOT_DRIVE1
 3288 15DC  FE 42       NOT_A1:	CP	A,'B'
 3289 15DE  20 04       	JR	NZ,NOT_B1
 3290 15E0  3E 02       	LD	A,2
 3291 15E2  18 0E       	JR	GOT_DRIVE1
 3292 15E4  FE 43       NOT_B1:	CP	A,'C'
 3293 15E6  20 04       	JR	NZ,NOT_C1
 3294 15E8  3E 04       	LD	A,4
 3295 15EA  18 06       	JR	GOT_DRIVE1
 3296 15EC  FE 44       NOT_C1:	CP	A,'D'
 3297 15EE  20 0C       	JR	NZ,INVALID_DR
 3298 15F0  3E 08       	LD	A,8
 3299 15F2              GOT_DRIVE1:
 3300 15F2  32 0046     	LD	(DRIVE_1),A
 3301 15F5  AF          	XOR	A,A
 3302 15F6  C9          	RET
 3303                   ;
 3304 15F7              ABORT_CMD:
 3305 15F7  AF          	XOR	A,A		;Abort with z flag but ESC in A
 3306 15F8  3D          	DEC	A		;Make NZ
 3307 15F9  3E 1B       	LD	A,ESC
 3308 15FB  C9          	RET
 3309                   ;
 3310 15FC              INVALID_DR:
 3311 15FC  AF          	XOR	A,A		;Abort with z flag but FF in A
 3312 15FD  3D          	DEC	A		;Make NZ
 3313 15FE  C9          	RET
 3314                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  58
VF      Z80

 3315                   ;
 3316                   ; Setup the "second drive" hardware selection bits for (A:,B:,C: or D:)
 3317                   ; Store bits in memory location (DRIVE_21)
 3318                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3319                   ;
 3320 15FF              SELECT_DR_2:
 3321 15FF  21 1A81     	LD	HL,GETDRV_MSG	;Ask which drive is the current drive
 3322 1602  CD 1933     	CALL	PMSG
 3323 1605  CD 193E     	CALL	GETCMD		;Get the input option
 3324 1608  FE 1B       	CP	A,ESC		;Abort if ESC character
 3325 160A  CA 15F7     	JP	Z,ABORT_CMD
 3326 160D  FE 41       	CP	A,'A'
 3327 160F  20 04       	JR	NZ,NOT_A2
 3328 1611  3E 01       	LD	A,1
 3329 1613  18 16       	JR	GOT_DRIVE2
 3330 1615  FE 42       NOT_A2:	CP	A,'B'
 3331 1617  20 04       	JR	NZ,NOT_B2
 3332 1619  3E 02       	LD	A,2
 3333 161B  18 0E       	JR	GOT_DRIVE2
 3334 161D  FE 43       NOT_B2:	CP	A,'C'
 3335 161F  20 04       	JR	NZ,NOT_C2
 3336 1621  3E 04       	LD	A,4
 3337 1623  18 06       	JR	GOT_DRIVE2
 3338 1625  FE 44       NOT_C2:	CP	A,'D'
 3339 1627  20 D3       	JR	NZ,INVALID_DR
 3340 1629  3E 08       	LD	A,8
 3341 162B              GOT_DRIVE2:
 3342 162B  32 0047     	LD	(DRIVE_2),A
 3343 162E  AF          	XOR	A,A
 3344 162F  C9          	RET
 3345                   
 3346                   
 3347                   ;------Select the appropiate disk parameter table ----------------------
 3348                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3349                   ; [IX] to Drive paramater table 
 3350                   ;
 3351 1630              SELECT_IX:
 3352 1630  CD 1950     	CALL	ZCRLF
 3353 1633              SELECT_IX1:
 3354 1633  21 1AC8     	LD	HL,GETSIZE_MSG	;Ask if 5" or 8"
 3355 1636  CD 1933     	CALL	PMSG
 3356 1639  CD 193E     	CALL	GETCMD		;get the input option
 3357 163C  FE 1B       	CP	A,ESC		;Abort if ESC character
 3358 163E  CA 15F7     	JP	Z,ABORT_CMD
 3359 1641  FE 35       	CP	A,'5'
 3360 1643  28 48       	JR	Z,GET_TABLE_5
 3361 1645  FE 38       	CP	A,'8'
 3362 1647  28 09       	JR	Z,GET_TABLE_8
 3363 1649  21 258A     BAD_CMD:LD	HL,BADCMD
 3364 164C  CD 1933     	CALL	PMSG
 3365 164F  AF          	XOR	A,A		;NZ Flag to indicate no selection
 3366 1650  3D          	DEC	A
 3367 1651  C9          	RET
 3368                   
 3369 1652              GET_TABLE_8:
 3370 1652  21 1AEB     	LD	HL,DISK_8_FORMATS	;Pointer for 8" disk table
 3371 1655  CD 1933     	CALL	PMSG		
 3372 1658  CD 193E     	CALL	GETCMD		;SELECT A DISK PARAMATER TABLE
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  59
VF      Z80

 3373 165B  FE 1B       	CP	A,ESC		;Abort if ESC character
 3374 165D  CA 15F7     	JP	Z,ABORT_CMD
 3375 1660  FE 41       	CP	A,'A'		;128 bytes/sec
 3376 1662  DD 21 32FC  	LD	IX,STDSDT	;Set to 128 byte sectors 8" SD IBM Disk
 3377 1666  C8          	RET	Z
 3378 1667  FE 42       	CP	A,'B'
 3379 1669  DD 21 334D  	LD	IX,STDDDT	;Set to 128 byte sectors 8" DD format
 3380 166D  C8          	RET	Z
 3381 166E  FE 43       	CP	A,'C'
 3382 1670  DD 21 33B8  	LD	IX,DDT256	;Set to 256 byte sectors IBM DDDS disk
 3383 1674  C8          	RET	Z		
 3384 1675  FE 44       	CP	A,'D'
 3385 1677  DD 21 3415  	LD	IX,DDT512	;Set for 512 byte sectors 8" DDDS disk
 3386 167B  C8          	RET	Z		
 3387 167C  FE 45       	CP	A,'E'
 3388 167E  DD 21 3452  	LD	IX,DDT1K	;Set for 1024 byte sectors 8" DDSS disk
 3389 1682  C8          	RET	Z
 3390 1683  FE 46       	CP	A,'F'
 3391 1685  DD 21 34A2  	LD	IX,DDT1K2	;Set for 1024 byte sectors 8" DDDS disk
 3392 1689  C8          	RET	Z
 3393 168A  C3 1649     	JP	BAD_CMD
 3394                   
 3395 168D              GET_TABLE_5:
 3396 168D  21 1C74     	LD	HL,DISK_5_FORMATS	;Pointer for 5" disk table
 3397 1690  CD 1933     	CALL	PMSG		
 3398 1693  CD 193E     	CALL	GETCMD		;SELECT A DISK PARAMATER TABLE
 3399 1696  FE 1B       	CP	A,ESC		;Abort if ESC character
 3400 1698  CA 15F7     	JP	Z,ABORT_CMD
 3401 169B  FE 41       	CP	A,'A'
 3402 169D  DD 21 3591  	LD	IX,MINCPM	;Set for 512 byte CPM-86 5" DD disk
 3403 16A1  C8          	RET	Z
 3404 16A2  FE 42       	CP	A,'B'
 3405 16A4  DD 21 34F2  	LD	IX,MINSDT	;Set for 128 byte 5" SD disk
 3406 16A8  C8          	RET	Z
 3407 16A9  FE 43       	CP	A,'C'
 3408 16AB  DD 21 353C  	LD	IX,MINDDT	;Set for 128 byte 5" DD disk
 3409 16AF  C8          	RET	Z
 3410 16B0  FE 44       	CP	A,'D'
 3411 16B2  DD 21 35DE  	LD	IX,DEC		;Set for 512 byte 5" DEC-VT180 DD disk
 3412 16B6  C8          	RET	Z
 3413 16B7  FE 45       	CP	A,'E'
 3414 16B9  DD 21 3628  	LD	IX,TOSHIBA	;Set for TOSHIBA DD disk
 3415 16BD  C8          	RET	Z
 3416 16BE  FE 46       	CP	A,'F'
 3417 16C0  DD 21 367D  	LD	IX,CDOS		;Set for CDOS SD disk
 3418 16C4  C8          	RET	Z
 3419 16C5  FE 47       	CP	A,'G'
 3420 16C7  DD 21 36CA  	LD	IX,CDOSDD	;Set for CDOS DD disk
 3421 16CB  C8          	RET	Z
 3422 16CC  FE 48       	CP	A,'H'
 3423 16CE  DD 21 3714  	LD	IX,EPSON	;Set for EPSON QX-10 DD disk
 3424 16D2  C8          	RET	Z
 3425 16D3  FE 49       	CP	A,'I'
 3426 16D5  DD 21 3758  	LD	IX,MORROW	;Set for MORROW DD disk
 3427 16D9  C8          	RET	Z
 3428 16DA  FE 4A       	CP	A,'J'
 3429 16DC  DD 21 37A0  	LD	IX,ZENITH	;Set for ZENITH Z-100 DD disk
 3430 16E0  C8          	RET	Z
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  60
VF      Z80

 3431 16E1  FE 4B       	CP	A,'K'
 3432 16E3  DD 21 37EC  	LD	IX,SUPER	;Set for SUPERBRAIN DD disk
 3433 16E7  C8          	RET	Z
 3434 16E8  FE 4C       	CP	A,'L'
 3435 16EA  DD 21 383C  	LD	IX,MSDOS	;Set for MSDOS 1.1 DD disk
 3436 16EE  C8          	RET	Z
 3437 16EF  FE 4D       	CP	A,'M'
 3438 16F1  DD 21 388B  	LD	IX,MSDOS2	;Set for MSDOS 2.2 DD disk
 3439 16F5  C8          	RET	Z
 3440 16F6  FE 4E       	CP	A,'N'
 3441 16F8  DD 21 38DB  	LD	IX,TRS80	;Set for TRS80 III DD disk
 3442 16FC  C8          	RET	Z
 3443 16FD  C3 1649     	JP	BAD_CMD
 3444                   ;
 3445                   ;
 3446                   ;-------------------------------------------------------------------------
 3447                   ; Describe on one line the type of disk format selected
 3448                   ; Assumes a valid IX pointer to relevent disk table
 3449                   ;
 3450 1700              SHOW_HW_TITLE:
 3451 1700  21 2114     	LD	HL,DISK_INFO		;CR,LF,'Current drive:-'
 3452 1703  CD 1933     	CALL	PMSG
 3453 1706  DD E5       	PUSH	IX			;IX->HL
 3454 1708  E1          	POP	HL
 3455 1709  11 0013     	LD	DE,TITLE		;add in offset
 3456 170C  19          	ADD	HL,DE			;HL now points to the title entry of the selected disk
 3457 170D  CD 1933     	CALL	PMSG			;Show the title line
 3458 1710  C9          	RET
 3459                   ;
 3460                   ;--------------------------------------------------------------------------
 3461                   ; Decode the IOBYTE byte and print out hardware disk parameters on one line
 3462                   ; Assumes a valid IX pointer to relevent disk table
 3463                   ;
 3464 1711              SHOW_HW_BYTE:
 3465 1711  21 2127     	LD	HL,DISK_INFO0		;CR,LF,'Drive '
 3466 1714  CD 1933     	CALL	PMSG
 3467 1717  3A 0048     	LD	A,(IOBYTE)		;Obtain the current drive letter (A;,B:....)
 3468 171A  E6 03       	AND	A,03H			
 3469 171C  FE 01       	CP	A,1			
 3470 171E  20 04       	JR	NZ,NOT_A_DR
 3471 1720  3E 41       	LD	A,'A'
 3472 1722  18 12       	JR	DRV_DONE
 3473 1724              NOT_A_DR:
 3474 1724  FE 02       	CP	A,2
 3475 1726  20 04       	JR	NZ,NOT_B_DR
 3476 1728  3E 42       	LD	A,'B'
 3477 172A  18 0A       	JR	DRV_DONE
 3478 172C              NOT_B_DR
 3479 172C  FE 04       	CP	A,4
 3480 172E  20 04       	JR	NZ,NOT_C_DR
 3481 1730  3E 43       	LD	A,'C'
 3482 1732  18 02       	JR	DRV_DONE
 3483 1734              NOT_C_DR
 3484 1734  3E 44       	LD	A,'D'
 3485 1736              DRV_DONE:
 3486 1736  4F          	LD	C,A			;Drop it on to the CRT/LCD
 3487 1737  CD 011B     	CALL	CO
 3488 173A  21 2130     	LD	HL,DISK_INFO1
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  61
VF      Z80

 3489 173D  CD 1933     	CALL	PMSG
 3490 1740  3A 0048     	LD	A,(IOBYTE)
 3491 1743  CD 19D7     	CALL	ZBITS			;Print out bit pattern in IOBYTE for hardware
 3492 1746  21 213C     	LD	HL,DISK_INFO2
 3493 1749  CD 1933     	CALL	PMSG
 3494 174C  DD CB 02 6E 	BIT	5,(IX+HW_BYTE)		;Say whether 8" or 5"
 3495 1750  28 04       	JR	Z,INCH8
 3496 1752  0E 35       	LD	C,'5'
 3497 1754  18 02       	JR	NEXT2
 3498 1756  0E 38       INCH8:	LD	C,'8'
 3499 1758  CD 011B     NEXT2:	CALL	CO
 3500 175B  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Say whether Single or Double sided disk
 3501 175F  28 05       	JR	Z,S_SIDE
 3502 1761  21 2144     	LD	HL,DISK_INFO3
 3503 1764  18 03       	JR	NEXT3
 3504 1766  21 2157     S_SIDE:	LD	HL,DISK_INFO4
 3505 1769  CD 1933     NEXT3:	CALL	PMSG
 3506 176C  DD CB 02 76 	BIT	6,(IX+HW_BYTE)		;Say whether SD or DD disk
 3507 1770  28 05       	JR	Z,DD_DSK
 3508 1772  21 216A     	LD	HL,DISK_INFO5
 3509 1775  18 03       	JR	NEXT4
 3510 1777  21 217F     DD_DSK:	LD	HL,DISK_INFO6
 3511 177A  CD 1933     NEXT4:	CALL	PMSG
 3512 177D  C9          	RET
 3513                   ;
 3514                   ;
 3515                   ;----------------------------------------------------------
 3516                   ; Display the disk paramater table pointed to by IX
 3517                   ;
 3518 177E              SHOW_IX_TABLE:
 3519 177E  21 2194     	LD	HL,DISK_INFO7		;Print sectors/track
 3520 1781  CD 1933     	CALL	PMSG
 3521 1784  DD 7E 00    	LD	A,(IX+NSCTRS)
 3522 1787  CD 19B9     	CALL	PACC
 3523 178A  21 21BA     	LD	HL,DISK_INFO8		;Print tracks/side
 3524 178D  CD 1933     	CALL	PMSG
 3525 1790  DD 7E 01    	LD	A,(IX+NTRKS)
 3526 1793  CD 19B9     	CALL	PACC
 3527 1796  21 21CA     	LD	HL,DISK_INFO9		;Sector Size
 3528 1799  DD 7E 09    	LD	A,(IX+SIZE)
 3529 179C  B7          	OR	A,A
 3530 179D  20 05       	JR	NZ,NOT_128
 3531 179F  21 21D7     	LD	HL,DISK_INFO10		;128 Bytes/sector
 3532 17A2  18 15       	JR	DONE_IX_TABLE
 3533 17A4  FE 01       NOT_128:CP	1
 3534 17A6  20 05       	JR	NZ,NOT_256
 3535 17A8  21 21EA     	LD	HL,DISK_INFO11		;256 Bytes/Sector
 3536 17AB  18 0C       	JR	DONE_IX_TABLE
 3537 17AD  FE 02       NOT_256:CP	2
 3538 17AF  20 05       	JR	NZ,NOT_512
 3539 17B1  21 21FD     	LD	HL,DISK_INFO12		;512 Bytes/sector
 3540 17B4  18 03       	JR	DONE_IX_TABLE
 3541 17B6  21 2210     NOT_512:LD	HL,DISK_INFO13		;1024 Bytes/Sector
 3542 17B9              DONE_IX_TABLE:
 3543 17B9  CD 1933     	CALL	PMSG
 3544 17BC  C9          	RET
 3545                   ;
 3546                   ;----------------------------------------------------------
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  62
VF      Z80

 3547                   ; Display the current track ID Field.
 3548                   ; NOTE this is NOT the current sector read. It's whatever sector 
 3549                   ; the head happens to be over at the time.
 3550                   ;
 3551 17BD              SHOW_ID:
 3552 17BD  21 2223     	LD	HL,IDMSG0		;'Track/Side/Sec/Size/(CRC) TRACK ID field='
 3553 17C0  CD 1933     	CALL	PMSG
 3554 17C3  21 3930     	LD	HL,IDSV			;Point to where data was saved
 3555 17C6  06 04       	LD	B,4			;4+2 bytes in ID
 3556 17C8  7E          IDLOOP1:LD	A,(HL)
 3557 17C9  CD 19B9     	CALL	PACC			;Print [A] in ASCII
 3558 17CC  23          	INC	HL
 3559 17CD  05          	DEC	B
 3560 17CE  20 F8       	JR	NZ,IDLOOP1
 3561 17D0  0E 20       	LD	C,' '
 3562 17D2  CD 011B     	CALL	CO
 3563 17D5  0E 28       	LD	C,'('
 3564 17D7  CD 011B     	CALL	CO
 3565 17DA  06 02       	LD	B,2
 3566 17DC  7E          IDLOOP5:LD	A,(HL)
 3567 17DD  CD 19B9     	CALL	PACC			;Print CRC value
 3568 17E0  23          	INC	HL
 3569 17E1  05          	DEC	B
 3570 17E2  20 F8       	JR	NZ,IDLOOP5
 3571 17E4  0E 29       	LD	C,')'
 3572 17E6  CD 011B     	CALL	CO
 3573 17E9  C9          	RET
 3574                   ;
 3575                   ;
 3576                   ; Display Bits of Versafloppy II Status Port
 3577                   ; Return with bits in [A]
 3578                   ;
 3579 17EA              SHOW_STAT_BITS:
 3580 17EA  21 2816     	LD	HL,STATUS_179x
 3581 17ED  CD 1933     	CALL	PMSG
 3582 17F0  DB 64       	IN	A,(STATUS)
 3583 17F2  CD 19D7     	CALL	ZBITS			;display bit pattern of [A]
 3584 17F5  C9          	RET				;Will return with error in [A]
 3585                   ;
 3586                   ; Check to see if disk is write protected
 3587                   ; Z if not protected, NZ if write protected
 3588                   ;
 3589 17F6              CHECK_WP:
 3590 17F6  DB 64       	IN	A,(STATUS)		;Remember data is inverted
 3591 17F8  CB 77       	BIT	6,A
 3592 17FA  C8          	RET	Z
 3593 17FB  21 29C4     	LD	HL,DISK_WP_MSG		;This disk is currently write protected
 3594 17FE  CD 1933     	CALL	PMSG
 3595 1801  AF          	XOR	A,A
 3596 1802  3D          	DEC	A
 3597 1803  C9          	RET				;Will return with error in [A]
 3598                   ;
 3599                   ;
 3600                   ;
 3601                   ;--------------------- DISPLAY SECTOR DATA CONTENTS -------------------------
 3602                   ;Display the Sector read from disk to RAM location at (TADDR)
 3603 1804              SEC_DISPLAY:
 3604 1804  3A 392F     	LD	A,(CRTDISP)	;Do we have the more detail display option on
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  63
VF      Z80

 3605 1807  B7          	OR	A,A
 3606 1808  C8          	RET	Z		;If not just return
 3607 1809  F5          	PUSH	AF
 3608 180A  C5          	PUSH	BC
 3609 180B  D5          	PUSH	DE
 3610 180C  E5          	PUSH	HL
 3611 180D  21 255B     	LD	HL,SEC_MSG
 3612 1810  CD 1933     	CALL	PMSG
 3613 1813  2A 0040     	LD	HL,(TADDR)	;Move Transfer address into HL
 3614 1816  DD 7E 09    	LD	A,(IX+SIZE)	;Get sector size
 3615 1819  B7          	OR	A,A
 3616 181A  11 0080     	LD	DE,NBYTES	;128 byte sectors
 3617 181D  28 11       	JR	Z,DISP1
 3618 181F  FE 01       	CP	A,1
 3619 1821  11 0100     	LD	DE,NBYTES*2	;256 byte sectors
 3620 1824  28 0A       	JR	Z,DISP1
 3621 1826  FE 02       	CP	A,2
 3622 1828  11 0200     	LD	DE,NBYTES*4	;512 byte sectors
 3623 182B  28 03       	JR	Z,DISP1
 3624 182D  11 0400     	LD	DE,NBYTES*8	;Must be 1024 byte sectors
 3625                   
 3626 1830  7B          DISP1:	LD	A,E
 3627 1831  E6 3F       	AND	A,00111111B	;64 characters /line
 3628 1833  20 03       	JR	NZ,NOCR
 3629 1835  CD 1950     	CALL	ZCRLF
 3630 1838  7E          NOCR:	LD	A,(HL)
 3631 1839  E6 7F       	AND	A,7FH
 3632 183B  FE 20       	CP	' ' 		;FILTER OUT CONTROL CHARACTERS'
 3633 183D  30 02       	JR	NC,T33
 3634 183F  3E 2E       T22:	LD	A,'.'
 3635 1841  FE 7C       T33:	CP	A,07CH
 3636 1843  30 FA       	JR	NC,T22
 3637 1845  4F          	LD	C,A	
 3638 1846  CD 011B     	CALL	CO
 3639 1849  23          	INC	HL
 3640 184A  1B          	DEC	DE		;Decrease DE count by 1
 3641 184B  7B          	LD	A,E
 3642 184C  B7          	OR	A,A		;Not XX00 at least
 3643 184D  20 E1       	JR	NZ,DISP1
 3644 184F  B2          	OR	A,D		
 3645 1850  20 DE       	JR	NZ,DISP1	;Not 0000
 3646 1852  CD 1950     	CALL	ZCRLF
 3647 1855  E1          NODISP:	POP	HL
 3648 1856  D1          	POP	DE
 3649 1857  C1          	POP	BC
 3650 1858  F1          	POP	AF
 3651 1859  C9          	RET
 3652                   ;
 3653                   ;------------ SHOW DETAILS OF RAW SECTOR IMAGE FOR TRACK WRITE -------------
 3654 185A              FORMAT_INFO:
 3655 185A  F5          	PUSH	AF		;Save everything since track formating uses all
 3656 185B  C5          	PUSH	BC
 3657 185C  D5          	PUSH	DE
 3658 185D  E5          	PUSH	HL
 3659 185E  21 2634     	LD	HL,FORM_TRK	;Formatting track...
 3660 1861  CD 1933     	CALL	PMSG
 3661 1864  FD 7E 00    	LD	A,(IY+TRK)
 3662 1867  CD 19B9     	CALL	PACC
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  64
VF      Z80

 3663                   ;
 3664 186A  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 3665 186E  28 10       	JR	Z,NO_SIDESF	;If 1 sided then skip sides info
 3666 1870  FD 7E 01    	LD	A,(IY+SIDE)
 3667 1873  B7          	OR	A,A		;If 0 we have done A side now do B
 3668 1874  20 05       	JR	NZ,B_SIDEF	;is B side
 3669 1876  21 2531     	LD	HL,HEAD0_MSG
 3670 1879  18 08       	JR	SEC_INFO1
 3671 187B  21 253B     B_SIDEF:LD	HL,HEAD1_MSG
 3672 187E  18 03       	JR	SEC_INFO1
 3673 1880              NO_SIDESF:
 3674 1880  21 2545     	LD	HL,H_MSG	;H.
 3675 1883              SEC_INFO1:
 3676 1883  CD 1933     	CALL	PMSG
 3677 1886  3A 392F     	LD	A,(CRTDISP)	;Do we have the more detail display option on
 3678 1889  B7          	OR	A,A
 3679 188A  CA 192E     	JP	Z,NO_TDISPLAY	;If Z do not list the sector contents.
 3680                   
 3681                   				;OK we are going to step along the image one
 3682                   				;section at a time. Key locations were stored 
 3683                   				;previously in the SCTRIM: routine.  
 3684 188D  21 2648     	LD	HL,TRACK_MSG	
 3685 1890  CD 1933     	CALL	PMSG
 3686 1893  11 5000     	LD	DE,FBUFFER	;Move Start of track image into DE
 3687 1896  D5          	PUSH	DE		;save it
 3688 1897  2A 3949     	LD	HL,(INDEX_MARK)	;End+1 of track header
 3689 189A  2B          	DEC	HL
 3690 189B  ED 52       	SBC	HL,DE
 3691 189D  EB          	EX	DE,HL		;Count now in DE
 3692 189E  E1          	POP	HL		;DE on stack to HL
 3693 189F  7E          HDRX:	LD	A,(HL)
 3694 18A0  CD 19B9     	CALL	PACC		;Print out HEX values of HEADER Field
 3695 18A3  23          	INC	HL		
 3696 18A4  1B          	DEC	DE		;Decrease DE count by 1
 3697 18A5  7B          	LD	A,E
 3698 18A6  B7          	OR	A,A		;Not XX00 at least
 3699 18A7  20 F6       	JR	NZ,HDRX
 3700 18A9  B2          	OR	A,D		
 3701 18AA  20 F3       	JR	NZ,HDRX		;Not 0000
 3702                   
 3703                   				;Now display the FIRST sector ID field area
 3704 18AC  21 267A     	LD	HL,SECTOR_MSG	
 3705 18AF  CD 1933     	CALL	PMSG
 3706 18B2  ED 5B 3949  	LD	DE,(INDEX_MARK)		;Move Start of sector image into DE
 3707 18B6  D5          	PUSH	DE			;save it
 3708 18B7  2A 394B     	LD	HL,(S_DATA_MARK)	;End+1 of sec ID field (allow the +1 to capture the FB byte)
 3709 18BA  ED 52       	SBC	HL,DE
 3710 18BC  EB          	EX	DE,HL		;Count now in DE
 3711 18BD  E1          	POP	HL		;DE on stack to HL
 3712 18BE  7E          HSECX:	LD	A,(HL)
 3713 18BF  CD 19B9     	CALL	PACC		;Print out HEX values of 1st Sector ID Field
 3714 18C2  23          	INC	HL		
 3715 18C3  1B          	DEC	DE		;Decrease DE count by 1
 3716 18C4  7B          	LD	A,E
 3717 18C5  B7          	OR	A,A		;Not XX00 at least
 3718 18C6  20 F6       	JR	NZ,HSECX
 3719 18C8  B2          	OR	A,D		
 3720 18C9  20 F3       	JR	NZ,HSECX	;Not 0000
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  65
VF      Z80

 3721                   
 3722                   				;Now display the FIRST sector DATA field area
 3723 18CB  21 268F     	LD	HL,SEC_DATA_MSG	
 3724 18CE  CD 1933     	CALL	PMSG
 3725 18D1  ED 5B 394B  	LD	DE,(S_DATA_MARK)	;Move Start of sector image into DE
 3726 18D5  D5          	PUSH	DE			;save it
 3727 18D6  2A 394D     	LD	HL,(E_DATA_MARK)	;End+1 of DATA field
 3728 18D9  2B          	DEC	HL
 3729 18DA  ED 52       	SBC	HL,DE
 3730 18DC  EB          	EX	DE,HL		;Count now in DE
 3731 18DD  E1          	POP	HL		;DE on stack to HL
 3732 18DE  7E          HDATAX:	LD	A,(HL)
 3733 18DF  CD 19B9     	CALL	PACC		;Print out HEX values of 1st Sector DATA Field
 3734 18E2  23          	INC	HL		
 3735 18E3  1B          	DEC	DE		;Decrease DE count by 1
 3736 18E4  7B          	LD	A,E
 3737 18E5  B7          	OR	A,A		;Not XX00 at least
 3738 18E6  20 F6       	JR	NZ,HDATAX
 3739 18E8  B2          	OR	A,D		
 3740 18E9  20 F3       	JR	NZ,HDATAX	;Not 0000
 3741                   
 3742                   				;Now display the FIRST sector GAP3 field area
 3743 18EB  21 26A6     	LD	HL,SEC_GAP3_MSG	
 3744 18EE  CD 1933     	CALL	PMSG
 3745 18F1  ED 5B 394D  	LD	DE,(E_DATA_MARK)	;Move Start of sector image into DE
 3746 18F5  D5          	PUSH	DE			;save it
 3747 18F6  2A 394F     	LD	HL,(E_SEC_MARK)		;End+1 of GAP3 field
 3748 18F9  2B          	DEC	HL
 3749 18FA  ED 52       	SBC	HL,DE
 3750 18FC  EB          	EX	DE,HL		;Count now in DE
 3751 18FD  E1          	POP	HL		;DE on stack to HL
 3752 18FE  7E          HGAP3X:	LD	A,(HL)
 3753 18FF  CD 19B9     	CALL	PACC		;Print out HEX values of 1st Sector GAP3 Field
 3754 1902  23          	INC	HL		
 3755 1903  1B          	DEC	DE		;Decrease DE count by 1
 3756 1904  7B          	LD	A,E
 3757 1905  B7          	OR	A,A		;Not XX00 at least
 3758 1906  20 F6       	JR	NZ,HGAP3X
 3759 1908  B2          	OR	A,D		
 3760 1909  20 F3       	JR	NZ,HGAP3X	;Not 0000
 3761                   
 3762                   				;Now display the Track GAP4 field area
 3763 190B  21 26BD     	LD	HL,SEC_GAP4_MSG	
 3764 190E  CD 1933     	CALL	PMSG
 3765 1911  ED 5B 3951  	LD	DE,(S_GAP4_MARK)	;Start of sector GAP4 into DE
 3766 1915  D5          	PUSH	DE		;save it
 3767 1916  2A 3953     	LD	HL,(E_GAP4_MARK)	;End+1 of GAP3 field
 3768 1919  2B          	DEC	HL
 3769 191A  ED 52       	SBC	HL,DE
 3770 191C  EB          	EX	DE,HL		;Count now in DE
 3771 191D  E1          	POP	HL		;DE on stack to HL
 3772 191E  7E          HGAP4X:	LD	A,(HL)
 3773 191F  CD 19B9     	CALL	PACC		;Print out HEX values of 1st Sector GAP3 Field
 3774 1922  23          	INC	HL		
 3775 1923  1B          	DEC	DE		;Decrease DE count by 1
 3776 1924  7B          	LD	A,E
 3777 1925  B7          	OR	A,A		;Not XX00 at least
 3778 1926  20 F6       	JR	NZ,HGAP4X
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  66
VF      Z80

 3779 1928  B2          	OR	A,D
 3780 1929  20 F3       	JR	NZ,HGAP4X	;Not 0000
 3781 192B  CD 1950     	CALL	ZCRLF
 3782                   ;
 3783 192E              NO_TDISPLAY:
 3784 192E  E1          	POP	HL
 3785 192F  D1          	POP	DE
 3786 1930  C1          	POP	BC
 3787 1931  F1          	POP	AF
 3788 1932  C9          	RET
 3789                   ;
 3790                   ;
 3791                   ;====================== SUPPORT ROUTINES ==================================
 3792                   ;
 3793 1933  7E          PMSG:	LD	A,(HL)		;PRINT MESSAGE STRING in [HL] up to 0
 3794 1934  B7          	OR	A
 3795 1935  C8          	RET	Z
 3796 1936  4F          	LD	C,A
 3797 1937  CD 011B     	CALL	CO
 3798 193A  23          	INC	HL
 3799 193B  C3 1933     	JP	PMSG
 3800                   ;
 3801 193E  CD 0112     GETCMD:	CALL	CI		;GET A CHARACTER, convert to UC, ECHO it
 3802 1941  CD 195F     	CALL	UCASE
 3803 1944  FE 1B       	CP	A,ESC
 3804 1946  C8          	RET	Z		;Don't echo an ESC
 3805 1947  F5          	PUSH	AF		;Save it
 3806 1948  C5          	PUSH	BC
 3807 1949  4F          	LD	C,A
 3808 194A  CD 011B     	CALL	CO		;Echo it
 3809 194D  C1          	POP	BC
 3810 194E  F1          	POP	AF		;get it back
 3811 194F  C9          	RET
 3812                   
 3813 1950  F5          ZCRLF:	PUSH	AF		;Send CR/LF to CRT
 3814 1951  C5          	PUSH	BC
 3815 1952  0E 0D       	LD	C,CR
 3816 1954  CD 011B     	CALL	CO
 3817 1957  0E 0A       	LD	C,LF
 3818 1959  CD 011B     	CALL	CO
 3819 195C  C1          	POP	BC
 3820 195D  F1          	POP	AF
 3821 195E  C9          	RET
 3822                   ;				;Convert LC to UC
 3823 195F  FE 61       UCASE:	CP	A,'a'		;must be >= lowercase a
 3824 1961  D8          	RET	C		; else go back...
 3825 1962  FE 7B       	CP	A,'z'+1		;must be <= lowercase z
 3826 1964  D0          	RET	NC		; else go back...
 3827 1965  D6 20       	SUB	A,'a'-'A'	;subtract lowercase bias
 3828 1967  C9          	RET
 3829                   ;
 3830                   ;
 3831                   ; Return with 2 HEX digits in [A]. If abort, Carry flag set + ESC in [A]
 3832 1968              GET_HEX:
 3833 1968  C5          	PUSH	BC			
 3834 1969  CD 193E     	CALL	GETCMD		;Get a character from keyboard & ECHO
 3835 196C  FE 1B       	CP	A,ESC
 3836 196E  28 2A       	JR	Z,HEX_ABORT
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  67
VF      Z80

 3837 1970  FE 2F       	CP	'/'		;check 0-9, A-F
 3838 1972  38 26       	JR	C,HEX_ABORT
 3839 1974  FE 47       	CP	'F'+1
 3840 1976  30 22       	JR	NC,HEX_ABORT
 3841 1978  CD 19B1     	CALL	ASBIN		;Convert to binary
 3842 197B  CB 27       	SLA	A
 3843 197D  CB 27       	SLA	A
 3844 197F  CB 27       	SLA	A
 3845 1981  CB 27       	SLA	A		;Shift to high nibble	
 3846 1983  47          	LD	B,A		;Store it
 3847 1984  CD 193E     	CALL	GETCMD		;Get 2nd character from keyboard & ECHO
 3848 1987  FE 1B       	CP	A,ESC
 3849 1989  28 0F       	JR	Z,HEX_ABORT
 3850 198B  FE 2F       	CP	'/'		;check 0-9, A-F
 3851 198D  38 0B       	JR	C,HEX_ABORT
 3852 198F  FE 47       	CP	'F'+1
 3853 1991  30 07       	JR	NC,HEX_ABORT
 3854 1993  CD 19B1     	CALL	ASBIN		;Convert to binary
 3855 1996  B0          	OR	A,B		;add in the first digit
 3856 1997  B7          	OR	A,A		;To return NC
 3857 1998  C1          	POP	BC
 3858 1999  C9          	RET
 3859 199A              HEX_ABORT:
 3860 199A  37          	SCF			;Set Carry flag 
 3861 199B  3E 1B       	LD	A,ESC
 3862 199D  C1          	POP	BC
 3863 199E  C9          	RET
 3864                   ;
 3865                   ;
 3866                   ; Put 4 HEX characters in [HL] (To set RAM location etc.)
 3867                   ;
 3868 199F              GET_HEX4:	
 3869 199F  26 00       	LD      H,0000H
 3870 19A1  CD 1968     	CALL	GET_HEX		;get 2 HEX digits
 3871 19A4  38 09       	JR	C,SCAN_ABORT
 3872 19A6  67          	LD	H,A
 3873 19A7  CD 1968     	CALL	GET_HEX		;get 2 more HEX digits
 3874 19AA  38 03       	JR	C,SCAN_ABORT
 3875 19AC  6F          	LD	L,A
 3876 19AD  B7          	OR	A,A		;To return NC
 3877 19AE  C9          	RET
 3878 19AF              SCAN_ABORT:
 3879 19AF  37          	SCF			;Set Carry flag 
 3880 19B0  C9          	RET
 3881                   
 3882                   ; ASCII TO BINARY CONVERSION ROUTINE
 3883 19B1  D6 30       ASBIN:	SUB	30H 
 3884 19B3  FE 0A       	CP	0AH 
 3885 19B5  F8          	RET	M
 3886 19B6  D6 07       	SUB	07H 
 3887 19B8  C9          	RET
 3888                   
 3889                   ;Print the acccumulator value on CRT in HEX-ASCII
 3890 19B9  F5          PACC:	PUSH	AF
 3891 19BA  C5          	PUSH	BC
 3892 19BB  F5          	PUSH	AF
 3893 19BC  0F          	RRCA
 3894 19BD  0F          	RRCA
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  68
VF      Z80

 3895 19BE  0F          	RRCA
 3896 19BF  0F          	RRCA
 3897 19C0  CD 19CA     	CALL	ZCONV
 3898 19C3  F1          	POP	AF
 3899 19C4  CD 19CA     	CALL	ZCONV
 3900 19C7  C1          	POP	BC
 3901 19C8  F1          	POP	AF
 3902 19C9  C9          	RET
 3903                   
 3904 19CA  E6 0F       ZCONV:	AND	A,0FH		;HEX to ASCII
 3905 19CC  C6 90       	ADD	90H
 3906 19CE  27          	DAA
 3907 19CF  CE 40       	ADC	40H
 3908 19D1  27          	DAA
 3909 19D2  4F          	LD	C,A
 3910 19D3  CD 011B     	CALL	CO
 3911 19D6  C9          	RET
 3912                   ;
 3913                   ;DISPLAY BIT PATTERN IN [A]
 3914                   ;
 3915 19D7  F5          ZBITS:	PUSH	AF
 3916 19D8  C5          	PUSH	BC
 3917 19D9  D5          	PUSH	DE
 3918 19DA  5F          	LD	E,A		
 3919 19DB  06 08       	LD	B,8
 3920 19DD  CB 23       BQ2:	SLA	E
 3921 19DF  3E 18       	LD	A,18H
 3922 19E1  8F          	ADC	A
 3923 19E2  4F          	LD	C,A
 3924 19E3  CD 011B     	CALL	CO
 3925 19E6  10 F5       	DJNZ	BQ2
 3926 19E8  D1          	POP	DE
 3927 19E9  C1          	POP	BC
 3928 19EA  F1          	POP	AF
 3929 19EB  C9          	RET
 3930                   ;
 3931                   ;
 3932                   ; CHECK IF AN ABORT (ESC) CHARACTER IS PRESENT AT THE CONSOL
 3933                   ; HOLD EVERYTHING IF SPACEBAR IS PRESSED
 3934                   ;
 3935 19EC              CHECKABORT:			;see if an abort is required
 3936 19EC  CD 010A     	CALL	CONST
 3937 19EF  C8          	RET	Z	
 3938 19F0  CD 0112     CHECK1:	CALL	CI
 3939 19F3  FE 1B       	CP	A,ESC		;ESC to abort
 3940 19F5  28 06       	JR	Z,CABORT
 3941 19F7  FE 20       	CP	A,' '		;If spacebar then freeze CRT display
 3942 19F9  28 F5       	JR	Z,CHECK1
 3943 19FB  AF          	XOR	A,A
 3944 19FC  C9          	RET
 3945 19FD  AF          CABORT:	XOR	A,A		;Was ESC, so return with NZ flag
 3946 19FE  3D          	DEC	A		;return NZ, & 0FFH in A if ESC there
 3947 19FF  C9          	RET
 3948                   ;
 3949                   ;
 3950                   ;
 3951                   ;---------- Debug Routines -----------------------------
 3952 1A00              DEBUG_A:			;Display contents of A of CRT
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  69
VF      Z80

 3953 1A00  F5          	PUSH	AF
 3954 1A01  C5          	PUSH	BC
 3955 1A02  D5          	PUSH	DE
 3956 1A03  E5          	PUSH	HL
 3957 1A04  F5          	PUSH	AF
 3958 1A05  0E 3E       	LD	C,'>'
 3959 1A07  CD 011B     	CALL	CO
 3960 1A0A  F1          	POP	AF
 3961 1A0B  CD 19B9     	CALL	PACC
 3962 1A0E  0E 3C       	LD	C,'<'
 3963 1A10  CD 011B     	CALL	CO
 3964 1A13  E1          	POP	HL
 3965 1A14  D1          	POP	DE
 3966 1A15  C1          	POP	BC
 3967 1A16  F1          	POP	AF
 3968 1A17  C9          	RET
 3969                   ;
 3970 1A18              DEBUG_B				;Display A on CRT wait for keyboard
 3971 1A18  CD 1A00     	CALL	DEBUG_A
 3972 1A1B  F5          	PUSH	AF
 3973 1A1C  CD 0112     	CALL	CI
 3974 1A1F  F1          	POP	AF
 3975 1A20  C9          	RET
 3976                   ;
 3977 1A21              DEBUG_HL			;Display HL on CRT
 3978 1A21  F5          	PUSH	AF
 3979 1A22  7C          	LD	A,H
 3980 1A23  CD 1A00     	CALL	DEBUG_A
 3981 1A26  7D          	LD	A,L
 3982 1A27  CD 1A00     	CALL	DEBUG_A
 3983 1A2A  F1          	POP	AF
 3984 1A2B  C9          	RET 
 3985                   ;
 3986                   ;
 3987                   ;
 3988                   ;---------------------------------------------------------------------------
 3989                   ;
 3990 1A2C  0D 0A 0A    SIGNON:		DB	CR,LF,LF
 3991         0001      	    if	CHIP_1795
 3992 1A2F  56 65 72 73 		DB	'Versafloppy II (for 1795 chip) Diagnostic Program. '
 3993 1A62  28 56 31 2E 		DB	'(V1.01 by John Monahan 2009)',CR,LF,0
 3994                   	     endif
 3995                   
 3996         0000      	    if	CHIP_1791
 3999                   	    endif
 4000                   
 4001 1A81  50 6C 65 61 GETDRV_MSG:	DB	'Please select a drive. (A,B,C or D): ',0
 4002                   	
 4003 1AA7  0D 0A 53 6F XXXDRV:		DB	CR,LF,	'Sorry that is an invalid drive',0
 4004 1AC8  0D 0A 49 73 GETSIZE_MSG:	DB	CR,LF,	'Is this a 5" or 8" Drive (5,8): ',0	
 4005 1AEB  0D 0A 0A 50 DISK_8_FORMATS:	DB	CR,LF,LF,'Possible 8" disk formats:-'
 4006 1B08  0D 0A 41 20 		DB	CR,LF,	'A = 128 Bytes/Sec, 26 Sec/Ttk. 8" SDSS. (IBM 3740 Format)'  
 4007 1B43  0D 0A 42 20 		DB	CR,LF,	'B = 128 Bytes/Sec, 50 Sec/Ttk. 8" DDSS. (SD Systems 8" DD Format)'  
 4008 1B86  0D 0A 43 20 		DB	CR,LF,	'C = 256 Bytes/Sec, 26 Sec/Ttk. 8" DDDS. (IBM System 34 Format)'  
 4009 1BC6  0D 0A 44 20 		DB	CR,LF,	'D = 512 Bytes/Sec, 15 Sec/Trk. 8" DDDS. '
 4010 1BF0  0D 0A 45 20 		DB	CR,LF,	'E = 1024 Bytes/Sec, 9 Sec/Trk. 8" DDSS. (For CPM3 System)'
 4011 1C2B  0D 0A 46 20 		DB	CR,LF,	'F = 1024 Bytes/Sec, 9 Sec/Trk. 8" DDDS.'
 4012 1C54  0D 0A 50 6C 		DB	CR,LF,	'Please select a disk format: ',0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  70
VF      Z80

 4013 1C74  0D 0A 0A 50 DISK_5_FORMATS:	DB	CR,LF,LF,'Possible 5" disk formats:-'
 4014 1C91  0D 0A 41 20 		DB	CR,LF,	'A = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (CPM3 & IBM PC CPM-86 Format)'
 4015 1CD7  0D 0A 42 20 		DB	CR,LF,	'B = 128 Bytes/Sec, 18 Sec/Ttk. 5" SDSS. (SD Systems 5" SD Format)'  
 4016 1D1A  0D 0A 43 20 		DB	CR,LF,	'C = 128 Bytes/Sec, 29 Sec/Ttk. 5" DDSS. (SD Systems 5" DD Format)'  
 4017 1D5D  0D 0A 44 20 		DB	CR,LF,	'D = 512 Bytes/Sec, 9 Sec/Ttk. 5" DDDS. (DEC VT180 Format)'
 4018 1D98  0D 0A 45 20 		DB	CR,LF,	'E = 256 Bytes/Sec, 16 Sec/Ttk. 5" DDDS. (TOSHIBA T-100 Format)'
 4019 1DD8  0D 0A 46 20 		DB	CR,LF,	'F = 128 Bytes/Sec, 18 Sec/Ttk. 5" SDDS. (CROMEMCO-SD CDOS Format)'
 4020 1E1B  0D 0A 47 20 		DB	CR,LF,	'G = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDDS. (CROMEMCO-DD CDOS Format)'
 4021 1E5E  0D 0A 48 20 		DB	CR,LF,	'H = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDDS. (EPSON QX-10 Format)'
 4022 1E9C  0D 0A 49 20 		DB	CR,LF,	'I = 1024 Bytes/Sec, 5 Sec/Ttk. 5" DDDS. (MORROW MD3 Format)'
 4023 1ED9  0D 0A 4A 20 		DB	CR,LF,	'J = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (ZENITH Z-100 Format)'
 4024 1F17  0D 0A 4B 20 		DB	CR,LF,	'K = 256 Bytes/Sec, 16 Sec/Ttk. 5" DDDS. (SUPERBRAIN QD Format)'
 4025 1F57  0D 0A 4C 20 		DB	CR,LF,	'L = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (IBM PC, MSDOS 1.1 Format)'
 4026 1F9A  0D 0A 4D 20 		DB	CR,LF,	'M = 512 Bytes/Sec, 9 Sec/Ttk. 5" DDDS. (IBM PC, MSDOS 2.x Format)'
 4027 1FDD  0D 0A 4E 20 		DB	CR,LF,	'N = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDSS. (TRS-80 MOD III Format)'
 4028 201E  0D 0A 50 6C 		DB	CR,LF,	'Please select a disk format: ',0
 4029 203E  0D 0A 53 6F OPTION_ERROR:	DB	CR,LF,	'Sorry invalid option',0
 4030 2055  0D 0A 53 65 SEC_COUNT_ERR	DB	CR,LF,	'Sector count error',0
 4031 206A  0D 0A 49 6E RAM_ERROR	DB	CR,LF,	'Invalid RAM location error',0
 4032                   
 4033 2087  0D 0A 0A 56 MAIN_MENU0:	DB	CR,LF,LF,'VERSAFLOPPY II DIAGNOSTICS ---- MAIN MENU ---- (Detail Display OFF)',0
 4034 20CE  0D 0A 0A 56 MAIN_MENU1:	DB	CR,LF,LF,'VERSAFLOPPY II DIAGNOSTICS ---- MAIN MENU ---- (Detail Display ON)',0
 4035 2114  0D 0A 43 75 DISK_INFO	DB	CR,LF,'Current drive:- ',0
 4036 2127  0D 0A 44 72 DISK_INFO0:	DB	CR,LF,'Drive ',0
 4037 2130  3A 20 28 49 DISK_INFO1:	DB		': (IOBYTE)=',0
 4038 213C  20 20 53 69 DISK_INFO2:	DB		'  Size=',0
 4039 2144  22 2C 20 44 DISK_INFO3:	DB		'", Double Sided,  ',0
 4040 2157  22 2C 20 53 DISK_INFO4:	DB		'", Single Sided,  ',0
 4041 216A  44 6F 75 62 DISK_INFO5:	DB		'Double Density disk.',0
 4042 217F  53 69 6E 67 DISK_INFO6:	DB		'Single Density disk.',0
 4043                   
 4044 2194  0D 0A 43 75 DISK_INFO7:	DB	CR,LF,	'Current Disk [IX] Table: Sec/Track=',0
 4045 21BA  48 2C 20 54 DISK_INFO8:	DB		'H, Tracks/Side=',0
 4046 21CA  48 2C 20 53 DISK_INFO9:	DB		'H, Sec Size=',0
 4047 21D7  48 2C 20 20 DISK_INFO10:	DB		'H,  128 Bytes/Sec.',0
 4048 21EA  48 2C 20 20 DISK_INFO11:	DB		'H,  256 Bytes/Sec.',0
 4049 21FD  48 2C 20 20 DISK_INFO12:	DB		'H,  512 Bytes/Sec.',0
 4050 2210  48 2C 20 31 DISK_INFO13:	DB		'H, 1024 Bytes/Sec.',0
 4051 2223  54 72 61 63 IDMSG0:		DB		'Track/Side/Sec/Size/(CRC) TRACK ID field= ',0
 4052                   
 4053 224E  0D 0A 0A 30 MENU_OPTIONS	DB	CR,LF,LF, '0 = Select a DRIVE/DISK to analyze'
 4054 2273  0D 0A 31 20 		DB	CR,LF,	'1 = Seek Test                    2 = Sequental Read Sector Test'
 4055 22B4  0D 0A 33 20 		DB	CR,LF,	'3 = Sequental Write Sector Test  4 = Sequental R/W Sector Test'
 4056 22F4  0D 0A 35 20 		DB	CR,LF,	'5 = Random Track/Sector R/W Test 6 = Continously Read sectors from a Track'
 4057 2340  0D 0A 37 20 		DB	CR,LF,	'7 = Examine one complet track    8 = Load disk sctors to RAM'
 4058 237E  0D 0A 39 20 		DB	CR,LF,	'9 = Write RAM to disk sectors    C = Copy current disk to another disk'
 4059 23C6  0D 0A 46 20 		DB	CR,LF,	'F = Format the current disk      S = Copy CPM system tracks from ' 
 4060 2409  61 6E 6F 74 		DB		'another disk.'
 4061 2416  0D 0A 56 20 		DB	CR,LF,	'V = Verify sectors disk to disk  I = Quick Format of 8" CPM SSSD Disk in B:',0
 4062                   
 4063 2464  0D 0A 44 20 MENU1_MSG:	DB	CR,LF,	'D = Turn ON detailed display.    ESC To return to CPM'
 4064 249B  0D 0A 50 6C 		DB	CR,LF,	'Please enter a command:- ',0
 4065                   
 4066 24B7  0D 0A 44 20 MENU2_MSG:	DB	CR,LF,	'D = Turn OFF detailed display.   ESC To return to CPM'
 4067 24EE  0D 0A 50 6C 		DB	CR,LF,	'Please enter a command:- ',0
 4068                   
 4069 250A  0D 0A 44 69 SEKMSG		DB	CR,LF,  'Disk seek test.',CR,LF,0
 4070 251E  20 54 52 41 ATTRK:		DB		' TRACK ',0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  71
VF      Z80

 4071 2526  48 2C 20 53 ATSEC:		DB		'H, SECTOR ',0
 4072 2531  48 2C 20 53 HEAD0_MSG	DB		'H, SIDE A',0
 4073 253B  48 2C 20 53 HEAD1_MSG	DB		'H, SIDE B',0
 4074 2545  48 2E 20 00 H_MSG		DB		'H. ',0
 4075 2549  20 53 49 44 ATHEAD0		DB		' SIDE A ',0 
 4076 2552  20 53 49 44 ATHEAD1		DB		' SIDE B ',0 
 4077 255B  0D 0A 53 65 SEC_MSG:	DB	CR,LF,	'Sector Contents=',0
 4078 256E  0D 0A 46 6F FORMATTING_MSG:	DB	CR,LF,	'Formating Disk.  Format= ',0
 4079 258A  0D 0A 07 49 BADCMD		DB	CR,LF,BELL, 'Invalid command selected.',0
 4080 25A7  0D 0A 07 44 FORM_ERRMSG:	DB	CR,LF,BELL,'Disk formatting aborted or write error.',0
 4081 25D2  0D 0A 44 69 END_FORM_MSG:	DB	CR,LF,	'Disk has been formatted correctly. Each track is ',0
 4082 2606  48 20 42 79 END_FORM1_MSG	DB	        'H Bytes long.',0
 4083 2614  0D 0A 53 6F CODE_NOT_DONE:	DB	CR,LF,	'Sorry Code not done yet. HALT',0
 4084 2634  0D 0A 46 6F FORM_TRK:	DB	CR,LF,	'Formatting TRACK ',0
 4085 2648  54 72 61 63 TRACK_MSG:	DB		'Track Image:- '
 4086 2656  0D 0A 49 6E 		DB	CR,LF,	'Index field up to First sector=',CR,LF,0
 4087 267A  0D 0A 53 65 SECTOR_MSG:	DB	CR,LF,	'Sector ID Field=',CR,LF,0
 4088 268F  0D 0A 53 65 SEC_DATA_MSG:	DB	CR,LF,	'Sector DATA Field=',CR,LF,0
 4089 26A6  0D 0A 53 65 SEC_GAP3_MSG:	DB	CR,LF,	'Sector GAP3 Field=',CR,LF,0
 4090 26BD  0D 0A 45 6E SEC_GAP4_MSG:	DB	CR,LF,	'End of Track GAP4 Field=',CR,LF,0
 4091 26DA  0D 0A 50 6C GET_TRACK_MSG:	DB	CR,LF,	'Please enter track number. (Enter 2 HEX digits): ',0
 4092 270E  0D 0A 50 6C GET_SIDE_MSG:	DB	CR,LF,	'Please select Disk SIDE A or B (A,B): ',0
 4093 2737  0D 0A 07 49 SIDE_ERROR:	DB	CR,LF,BELL, 'Invalid SIDE selection',0
 4094 2751  0D 0A 50 6C GET_SEC_MSG:	DB	CR,LF,	'Please enter sector number. (Enter 2 HEX digits): ',0
 4095 2786  0D 0A 54 72 TRACK_CONTENTS:	DB	CR,LF,	'Track contents:-',CR,LF,0
 4096 279B  0D 0A 44 6F MORE_MSG:	DB	CR,LF,	'Do you wish to see more (Y/N): ',0
 4097 27BD  0D 0A 49 6E SEC_ERROR:	DB	CR,LF,	'Invalid sector number selection',0
 4098 27DF  0D 0A 47 41 GAP3_MSG:	DB	CR,LF,	'GAP3=',0
 4099 27E7  0D 0A 47 41 GAP1_MSG:	DB	CR,LF,	'GAP1=',0
 4100 27EF  0D 0A 53 65 ID_MSG:		DB	CR,LF,	'Sector ID Mark=',0
 4101 2801  0D 0A 47 41 GAP2_MSG:	DB	CR,LF,	'GAP2=',0
 4102 2809  0D 0A 44 61 SYNC_MSG:	DB	CR,LF,	'Data Sync=',0
 4103 2816  0D 0A 53 74 STATUS_179x:	DB	CR,LF,	'Status Bits of 1791/5 Chip= ',0
 4104 2835  0D 0A 07 44 ENDMSG:		DB	CR,LF,BELL,'Disk has been formatted ',CR,LF,0
 4105 2853  0D 0A 07 53 ERRMSG:		DB	CR,LF,BELL,'SORRY COULD NOT SEEK NEXT TRACK',CR,LF,0
 4106 2878  0D 0A 07 54 TRACK_ERROR:	DB	CR,LF,BELL,'That track is out of range for this disk',0
 4107 28A4  0D 0A 52 65 SEC_READ_RETRY:	DB	CR,LF,	'Re-reading SECTOR ',0
 4108 28B9  0D 0A 52 65 SEC_WR_RETRY:	DB	CR,LF,	'Re-writing SECTOR ',0
 4109 28CE  0D 0A 52 65 SEC_RH_RETRY	DB	CR,LF, 'Re-Seeking head for re-reading SECTOR ',0
 4110 28F7  0D 0A 52 65 SEC_WH_RETRY	DB	CR,LF, 'Re-Seeking head for re-writing SECTOR ',0
 4111 2920  0D 0A 07 53 SEC_V_ERROR	DB	CR,LF,BELL,'Sector Verify Error found -----',0
 4112 2943  0D 0A 53 65 RDTST_MSG	DB	CR,LF,	'Sequental Read Sectors Test',0
 4113 2961  0D 0A 53 65 WRTST_MSG	DB	CR,LF,	'Sequental Write Sectors Test',0
 4114 2980  0D 0A 53 65 RDWRTST_MSG	DB	CR,LF,	'Sequental R/W Sectors Test',0
 4115 299D  0D 0A 52 61 RAND_TST_MSG	DB	CR,LF,	'Random Track/Sector R/W Sectors Test',0
 4116 29C4  0D 0A 07 54 DISK_WP_MSG	DB	CR,LF,BELL, 'This disk is currently Write Protected.',0
 4117 29EF  0D 0A 53 70 INITCPM_MSG	DB	CR,LF,	'Special modification of first sector for CPM86 done.',0
 4118 2A26  0D 0A 07 53 TRK_SIZE_ERR	DB	CR,LF,BELL, 'Size of track (TRK_SIZE) in the disk paramater table is invalid',0
 4119 2A69  0D 0A 4E 75 SEC_COUNT_MSG	DB	CR,LF,	'Number of sectors (Enter 2 HEX digits): ',0
 4120 2A94  0D 0A 45 6E GET_DMA_MSG	DB	CR,LF,	'Enter RAM loaction to recieve the data (Enter 4 HEX digits): ',0
 4121 2AD4  0D 0A 45 6E GET_DMAD_MSG	DB	CR,LF,	'Enter RAM loaction of data to write (Enter 4 HEX digits): ',0
 4122 2B11  0D 0A 4C 6F LOADING_MSG:	DB	CR,LF,	'Loading data ',0
 4123 2B21  20 54 6F 20 LOADING1_MSG:	DB	' To RAM at ',0
 4124 2B2D  0D 0A 07 45 ERR_TK_MSG:	DB	CR,LF,BELL, 'ERROR. Ran out of tracks!',0
 4125 2B4A  0D 0A 44 61 LOAD_DONE_MSG:	DB	CR,LF,	'Data read correctly.',0
 4126 2B61  0D 0A 4C 6F TRK_DUMP_MSG	DB	CR,LF,	'Load a selected track from current disk into RAM',0
 4127 2B94  0D 0A 4C 6F LOAD_MSG	DB	CR,LF,	'Load sector(s) from disk to RAM',0
 4128 2BB6  0D 0A 57 72 DUMP_MSG	DB	CR,LF,	'Write sector(s) to disk with data from RAM location.',0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  72
VF      Z80

 4129 2BED  0D 0A 57 72 DUMPING_MSG:	DB	CR,LF,	'Writing data ',0
 4130 2BFD  20 46 72 6F DUMPING1_MSG:	DB	' From RAM at ',0
 4131 2C0B  0D 0A 44 61 DUMP_DONE_MSG:	DB	CR,LF,	'Data written correctly.',0
 4132 2C25  0D 0A 07 46 TIMEOUT_ERR:	DB	CR,LF,BELL,'Forced a 1791/5 chip RESET because the status port was hung up busy!'
 4133 2C6C  0D 0A 43 68 		DB	CR,LF,	'Check hardware such as drive type, connections etc.',0
 4134 2CA2  0D 0A 43 6F COPY_MSG:	DB	CR,LF,	'Copy current disk to another disk (Note: Disks MUST be same format).',0
 4135 2CE9  0D 0A 46 6F COPY2_MSG	DB	CR,LF,	'For the destination disk: ',0
 4136 2D06  0D 0A 43 6F HOW_MANY_TRKS	DB	CR,LF,	'Copy just the System tracks or all tracks.  (S or A): ',0 
 4137 2D3F  0D 0A 07 49 INVALID_TRK_CT	DB	CR,LF,BELL, 'Invalid track option.',0
 4138 2D58  0D 0A 44 69 COPYING_DONE	DB	CR,LF,	'Disk Copying done.',0
 4139 2D6D  0D 0A 52 65 COPY_AT_TRK:	DB	CR,LF,	'Reading data from ',0
 4140 2D82  20 57 72 69 WRITE_AT_TRK:	DB	' Writing data to ',0
 4141                   
 4142 2D94  0D 0A 52 65 READ_AT_TRK:	DB	CR,LF,	'Reading ',0
 4143 2D9F  20 56 65 72 VERIFY_AT_TRK:	DB		' Verify ',0
 4144 2DA8  0D 0A 44 69 VERIFY_DONE	DB	CR,LF,	'Disk verifying done',0
 4145 2DBE  0D 0A 53 65 VERIFY_MSG	DB	CR,LF,	'Sector by Sector verifying of two disks',0
 4146 2DE8  0D 0A 46 6F VERIFY2_MSG	DB	CR,LF,	'For the second disk: ',0
 4147 2E00  29 00       CLOSE_BRACKET:	DB		')',0
 4148 2E02  0D 0A 07 55 UNKNOWN_ERROR:	DB	CR,LF,BELL,'Unknown Error. Status Bits= (',0
 4149 2E23  0D 0A 57 69 SYS_COPY_MSG:	DB	CR,LF,	'Will copy CPM system tracks FROM another disk and ' 
 4150 2E57  77 72 69 74 		DB		'write it TO the current disk',0
 4151 2E74  0D 0A 53 6F SYS_COPY_MSG1:	DB	CR,LF,	'Source disk for CPM system tracks:',0
 4152 2E99  0D 0A 43 6F COPY_SYS_TRK	DB	CR,LF,	'Copying CPM from ',0
 4153 2EAD  20 57 72 69 WRITE_SYS_TRK	DB		' Writing CPM to ',0
 4154 2EBE  0D 0A 43 50 DONE_SYS_MSG	DB	CR,LF,	'CPM System tracks copied OK.',0
 4155 2EDD  0D 0A 51 75 IBM_FORMAT	DB	CR,LF,	'Quick formatting of a blank SSSD 8" IBM disk in B: drive for CPM.',0
 4156 2F21  0D 0A 46 6F IBM_FORMAT1	DB	CR,LF,	'Formatting in progress',CR,LF,0
 4157 2F3C  0D 0A 44 69 END_FORM_MSG1:	DB	CR,LF,	'Disk has been formatted as a SSSD 8" disk (IBM 3740 Format).',0
 4158 2F7B  0D 0A 0A 07 ERRORS_SEEN:	DB	CR,LF,LF,BELL, 'Errors encountered. Format not reliable',0
 4159 2FA7  0D 0A 44 6F COPY_SYSTRKS	DB	CR,LF,	'Do you wish to copy CPM from the system tracks of drive A:'
 4160 2FE3  0D 0A 4E 6F 		DB	CR,LF,	'Note: It must be on an IBM 3740 formatted disk. (Y/N)',0
 4161 301B  0D 0A 43 6F COPYING_CPM	DB	CR,LF,	'Copying CPM from system tracks of Drive A:',0
 4162 3048  0D 0A 44 69 END_FORM_MSG2:	DB	CR,LF,	'Disk B: has been formatted and CPM system installed on it correctly.',0
 4163 308F  0D 41 74 20 FORM_TRK_MSG	DB	CR,	'At Track ',0
 4164 309A  0D 0A 0A 07 BAD_COPY_MSG	DB	CR,LF,LF,BELL, 'Errors encountered during disk copying. Copy may not be valid',0
 4165                   ;
 4166                   ;
 4167                   ;	
 4168 30DC  0D 0A 07 53 SEC_READ_ERROR: DB	CR,LF,BELL,'SEC READ Error.'
 4169 30EE  20 42 69 74 		DB	' Bits: DNR,0,Record Type,RNF,'
 4170 310B  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4171                   
 4172 311F  0D 0A 07 53 SEEKNV_ERROR:	DB	CR,LF,BELL,'SEEK (NV) Error.'
 4173 3132  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4174 314A  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4175                   
 4176 3160  0D 0A 07 52 RSCMD_ERROR:	DB	CR,LF,BELL,'RESTORE Error.'
 4177 3171  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4178 3189  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4179                   
 4180 319F  0D 0A 07 53 SEC_ID_ERROR:	DB	CR,LF,BELL,'SEC ID Error.'
 4181 31AF  20 42 69 74 		DB	' Bits: DNR,0,0,RNF,'
 4182 31C2  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4183                   
 4184 31D6  0D 0A 07 53 SKCMD_ERROR:	DB	CR,LF,BELL,'SEEK Error.'
 4185 31E4  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4186 31FC  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  73
VF      Z80

 4187                   
 4188 3212  0D 0A 07 53 STEPIN_ERROR:	DB	CR,LF,BELL,'STEP-IN Error.'
 4189 3223  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4190 323B  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4191                   
 4192 3251  0D 0A 07 54 RDTCMD_ERROR:	DB	CR,LF,BELL,'TRACK Read Error.'
 4193 3265  20 42 69 74 		DB	' Bits: DNR,0,0,0,'
 4194 3276  30 2C 44 41 		DB	'0,DATA,DRQ,Busy (',0
 4195                   
 4196 3288  0D 0A 07 54 WRTCMD_ERROR:	DB	CR,LF,BELL,'TRACK Write Error.'
 4197 329D  20 42 69 74 		DB	' Bits: DNR,WP,WF,0,'
 4198 32B0  30 2C 44 41 		DB	'0,DATA,DRQ,Busy (',0
 4199                   
 4200 32C2  0D 0A 07 53 WRCMD_ERROR:	DB	CR,LF,BELL,'SEC WRITE Error.'
 4201 32D5  20 42 69 74 		DB	' Bits: DNR,WP,WF,0,'
 4202 32E8  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4203                   ;
 4204                   ;
 4205                   ;---------------------------------------------------------------------------------------------------
 4206                   ;
 4207                   ;	LOOKUP TABLES OF DISK PARAMETERS
 4208                   ;
 4209                   ;	8" SINGLE DENSITY DRIVE VARIABLES (IBM 3740 Format)
 4210 32FC  1A          STDSDT:	DB	26		;SECTORS PER TRACK
 4211 32FD  4D          	DB	77		;TRACKS PER SIDE
 4212 32FE  00          	DB	00000000B	;Disk HW_BYTE (SDSS)
 4213 32FF  28          	DB	40		;HEADER GAP (SD-Systems has 100-27, IBM is 40!)
 4214 3300  06          	DB	6		;GAP 1 (0's)
 4215 3301  0B          	DB	11		;GAP 2 (FF's)
 4216 3302  1B          	DB	27		;GAP 3 (FF's)
 4217 3303  F7          	DB	247		;GAP 4 (FF's)
 4218 3304  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4219 3305  00          	DB	0		;128 Bytes/sec
 4220 3306  FF          	DB	0FFH		;GAP Format fill character
 4221 3307  E5          	DB	0E5H		;Data area fill character
 4222 3308  1423        	DW	1423H		;Size in bytes of 1 formatted track
 4223 330A  00          	DB     	0H     	       	;No special post format
 4224 330B  3333        	DW	SKEW_IBM	;Location of this disks sector skew table
 4225 330D  01          	DB	1H		;Each format will have a unique number. For disk to disk copy
 4226 330E  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4227 330F  38 22 20 53 	DB	'8" SINGLE DENSITY (IBM 3740 Format)',0
 4228 3333              SKEW_IBM:
 4229 3333  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4230 3342  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH
 4231                   
 4232                   
 4233                   ;	8" DOUBLE DENSITY (128 BYTE SECTORS)
 4234 334D  32          STDDDT:	DB	50		;SECTORS PER TRACK
 4235 334E  4D          	DB	77		;TRACKS PER SIDE
 4236 334F  40          	DB	01000000B	;Disk HW_BYTE  (DDSS)
 4237 3350  50          	DB	80		;HEADER GAP (SD-Systems has 100-16, IBM is 80!)
 4238 3351  08          	DB	8		;GAP 1 (4E's) 
 4239 3352  16          	DB	22		;GAP 2 (4E's)
 4240 3353  10          	DB	16		;GAP 3 (4E's)
 4241 3354  C7          	DB	199		;GAP 4 (4E's) (X3 = 597)
 4242 3355  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4243 3356  00          	DB	0		;128 Bytes/sec
 4244 3357  4E          	DB	4EH		;GAP Format fill character
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  74
VF      Z80

 4245 3358  E5          	DB	0E5H		;Data area fill character
 4246 3359  29A0        	DW	29A0H		;Size in bytes of 1 formatted track
 4247 335B  00          	DB	0H		;No special post formating modifications of disk req
 4248 335C  3386        	DW	SKEW_SDT	;Location of this disks sector skew table
 4249 335E  02          	DB	2H		;Each format will have a unique number. For disk to disk copy
 4250 335F  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4251 3360  38 22 20 44 	DB	'8" DOUBLE DENSITY (SD_Systems Format)',0
 4252 3386              SKEW_SDT:
 4253 3386  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4254 3395  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH,1BH,1CH,1DH,1EH,1FH
 4255 33A5  20 21 22 23 	db	20H,21H,22H,23H,24H,25H,26H,27H,28H,29H,2AH,2BH,2CH,2DH,2EH,2FH
 4256 33B5  30 31 32    	db	30H,31H,32H
 4257                   
 4258                   ;
 4259                   ;	8" DOUBLE DENSITY (256 BYTE SECTORS) (IBM System 34 Format)
 4260 33B8  1A          DDT256:	DB	26		;NBR SECTORS PER TRACK
 4261 33B9  4D          	DB	77		;NBR TRACKS PER SIDE
 4262 33BA  50          	DB	01010000B	;Disk HW_BYTE (DDDS)
 4263 33BB  50          	DB	80		;HEADER GAP (SD-Systems has 100-54, IBM is 80!)
 4264 33BC  0C          	DB	12		;GAP 1
 4265 33BD  16          	DB	22		;GAP 2
 4266 33BE  36          	DB	54		;GAP 3
 4267 33BF  C7          	DB	199		;GAP 4 (4E's) (X3 = 597)
 4268 33C0  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4269 33C1  01          	DB	1		;256 Bytes/sec
 4270 33C2  4E          	DB	4EH		;GAP Format fill character
 4271 33C3  E5          	DB	0E5H		;Data area fill character
 4272 33C4  28EC        	DW	28ECH		;Size in bytes of 1 formatted track
 4273 33C6  00          	DB	0H		;No special post formating modifications of disk req
 4274 33C7  33FB        	DW	SKEW_256	;Location of this disks sector skew table
 4275 33C9  03          	DB	3H		;Each format will have a unique number. For disk to disk copy
 4276 33CA  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4277 33CB  38 22 20 44 	DB	'8" DD (256 BYTE SECTORS) (IBM System 34 Format)',0
 4278 33FB              SKEW_256:
 4279 33FB  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4280 340A  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH
 4281                   
 4282                   ;
 4283                   ;	8" DOUBLE DENSITY (512 BYTE SECTORS) 
 4284 3415  0F          DDT512:	DB	15		;NBR SECTORS PER TRACK
 4285 3416  4D          	DB	77		;NBR TRACKS PER SIDE
 4286 3417  50          	DB	01010000B	;Disk HW_BYTE (DDDS)
 4287 3418  50          	DB	80		;HEADER GAP (SD-Systems has 100-54, IBM is 80!)
 4288 3419  0C          	DB	12		;GAP 1
 4289 341A  16          	DB	22		;GAP 2
 4290 341B  54          	DB	84		;GAP 3
 4291 341C  C8          	DB	200		;GAP 4 (4E's) (X3 = 597)
 4292 341D  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4293 341E  02          	DB	2		;512 Bytes/sec
 4294 341F  4E          	DB	4EH		;GAP Format fill character
 4295 3420  E5          	DB	0E5H		;Data area fill character
 4296 3421  0000        	DW	0H		;Size in bytes of 1 formatted track
 4297 3423  00          	DB	0H		;No special post formating modifications of disk req
 4298 3424  3443        	DW	SKEW_512	;Location of this disks sector skew table
 4299 3426  04          	DB	4H		;Each format will have a unique number. For disk to disk copy
 4300 3427  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4301 3428  38 22 20 44 	DB	'8" DDDS (512 BYTE SECTORS)',0
 4302 3443              SKEW_512:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  75
VF      Z80

 4303 3443  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4304                   
 4305                   
 4306                   ;
 4307                   ;	8" DOUBLE DENSITY (1024 BYTE SECTORS - Single Sided) 
 4308 3452  09          DDT1K:	DB	9		;NBR SECTORS PER TRACK
 4309 3453  4D          	DB	77		;NBR TRACKS PER SIDE
 4310 3454  40          	DB	01000000B	;Disk HW_BYTE (DDDS) ;
 4311 3455  50          	DB	80		;INDEX HEADER GAP
 4312 3456  0C          	DB	12		;NBR GAP 1
 4313 3457  16          	DB	22		;NBR GAP 2
 4314 3458  36          	DB	54		;NBR GAP 3
 4315 3459  C7          	DB	199		;GAP 4 
 4316 345A  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4317 345B  03          	DB	3		;1024 Bytes/sec
 4318 345C  4E          	DB	4EH		;GAP Format fill character
 4319 345D  E5          	DB	0E5H		;Data area fill character
 4320 345E  2B5A        	DW	2B5AH		;Size in bytes of 1 formatted track
 4321 3460  00          	DB	0H		;No special post formating modifications of disk req
 4322 3461  3499        	DW	SKEW_1K		;Location of this disks sector skew table
 4323 3463  05          	DB	5H		;Each format will have a unique number. For disk to disk copy
 4324 3464  01          	DB	1		;Tracks set aside for operating system (eg CPM 2)
 4325 3465  38 22 20 44 	DB	'8" DOUBLE DENSITY, SINGLE SIDED (1024 BYTE SECTORS)',0 
 4326 3499              SKEW_1K:
 4327 3499  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4328                   ;
 4329                   ;	8" DOUBLE DENSITY (1024 BYTE SECTORS - Double Sided)
 4330 34A2  09          DDT1K2:	DB	9		;NBR SECTORS PER TRACK
 4331 34A3  4D          	DB	77		;NBR TRACKS PER SIDE
 4332 34A4  50          	DB	01010000B	;Disk HW_BYTE (DDDS) ;
 4333 34A5  50          	DB	80		;INDEX HEADER GAP
 4334 34A6  0C          	DB	12		;NBR GAP 1
 4335 34A7  16          	DB	22		;NBR GAP 2
 4336 34A8  36          	DB	54		;NBR GAP 3
 4337 34A9  C7          	DB	199		;GAP 4 
 4338 34AA  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4339 34AB  03          	DB	3		;1024 Bytes/sec
 4340 34AC  4E          	DB	4EH		;GAP Format fill character
 4341 34AD  E5          	DB	0E5H		;Data area fill character
 4342 34AE  2B5A        	DW	2B5AH		;Size in bytes of 1 formatted track
 4343 34B0  00          	DB	0H		;No special post formating modifications of disk req
 4344 34B1  34E9        	DW	SKEW_1KDS	;Location of this disks sector skew table
 4345 34B3  06          	DB	6H		;Each format will have a unique number. For disk to disk copy
 4346 34B4  01          	DB	1		;Tracks set aside for operating system (eg CPM 2)
 4347 34B5  38 22 20 44 	DB	'8" DOUBLE DENSITY, DOUBLE SIDED (1024 BYTE SECTORS)',0 
 4348 34E9              SKEW_1KDS:
 4349 34E9  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4350                   
 4351                   ;
 4352                   ;	
 4353                   ; 5", 128 byte, SD SD-Systems Format
 4354 34F2  12          MINSDT: DB	18		;sectors per track
 4355 34F3  23          	DB	35		;tracks per side
 4356 34F4  20          	DB	00100000B	;Disk HW_BYTE (SDSS)
 4357 34F5  0C          	DB	20-8		;index header gap
 4358 34F6  06          	DB	6		;GAP 1
 4359 34F7  0B          	DB	11		;GAP 2
 4360 34F8  08          	DB	8		;GAP 3
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  76
VF      Z80

 4361 34F9  DD          	DB	221		;GAP 4 (FF's)
 4362 34FA  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4363 34FB  00          	DB	0		;128 Bytes/sec
 4364 34FC  FF          	DB	0FFH		;GAP Format fill character
 4365 34FD  E5          	DB	0E5H		;Data area fill character
 4366 34FE  0CC7        	DW	0CC7H		;Size in bytes of 1 formatted track
 4367 3500  00          	DB	0H		;No special post formating modifications of disk req
 4368 3501  352B        	DW	SKEW_MINSD	;Location of this disks sector skew table
 4369 3503  07          	DB	7H		;Each format will have a unique number. For disk to disk copy
 4370 3504  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4371 3505  35 22 2C 20 	DB	'5", SDSS, 128 byte, SD-Systems Format',0
 4372 352B              SKEW_MINSD:
 4373 352B  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH,10H,11H
 4374                   
 4375                   ;
 4376                   ; 5", 128 byte, DD SD-Systems Format
 4377 353C  1D          MINDDT: DB	29		;sectors per track
 4378 353D  23          	DB	35		;tracks per side
 4379 353E  60          	DB	01100000B	;Disk HW_BYTE (DDSS)
 4380 353F  54          	DB	100-16		;index header gap
 4381 3540  08          	DB	8		;GAP 1
 4382 3541  16          	DB	22		;GAP 2
 4383 3542  10          	DB	16		;GAP 3
 4384 3543  F7          	DB	247		;GAP 4
 4385 3544  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4386 3545  00          	DB	0		;128 Bytes/sec
 4387 3546  4E          	DB	4EH		;GAP Format fill character
 4388 3547  E5          	DB	0E5H		;Data area fill character
 4389 3548  17C0        	DW	17C0H		;Size in bytes of 1 formatted track
 4390 354A  00          	DB	0H		;No special post formating modifications of disk req
 4391 354B  3575        	DW	SKEW_MINDD	;Location of this disks sector skew table
 4392 354D  08          	DB	8H		;Each format will have a unique number. For disk to disk copy
 4393 354E  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4394 354F  35 22 2C 20 	DB	'5", DDSS. 128 byte, SD-Systems Format',0
 4395 3575              SKEW_MINDD:
 4396 3575  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4397 3584  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH,1BH,1CH
 4398                   
 4399                   ;
 4400                   ; 5", 512 byte, DDDS, 8 sector IBM PC CPM-86 format
 4401 3591  08          MINCPM: DB	8		;sectors per track
 4402 3592  28          	DB	40		;tracks per side
 4403 3593  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4404 3594  50          	DB	80		;index header gap
 4405 3595  0C          	DB	12		;GAP 1
 4406 3596  16          	DB	22		;GAP 2
 4407 3597  50          	DB	80		;GAP 3
 4408 3598  CF          	DB	207		;GAP 4 (4E's) (1038)
 4409 3599  05          	DB	5		;GAPR (Flag for multiple repeats of GAP4)
 4410 359A  02          	DB	2		;512 Bytes/sec
 4411 359B  4E          	DB	04EH		;GAP Format fill character
 4412 359C  E5          	DB	0E5H		;Data area fill character (for CPM86)
 4413 359D  19C0        	DW	19C0H		;Size in bytes of 1 formatted track
 4414 359F  01          	DB	CPM86_FLAG	;Special post formating modifications of disk req
 4415 35A0  35D6        	DW	SKEW_CPM86	;Location of this disks sector skew table
 4416 35A2  09          	DB	9H		;Each format will have a unique number. For disk to disk copy
 4417 35A3  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4418 35A4  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector IBM PC CPM-86 format',0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  77
VF      Z80

 4419 35D6              SKEW_CPM86:
 4420 35D6  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4421                   ;
 4422                   ;
 4423                   ; 5", 512 byte, DDDS, 9 sector DEC VT180 format
 4424 35DE  09          DEC:	DB	9		;sectors per track
 4425 35DF  28          	DB	40		;tracks per side
 4426 35E0  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4427 35E1  50          	DB	80		;index header gap
 4428 35E2  0C          	DB	12		;GAP 1
 4429 35E3  16          	DB	22		;GAP 2
 4430 35E4  1A          	DB	26		;GAP 3
 4431 35E5  DA          	DB	218		;GAP 4 (4E's) (872)
 4432 35E6  04          	DB	4		;GAPR (Flag for multiple repeats of GAP4)
 4433 35E7  02          	DB	2		;512 Bytes/sec
 4434 35E8  4E          	DB	04EH		;GAP Format fill character
 4435 35E9  E5          	DB	0E5H		;Data area fill character (for CPM)
 4436 35EA  1971        	DW	1971H		;Size in bytes of 1 formatted track
 4437 35EC  00          	DB	0		;No special post formating modifications of disk req
 4438 35ED  361F        	DW	SKEW_DEC	;Location of this disks sector skew table
 4439 35EF  0A          	DB	0AH		;Each format will have a unique number. For disk to disk copy
 4440 35F0  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4441 35F1  35 22 2C 20 	DB	'5", DDDS, 512 byte, 9 sector DEC VT180 format',0
 4442 361F              SKEW_DEC:
 4443 361F  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4444                   ;
 4445                   ;
 4446                   ; 5", 256 byte, DDDS, 16 sector TOSHIBA T-100 format
 4447 3628  10          TOSHIBA: DB	16		;sectors per track
 4448 3629  23          	DB	35		;tracks per side
 4449 362A  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4450 362B  50          	DB	80		;index header gap
 4451 362C  0C          	DB	12		;GAP 1
 4452 362D  16          	DB	22		;GAP 2
 4453 362E  32          	DB	50		;GAP 3
 4454 362F  B7          	DB	183		;GAP 4 (4E's) (366)
 4455 3630  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4456 3631  01          	DB	1		;256 Bytes/sec
 4457 3632  4E          	DB	04EH		;GAP Format fill character
 4458 3633  E5          	DB	0E5H		;Data area fill character (for CPM)
 4459 3634  1928        	DW	1928H		;Size in bytes of 1 formatted track
 4460 3636  00          	DB	0		;No special post formating modifications of disk req
 4461 3637  366E        	DW	SKEW_TOSH	;Location of this disks sector skew table
 4462 3639  0B          	DB	0BH		;Each format will have a unique number. For disk to disk copy
 4463 363A  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4464 363B  35 22 2C 20 	DB	'5", DDDS, 256 byte, 16 sector TOSHIBA T-100 format',0
 4465 366E              SKEW_TOSH:
 4466 366E  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4467                   ;
 4468                   ;
 4469                   ; 5", 128 byte, CROMEMCO CDOS (SINGLE density) Format
 4470 367D  12          CDOS:	DB	18		;sectors per track
 4471 367E  28          	DB	40		;tracks per side
 4472 367F  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4473 3680  0C          	DB	20-8		;index header gap
 4474 3681  06          	DB	6		;GAP 1
 4475 3682  0B          	DB	11		;GAP 2
 4476 3683  08          	DB	8		;GAP 3
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  78
VF      Z80

 4477 3684  B9          	DB	185		;GAP 4 (FF's)
 4478 3685  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4479 3686  00          	DB	0		;128 Bytes/sec
 4480 3687  FF          	DB	0FFH		;GAP Format fill character
 4481 3688  E5          	DB	0E5H		;Data area fill character
 4482 3689  0CA3        	DW	0CA3H		;Size in bytes of 1 formatted track
 4483 368B  00          	DB	0H		;No special post formating modifications of disk req
 4484 368C  36B9        	DW	SKEW_CDOS	;Location of this disks sector skew table
 4485 368E  0C          	DB	0CH		;Each format will have a unique number. For disk to disk copy
 4486 368F  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4487 3690  35 22 2C 20 	DB	'5", SDDS, 128 byte, CROMEMCO CDOS Format',0
 4488 36B9              SKEW_CDOS:
 4489 36B9  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH,10H,11H
 4490                   ;
 4491                   ; 5", 512 byte, CROMEMCO CDOS w/INTL TERM. CP/M Format
 4492 36CA  0A          CDOSDD:	DB	10		;sectors per track
 4493 36CB  28          	DB	40		;tracks per side
 4494 36CC  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4495 36CD  50          	DB	80		;index header gap
 4496 36CE  0C          	DB	12		;GAP 1
 4497 36CF  16          	DB	22		;GAP 2
 4498 36D0  1E          	DB	30		;GAP 3
 4499 36D1  D6          	DB	214		;GAP 4 (FF's)
 4500 36D2  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4501 36D3  02          	DB	2		;512 Bytes/sec
 4502 36D4  FF          	DB	0FFH		;GAP Format fill character
 4503 36D5  E5          	DB	0E5H		;Data area fill character
 4504 36D6  188E        	DW	188EH		;Size in bytes of 1 formatted track
 4505 36D8  00          	DB	0H		;No special post formating modifications of disk req
 4506 36D9  370A        	DW	SKEW_CDOS2	;Location of this disks sector skew table
 4507 36DB  0D          	DB	0DH		;Each format will have a unique number. For disk to disk copy
 4508 36DC  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4509 36DD  35 22 2C 20 	DB	'5", DDDS, 512 byte, CROMEMCO CDOS/CPM Format',0
 4510 370A              SKEW_CDOS2:
 4511 370A  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4512                   
 4513                   ; 5", 512 byte, EPSON QX-10 Format
 4514 3714  0A          EPSON:	DB	10		;sectors per track
 4515 3715  28          	DB	40		;tracks per side
 4516 3716  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4517 3717  50          	DB	80		;index header gap
 4518 3718  0C          	DB	12		;GAP 1
 4519 3719  16          	DB	22		;GAP 2
 4520 371A  1E          	DB	30		;GAP 3
 4521 371B  D6          	DB	214		;GAP 4 (FF's)
 4522 371C  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4523 371D  02          	DB	2		;512 Bytes/sec
 4524 371E  FF          	DB	0FFH		;GAP Format fill character
 4525 371F  E5          	DB	0E5H		;Data area fill character
 4526 3720  188E        	DW	188EH		;Size in bytes of 1 formatted track
 4527 3722  00          	DB	0H		;No special post formating modifications of disk req
 4528 3723  374E        	DW	SKEW_EPSON	;Location of this disks sector skew table
 4529 3725  0E          	DB	0EH		;Each format will have a unique number. For disk to disk copy
 4530 3726  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4531 3727  35 22 2C 20 	DB	'5", DDDS, 512 byte, EPSON QX-10 Format',0
 4532 374E              SKEW_EPSON:
 4533 374E  01 03 05 07 	DB	1H,3H,5H,7H,9H,2H,4H,6H,8H,0AH		;<-- note skew table
 4534                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  79
VF      Z80

 4535                   ;
 4536                   ; 5", 1K byte, DDDS, 5 sector MORROW MD3 format
 4537 3758  05          MORROW: DB	5		;sectors per track
 4538 3759  28          	DB	40		;tracks per side
 4539 375A  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4540 375B  50          	DB	80		;index header gap
 4541 375C  0C          	DB	12		;GAP 1
 4542 375D  16          	DB	22		;GAP 2
 4543 375E  32          	DB	50		;GAP 3
 4544 375F  C0          	DB	192		;GAP 4 (4E's) (574)
 4545 3760  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4546 3761  03          	DB	3		;1024 Bytes/sec
 4547 3762  4E          	DB	04EH		;GAP Format fill character
 4548 3763  E5          	DB	0E5H		;Data area fill character (for CPM)
 4549 3764  1977        	DW	1977H		;Size in bytes of 1 formatted track
 4550 3766  00          	DB	0		;No special post formating modifications of disk req
 4551 3767  379B        	DW	SKEW_MORROW	;Location of this disks sector skew table
 4552 3769  0F          	DB	0FH		;Each format will have a unique number. For disk to disk copy
 4553 376A  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4554 376B  35 22 2C 20 	DB	'5", DDDS, 1024 byte, 9 sector MORROW MD3 format',0
 4555 379B              SKEW_MORROW:
 4556 379B  01 02 03 04 	DB	1H,2H,3H,4H,5H
 4557                   ;
 4558                   ;
 4559                   ; 5", 512 byte, DDDS, 5 sector ZENITH Z-100 format
 4560 37A0  08          ZENITH: DB	8		;sectors per track
 4561 37A1  28          	DB	40		;tracks per side
 4562 37A2  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4563 37A3  50          	DB	80		;index header gap
 4564 37A4  0C          	DB	12		;GAP 1
 4565 37A5  16          	DB	22		;GAP 2
 4566 37A6  1A          	DB	26		;GAP 3
 4567 37A7  F2          	DB	242		;GAP 4 (4E's) (1454)
 4568 37A8  06          	DB	6		;GAPR (Flag for multiple repeats of GAP4)
 4569 37A9  02          	DB	2		;512 Bytes/sec
 4570 37AA  4E          	DB	04EH		;GAP Format fill character
 4571 37AB  E5          	DB	0E5H		;Data area fill character (for CPM)
 4572 37AC  1933        	DW	1933H		;Size in bytes of 1 formatted track
 4573 37AE  00          	DB	0		;No special post formating modifications of disk req
 4574 37AF  37E4        	DW	SKEW_ZENITH	;Location of this disks sector skew table
 4575 37B1  10          	DB	10H		;Each format will have a unique number. For disk to disk copy
 4576 37B2  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4577 37B3  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector ZENITH Z-100 format',0
 4578 37E4              SKEW_ZENITH:
 4579 37E4  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4580                   ;
 4581                   ;
 4582                   ; 5", 512 byte, DDDS, 10 sector SUPERBRAIN QD format
 4583 37EC  0A          SUPER: DB	10		;sectors per track
 4584 37ED  23          	DB	35		;tracks per side
 4585 37EE  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4586 37EF  50          	DB	80		;index header gap
 4587 37F0  0C          	DB	12		;GAP 1
 4588 37F1  16          	DB	22		;GAP 2
 4589 37F2  10          	DB	16		;GAP 3
 4590 37F3  B1          	DB	177		;GAP 4 (4E's) (354)
 4591 37F4  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4592 37F5  02          	DB	2		;512 Bytes/sec
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  80
VF      Z80

 4593 37F6  4E          	DB	04EH		;GAP Format fill character
 4594 37F7  E5          	DB	0E5H		;Data area fill character (for CPM)
 4595 37F8  193A        	DW	193AH		;Size in bytes of 1 formatted track
 4596 37FA  00          	DB	0		;No special post formating modifications of disk req
 4597 37FB  3832        	DW	SKEW_SUPER	;Location of this disks sector skew table
 4598 37FD  11          	DB	11H		;Each format will have a unique number. For disk to disk copy
 4599 37FE  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4600 37FF  35 22 2C 20 	DB	'5", DDDS, 512 byte, 10 sector SUPERBRAIN QD format',0
 4601 3832              SKEW_SUPER:
 4602 3832  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4603                   ;
 4604                   ;
 4605                   ; 5", IBM PC, MSDOS 1.1, 512 byte, DDDS, 8 sector format
 4606 383C  08          MSDOS:	DB	8		;sectors per track
 4607 383D  28          	DB	40		;tracks per side
 4608 383E  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4609 383F  50          	DB	80		;index header gap
 4610 3840  0C          	DB	12		;GAP 1
 4611 3841  16          	DB	22		;GAP 2
 4612 3842  50          	DB	80		;GAP 3
 4613 3843  C1          	DB	193		;GAP 4 (4E's)
 4614 3844  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4615 3845  02          	DB	2		;512 Bytes/sec
 4616 3846  4E          	DB	04EH		;GAP Format fill character
 4617 3847  E5          	DB	0E5H		;Data area fill character
 4618 3848  16B2        	DW	16B2H		;Size in bytes of 1 formatted track
 4619 384A  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4620 384B  3883        	DW	SKEW_DOS1	;Location of this disks sector skew table
 4621 384D  12          	DB	12H		;Each format will have a unique number. For disk to disk copy
 4622 384E  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4623 384F  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector IBMPC MSDOS 1.1 format',0
 4624 3883              SKEW_DOS1:
 4625 3883  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4626                   ;
 4627                   ;
 4628                   ; 5", IBM PC, MSDOS 2.x, 512 byte, DDDS, 9 sector format
 4629 388B  09          MSDOS2:	DB	9		;sectors per track
 4630 388C  28          	DB	40		;tracks per side
 4631 388D  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4632 388E  50          	DB	80		;index header gap
 4633 388F  0C          	DB	12		;GAP 1
 4634 3890  16          	DB	22		;GAP 2
 4635 3891  50          	DB	80		;GAP 3
 4636 3892  C1          	DB	193		;GAP 4 (4E's)
 4637 3893  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4638 3894  02          	DB	2		;512 Bytes/sec
 4639 3895  4E          	DB	04EH		;GAP Format fill character
 4640 3896  E5          	DB	0E5H		;Data area fill character
 4641 3897  193E        	DW	193EH		;Size in bytes of 1 formatted track
 4642 3899  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4643 389A  38D2        	DW	SKEW_DOS2	;Location of this disks sector skew table
 4644 389C  13          	DB	13H		;Each format will have a unique number. For disk to disk copy
 4645 389D  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4646 389E  35 22 2C 20 	DB	'5", DDDS, 512 byte, 9 sector IBMPC MSDOS 2.x format',0
 4647 38D2              SKEW_DOS2:
 4648 38D2  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4649                   ;
 4650                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  81
VF      Z80

 4651                   ; 5", TRS-80 MOD-III, 512 byte, DDDS, 10 sector format
 4652 38DB  0A          TRS80:	DB	10		;sectors per track
 4653 38DC  28          	DB	40		;tracks per side
 4654 38DD  60          	DB	01100000B	;Disk HW_BYTE (DDSS)
 4655 38DE  50          	DB	80		;index header gap
 4656 38DF  0C          	DB	12		;GAP 1
 4657 38E0  16          	DB	22		;GAP 2
 4658 38E1  1A          	DB	26		;GAP 3
 4659 38E2  89          	DB	137		;GAP 4 (4E's)
 4660 38E3  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4661 38E4  02          	DB	2		;512 Bytes/sec
 4662 38E5  4E          	DB	04EH		;GAP Format fill character
 4663 38E6  E5          	DB	0E5H		;Data area fill character
 4664 38E7  1976        	DW	1976H		;Size in bytes of 1 formatted track
 4665 38E9  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4666 38EA  3922        	DW	SKEW_TRS	;Location of this disks sector skew table
 4667 38EC  14          	DB	14H		;Each format will have a unique number. For disk to disk copy
 4668 38ED  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4669 38EE  35 22 2C 20 	DB	'5", DDSS, 512 byte, 10 sector TRS-80 MOD-III format',0
 4670 3922              SKEW_TRS:
 4671 3922  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4672                   ;
 4673                   ;
 4674                   ;----------------------------------------------------------------------------------------
 4675                   ;
 4676                   ;
 4677                   ; THE FOLLOWING RAM LOCATIONS ARE REQ
 4678                   ;
 4679 392C  0000        IX_OLD_STORE	DW	0000H
 4680 392E  00          ERRORS_FLAG	DB	0H	;Will keep tarck of errors during a routine
 4681 392F  00          CRTDISP		DB	0H
 4682 3930    0006      IDSV		DS	6H
 4683 3936  00          CMD_STORE	DB	0H	;Menu CMD Store (Note: NOT CHIP CMD,CHIP_CMDSV)
 4684 3937  00          ERMASK		DB	0H	;ERROR MASK
 4685 3938  00          ERSTAT		DB	0H	;PRESENT ERROR STORE
 4686 3939  00          CHIP_CMDSV	DB	0H	;COMMAND TO 1791/5 SAVE
 4687 393A  0000        SP_SAVE		DW	0000H	;SP SAVE
 4688 393C  00          SEC_RT_COUNT	DB	0H	;Number of sector reads before setting error flag
 4689 393D  00          SEEK_RT_COUNT	DB	0H	;Number of seek retrys
 4690 393E  00          TRK_RT_COUNT	DB	0H	;Number of track reads before setting error flag
 4691 393F  0000        TRACK_SIZE	DW	0000H	;Size in bytes of current formatted track
 4692 3941  00          SEC_COUNT	DB	0H	;number of sectors to load
 4693 3942  0000        DMA_NEXT	DW	0	;Store for next (TADDR) for multiple sec R/W's 
 4694 3944  00          COPY_TRK_COUNT:	DB	0H	;Used for disk to disk track copying
 4695 3945  00          COPY_TRK	DB	0H
 4696 3946  00          DRIVE_STORE	DB	0H	;For 8' quick formatting
 4697                   ;
 4698 3947  00          F_TRK		DB	0H	;for building format track image
 4699 3948  00          F_SIDE		DB	0H	;for building format track image
 4700 3949  0000        INDEX_MARK	DW	0000H	;End of Index field +1
 4701 394B  0000        S_DATA_MARK	DW	0000H	;Pointer to start of Data area
 4702 394D  0000        E_DATA_MARK	DW	0000H	;Pointer to end of Data area+1
 4703 394F  0000        E_SEC_MARK	DW	0000H	;End Sector image +1
 4704 3951  0000        S_GAP4_MARK	DW	0000H	;start GAP4 area
 4705 3953  0000        E_GAP4_MARK	DW	0000H	;End track +1
 4706                   	
 4707 3955    0100      		DS	100H
 4708         3A55      STACK	EQU	$
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  82
VF      Z80

 4709                   
 4710                   ;END
 4711                   
 0 Error(s) Detected.
 14677 Absolute Bytes. 612 Symbols Detected.
