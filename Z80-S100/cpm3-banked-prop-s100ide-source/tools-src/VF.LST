Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   1
VF      Z80

    1                   ;  THIS IS A PROGRAM TO EXAMINE & FORMAT CPM DISKS USEING A VERSAFLOPPY II DISK 
    2                   ;  CONTROLLER. NOTE IT IS SELF A CONTAINED PROGRAM (EXCEPT FOR CONSOLE I/O)
    3                   ;
    4                   ; It is a completely new Diagnostic program and utilizes a new set of core BIOS
    5                   ; like functions that can easily be adapted for CPM+ etc. It does not utilze
    6                   ; any of the old SD_Systems BIOS/Diagnostic code (which I found to be convoluted, difficult 
    7                   ; to modify and specific for a few disk formats). This program utilizes a disk parameter
    8                   ; table driven approach for many common 8" & 5" formats. Others can be easily added.
    9                   ; It works with both the 1791 & 1795 chips (Set the EQU's below). 
   10                   ;
   11                   ; The program requires a Z80 CPU and utilizes the marvelous Z80 assembler (ZASMB) written 
   12                   ; by P.F Ridler in 1984. See (http://retrotechnology.com/herbs_stuff/s_sd.html#other) 
   13                   ; on Herbs site. The assembler here was setup to take long label names (see the docs). 
   14                   ; However most common Z80 assemblers should work, with minor changes to a few lines of code.
   15                   ; ZASMB allows the use uses a few more logical OP codes that Zilog left out 
   16                   ; (eg CP A,20H rather than CP 20H). This assembler is extremely fast and generates 
   17                   ; direct .com code. It does however have limited ifdef etc options.
   18                   ;
   19                   ;
   20                   ;	JOHN MONAHAN	(monahan@vitasoft.org)	27/4/2009	VERSION	1.0
   21                   ;
   22                   ;	V0.1	Basic Sector ID field working
   23                   ;	V0.2	Seek test jumpy
   24                   ;	V0.3	Seek done, before read sector core stuff
   25                   ;	V0.5	Sector read OK for 8" SD
   26                   ;	V0.7	Sector Read blanked out menu, itself OK. Seek redone.
   27                   ;	V0.8	Reading 128 byte sectors with my READ_SECTOR routine OK
   28                   ;	V0.9	Block read for sectors
   29                   ;	V0.10	Start of Formatting OK
   30                   ;	V0.11	Filled in comments of formatting
   31                   ;	V0.12	Start of sector track write image display
   32                   ;	V0.14	Fixed abort etc. Sec formatting display working, ESC to stop display 
   33                   ;	V0.15	Sec ID errors on display. general cleanup of abort stuff
   34                   ;	V0.16	Variable sec size display. Second side not working
   35                   ;	V0.17	Second side working before splitting UNIT into two sections (Hardware & Software)
   36                   ;	V0.18	New format using IO_BYTE and IX pointer to tables for disk/drive info.
   37                   ;	V0.19	Before simplifying moving IO_BYTE data to Disk paramater table
   38                   ;	V0.20	Start of HW_BYTE in disk paramater table. No format yet.
   39                   ;	V0.21	8" format done with new layout.
   40                   ;	V0.22	Before New Format Routine & Tables
   41                   ;	V0.24	Before switching to my memory track build routines
   42                   ;	V0.25	My track image not working yet
   43                   ;	V0.27	Software SD Track (no sides) working. No hardware yet
   44                   ;	V0.28	8" format (CPM cannot read it). Cannot access 5" drives
   45                   ;	V0.29	Straightened our 5". (DW in table). Still CPM read problem
   46                   ;	V0.30	Start of track dump SD 8" Format now working
   47                   ;	V0.31	Cleaned up seek no verify functions to one general function
   48                   ;	V0.33	Seems to be working now
   49                   ;	V0.34	Random sector read test working (write not done yet)
   50                   ;	V0.35	Start or read sec & seek error returns. Have seperate flag on CMD's 
   51                   ;	V0.37	New error routines Seek done. Modeled after VF1 Bios
   52                   ;	V0.38	New error routines, centralized Home, Seek etc started. 
   53                   ;	V0.39	New format for sec read with seek_V done
   54                   ;	V0.40	New side selection and redo of odds and ends
   55                   ;	V0.41	Split menu's for 5" & 8" drives. All OK on Sec reads
   56                   ;	V0.42	Dump track working again.
   57                   ;	V0.43	Format not working
   58                   ;	V0.44	Re-did disk format menues and selection. Started on Format stuff 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   2
VF      Z80

   59                   ;	V0.45	Combine IY & IX reg flags into a single IX+HW_BYTE flag
   60                   ;	V0.46	Put track size info in tables and use it for track dumps.
   61                   ;	V0.48	Cleaned up things. END_ROUTINE put in.
   62                   ;	V0.50	Sector Read/write done (track format broken)
   63                   ;	V0.51	Format not working.
   64                   ;	V0.52	Format SSSD 8" seems to be OK now. Need READ_ID at start
   65                   ;	V0.53	Format was still not working. Changed chip and used Restore with V flag on.
   66                   ;	V0.54	SOLID FORMATTING of 8'. Moved all 1791/5 CMD's to drive tables. (Need to up 5")
   67                   ;	V0.55	Formating of al 8" SS disks working
   68                   ;	V0.56	Combined all sec R/W tests into one core routine
   69                   ;	V0.58	Working on side selection, fixed some formatting issues including CPM86 disks
   70                   ;	V0.59	Fixed side_sel to actully select the proper side (Note debug display present)
   71                   ;	V0.60	Formatting 5' DDDS disk now working and compatable with CPM3
   72                   ;	V0.61	Many formats added for 5" disks
   73                   ;	V0.62	Before skew tables for formatting (Removed HP & KAYPRO)
   74                   ;	V0.63	Skew table for formatting done DD & SD
   75                   ;	V0.64	All formats done and working. Corrected (DRIVE)->IY problem
   76                   ;	V0.65	Load CMD done
   77                   ;	V0.66	Both sector dump and load working. repaired disk selection again.
   78                   ;	V0.67	Split out all the sector R/W functions again into seperate routines - easier to mentain.
   79                   ;	V0.68	Moved 179x CMDS to start. Take care of 1795 side bits. Rearranged main menu
   80                   ;	V0.69	Solve status port hang-up in invalid hardware.
   81                   ;	V0.70	Started Disk copy
   82                   ;	V0.71	Disk copying of 8" done. Slow with no sector skews
   83                   ;	V0.72	Skew for disk copying inserted - still slow
   84                   ;	V0.73	Went to multi-sec R/W but errors so far
   85                   ;	V0.74	Installed Verify cmd as well. Copy now working for 128 byte sectors
   86                   ;	V0.75	Improvements to M_SEC_RD/WR
   87                   ;	V0.76	Multi sector R/W working. 
   88                   ;	V0.77	Step-in CMD implemented but copy still requires HOME on A:
   89                   ;	V0.78	System copy done but needs work. Need to have global COPY,COMPARE  etc.
   90                   ;	V0.79	Copy disk generealized/global now working on DS disks
   91                   ;	V0.80	Verify command now generalized and working 
   92                   ;	V0.81	Sys copy done, 1795/91 mods added
   93                   ;	V0.82	Problems with 1795 seek & drive select.
   94                   ;	V0.83	Complete rearrangement of hardware selection. Seek working up to before Format
   95                   ;	V0.84	All cleaned up for 1791 chip
   96                   ;	V0.85	Had to flip A & B side hardware I/O selections for 1795 chip
   97                   ;	V0.86	Hardware side select finally straightened out. Before IY usage
   98                   ;	V0.87	Initial IY usage - untested
   99                   ;	V0.88	IY working throughout. Seems solid for 1791 & 1795 chips.
  100                   ;	V1.01	Set 1 track for 1K sector  8" CPM system tracks instead of 2
  101                   ;
  102                   ;	To Do:-
  103                   ;;	Add 5" dos sectors format initilization
  104                   ;
  105                   ;
  106                   ;
  107                   ;	
  108         0000      FALSE	EQU	0
  109         0001      TRUE	EQU	1
  110                   ;
  111         0001      CHIP_1795 EQU	TRUE		;<---- RD & WR sector cmd's bit patterns are different for these chips!
  112         0000      CHIP_1791 EQU	FALSE
  113                   
  114         0080      NBYTES	EQU	128		;BYTES PER SECTOR UNIT (eg, *2 FOR 256 BYTE SECTORS)
  115         000A      LF	EQU	0AH
  116         000D      CR	EQU	0DH
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   3
VF      Z80

  117         0007      BELL	EQU	07H
  118         001A      CLEAR	EQU	1AH		;SD Systems Video Board Clear Screen
  119         0009      TAB	EQU	09H
  120         001B      ESC	EQU	1BH
  121         001C      EOL	EQU	1CH		;SD Systems Video Board Clear to end of line
  122         0010      PAGE_SIZE EQU	16		;Number of lines at a time to display memory contents on CRT
  123         0005      STATUS_DELAY EQU 5		;Time-out for waiting for status port to ho not busy. (~5 seconds @ 4MHz)
  124                   ;
  125         0001      RO_FLAG	EQU	01		;Flag for sequental sectors R test (Read sectors)
  126         0002      WO_FLAG	EQU	02		;Flag for sequental sectors W test (Write to sectors)
  127         0003      RW_FLAG	EQU	03		;Flag for sequental sectors R/W test (Both)
  128         0004      RRW_FLAG EQU	04		;Flag for random track and sector R/W test
  129         0005      TRK_RO_FLAG EQU	05		;Flag for reading sectors from just one track continously
  130         0001      CPM86_FLAG  EQU	01		;Flag to indicate after 5" disk formating CPM86 first sector
  131                   				;needs to be modified
  132         0001      TEST_FILL EQU	01		;Character to write for sector write test.
  133                   ;
  134         0000      SIMPLE	EQU	00h		;Output information detail to CRT
  135         00FF      COMPLEX	EQU	0FFH	
  136                   ;
  137                   				;Will place these values here for easy RAM analysis if a crash
  138                   				;The rest go to the end of the program
  139         0040      TADDR	EQU	40H		;STORE FOR DMA ADDRESS
  140         0043      @TRK	EQU	43H		;NEW TRACK <---- DO not change the order of these locations 
  141         0044      @SIDE	EQU	44H		;NEW SIDE        the IY register will ALWAYS point to TRK
  142         0045      @SCTR	EQU	45H		;NEW SECTOR
  143         0046      DRIVE_1	EQU	46H		;CURRENT DRIVE SELECT BITS
  144         0047      DRIVE_2	EQU	47H		;SECOND DRIVE SELECT BITS (For copy, verify, sysgen etc)
  145         0048      IOBYTE	EQU	48H		;Combined drive selection, density, side and size bits for hardware
  146                   ;				;is inverted and sent to the VFII "SELECT" port
  147                   ;
  148                   ;	PORTS & COMMANDS FOR FOR 1791 or 1795
  149                   ;
  150         0060      RSET	EQU	60H		;<----- VERSAFLOPPY BASE PORT ADDRESS (I use Port 50H, SD-Systems uses 60H)
  151         0063      SELECT	EQU	63H		;DRIVE SELECT PORT
  152         0064      STATUS	EQU	64H		;STATUS PORT
  153         0065      TRACK	EQU	65H		;TRACK PORT
  154         0066      SECTOR	EQU	66H		;SECTOR PORT
  155         0067      DATA	EQU	67H		;DATA PORT
  156         0064      CMD	EQU	64H		;COMMAND PORT
  157         0005      DEBUG	EQU 05H
  158                   ;
  159                   ;Note: the 1791/5 chip for most commands used bits 0&1 to set the head
  160                   ;motor stepping rate. 00 being 3ms (@2MH clock),11 being 15 ms. My
  161                   ;Tandon 8" drives take the fastest rate. Older drives may not.
  162                   ;
  163         000C      RSCMD	EQU	00001100B	;(0CH),RESTORE CMD	<------ (Some drives require 
  164         0018      SKNCMD	EQU	00011000B	;(18H),SEEK NO VERIFY CMD <--  (a slower stepping rate r1,r0)
  165         001C      SKCMD	EQU	00011100B	;(1CH),SEEK WITH VERIFY CMD <---
  166         00C4      RDACMD	EQU	11000100B	;(C0H),READ TRACK/SECTOR ID CMD	
  167         005C      STEPIN	EQU	01011100B	; Step-in verify on dstination track
  168                   	
  169         0080      RDCMD91	EQU	10000000B	;(80H),READ SECTOR CMD	1791 chip
  170         00A0      WRCMD91	EQU	10100000B	;(A0H),WRITE SECTOR CMD 
  171                   
  172         0088      RDCMD95	EQU	10001000B	;(88H),READ SECTOR CMD	1795 chip
  173         00A8      WRCMD95	EQU	10101000B	;(A8H),WRITE SECTOR CMD
  174                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   4
VF      Z80

  175         00F4      WRTCMD	EQU	11110100B	;(F4H),Write a whole track command
  176         00E4      RDTCMD	EQU	11100100B	;(E4H),Read a whole track command
  177                   ;
  178                   ;
  179         0004      SEC_RETRY_MAX	EQU	4	;Number of times to try R/W a sector before returning an error
  180         0002      SEEK_RETRY_MAX	EQU	2	;Number of times to try R/W a sector before returning an error
  181         0080      HOME_ERR_MASK   EQU	80H	;Error mask for Type I Home CMD
  182         0090      SIN_ERR_MASK	EQU	90H	;Step head in one track command error bits
  183         0090      SK_ERR_MASK     EQU	90H	;Track Seek error bits 
  184         009F      ID_ERR_MASK     EQU	9FH	;Sector ID read error mask
  185         00BF      RS_ERR_MASK     EQU	0BFH	;Read sector data error mask
  186         00AF      MRS_ERR_MASK    EQU	0AFH	;Multi-sector Read data error mask
  187         00EF      WS_ERR_MASK	EQU	0EFh	;Write sector data error mask
  188         00EF      MWS_ERR_MASK	EQU	0EFh	;Multi-sector Write data error mask
  189         0080      RT_ERR_MASK     EQU	80H	;Read Track error mask
  190         00E0      WT_ERR_MASK     EQU	0E0H	;Write Track error mask
  191                   ;
  192                   ;
  193         5000      FBUFFER	EQU    5000H		;Buffer to build track image OR display sectors reads
  194         6000      FBUFFER2 EQU   6000H		;2nd buffer here for sector R/W test	
  195                   ;
  196                   ;The Index register IX is used throughout the program to point to the disk paramater
  197                   ;table of the currently selected drive/disk format
  198                   ;(IOBYTE) will point to (DRIVE) and will contain the current DRIVE 
  199                   ;hardware selection bits. Drive select 0,1,2,3 and side A or side B bits as well as
  200                   ;other flags (see below) 
  201                   ;Remember the bits for disk selection, density and side selection are inverted on 
  202                   ;the actual Versafloppy II board hardware
  203                   ;Register IX is not used for anything else in this program.
  204                   ;
  205                   ;The Index register IY is used throughout the program to point to the current/requested
  206                   ;Track, Side & Sector being worked on. Thet are at memory locations @TRK... IY will
  207                   ;always point to @TRK and assumes the others follow. Do not relocate or change the order.
  208                   ;
  209                   ; 
  210                   
  211                   ; EQUATES FOR [IX] REGISTAR INTO DISK PARAMATER TABLE
  212                   ;
  213         0000      NSCTRS	EQU	0	;Sectors/Track for disk
  214         0001      NTRKS	EQU	1	;Tracks/Side
  215         0002      HW_BYTE	EQU	2	;Will contain bit flags for:-
  216                   					;Bits 0,1 are used for drive selection
  217                   					;Bits 2 & 3 are currently unused
  218                   					;Bit 4=0 For SS disk hardware, 1= DS disk
  219                   					;Bit 5=0 8" disk, 1= 5" disk
  220                   					;Bit 6=0 Single density, 1= Double density
  221                   					;Bit 7=0 if CURRENT selected side is A
  222                   					;      1 if CURRENT selected side is B
  223                   					;Note: handle this byte with care it is
  224                   					;central to many functions within the 
  225                   					;program.
  226         0003      HEADR	EQU	3	;For Formatting
  227         0004      GAP1	EQU	4	;	"
  228         0005      GAP2	EQU	5	;	"
  229         0006      GAP3	EQU	6	;	"
  230         0007      GAP4	EQU	7	;	"
  231         0008      GAP4R	EQU	8	;	"
  232         0009      SIZE	EQU	9	;1=128 Byte sectors.....4=1024 Byte sectors
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   5
VF      Z80

  233         000A      GAP_FILL_CHAR  EQU 10	;Byte used in disk formating
  234         000B      DATA_FILL_CHAR EQU 11	;     "       "       "
  235         000C      TRK_SIZE       EQU 12	;TWO bytes containing the track size of that disks format
  236         000E      SPECIAL_FLAG   EQU 14	;flag byte for cases where after formatting disk need to be initilized
  237                   			;normally 0, CPM86_FLAG = 1
  238         000F      SKEW	       EQU 15	;Low address of sector skew table
  239         0010      SKEW1          EQU 16	;High address of sector skew table
  240         0011      FORMAT_NUM     EQU 17	;Each format will have a unique number. 
  241         0012      SYS_TRKS       EQU 18	;How many tracks for system usually 2 for 8-inch disks
  242         0013      TITLE	       EQU 19	;Text string describing the disk format
  243                   ;
  244                   ;
  245                   ; EQUATES FOR [IY] REGISTAR FOR TRACK, SIDE, SECTOR locations
  246                   ;
  247         0000      TRK	EQU	0
  248         0001      SIDE	EQU	1
  249         0002      SCTR	EQU	2
  250                   ;
  251                   ;------------------------------------------------------------------------------
  252         0100      	ORG	100H
  253                   ;
  254 0100  ED 73 391E  	LD	(SP_SAVE),SP
  255 0104  31 3A39     	LD	SP,STACK
  256 0107  C3 0125     	JP	START
  257                   ;------------------------------------------------------------------------
  258                   ;		HARDWARE DEPENDENT STUFF
  259                   ; The only other hardware links are through the Versafloppy II board. 
  260                   ; Remember to make sure it is set to the correct 1791/5 & base port mentioned above.
  261                   ;
  262                   ; 
  263 010A  DB 00       CONST:	IN	A,(0)		;console status for SD Systems 8024 Video board
  264 010C  E6 02       	AND	A,02H		;anything there
  265 010E  C8          	RET	Z		;return 0 if nothing
  266 010F  AF          	XOR	A,A
  267 0110  3D          	DEC	A		;return NZ, & 0FFH in A if something there
  268 0111  C9          	RET
  269                   ;
  270 0112  DB 00       CI:	IN	A,(0)		;console input
  271 0114  E6 02       	AND	A,02H
  272 0116  28 FA       	JR	Z,CI
  273 0118  DB 01       	IN	A,(1)		;return with character in A
  274 011A  C9          	RET
  275                   ;		
  276 011B  DB 00       CO:	IN	A,(0)		;console output (arrive with character in C)
  277 011D  E6 04       	AND	A,04H		;Note character is in C and A on return.
  278 011F  28 FA       	JR	Z,CO
  279 0121  79          	LD	A,C
  280 0122  D3 01       	OUT	(1),A
  281 0124  C9          	RET
  282                   ;-------------------------------------------------------------------------
  283 0125  3E 00       START:	LD	A,SIMPLE
  284 0127  32 3913     	LD	(CRTDISP),A	;Start off with simple diagnostic display
  285 012A  21 1A10     OVER:	LD	HL,SIGNON
  286 012D  CD 1917     	CALL	PMSG
  287 0130  FD 21 0043  	LD	IY,@TRK		;Always points here
  288 0134  AF          	XOR	A,A		;set everything to zero
  289 0135  FD 77 00    	LD	(IY+TRK),A
  290 0138  FD 77 01    	LD	(IY+SIDE),A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   6
VF      Z80

  291 013B  3C          	INC	A
  292 013C  FD 77 02    	LD	(IY+SCTR),A	;Track 0, side A, sector 1
  293                   
  294 013F  CD 15AA     	CALL	SELECT_DR_1	;Put current drive hardware selection in (DRIVE_1)
  295 0142  28 0E       	JR	Z,GET_DR_TABLE	;Get the current disk format from user, point IX to table
  296 0144  FE FF       	CP	A,0FFH		
  297 0146  28 E2       	JR	Z,OVER		;Invalid drive, start over
  298 0148  CD 1934     	CALL	ZCRLF		;Must be an abort ESC
  299 014B  ED 7B 391E  	LD	SP,(SP_SAVE)
  300 014F  C3 0000     	JP	0H		;Reboot CP/M if ESC
  301                   
  302 0152              GET_DR_TABLE:
  303 0152  CD 1614     	CALL	SELECT_IX	;Set IX to point to the current drive table
  304 0155  28 0E       	JR	Z,LOOP		
  305 0157  FE FF       	CP	A,0FFH		
  306 0159  28 CF       	JR	Z,OVER		;Invalid drive, start over
  307 015B  CD 1934     	CALL	ZCRLF		;Must be an abort ESC
  308 015E  ED 7B 391E  	LD	SP,(SP_SAVE)
  309 0162  C3 0000     	JP	0H		;Reboot CP/M if ESC
  310                   ;
  311 0165  3A 3913     LOOP:	LD	A,(CRTDISP)	;Check if detailed display flag is on
  312 0168  B7          	OR	A,A
  313 0169  20 05       	JR	NZ,MENU1
  314 016B  21 206B     	LD	HL,MAIN_MENU0	;Main Menu loop (Detailed Diaplay OFF)
  315 016E  18 03       	JR	LOOP1
  316 0170  21 20B2     MENU1:	LD	HL,MAIN_MENU1	;Main Menu loop	(Detailed Display ON)
  317 0173  CD 1917     LOOP1:	CALL	PMSG
  318 0176  CD 11C2     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware 
  319                   
  320 0179  CD 16E4     	CALL	SHOW_HW_TITLE	;Describe the currently selected drive
  321 017C  CD 16F5     	CALL	SHOW_HW_BYTE	;Print out HW_BYTE info
  322                   	
  323 017F  21 5000     	LD	HL,FBUFFER	;The DMA RAM address will be here for sector R/W's
  324 0182  22 0040     	LD	(TADDR),HL
  325                   				
  326 0185  CD 0E2D     	CALL	HOME		;Move head to track 0 with a RESTORE CMD
  327 0188  C4 12B4     	CALL	NZ,SHOW_ERRORS	;If an error in restoring head to TRK 0 say so.
  328                   	
  329 018B  CB 47       	BIT	0,A		;If NZ, then timeout on Status port, bad hardware
  330 018D  20 13       	JR	NZ,TO_MENU	;Try another drive or format disk
  331                   
  332 018F  CD 1762     	CALL	SHOW_IX_TABLE	;Show info about current disk parameters
  333                   
  334 0192  CD 0EB8     	CALL	READ_ID		;Get Actual track ID
  335 0195  28 05       	JR	Z,ID_FINE	;Was there errors
  336 0197  CD 12B4     	CALL	SHOW_ERRORS	;If an error show bit flags
  337 019A  18 06       	JR	TO_MENU
  338                   
  339 019C  CD 1934     ID_FINE:CALL	ZCRLF
  340 019F  CD 17A1     	CALL	SHOW_ID		;Show a typical Track ID field on track 0
  341                   				
  342 01A2              TO_MENU:
  343 01A2  21 2232     	LD	HL,MENU_OPTIONS
  344 01A5  CD 1917     	CALL	PMSG
  345 01A8  3A 3913     	LD	A,(CRTDISP)	;Two menu lists (Set using menu #D)
  346 01AB  B7          	OR	A,A		;A detailed display or a simple one.
  347 01AC  20 05       	JR	NZ,MENUA
  348 01AE  21 2448     	LD	HL,MENU1_MSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   7
VF      Z80

  349 01B1  18 03       	JR	MENUB
  350 01B3  21 249B     MENUA:	LD	HL,MENU2_MSG
  351 01B6  CD 1917     MENUB:	CALL	PMSG
  352                   				;-----MAIN MENU----
  353 01B9  CD 1922     	CALL	GETCMD		;Find out Menu Option in A
  354 01BC  32 391A     	LD	(CMD_STORE),A
  355 01BF  FE 1B       	CP	A,ESC		;Abort if ESC character
  356 01C1  28 53       	JR	Z,FIN
  357 01C3  FE 30       	CP	A,'0'		;Get a new current disk
  358 01C5  CA 012A     	JP	Z,OVER
  359 01C8  FE 31       	CP	A,'1'
  360 01CA  CC 022B     	CALL	Z,SEEK_TEST	;Seek test
  361 01CD  FE 32       	CP	A,'2'
  362 01CF  CC 0281     	CALL	Z,SEC_READ_TEST	;Sequental Read sectors test. 
  363 01D2  FE 33       	CP	A,'3'
  364 01D4  CC 02ED     	CALL	Z,SEC_WRITE_TEST;Sequental Write sectors test. 
  365 01D7  FE 34       	CP	A,'4'
  366 01D9  CC 036A     	CALL	Z,SEC_RW_TEST	;Sequental sec R/W test
  367 01DC  FE 35       	CP	A,'5'		
  368 01DE  CC 03FC     	CALL	Z,RAND_SEC_TEST	;Random Track/Sector read/write test
  369 01E1  FE 36       	CP	A,'6'
  370 01E3  CC 04A1     	CALL	Z,TRACK_TEST	;Read continously sectors from a specific track
  371 01E6  FE 37       	CP	A,'7'
  372 01E8  CC 054A     	CALL	Z,TRACK_DUMP	;Load one whole track to RAM (at location 5000H)
  373 01EB  FE 38       	CP	A,'8'
  374 01ED  CC 0644     	CALL	Z,LOAD_SECTORS	;Load sectors into RAM
  375 01F0  FE 39       	CP	A,'9'
  376 01F2  CC 078A     	CALL	Z,DUMP_SECTORS	;Write sectors to disk
  377 01F5  FE 46       	CP	A,'F'
  378 01F7  CC 08D6     	CALL	Z,FORMAT_DISK	;Go to disk formatting section
  379 01FA  FE 43       	CP	A,'C'
  380 01FC  CC 0B22     	CALL	Z,COPY_DISK	;Copy disk A: to B:
  381 01FF  FE 56       	CP	A,'V'
  382 0201  CC 0C2C     	CALL	Z,VERIFY_DISK	;Verify disk A:=B:
  383 0204  FE 44       	CP	A,'D'
  384 0206  CC 0220     	CALL	Z,TOGGLE_CRT	;Switch on/off detail info display option
  385 0209  FE 53       	CP	A,'S'
  386 020B  CC 0D40     	CALL	Z,COPY_CPM3_SYS	;Copy CPM system tracks to another disk.
  387 020E  FE 49       	CP	A,'I'
  388 0210  CC 09DE     	CALL	Z,IBMFORM_DISK	;Quick format of blank 8" disk in B:
  389 0213  C3 0165     	JP	LOOP
  390 0216  CD 1934     FIN:	CALL	ZCRLF
  391 0219  ED 7B 391E  	LD	SP,(SP_SAVE)
  392 021D  CA 0000     	JP	Z,0H		;Return to CPM
  393                   
  394                   ;
  395                   ;
  396                   ;-------- TOGGLE ON/OFF DETAILED INFORMATION DISPLAY ON CRT/LCD FOR SOME COMMANDS
  397 0220              TOGGLE_CRT:
  398 0220  3A 3913     	LD	A,(CRTDISP)
  399 0223  2F          	CPL
  400 0224  32 3913     	LD	(CRTDISP),A
  401 0227  3A 391A     	LD	A,(CMD_STORE)	;So we dont pick up other menu items
  402 022A  C9          	RET			;Back to main menu
  403                   ;
  404                   ;
  405                   ;------------------ SEEK DIAGNOSTIC TEST --------------------
  406                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   8
VF      Z80

  407                   ;Simply tests head movement control
  408 022B              SEEK_TEST:
  409 022B  21 24EE     	LD	HL,SEKMSG
  410 022E  CD 1917     	CALL	PMSG
  411 0231  AF          	XOR	A,A		;Setup for the BIOS below
  412 0232  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  413 0235  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  414 0238  3C          	INC	A
  415 0239  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  416 023C  CD 11C2     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  417 023F  CD 0E2D     	CALL	HOME		;Restore head to track 0
  418 0242  C4 12B4     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  419                   
  420 0245  CD 1934     SEKT:	CALL	ZCRLF
  421 0248  CD 0E70     	CALL	SEEK_TRACK_V	;Test SEEK ability/timing of chip
  422                   ;	CALL	STEP_IN_CMD	;Can also test Step in head one track & verify	
  423 024B  C4 12B4     	CALL	NZ,SHOW_ERRORS	;If Error show error flags
  424                   
  425 024E  CD 1291     	CALL	SHOW_T_LOC	;Print out current track #
  426 0251  CD 0EB8     	CALL	READ_ID		;Get current track ID
  427 0254  C4 12B4     	CALL	NZ,SHOW_ERRORS	;print out the track ID errors
  428 0257  CD 17A1     	CALL	SHOW_ID		;Show track ID
  429                   
  430 025A  CD 19D0     	CALL	CHECKABORT	;SP will halt, ESC will abort
  431 025D  20 14       	JR	NZ,END_CMD	;Return back to main menu
  432                   
  433 025F  FD 34 00    	INC	(IY+TRK)	;Need to bump track up one
  434 0262  FD 7E 00    	LD	A,(IY+TRK)	;Store here
  435 0265  DD BE 01    	CP	A,(IX+NTRKS)	;Are we at the end yet
  436 0268  20 DB       	JR	NZ,SEKT
  437 026A  FD 36 00 00 	LD	(IY+TRK),0
  438 026E  CD 1934     	CALL	ZCRLF		;Extra CR/LF fro another loop
  439 0271  28 D2       	JR	Z,SEKT		;start again
  440                   ;
  441 0273              END_CMD:
  442 0273  AF          	XOR	A,A
  443 0274  FD 77 00    	LD	(IY+TRK),A	;Always back to Track 0, Side A
  444 0277  FD 77 01    	LD	(IY+SIDE),A
  445 027A  CD 0E2D     	CALL	HOME		;Move head back to Track 0
  446 027D  3A 391A     	LD	A,(CMD_STORE)	;So we dont pick up other menu items IF we return from here
  447 0280  C9          	RET
  448                   
  449                   ; ------------------- READ SECTORS TEST -------------
  450                   ; This routine will sequentially read all sectors on a disk. Both sides
  451                   ; if a 2 sided disk.
  452                   ;
  453 0281              SEC_READ_TEST:
  454 0281  21 2927     	LD	HL,RDTST_MSG		;Say read test
  455 0284  CD 1917     	CALL	PMSG
  456 0287  CD 1934     	CALL	ZCRLF
  457 028A  AF          	XOR	A,A			;Setup for the BIOS below
  458 028B  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  459 028E  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  460 0291  3C          	INC	A
  461 0292  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  462                   
  463 0295  CD 11C2     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  464 0298  CD 0E2D     	CALL	HOME		
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   9
VF      Z80

  465 029B  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  466                   
  467 029E              READ_LOOP1:
  468 029E  CD 1934     	CALL	ZCRLF
  469 02A1  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  470 02A4  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  471                   
  472 02A7  21 5000     	LD	HL,FBUFFER		;Place sector data here
  473 02AA  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  474                   
  475 02AD  CD 0EDF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  476 02B0  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  477                   	
  478 02B3  CD 1256     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  479 02B6  CD 17E8     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  480                   
  481 02B9  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  482 02BC  FD 7E 02    	LD	A,(IY+SCTR)		;Store new sec # in A
  483 02BF  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  484 02C0  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  485 02C3  20 16       	JR	NZ,SECTRK_DONE1
  486                   
  487 02C5  CD 11F4     	CALL	SWAP_SIDES		;Sides swap check
  488 02C8  3E 01       	LD	A,1			;Back to sector 1 no matter what
  489 02CA  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  490 02CD  20 0C       	JR	NZ,SECTRK_DONE1		;If B side (NZ), same track, back to sec 1
  491                   
  492 02CF  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  493 02D2  FD 7E 00    	LD	A,(IY+TRK)		;Store here
  494 02D5  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
  495 02D8  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  496                   ;	
  497 02DB              SECTRK_DONE1:
  498 02DB  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
  499 02DE  28 BE       	JR	Z,READ_LOOP1		;Loop until abort or all tracks done
  500 02E0  3A 3913     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  501 02E3  B7          	OR	A,A			;will switch it off
  502 02E4  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  503 02E7  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  504 02E8  32 3913     	LD	(CRTDISP),A
  505 02EB  18 B1       	JR	READ_LOOP1
  506                   ;
  507                   ;
  508                   ; ------------------- WRITE SECTORS TEST -------------
  509                   ; This routine will sequentially write to all sectors on a disk. Both sides
  510                   ; if a 2 sided disk. It will write the character TEST_FILL in each sector
  511                   ;
  512 02ED              SEC_WRITE_TEST:
  513 02ED  21 2945     	LD	HL,WRTST_MSG		;Say write test
  514 02F0  CD 1917     	CALL	PMSG
  515 02F3  CD 1934     	CALL	ZCRLF			;CR,LF at start. 
  516 02F6  AF          	XOR	A,A			;Setup for the BIOS below
  517 02F7  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  518 02FA  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  519 02FD  3C          	INC	A
  520 02FE  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  521 0301  CD 11C2     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  522 0304  CD 0E2D     	CALL	HOME	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  10
VF      Z80

  523 0307  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  524                   
  525 030A  21 5000     	LD	HL,FBUFFER		;Sector data to be written is here
  526 030D  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  527                   
  528 0310  0E 01       	LD	C,TEST_FILL		;Data fill character (01H)
  529 0312  CD 1370     	CALL	FILL_BUFFER		;Fill buffer with character to be written
  530                   
  531 0315  CD 17DA     	CALL	CHECK_WP		;See if disk is write protected
  532 0318  C2 0273     	JP	NZ,END_CMD		;Abort
  533                   ;
  534 031B              WRITE_LOOP1:
  535 031B  CD 1934     	CALL	ZCRLF
  536 031E  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  537 0321  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  538                   	
  539 0324  21 5000     	LD	HL,FBUFFER		;Place sector data here
  540 0327  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  541                   
  542 032A  CD 102C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  543 032D  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  544                   	
  545 0330  CD 1256     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  546 0333  CD 17E8     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  547                   
  548 0336  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  549 0339  FD 7E 02    	LD	A,(IY+SCTR)		;Store new sec # in A
  550 033C  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  551 033D  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  552 0340  20 16       	JR	NZ,SECTRK_DONE2
  553                   
  554 0342  CD 11F4     	CALL	SWAP_SIDES		;Sides swap check
  555 0345  3E 01       	LD	A,1			;Back to sector 1 no matter what
  556 0347  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  557 034A  20 0C       	JR	NZ,SECTRK_DONE2		;If B side (NZ), same track, back to sec 1
  558                   
  559 034C  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  560 034F  FD 7E 00    	LD	A,(IY+TRK)		;Next track
  561 0352  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
  562 0355  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  563                   ;	
  564 0358              SECTRK_DONE2:
  565 0358  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
  566 035B  28 BE       	JR	Z,WRITE_LOOP1		;Loop until abort or all tracks done
  567 035D  3A 3913     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  568 0360  B7          	OR	A,A			;will switch it off
  569 0361  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  570 0364  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  571 0365  32 3913     	LD	(CRTDISP),A
  572 0368  18 B1       	JR	WRITE_LOOP1
  573                   ;
  574                   ;
  575                   ; ------------------- SEQUENTAL READ/WRITE SECTORS TEST -------------
  576                   ; This routine will read and write back to randomly selected tracks and 
  577                   ; sectors on a disk. Both sides, if a 2 sided disk.
  578                   ;
  579 036A              SEC_RW_TEST:
  580 036A  21 2964     	LD	HL,RDWRTST_MSG		;Say R/W test
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  11
VF      Z80

  581 036D  CD 1917     	CALL	PMSG
  582 0370  CD 1934     	CALL	ZCRLF			;CR,LF at start. 
  583 0373  AF          	XOR	A,A			;Setup for the BIOS below
  584 0374  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  585 0377  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  586 037A  3C          	INC	A
  587 037B  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  588 037E  CD 11C2     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  589 0381  CD 0E2D     	CALL	HOME	
  590 0384  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  591                   
  592 0387  CD 17DA     	CALL	CHECK_WP		;See if disk is write protected
  593 038A  C2 0273     	JP	NZ,END_CMD		;Abort
  594                   ;
  595 038D              RW_LOOP1:
  596 038D  CD 1934     	CALL	ZCRLF
  597 0390  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  598 0393  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  599                   	
  600 0396  21 5000     	LD	HL,FBUFFER		;Place sector data here
  601 0399  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  602                   
  603 039C  CD 0EDF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  604 039F  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  605                   	
  606 03A2  CD 1256     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  607 03A5  CD 17E8     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  608                   
  609 03A8  CD 102C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  610 03AB  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  611                   
  612 03AE  21 6000     	LD	HL,FBUFFER2		;Place new sector data here
  613 03B1  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  614                   
  615 03B4  CD 0EDF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  616 03B7  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  617                   
  618 03BA  CD 133A     	CALL	CMP_BUFFERS		;Check for errors
  619 03BD  28 09       	JR	Z,COMPARE_OK
  620 03BF  21 2904     	LD	HL,SEC_V_ERROR		;R/W Error found 
  621 03C2  CD 1917     	CALL	PMSG
  622 03C5  CD 1256     	CALL	SHOW_TSS_LOC		;trk,sec,head
  623                   
  624 03C8              COMPARE_OK:
  625 03C8  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  626 03CB  FD 7E 02    	LD	A,(IY+SCTR)
  627 03CE  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  628 03CF  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  629 03D2  20 16       	JR	NZ,SECTRK_DONE3
  630                   
  631 03D4  CD 11F4     	CALL	SWAP_SIDES		;Sides swap check
  632 03D7  3E 01       	LD	A,1			;Back to sector 1 no matter what
  633 03D9  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  634 03DC  20 0C       	JR	NZ,SECTRK_DONE3		;If B side (NZ), same track, back to sec 1
  635                   
  636 03DE  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  637 03E1  FD 7E 00    	LD	A,(IY+TRK)		;Next track
  638 03E4  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  12
VF      Z80

  639 03E7  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  640                   ;	
  641 03EA              SECTRK_DONE3:
  642 03EA  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
  643 03ED  28 9E       	JR	Z,RW_LOOP1		;Loop until abort or all tracks done
  644 03EF  3A 3913     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  645 03F2  B7          	OR	A,A			;Will switch it off
  646 03F3  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  647 03F6  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  648 03F7  32 3913     	LD	(CRTDISP),A
  649 03FA  18 91       	JR	RW_LOOP1		;try again
  650                   ;
  651                   ;
  652                   ; ------------------- RANDOM TRK/SEC READ/WRITE SECTORS TEST -------------
  653                   ; This routine will read and write back to randomly selected tracks and 
  654                   ; sectors on a disk. Both sides, if a 2 sided disk.
  655                   ;
  656 03FC              RAND_SEC_TEST:
  657 03FC  21 2981     	LD	HL,RAND_TST_MSG		;Say R/W test
  658 03FF  CD 1917     	CALL	PMSG
  659 0402  CD 1934     	CALL	ZCRLF			;CR,LF at start. 
  660 0405  AF          	XOR	A,A			;Setup for the BIOS below
  661 0406  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  662 0409  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  663 040C  3C          	INC	A
  664 040D  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  665 0410  CD 11C2     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  666 0413  CD 0E2D     	CALL	HOME		
  667 0416  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  668                   
  669 0419  CD 17DA     	CALL	CHECK_WP		;See if disk is write protected
  670 041C  C2 0273     	JP	NZ,END_CMD		;Abort
  671                   ;
  672 041F              RAND_LOOP1:
  673 041F  CD 1934     	CALL	ZCRLF
  674 0422  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  675 0425  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  676                   
  677 0428  21 5000     	LD	HL,FBUFFER		;Place sector data here
  678 042B  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  679                   
  680 042E  CD 0EDF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  681 0431  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  682                   	
  683 0434  CD 1256     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  684 0437  CD 17E8     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  685                   
  686 043A  CD 102C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  687 043D  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  688                   
  689 0440  21 6000     	LD	HL,FBUFFER2		;Place new sector data here
  690 0443  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  691                   
  692 0446  CD 0EDF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  693 0449  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  694                   
  695 044C  CD 133A     	CALL	CMP_BUFFERS		;Check for errors
  696 044F  28 09       	JR	Z,RAND_OK
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  13
VF      Z80

  697 0451  21 2904     	LD	HL,SEC_V_ERROR		;R/W Error found 
  698 0454  CD 1917     	CALL	PMSG
  699 0457  CD 1256     	CALL	SHOW_TSS_LOC		;At trk,sec,head
  700                   
  701 045A              RAND_OK:
  702 045A  CD 0496     	CALL	RANDOM			;Get a random sector#
  703 045D  DD 46 00    	LD	B,(IX+NSCTRS)
  704 0460  A0          	AND	A,B			;strip off extra bits
  705 0461  B7          	OR	A,A			;No sector 0
  706 0462  20 01       	JR	NZ,RAND_SEC_OK
  707 0464  3C          	INC	A
  708 0465              RAND_SEC_OK:	
  709 0465  FD 77 02    	LD	(IY+SCTR),A		;Store for SEC display and sector read routine
  710                   
  711 0468  CD 0496     	CALL	RANDOM			;Get a random track #
  712 046B  DD 46 01    	LD	B,(IX+NTRKS)
  713 046E  05          	DEC	B			;Tracks numbered 0,1,2...NTRKS-1
  714 046F  A0          	AND	A,B			;strip off extra bits
  715 0470  FD 77 00    	LD	(IY+TRK),A		;Store for SEC display and sector read routine
  716                   
  717 0473  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
  718 0477  28 0B       	JR	Z,SECTRK_DONE4		;If 1 sided then skip sides swap
  719                   
  720 0479  CD 0496     	CALL	RANDOM			;Get a random SIDE 
  721 047C  E6 02       	AND	02H			;Isolate the SIDE bit
  722 047E  FD 77 01    	LD	(IY+SIDE),A		;Will be either 0 or 02H
  723 0481  CD 1213     	CALL	SET_SIDE
  724                   
  725 0484              SECTRK_DONE4:
  726 0484  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
  727 0487  28 96       	JR	Z,RAND_LOOP1		;Loop until abort 
  728 0489  3A 3913     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  729 048C  B7          	OR	A,A			;will switch it off
  730 048D  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  731 0490  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  732 0491  32 3913     	LD	(CRTDISP),A
  733 0494  18 89       	JR	RAND_LOOP1		;try again
  734                   ;
  735                   ; Simple random number generator
  736 0496  ED 5F       RANDOM:	LD	A,R			;Seed will be differentd each time
  737 0498  47          	LD	B,A		
  738 0499  87          	ADD	A,A
  739 049A  87          	ADD	A,A
  740 049B  80          	ADD	A,B
  741 049C  CB 1F       	RR	A
  742 049E  C6 07       	ADD	A,7
  743 04A0  C9          	RET
  744                   ;
  745                   ;
  746                   ; ------------------- CONTINOUSLY READ SECTORS FROM ONE TRACK TEST -------------
  747                   ; This routine will read sectors continously from one track. Both sides, if a 
  748                   ; a 2 sided disk. Can be used with a scope to do a 'CATS EYES' hardware test.
  749                   ;
  750 04A1              TRACK_TEST:
  751 04A1  21 2927     	LD	HL,RDTST_MSG	;Say read test
  752 04A4  CD 1917     	CALL	PMSG
  753 04A7  AF          	XOR	A,A		;Setup for the BIOS below
  754 04A8  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  14
VF      Z80

  755 04AB  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  756 04AE  3C          	INC	A
  757 04AF  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  758 04B2  CD 11C2     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  759 04B5  CD 0E2D     	CALL	HOME		
  760 04B8  C4 12B4     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  761                   
  762 04BB  CD 1934     	CALL	ZCRLF
  763 04BE  21 26BE     	LD	HL,GET_TRACK_MSG ;get the required track
  764 04C1  CD 1917     	CALL	PMSG
  765 04C4  CD 194C     	CALL	GET_HEX		;get 2 digits
  766 04C7  DA 0273     	JP	C,END_CMD	;Abort if C returned
  767                   	
  768 04CA  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  769 04CD  B8          	CP	A,B
  770 04CE  38 08       	JR	C,GET_TSIDES	;Yes we are 
  771 04D0  21 285C     	LD	HL,TRACK_ERROR
  772 04D3  CD 1917     	CALL	PMSG
  773 04D6  18 C9       	JR	TRACK_TEST	;Try again
  774                   
  775 04D8              GET_TSIDES:
  776 04D8  FD 77 00    	LD	(IY+TRK),A	;Store requested track
  777                   
  778 04DB  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
  779 04DF  28 25       	JR	Z,TRACK_TEST2	;If 1 sided then skip side question
  780                   
  781 04E1  21 26F2     	LD	HL,GET_SIDE_MSG ;get required track
  782 04E4  CD 1917     	CALL	PMSG
  783 04E7  CD 1922     	CALL	GETCMD		;get the input option
  784 04EA  FE 1B       	CP	A,ESC		;Abort if ESC character
  785 04EC  CA 0273     	JP	Z,END_CMD
  786 04EF  FE 42       	CP	A,'B'
  787 04F1  20 07       	JR	NZ,MUST_BE_TA
  788 04F3  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
  789 04F5  FD 77 01    	LD	(IY+SIDE),A
  790 04F8  18 0C       	JR	TRACK_TEST2
  791 04FA              MUST_BE_TA:
  792 04FA  FE 41       	CP	A,'A'
  793 04FC  28 08       	JR	Z,TRACK_TEST2	;Already on A
  794 04FE  21 271B     	LD	HL,SIDE_ERROR	;Not 'A' or 'B' must be error
  795 0501  CD 1917     	CALL	PMSG
  796 0504  18 9B       	JR	TRACK_TEST	;Try again
  797                   
  798 0506              TRACK_TEST2:
  799 0506  CD 1934     	CALL	ZCRLF
  800 0509  CD 1213     	CALL	SET_SIDE		;Update the side hardware (if required)	
  801 050C  CD 0E70     	CALL	SEEK_TRACK_V		;seek to the new track position	
  802 050F  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  803                   ;	
  804 0512              READ_LOOP2:
  805 0512  CD 1934     	CALL	ZCRLF
  806 0515  21 5000     	LD	HL,FBUFFER		;Place sector data here
  807 0518  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  808                   
  809 051B  CD 0EDF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  810 051E  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  811                   	
  812 0521  CD 1256     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  15
VF      Z80

  813 0524  CD 17E8     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  814                   
  815 0527  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  816 052A  FD 7E 02    	LD	A,(IY+SCTR)
  817 052D  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  818 052E  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  819 0531  20 05       	JR	NZ,SEC_DONE4
  820 0533  3E 01       	LD	A,1			;Cycle back to sector 1
  821 0535  FD 77 02    	LD	(IY+SCTR),A
  822                   
  823 0538              SEC_DONE4:
  824 0538  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
  825 053B  28 D5       	JR	Z,READ_LOOP2		;Loop until abort or all tracks done
  826 053D  3A 3913     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  827 0540  B7          	OR	A,A			;will switch it off
  828 0541  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  829 0544  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  830 0545  32 3913     	LD	(CRTDISP),A
  831 0548  18 C8       	JR	READ_LOOP2
  832                   ;
  833                   ;
  834                   ;
  835                   ;------------------------------------------------------------------------------
  836                   ;Read one whole track to RAM (5000H). This is used to see what the Format routine actully
  837                   ;placed on the disk and/or to see what track formats other computers used.
  838                   ;
  839                   ;
  840 054A              TRACK_DUMP:
  841 054A  21 2B45     	LD	HL,TRK_DUMP_MSG ;Say track dump msg
  842 054D  CD 1917     	CALL	PMSG
  843 0550  AF          	XOR	A,A		;Setup for the BIOS below
  844 0551  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  845 0554  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  846 0557  3C          	INC	A
  847 0558  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  848 055B  CD 11C2     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  849 055E  CD 0E2D     	CALL	HOME		
  850 0561  C4 12B4     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  851                   
  852 0564  CD 1934     	CALL	ZCRLF
  853 0567  21 26BE     	LD	HL,GET_TRACK_MSG ;get required track
  854 056A  CD 1917     	CALL	PMSG
  855 056D  CD 194C     	CALL	GET_HEX		;get 2 digits in [A]
  856 0570  DA 0273     	JP	C,END_CMD
  857 0573  CD 1934     	CALL	ZCRLF
  858                   	
  859 0576  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  860 0579  B8          	CP	A,B
  861 057A  38 08       	JR	C,GET_SIDES	;Yes we are 
  862 057C  21 285C     	LD	HL,TRACK_ERROR
  863 057F  CD 1917     	CALL	PMSG
  864 0582  18 C6       	JR	TRACK_DUMP	;Try again
  865 0584              GET_SIDES:
  866 0584  FD 77 00    	LD	(IY+TRK),A	;Store requested track
  867                   
  868 0587  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
  869 058B  28 25       	JR	Z,GET_TRK	;If 1 sided then skip side question
  870                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  16
VF      Z80

  871 058D  21 26F2     	LD	HL,GET_SIDE_MSG ;get required track
  872 0590  CD 1917     	CALL	PMSG
  873 0593  CD 1922     	CALL	GETCMD		;get the input option
  874 0596  FE 1B       	CP	A,ESC		;Abort if ESC character
  875 0598  CA 0273     	JP	Z,END_CMD
  876 059B  FE 42       	CP	A,'B'
  877 059D  20 07       	JR	NZ,MUST_BE_A
  878 059F  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
  879 05A1  FD 77 01    	LD	(IY+SIDE),A
  880 05A4  18 0C       	JR	GET_TRK
  881 05A6              MUST_BE_A:
  882 05A6  FE 41       	CP	A,'A'
  883 05A8  28 08       	JR	Z,GET_TRK	;Already on A
  884 05AA  21 271B     	LD	HL,SIDE_ERROR
  885 05AD  CD 1917     	CALL	PMSG
  886 05B0  18 98       	JR	TRACK_DUMP	;Try again
  887                   
  888 05B2              GET_TRK:
  889 05B2  CD 1934     	CALL	ZCRLF
  890 05B5  CD 1213     	CALL	SET_SIDE	;Update the side hardware (if required)	
  891                   
  892 05B8  CD 0E70     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
  893 05BB  C4 12B4     	CALL	NZ,SHOW_ERRORS	;If any show error flags
  894                   ;
  895 05BE  21 5000     	LD	HL,FBUFFER	;Will build the complete sector image here (5000H)
  896 05C1  22 0040     	LD	(TADDR),HL	;Store the pointer here.
  897 05C4  DD 56 0D    	LD	D,(IX+TRK_SIZE+1) ;Need to find out how large the track is
  898 05C7  DD 5E 0C    	LD	E,(IX+TRK_SIZE)	;Number of bytes per track for this disk into [DE]
  899 05CA  7A          	LD	A,D		;check that it is not 0 (ie. data not filled in table)
  900 05CB  B7          	OR	A,A
  901 05CC  20 09       	JR	NZ,SIZE_OK
  902 05CE  21 2A0A     	LD	HL,TRK_SIZE_ERR
  903 05D1  CD 1917     	CALL	PMSG
  904 05D4  C3 0273     	JP	END_CMD
  905 05D7              SIZE_OK:
  906 05D7  ED 53 3923  	LD	(TRACK_SIZE),DE ;Store for below also
  907                   
  908 05DB  06 00       	LD	B,0
  909 05DD  70          Z_LOOP:	LD	(HL),B		;Fill RAM with 0's before starting
  910 05DE  23          	INC	HL
  911 05DF  1B          	DEC	DE
  912 05E0  7B          	LD	A,E
  913 05E1  B7          	OR	A,A
  914 05E2  20 F9       	JR	NZ,Z_LOOP
  915 05E4  B2          	OR	A,D
  916 05E5  20 F6       	JR	NZ,Z_LOOP	;Have we done DE bytes yet
  917                   	
  918 05E7  21 5000     	LD	HL,FBUFFER	;Start again
  919 05EA  22 0040     	LD	(TADDR),HL
  920 05ED  ED 5B 3923  	LD	DE,(TRACK_SIZE)	;Number of bytes per track 
  921                   				
  922 05F1  CD 0FF9     	CALL	READ_TRACK	;<<<<<< Read one whole track
  923 05F4  C4 12B4     	CALL	NZ,SHOW_ERRORS	;If any, show error flags
  924                   	
  925 05F7  CD 12A5     	CALL	SHOW_TS_LOC
  926                   	
  927 05FA  21 276A     	LD	HL,TRACK_CONTENTS
  928 05FD  CD 1917     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  17
VF      Z80

  929 0600  2E 10       	LD	L,PAGE_SIZE	;20 lines per page
  930 0602  ED 5B 3923  	LD	DE,(TRACK_SIZE)	;to count down 
  931 0606  01 0000     	LD	BC,0		;to count up
  932 0609  D9          	EXX
  933 060A  21 5000     	LD	HL,FBUFFER	;will use alt reg HL' for data pointer
  934 060D  D9          	EXX
  935 060E  D9          RAMDUMP:EXX
  936 060F  7E          	LD	A,(HL)
  937 0610  CD 199D     	CALL	PACC
  938 0613  23          	INC	HL
  939 0614  D9          	EXX
  940 0615  03          	INC	BC
  941 0616  79          	LD	A,C
  942 0617  E6 1F       	AND	A,00011111B	;32 characters /line
  943 0619  20 1A       	JR	NZ,NOCRX
  944 061B  CD 1934     	CALL	ZCRLF
  945 061E  2D          	DEC	L
  946 061F  20 14       	JR	NZ,NOCRX
  947 0621  E5          	PUSH	HL
  948 0622  21 277F     	LD	HL,MORE_MSG
  949 0625  CD 1917     	CALL	PMSG
  950 0628  CD 1922     	CALL	GETCMD		;Ask if we wish to continue
  951 062B  E1          	POP	HL
  952 062C  FE 59       	CP	A,'Y'
  953 062E  20 0D       	JR	NZ,DONECR
  954 0630  CD 1934     	CALL	ZCRLF
  955 0633  2E 10       	LD	L,PAGE_SIZE
  956 0635  1B          NOCRX:	DEC	DE
  957 0636  7B          	LD	A,E
  958 0637  B7          	OR	A,A
  959 0638  20 D4       	JR	NZ,RAMDUMP
  960 063A  B2          	OR	A,D
  961 063B  20 D1       	JR	NZ,RAMDUMP	;Have we sent DE bytes yet
  962 063D  D9          DONECR:	EXX			;We are done
  963 063E  CD 124A     	CALL	FRCINT		;Need to clear the 1791/5 because we may have 
  964                   ;				;overrun reading the track
  965 0641  C3 0273     	JP	END_CMD		;All done back to main menu
  966                   ;
  967                   ;
  968                   ;
  969                   ;**************** LOAD SECTORS FROM DISK TO RAM ROUTINE ********
  970                   ;Note sectors from only one side.
  971                   
  972 0644              LOAD_SECTORS:
  973 0644  21 2B78     	LD	HL,LOAD_MSG	;Load msg
  974 0647  CD 1917     	CALl	PMSG
  975 064A  AF          	XOR	A,A		;Setup for the BIOS below
  976 064B  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  977 064E  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  978 0651  3C          	INC	A
  979 0652  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  980 0655  CD 11C2     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  981 0658  CD 0E2D     	CALL	HOME		
  982 065B  C4 12B4     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  983                   
  984 065E  CD 1934     	CALL	ZCRLF
  985 0661  21 26BE     	LD	HL,GET_TRACK_MSG ;get required track
  986 0664  CD 1917     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  18
VF      Z80

  987 0667  CD 194C     	CALL	GET_HEX		;get 2 digits
  988 066A  DA 0273     	JP	C,END_CMD
  989                   
  990 066D  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  991 0670  B8          	CP	A,B
  992 0671  38 09       	JR	C,LGET_SIDES	;Yes we are 
  993 0673  21 285C     	LD	HL,TRACK_ERROR
  994 0676  CD 1917     	CALL	PMSG
  995 0679  C3 0644     	JP	LOAD_SECTORS	;Try again
  996 067C              LGET_SIDES:
  997 067C  FD 77 00    	LD	(IY+TRK),A	;Store requested track for below
  998                   
  999 067F  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 1000 0683  28 29       	JR	Z,GET_START_SEC	;If 1 sided then skip side question
 1001                   
 1002 0685  CD 1934     	CALL	ZCRLF
 1003 0688  21 26F2     	LD	HL,GET_SIDE_MSG ;get required track
 1004 068B  CD 1917     	CALL	PMSG
 1005 068E  CD 1922     	CALL	GETCMD		;get the input option
 1006 0691  FE 1B       	CP	A,ESC		;Abort if ESC character
 1007 0693  CA 0273     	JP	Z,END_CMD
 1008 0696  FE 42       	CP	A,'B'
 1009 0698  20 07       	JR	NZ,LMUST_BE_A
 1010 069A  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
 1011 069C  FD 77 01    	LD	(IY+SIDE),A
 1012 069F  18 0D       	JR	GET_START_SEC
 1013                   
 1014 06A1              LMUST_BE_A:
 1015 06A1  FE 41       	CP	A,'A'
 1016 06A3  28 09       	JR	Z,GET_START_SEC	;Already on A
 1017 06A5  21 271B     	LD	HL,SIDE_ERROR
 1018 06A8  CD 1917     	CALL	PMSG
 1019 06AB  C3 0644     	JP	LOAD_SECTORS	;Try again
 1020                   
 1021 06AE              GET_START_SEC:
 1022 06AE  21 2735     	LD	HL,GET_SEC_MSG	;Get starting sector
 1023 06B1  CD 1917     	CALL	PMSG
 1024 06B4  CD 194C     	CALL	GET_HEX		;get 2 digits
 1025 06B7  DA 0273     	JP	C,END_CMD
 1026 06BA  CD 1934     	CALL	ZCRLF
 1027 06BD  DD 46 00    	LD	B,(IX+NSCTRS)	;Are we within disk range
 1028 06C0  B8          	CP	A,B
 1029 06C1  38 09       	JR	C,GSTART1	;Yes we are 
 1030 06C3  21 27A1     GSTART0:LD	HL,SEC_ERROR
 1031 06C6  CD 1917     	CALL	PMSG
 1032 06C9  C3 0644     	JP	LOAD_SECTORS	;Try again
 1033 06CC  B7          GSTART1:OR	A,A		;Sectors numbered 1,2,3... 
 1034 06CD  28 F4       	JR	Z,GSTART0
 1035                   
 1036 06CF  FD 77 02    	LD	(IY+SCTR),A	;Store start sector
 1037                   
 1038 06D2  21 2A4D     	LD	HL,SEC_COUNT_MSG   ;Get no. of sectors to load
 1039 06D5  CD 1917     	CALL	PMSG
 1040 06D8  CD 194C     	CALL	GET_HEX		;get 2 digits
 1041 06DB  D2 06E7     	JP	NC,GSTART2
 1042 06DE              GSTART3:
 1043 06DE  21 2039     	LD	HL,SEC_COUNT_ERR
 1044 06E1  CD 1917     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  19
VF      Z80

 1045 06E4  C3 0273     	JP	END_CMD
 1046 06E7  B7          GSTART2:OR	A,A		;cannot have 0 sectors
 1047 06E8  28 F4       	JR	Z,GSTART3
 1048                   	
 1049 06EA  32 3925     	LD	(SEC_COUNT),A	;store count of sectors
 1050                   	
 1051 06ED  21 2A78     	LD	HL,GET_DMA_MSG  ;Get DMA Aaddress
 1052 06F0  CD 1917     	CALL	PMSG
 1053 06F3  CD 1983     	CALL	GET_HEX4	;get 4 digits
 1054 06F6  D2 0702     	JP	NC,GSTART4
 1055 06F9  21 204E     	LD	HL,RAM_ERROR
 1056 06FC  CD 1917     	CALL	PMSG
 1057 06FF  C3 0273     	JP	END_CMD
 1058 0702              GSTART4:
 1059 0702  22 0040     	LD	(TADDR),HL	;Store the DMA address
 1060 0705  CD 1213     	CALL	SET_SIDE	;Update the side hardware (if required)	
 1061 0708  CD 1934     	CALL	ZCRLF
 1062                   
 1063 070B              MORE_LOAD:
 1064 070B  CD 0E70     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
 1065 070E  C4 12B4     	CALL	NZ,SHOW_ERRORS	;If any show error flags
 1066                   ;	
 1067 0711  21 2AF5     	LD	HL,LOADING_MSG
 1068 0714  CD 1917     	CALL	PMSG
 1069 0717  CD 1256     	CALL	SHOW_TSS_LOC
 1070 071A  21 2B05     	LD	HL,LOADING1_MSG
 1071 071D  CD 1917     	CALL	PMSG
 1072 0720  2A 0040     	LD	HL,(TADDR)
 1073 0723  7C          	LD	A,H
 1074 0724  CD 199D     	CALL	PACC
 1075 0727  7D          	LD	A,L
 1076 0728  CD 199D     	CALL	PACC
 1077 072B  21 2529     	LD	HL,H_MSG		;H. at end of message
 1078 072E  CD 1917     	CALL	PMSG
 1079                   
 1080 0731  CD 0EDF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
 1081 0734  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1082                   ;
 1083 0737  2A 3926     	LD	HL,(DMA_NEXT)		;Update the next RAM location
 1084 073A  22 0040     	LD	(TADDR),HL
 1085                   
 1086 073D  3A 3925     	LD	A,(SEC_COUNT)
 1087 0740  3D          	DEC	A
 1088 0741  28 35       	JR	Z,DONE_LOAD_OK
 1089 0743  32 3925     	LD	(SEC_COUNT),A		;Store for next time
 1090                   
 1091 0746  FD 34 02    	INC	(IY+SCTR)
 1092 0749  FD 7E 02    	LD	A,(IY+SCTR)
 1093 074C  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1094 074D  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1095 0750  20 10       	JR	NZ,LSECTRK_OK
 1096                   
 1097 0752  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1098 0754  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1099                   
 1100 0757  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
 1101 075A  FD 7E 00    	LD	A,(IY+TRK)
 1102 075D  DD BE 01    	CP	A,(IX+NTRKS)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  20
VF      Z80

 1103 0760  28 1F       	JR	Z,ERROR_LOAD		;Ran out of tracks
 1104                   ;
 1105 0762              LSECTRK_OK:
 1106 0762  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1107 0765  20 03       	JR	NZ,DONE_LR
 1108 0767  C3 070B     	JP	MORE_LOAD		;Loop until abort or all sectors are done
 1109 076A  3A 3913     DONE_LR:LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1110 076D  B7          	OR	A,A			;will switch it off
 1111 076E  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
 1112 0771  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1113 0772  32 3913     	LD	(CRTDISP),A
 1114 0775  C3 070B     	JP	MORE_LOAD
 1115                   ;
 1116 0778              DONE_LOAD_OK:
 1117 0778  21 2B2E     	LD	HL,LOAD_DONE_MSG
 1118 077B  CD 1917     	CALL	PMSG			
 1119 077E  C3 0273     	JP	END_CMD
 1120                   ;
 1121 0781              ERROR_LOAD:
 1122 0781  21 2B11     	LD	HL,ERR_TK_MSG
 1123 0784  CD 1917     	CALL	PMSG
 1124 0787  C3 0273     	JP	END_CMD
 1125                   ;
 1126                   ;
 1127                   ;
 1128                   ;;**************** DUMP SECTORS FROM RAM TO DISK ROUTINE ********
 1129                   ;
 1130 078A              DUMP_SECTORS:
 1131 078A  21 2B9A     	LD	HL,DUMP_MSG	;Load msg
 1132 078D  CD 1917     	CALl	PMSG
 1133 0790  AF          	XOR	A,A		;Setup for the BIOS below
 1134 0791  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
 1135 0794  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
 1136 0797  3C          	INC	A
 1137 0798  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
 1138 079B  CD 11C2     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
 1139 079E  CD 0E2D     	CALL	HOME		
 1140 07A1  C4 12B4     	CALL	NZ,SHOW_ERRORS	;print out errors if any
 1141                   
 1142 07A4  CD 17DA     	CALL	CHECK_WP	;See if disk is write protected
 1143 07A7  C2 0273     	JP	NZ,END_CMD	
 1144                   
 1145 07AA              WR_T_OK:
 1146 07AA  CD 1934     	CALL	ZCRLF
 1147 07AD  21 26BE     	LD	HL,GET_TRACK_MSG ;get required track
 1148 07B0  CD 1917     	CALL	PMSG
 1149 07B3  CD 194C     	CALL	GET_HEX		;get 2 digits
 1150 07B6  DA 0273     	JP	C,END_CMD
 1151 07B9  CD 1934     	CALL	ZCRLF
 1152 07BC  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
 1153 07BF  B8          	CP	A,B
 1154 07C0  38 09       	JR	C,DGET_SIDES	;Yes we are 
 1155 07C2  21 285C     	LD	HL,TRACK_ERROR
 1156 07C5  CD 1917     	CALL	PMSG
 1157 07C8  C3 078A     	JP	DUMP_SECTORS	;Try again
 1158 07CB              DGET_SIDES:
 1159 07CB  FD 77 00    	LD	(IY+TRK),A	;Store requested track for below
 1160                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  21
VF      Z80

 1161 07CE  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
 1162 07D2  28 29       	JR	Z,GET_START_DSEC	;If 1 sided then skip side question
 1163 07D4  CD 1934     	CALL	ZCRLF
 1164                   
 1165 07D7  21 26F2     	LD	HL,GET_SIDE_MSG ;get required track
 1166 07DA  CD 1917     	CALL	PMSG
 1167 07DD  CD 1922     	CALL	GETCMD		;get the input option
 1168 07E0  FE 1B       	CP	A,ESC		;Abort if ESC character
 1169 07E2  CA 0273     	JP	Z,END_CMD
 1170 07E5  FE 42       	CP	A,'B'
 1171 07E7  20 07       	JR	NZ,DMUST_BE_A
 1172 07E9  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
 1173 07EB  FD 77 01    	LD	(IY+SIDE),A
 1174 07EE  18 0D       	JR	GET_START_DSEC
 1175 07F0              DMUST_BE_A:
 1176 07F0  FE 41       	CP	A,'A'
 1177 07F2  28 09       	JR	Z,GET_START_DSEC	;Already on A
 1178 07F4  21 271B     	LD	HL,SIDE_ERROR
 1179 07F7  CD 1917     	CALL	PMSG
 1180 07FA  C3 078A     	JP	DUMP_SECTORS		;Try again
 1181                   
 1182 07FD              GET_START_DSEC:
 1183 07FD  21 2735     	LD	HL,GET_SEC_MSG	;Get starting sector
 1184 0800  CD 1917     	CALL	PMSG
 1185 0803  CD 194C     	CALL	GET_HEX		;get 2 digits
 1186 0806  DA 0273     	JP	C,END_CMD
 1187 0809  CD 1934     	CALL	ZCRLF
 1188 080C  DD 46 00    	LD	B,(IX+NSCTRS)	;Are we within disk range
 1189 080F  B8          	CP	A,B
 1190 0810  38 09       	JR	C,DSTART1	;Yes we are 
 1191 0812  21 27A1     DSTART0:LD	HL,SEC_ERROR
 1192 0815  CD 1917     	CALL	PMSG
 1193 0818  C3 078A     	JP	DUMP_SECTORS	;Try again
 1194 081B  B7          DSTART1:OR	A,A		;Sectors numbered 1,2,3... 
 1195 081C  28 F4       	JR	Z,DSTART0
 1196                   
 1197 081E  FD 77 02    	LD	(IY+SCTR),A	;Store start sector
 1198                   
 1199 0821  21 2A4D     	LD	HL,SEC_COUNT_MSG   ;Get no. of sectors to write
 1200 0824  CD 1917     	CALL	PMSG
 1201 0827  CD 194C     	CALL	GET_HEX		;get 2 digits
 1202 082A  D2 0836     	JP	NC,DSTART2
 1203 082D              DSTART3:
 1204 082D  21 2039     	LD	HL,SEC_COUNT_ERR
 1205 0830  CD 1917     	CALL	PMSG
 1206 0833  C3 0273     	JP	END_CMD
 1207 0836  B7          DSTART2:OR	A,A		;cannot have 0 sectors
 1208 0837  28 F4       	JR	Z,DSTART3
 1209                   	
 1210 0839  32 3925     	LD	(SEC_COUNT),A	;store count of sectors
 1211                   	
 1212 083C  21 2AB8     	LD	HL,GET_DMAD_MSG  ;Get DMA Aaddress
 1213 083F  CD 1917     	CALL	PMSG
 1214 0842  CD 1983     	CALL	GET_HEX4	;get 4 digits
 1215 0845  D2 0851     	JP	NC,DSTART4
 1216 0848  21 204E     	LD	HL,RAM_ERROR
 1217 084B  CD 1917     	CALL	PMSG
 1218 084E  C3 0273     	JP	END_CMD
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  22
VF      Z80

 1219 0851              DSTART4:
 1220 0851  22 0040     	LD	(TADDR),HL	;Store the DMA address
 1221 0854  CD 1213     	CALL	SET_SIDE	;Update the side hardware (if required)	
 1222 0857              MORE_DUMP:
 1223 0857  CD 0E70     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
 1224 085A  C4 12B4     	CALL	NZ,SHOW_ERRORS	;If any show error flags
 1225                   ;	
 1226 085D  21 2BD1     	LD	HL,DUMPING_MSG
 1227 0860  CD 1917     	CALL	PMSG
 1228 0863  CD 1256     	CALL	SHOW_TSS_LOC
 1229 0866  21 2BE1     	LD	HL,DUMPING1_MSG
 1230 0869  CD 1917     	CALL	PMSG
 1231 086C  2A 0040     	LD	HL,(TADDR)
 1232 086F  7C          	LD	A,H
 1233 0870  CD 199D     	CALL	PACC
 1234 0873  7D          	LD	A,L
 1235 0874  CD 199D     	CALL	PACC
 1236 0877  21 2529     	LD	HL,H_MSG		;H. at end of message
 1237 087A  CD 1917     	CALL	PMSG
 1238                   
 1239 087D  CD 102C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
 1240 0880  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1241                   ;
 1242 0883  2A 3926     	LD	HL,(DMA_NEXT)		;Update the next RAM location
 1243 0886  22 0040     	LD	(TADDR),HL
 1244                   
 1245 0889  3A 3925     	LD	A,(SEC_COUNT)
 1246 088C  3D          	DEC	A
 1247 088D  28 35       	JR	Z,DONE_DUMP_OK
 1248 088F  32 3925     	LD	(SEC_COUNT),A		;Store for next time
 1249                   
 1250 0892  FD 34 02    	INC	(IY+SCTR)		;Get next sector
 1251 0895  FD 7E 02    	LD	A,(IY+SCTR)
 1252 0898  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1253 0899  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1254 089C  20 10       	JR	NZ,DSECTRK_OK
 1255                   
 1256 089E  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1257 08A0  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1258                   
 1259 08A3  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
 1260 08A6  FD 7E 00    	LD	A,(IY+TRK)			
 1261 08A9  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
 1262 08AC  28 1F       	JR	Z,ERROR_DUMP		;Ran out of tracks
 1263                   ;	
 1264 08AE              DSECTRK_OK:
 1265 08AE  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1266 08B1  20 03       	JR	NZ,DONE_LX
 1267 08B3  C3 0857     	JP	MORE_DUMP		;Loop until abort or all sectors are done
 1268 08B6  3A 3913     DONE_LX:LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1269 08B9  B7          	OR	A,A			;will switch it off
 1270 08BA  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
 1271 08BD  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1272 08BE  32 3913     	LD	(CRTDISP),A
 1273 08C1  C3 0857     	JP	MORE_DUMP
 1274                   ;
 1275 08C4              DONE_DUMP_OK:
 1276 08C4  21 2BEF     	LD	HL,DUMP_DONE_MSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  23
VF      Z80

 1277 08C7  CD 1917     	CALL	PMSG			
 1278 08CA  C3 0273     	JP	END_CMD
 1279                   ;
 1280 08CD              ERROR_DUMP:
 1281 08CD  21 2B11     	LD	HL,ERR_TK_MSG
 1282 08D0  CD 1917     	CALL	PMSG
 1283 08D3  C3 0273     	JP	END_CMD
 1284                   ;
 1285                   ;
 1286                   ;**************** CURRENT DISK, FORMAT ROUTINE ***************************
 1287                   ;
 1288 08D6              FORMAT_DISK:
 1289 08D6  DD 22 3910  	LD	(IX_OLD_STORE),IX	;Save current IX in case of an abort
 1290                   
 1291 08DA  DD CB 02 6E 	BIT	5,(IX+HW_BYTE)		;See if current selected disk is 5" or 8"
 1292 08DE  20 0D       	JR	NZ,FORM_TABLE5
 1293 08E0  CD 1636     	CALL	GET_TABLE_8		;Setup IX to (new) table parameters for 8"
 1294 08E3  28 15       	JR	Z,TABLE_OK
 1295 08E5  21 256E     	LD	HL,BADCMD
 1296 08E8  CD 1917     	CALL	PMSG
 1297 08EB  18 30       	JR	FABORT
 1298 08ED              FORM_TABLE5:
 1299 08ED  CD 1671     	CALL	GET_TABLE_5		;Setup IX to (new) table parameters for 5"
 1300 08F0  28 08       	JR	Z,TABLE_OK
 1301 08F2  21 256E     	LD	HL,BADCMD
 1302 08F5  CD 1917     	CALL	PMSG
 1303 08F8  18 23       	JR	FABORT
 1304 08FA              TABLE_OK:	
 1305 08FA  21 2552     	LD	HL,FORMATTING_MSG
 1306 08FD  CD 1917     	CALL	PMSG
 1307 0900  DD E5       	PUSH	IX			;IX->HL
 1308 0902  E1          	POP	HL
 1309 0903  11 0013     	LD	DE,TITLE		;add in offset
 1310 0906  19          	ADD	HL,DE			;HL now points to the title entry of the selected disk
 1311 0907  CD 1917     	CALL	PMSG
 1312                   
 1313 090A  CD 11C2     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1314 090D  CD 0E2D     	CALL	HOME			;Restore disk head
 1315 0910  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1316                   	
 1317 0913  CD 17DA     	CALL	CHECK_WP		;See if disk is write protected
 1318 0916  CA 0924     	JP	Z,FORMWP_OK		;Go to the core test routine
 1319 0919  DD 2A 3910  	LD	IX,(IX_OLD_STORE)	;Nothing altered go back to main menu
 1320 091D  CD 11C2     FABORT:	CALL	START_DRIVE_1		;RE-select to old drive disk format, Side A
 1321 0920  3A 391A     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1322 0923  C9          	RET				;return back to MENU
 1323                   	
 1324 0924              FORMWP_OK:
 1325 0924  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here
 1326 0927  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1327                   
 1328 092A  3E 01       	LD	A,1
 1329 092C  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1330 092F  AF          	XOR	A,A			;Setup for the BIOS below
 1331 0930  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1332 0933  CD 1213     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1333 0936  AF          	XOR	A,A
 1334                   					;Fall through with 0 in [A] for trk 0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  24
VF      Z80

 1335 0937              NEXT_TRK:			
 1336 0937  FD 77 00    	LD	(IY+TRK),A		;store track info for eack loop
 1337                   	
 1338 093A  CD 1397     	CALL	BUILD_TRACK		;Build a complete track image in RAM
 1339                   
 1340 093D  CD 183E     	CALL	FORMAT_INFO		;Display the track if detailed info is on
 1341                   	
 1342 0940  FD 7E 01    	LD	A,(IY+SIDE)	
 1343 0943  FE 02       	CP	A,02H			;If B side no seek necessary
 1344 0945  28 09       	JR	Z,SKIP_SEEK
 1345                   
 1346 0947  FD 7E 00    	LD	A,(IY+TRK)		;Get new track#
 1347 094A  CD 0E81     	CALL	SEEK_TRACK_NV		;Seek with verify command to 1791/5
 1348 094D  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1349                   
 1350 0950              SKIP_SEEK:
 1351 0950  11 5000     	LD	DE,FBUFFER		;Move Start of track image into DE
 1352 0953  D5          	PUSH	DE			;save it
 1353 0954  2A 3937     	LD	HL,(E_GAP4_MARK)	;End+1 of track header
 1354 0957  2B          	DEC	HL
 1355 0958  ED 52       	SBC	HL,DE
 1356 095A  EB          	EX	DE,HL			;Count now in DE
 1357                   
 1358 095B  21 3923     	LD	HL,TRACK_SIZE		;Side step, need to store track byte count
 1359 095E  72          	LD	(HL),D			;for display at end of format etc.
 1360 095F  23          	INC	HL
 1361 0960  73          	LD	(HL),E
 1362 0961  E1          	POP	HL			;DE on stack to --> HL
 1363                   
 1364 0962  CD 1146     	CALL	WRITE_TRACK		;<<<< Write track with hardware >>>>>
 1365 0965  C4 12B4     	CALL	NZ,SHOW_ERRORS
 1366                   
 1367 0968  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1368 096B  20 58       	JR	NZ,CHECK_ABORT
 1369 096D              AGAIN1:
 1370 096D  DD 7E 02    	LD	A,(IX+HW_BYTE)		;Check if side B is req
 1371 0970  CB 67       	BIT	4,A
 1372 0972  28 1C       	JR	Z,AGAIN			;SS drive go to next track
 1373                   
 1374 0974  FD 7E 01    	LD	A,(IY+SIDE)
 1375 0977  B7          	OR	A,A			;If 0 we have done A side, now do B
 1376 0978  28 09       	JR	Z,FORM_B_SIDE		;switch over to B side
 1377 097A  AF          	XOR	A,A
 1378 097B  FD 77 01    	LD	(IY+SIDE),A
 1379 097E  CD 1213     	CALL	SET_SIDE		;update the hardware
 1380 0981  18 0D       	JR	AGAIN			;Need track increase now we are back on side A
 1381 0983              FORM_B_SIDE:
 1382 0983  3E 02       	LD	A,02H			;Flag for B side
 1383 0985  FD 77 01    	LD	(IY+SIDE),A	
 1384 0988  CD 1213     	CALL	SET_SIDE		;Update the hardware
 1385 098B  FD 7E 00    	LD	A,(IY+TRK)	
 1386 098E  18 A7       	JR	NEXT_TRK		;Do everything again with this track on B side
 1387                   
 1388 0990  FD 34 00    AGAIN:	INC	(IY+TRK)		;What was the last track number just done
 1389 0993  FD 7E 00    	LD	A,(IY+TRK)
 1390 0996  DD BE 01    	CP	A,(IX+NTRKS)		;Check if we are on the last tarck
 1391 0999  20 9C       	JR	NZ,NEXT_TRK		;If not then back to updating tracks and doing it again.
 1392                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  25
VF      Z80

 1393 099B  21 25B6     	LD	HL,END_FORM_MSG
 1394 099E  CD 1917     	CALL	PMSG
 1395 09A1  21 3923     	LD	HL,TRACK_SIZE
 1396 09A4  7E          	LD	A,(HL)			;Fill in total byte count of a track
 1397 09A5  CD 199D     	CALL	PACC			;Is useful for building tables and track disply
 1398 09A8  23          	INC	HL			;was obtained from WRITE_1_TRACK below
 1399 09A9  7E          	LD	A,(HL)
 1400 09AA  CD 199D     	CALL	PACC
 1401 09AD  21 25EA     	LD	HL,END_FORM1_MSG	;end of formatting
 1402 09B0  CD 1917     	CALL	PMSG
 1403                   
 1404 09B3  DD 7E 0E    	LD	A,(IX+SPECIAL_FLAG)	;Is any post formatting mods required?
 1405 09B6  B7          	OR	A,A
 1406 09B7  28 05       	JR	Z,NO_MODS
 1407 09B9  FE 01       	CP	A,CPM86_FLAG
 1408 09BB  CC 1576     	CALL	Z,INIT_CPM86		;Must modify first 5" disk sector for CPM86
 1409 09BE              NO_MODS:
 1410 09BE  CD 11C2     	CALL	START_DRIVE_1		;Select disk with new IX table format, Side A
 1411 09C1  3A 391A     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1412 09C4  C9          	RET				;return back to MENU
 1413                   ;
 1414 09C5              CHECK_ABORT:
 1415 09C5  3A 3913     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1416 09C8  B7          	OR	A,A			;will switch it off
 1417 09C9  CA 09D2     	JP	Z,FORM_ABORT		;If Z do not list the sector contents.
 1418 09CC  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1419 09CD  32 3913     	LD	(CRTDISP),A
 1420 09D0  18 9B       	JR	AGAIN1
 1421                   ;
 1422 09D2              FORM_ABORT:
 1423 09D2  21 258B     	LD	HL,FORM_ERRMSG		;Say error formatting disk
 1424 09D5  CD 1917     	CALL	PMSG	
 1425 09D8  31 3A39     	LD	SP,STACK
 1426 09DB  C3 0125     	JP	START			;Must abort everything because disk status is unknown
 1427                   ;
 1428                   ;
 1429                   ;
 1430                   ; QUICK 8" IBM SSSD FORMAT of a blank disk in B: drive
 1431                   ; This is for quickly making CPM 8" disks. Not really a disgnostic
 1432                   ; This assumes an 8" disk is in B: drive.
 1433                   ;
 1434 09DE              IBMFORM_DISK:
 1435 09DE  AF          	XOR	A,A
 1436 09DF  32 3912     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1437                   
 1438 09E2  DD 22 3910  	LD	(IX_OLD_STORE),IX	;Store current disk paramater table
 1439 09E6  3A 0046     	LD	A,(DRIVE_1)		;Because we may not already be on B:
 1440 09E9  32 392A     	LD	(DRIVE_STORE),A
 1441                   
 1442 09EC  21 2EC1     	LD	HL,IBM_FORMAT
 1443 09EF  CD 1917     	CALL	PMSG
 1444                   
 1445 09F2  DD 21 32E0  	LD	IX,STDSDT		;Force current drive to 8" IBM SSSD
 1446 09F6  3E 02       	LD	A,2
 1447 09F8  32 0046     	LD	(DRIVE_1),A		;Force B: drive hardware selection
 1448 09FB  CD 11C2     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1449 09FE  CD 0E2D     	CALL	HOME			;Restore disk head
 1450 0A01  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  26
VF      Z80

 1451                   	
 1452 0A04  CD 17DA     	CALL	CHECK_WP		;See if disk is write protected
 1453 0A07  CA 0A1B     	JP	Z,IBMFORM_OK1		;Go to the core routine
 1454                   
 1455 0A0A  DD 2A 3910  	LD	IX,(IX_OLD_STORE)	;Nothing altered go back to main menu
 1456 0A0E  3A 392A     	LD	A,(DRIVE_STORE)
 1457 0A11  32 0046     	LD	(DRIVE_1),A		;Get back origional drive
 1458 0A14  CD 11C2     	CALL	START_DRIVE_1		;RE-select to old drive disk format, Side A
 1459 0A17  3A 391A     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1460 0A1A  C9          	RET				;return back to MENU
 1461                   
 1462 0A1B              IBMFORM_OK1:
 1463 0A1B  21 2F05     	LD	HL,IBM_FORMAT1		;Formatting started
 1464 0A1E  CD 1917     	CALL	PMSG
 1465 0A21              IBMFORM_OK:
 1466 0A21  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here
 1467 0A24  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1468                   
 1469 0A27  3E 01       	LD	A,1
 1470 0A29  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1471 0A2C  AF          	XOR	A,A			;Setup for the BIOS below
 1472 0A2D  FD 77 01    	LD	(IY+SIDE),A		;Side A 
 1473 0A30  CD 1213     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1474 0A33  AF          	XOR	A,A
 1475                   					;Fall through with 0 in [A] for trk 0
 1476 0A34              IBM_NEXT_TRK:			
 1477 0A34  FD 77 00    	LD	(IY+TRK),A		;store track info for eack loop
 1478 0A37  CD 1397     	CALL	BUILD_TRACK		;Build a complete track image in RAM
 1479                   
 1480 0A3A  CD 0E81     	CALL	SEEK_TRACK_NV		;Seek with verify command to 1791/5
 1481 0A3D  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1482                   
 1483 0A40  21 3073     	LD	HL,FORM_TRK_MSG		;At track xx
 1484 0A43  CD 1917     	CALL	PMSG
 1485 0A46  FD 7E 00    	LD	A,(IY+TRK)
 1486 0A49  CD 199D     	CALL	PACC
 1487                   
 1488 0A4C  11 5000     	LD	DE,FBUFFER		;Move Start of track image into DE
 1489 0A4F  D5          	PUSH	DE			;save it
 1490 0A50  2A 3937     	LD	HL,(E_GAP4_MARK)	;End+1 of track header
 1491 0A53  2B          	DEC	HL
 1492 0A54  ED 52       	SBC	HL,DE
 1493 0A56  EB          	EX	DE,HL			;Count now in DE
 1494 0A57  E1          	POP	HL			;DE on stack to --> HL
 1495                   	
 1496 0A58  CD 1146     	CALL	WRITE_TRACK		;<<<< Write track with hardware >>>>>
 1497 0A5B  C4 12B4     	CALL	NZ,SHOW_ERRORS
 1498                   
 1499 0A5E  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1500 0A61  C2 0B16     	JP	NZ,IBMF_ABORT
 1501                   
 1502 0A64  FD 34 00    	INC	(IY+TRK)		;what was the last track number just done
 1503 0A67  FD 7E 00    	LD	A,(IY+TRK)
 1504 0A6A  DD BE 01    	CP	A,(IX+NTRKS)		;Check if we are on the last tarck
 1505 0A6D  20 C5       	JR	NZ,IBM_NEXT_TRK		;If not then back to updating tracks and doing it again.
 1506                   ;
 1507 0A6F  21 2F8B     	LD	HL,COPY_SYSTRKS		;Do you wish to copy CPM from the system tracks of drive A:
 1508 0A72  CD 1917     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  27
VF      Z80

 1509 0A75  CD 1922     	CALL	GETCMD			;Ask if we wish to continue
 1510 0A78  FE 59       	CP	A,'Y'
 1511 0A7A  C2 0B06     	JP	NZ,IBMF_DONE1		;If not return
 1512 0A7D  21 2FFF     	LD	HL,COPYING_CPM
 1513 0A80  CD 1917     	CALL	PMSG
 1514 0A83  DD 7E 12    	LD	A,(IX+SYS_TRKS)
 1515 0A86  32 3928     	LD	(COPY_TRK_COUNT),A	;Count down 2 tracks
 1516                   
 1517 0A89  3E 01       	LD	A,1			;Second drive on A: set (DRIVE_2) to it
 1518 0A8B  32 0047     	LD	(DRIVE_2),A
 1519                   ;
 1520 0A8E              IBM_CPM_LOOP				;Now copy CPM from A: Drive to B: drive. IX is already 8" IBM
 1521 0A8E  CD 11C7     	CALL	START_DRIVE_2		;Select for A: drive in hardware, Side A
 1522 0A91  CD 0E2D     	CALL	HOME		
 1523 0A94  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1524                   
 1525 0A97  3A 3929     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1526 0A9A  FD 77 00    	LD	(IY+TRK),A
 1527                   
 1528 0A9D  CD 0E70     	CALL	SEEK_TRACK_V
 1529 0AA0  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1530                   
 1531 0AA3  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1532 0AA6  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1533 0AA9  1E 01       	LD	E,1			;Start with 1st sector 
 1534 0AAB  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1535                   ;
 1536 0AAE  CD 0F77     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1537 0AB1  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1538                   ;
 1539                   ;---					
 1540                   ;					;<<<<< WRITE TO Destination drive
 1541 0AB4  CD 11C2     	CALL	START_DRIVE_1		;Select for B: drive in hardware, Side A
 1542 0AB7  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1543 0ABA  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1544                   
 1545 0ABD  3A 3929     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1546 0AC0  FD 77 00    	LD	(IY+TRK),A
 1547                   
 1548 0AC3  CD 0E70     	CALL	SEEK_TRACK_V
 1549 0AC6  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1550                   
 1551 0AC9  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1552 0ACC  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1553 0ACF  1E 01       	LD	E,1			;Start with 1st sector 
 1554 0AD1  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1555                   ;
 1556 0AD4  CD 10C4     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1557 0AD7  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1558                   ;
 1559 0ADA  3A 3929     	LD	A,(COPY_TRK)		;bump up a track
 1560 0ADD  3C          	INC	A
 1561 0ADE  32 3929     	LD	(COPY_TRK),A
 1562 0AE1  3A 3928     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1563 0AE4  3D          	DEC	A
 1564 0AE5  32 3928     	LD	(COPY_TRK_COUNT),A	
 1565 0AE8  CA 0AF3     	JP	Z,IBMF_DONE2
 1566                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  28
VF      Z80

 1567 0AEB  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1568 0AEE  20 16       	JR	NZ,IBMF_DONE1		;Loop until abort or all tracks done
 1569 0AF0  C3 0A8E     	JP	IBM_CPM_LOOP
 1570                   ;
 1571 0AF3              IBMF_DONE2
 1572 0AF3  3A 3912     	LD	A,(ERRORS_FLAG)		;Were there errors
 1573 0AF6  B7          	OR	A,A
 1574 0AF7  20 1D       	JR	NZ,IBMF_ABORT
 1575 0AF9  21 302C     	LD	HL,END_FORM_MSG2
 1576 0AFC  CD 1917     	CALL	PMSG
 1577 0AFF  CD 11C2     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1578 0B02  3A 391A     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1579 0B05  C9          	RET				;return back to MENU
 1580                   ;
 1581 0B06              IBMF_DONE1:
 1582 0B06  3A 3912     	LD	A,(ERRORS_FLAG)		;Were there errors
 1583 0B09  B7          	OR	A,A
 1584 0B0A  20 0A       	JR	NZ,IBMF_ABORT
 1585 0B0C  21 2F20     	LD	HL,END_FORM_MSG1
 1586 0B0F  CD 11C2     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1587 0B12  3A 391A     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1588 0B15  C9          	RET				;return back to MENU
 1589                   ;
 1590 0B16              IBMF_ABORT:
 1591 0B16  21 258B     	LD	HL,FORM_ERRMSG		;Say error formatting disk
 1592 0B19  CD 1917     	CALL	PMSG	
 1593 0B1C  31 3A39     	LD	SP,STACK
 1594 0B1F  C3 0125     	JP	START			;Must abort everything because disk status is unknown
 1595                   ;
 1596                   ;
 1597                   ;
 1598                   ;
 1599                   ;***************** DISK TO DISK COPY *********************************
 1600                   ; Unlike much of this program, this module is somewhat hardware specific in that it assumes 
 1601                   ; the source and destination disks are identical and are using the SAME disk formats. 
 1602                   ; Normall they are 8" drives but it should be OK with two 5" drives as well. (5" was not tested)
 1603                   ; I decided not to use whole track R/W's because there is no CRC error checking of the data. 
 1604                   ; Uses the 1791/5 multi sector read command. Will do both sides if DS disk
 1605                   ; 
 1606 0B22              COPY_DISK:
 1607 0B22  AF          	XOR	A,A
 1608 0B23  32 3912     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1609                   
 1610 0B26  21 2C86     	LD	HL,COPY_MSG		;Announce the disk copy msg
 1611 0B29  CD 1917     	CALL	PMSG
 1612 0B2C  AF          	XOR	A,A			;Setup for the BIOS below
 1613 0B2D  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1614 0B30  32 3929     	LD	(COPY_TRK),A
 1615 0B33  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1616 0B36  CD 11C2     	CALL	START_DRIVE_1		;Start "the current drive" hardware, Side A
 1617 0B39  CD 0E2D     	CALL	HOME		
 1618 0B3C  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1619 0B3F  C2 0C1E     	JP	NZ,DONE_COPY
 1620                   ;
 1621 0B42              GET_CDEST:				;<<< DESTINATION DRIVE
 1622 0B42  21 2CCD     	LD	HL,COPY2_MSG		;Destination disk 
 1623 0B45  CD 1917     	CALL	PMSG
 1624 0B48  CD 15E3     	CALL	SELECT_DR_2		;Get second drive, put it in (DRIVE_2)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  29
VF      Z80

 1625 0B4B  FE FF       	CP	A,0FFH		
 1626 0B4D  28 F3       	JR	Z,GET_CDEST		;Invalid drive, start over
 1627 0B4F  FE 1B       	CP	A,ESC
 1628 0B51  CA 0C1E     	JP	Z,DONE_COPY
 1629                   ;
 1630 0B54              FORMATS_OK:
 1631 0B54  CD 11C7     	CALL	START_DRIVE_2		;Select for second drive in hardware, Side A
 1632 0B57  CD 0E2D     	CALL	HOME		
 1633 0B5A  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1634 0B5D  C2 0C1E     	JP	NZ,DONE_COPY		;If errors abort
 1635                   	
 1636 0B60  CD 17DA     	CALL	CHECK_WP		;See if disk is write protected
 1637 0B63  C2 0C1E     	JP	NZ,DONE_COPY		;Abort if second drive is write protected
 1638                   ;
 1639 0B66              COPYWP_OK:
 1640 0B66  21 2CEA     	LD	HL,HOW_MANY_TRKS
 1641 0B69  CD 1917     	CALL	PMSG
 1642 0B6C  CD 1922     	CALL	GETCMD
 1643 0B6F  FE 1B       	CP	A,ESC			;Abort if ESC character
 1644 0B71  CA 0C1E     	JP	Z,DONE_COPY
 1645 0B74  FE 53       	CP	A,'S'
 1646 0B76  20 04       	JR	NZ,NOT_S
 1647 0B78  3E 02       	LD	A,2
 1648 0B7A  18 11       	JR	GOT_TRK_CNT
 1649 0B7C  FE 41       NOT_S:	CP	A,'A'
 1650 0B7E  20 05       	JR	NZ,NOT_ALL
 1651 0B80  DD 7E 01    	LD	A,(IX+NTRKS)
 1652 0B83  18 08       	JR	GOT_TRK_CNT
 1653 0B85  21 2D23     NOT_ALL:LD	HL,INVALID_TRK_CT	;Must be S or All
 1654 0B88  CD 1917     	CALL	PMSG
 1655 0B8B  18 D9       	JR	COPYWP_OK
 1656                   ;
 1657 0B8D              GOT_TRK_CNT:
 1658 0B8D  32 3928     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1659                   	
 1660 0B90              COPY_R_LOOP:				; <<<< READ FROM Source drive
 1661 0B90  CD 11C2     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1662 0B93  CD 1213     	CALL	SET_SIDE		;Make sure drive is set for correct side
 1663 0B96  CD 0E2D     	CALL	HOME		
 1664 0B99  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1665                   
 1666 0B9C  3A 3929     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1667 0B9F  FD 77 00    	LD	(IY+TRK),A
 1668                   
 1669 0BA2  CD 0E70     	CALL	SEEK_TRACK_V		;Get appropiate track
 1670 0BA5  C4 12B4     	CALL	NZ,SHOW_ERRORS		;not clear why this is so. 
 1671                   	
 1672 0BA8  21 2D51     	LD	HL,COPY_AT_TRK
 1673 0BAB  CD 1917     	CALL	PMSG
 1674 0BAE  CD 12A5     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1675                   
 1676 0BB1  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1677 0BB4  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1678 0BB7  1E 01       	LD	E,1			;Start with 1st sector 
 1679 0BB9  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1680                   ;
 1681 0BBC  CD 0F77     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1682 0BBF  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  30
VF      Z80

 1683                   ;
 1684                   ;---					
 1685                   ;					;<<<<< WRITE TO Destination drive
 1686 0BC2  CD 11C7     	CALL	START_DRIVE_2		;Start "the second drive" in hardware, Side A
 1687 0BC5  CD 1213     	CALL	SET_SIDE		;Update the side hardware 
 1688 0BC8  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1689 0BCB  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1690                   
 1691 0BCE  3A 3929     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1692 0BD1  FD 77 00    	LD	(IY+TRK),A
 1693                   
 1694 0BD4  CD 0E70     	CALL	SEEK_TRACK_V		;Get appropiate track
 1695 0BD7  C4 12B4     	CALL	NZ,SHOW_ERRORS		;not clear why this is so. 
 1696                   
 1697 0BDA  21 2D66     	LD	HL,WRITE_AT_TRK
 1698 0BDD  CD 1917     	CALL	PMSG
 1699 0BE0  CD 12A5     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1700                   
 1701 0BE3  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1702 0BE6  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1703 0BE9  1E 01       	LD	E,1			;Start with 1st sector 
 1704 0BEB  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1705                   ;
 1706 0BEE  CD 10C4     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1707 0BF1  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1708                   ;
 1709 0BF4  CD 11F4     	CALL	SWAP_SIDES		;Sides swap check
 1710 0BF7  20 11       	JR	NZ,R_TRK_OK		;If B side (NZ), same track
 1711                   ;					;Else see if more tracks are required
 1712 0BF9  3A 3929     	LD	A,(COPY_TRK)		;bump up a track
 1713 0BFC  3C          	INC	A
 1714 0BFD  32 3929     	LD	(COPY_TRK),A
 1715 0C00  3A 3928     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1716 0C03  3D          	DEC	A
 1717 0C04  32 3928     	LD	(COPY_TRK_COUNT),A	
 1718 0C07  CA 0C12     	JP	Z,DONE_COPY2
 1719                   ;
 1720 0C0A              R_TRK_OK:
 1721 0C0A  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1722 0C0D  20 0F       	JR	NZ,DONE_COPY		;Loop until abort or all tracks done
 1723 0C0F  C3 0B90     	JP	COPY_R_LOOP
 1724                   ;
 1725 0C12              DONE_COPY2:				;We are done restore both drives
 1726 0C12  3A 3912     	LD	A,(ERRORS_FLAG)		;Were there errors
 1727 0C15  B7          	OR	A,A
 1728 0C16  20 0C       	JR	NZ,BAD_COPY
 1729 0C18  21 2D3C     	LD	HL,COPYING_DONE		;Announce we are finished
 1730 0C1B  CD 1917     	CALL	PMSG
 1731 0C1E              DONE_COPY:
 1732 0C1E  CD 11C2     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1733 0C21  C3 0273     	JP	END_CMD
 1734                   ;
 1735 0C24  21 307E     BAD_COPY:LD	HL,BAD_COPY_MSG		;errors seen so say bad copy
 1736 0C27  CD 1917     	CALL	PMSG
 1737 0C2A  18 F2       	JR	DONE_COPY
 1738                   ;
 1739                   ;***************** VERIFY TWO DISKS ARE THE SAME SECTOR BY SECTOR******************************
 1740                   ; This module assumes the disks sizes are identical and are using the same disk formats. 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  31
VF      Z80

 1741                   ; Normall they are 8" drives but it should be OK with two 5" drives as well. (5" was not tested)
 1742                   ;
 1743 0C2C              VERIFY_DISK:
 1744 0C2C  21 2DA2     	LD	HL,VERIFY_MSG		;Announce the disk copy msg
 1745 0C2F  CD 1917     	CALl	PMSG
 1746 0C32  AF          	XOR	A,A			;Setup for the BIOS below
 1747 0C33  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1748 0C36  32 3929     	LD	(COPY_TRK),A
 1749 0C39  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A of A:
 1750 0C3C  3C          	INC	A
 1751 0C3D  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1752 0C40  CD 11C2     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1753 0C43  CD 0E2D     	CALL	HOME		
 1754 0C46  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1755 0C49  C2 0273     	JP	NZ,END_CMD
 1756                   ;
 1757 0C4C              GET_VDEST:				;<<< DESTINATION DRIVE
 1758 0C4C  21 2DCC     	LD	HL,VERIFY2_MSG		;Destination disk 
 1759 0C4F  CD 1917     	CALL	PMSG
 1760 0C52  CD 15E3     	CALL	SELECT_DR_2		;Ask user which drive for second drive
 1761 0C55  FE FF       	CP	A,0FFH			;Note IX will be the same for both disks
 1762 0C57  28 F3       	JR	Z,GET_VDEST		;Invalid drive, start over
 1763 0C59  FE 1B       	CP	A,ESC
 1764 0C5B  CA 0273     	JP	Z,END_CMD
 1765                   ;
 1766 0C5E              HOW_MANY:
 1767 0C5E  21 2CEA     	LD	HL,HOW_MANY_TRKS
 1768 0C61  CD 1917     	CALL	PMSG
 1769 0C64  CD 1922     	CALL	GETCMD
 1770 0C67  FE 1B       	CP	A,ESC			;Abort if ESC character
 1771 0C69  CA 0273     	JP	Z,END_CMD
 1772 0C6C  FE 53       	CP	A,'S'
 1773 0C6E  20 04       	JR	NZ,NOT_VS
 1774 0C70  3E 02       	LD	A,2
 1775 0C72  18 11       	JR	VGOT_TRK_CNT
 1776 0C74  FE 41       NOT_VS:	CP	A,'A'
 1777 0C76  20 05       	JR	NZ,NOT_VALL
 1778 0C78  DD 7E 01    	LD	A,(IX+NTRKS)
 1779 0C7B  18 08       	JR	VGOT_TRK_CNT
 1780 0C7D              NOT_VALL:
 1781 0C7D  21 2D23     	LD	HL,INVALID_TRK_CT	;Must be S or All
 1782 0C80  CD 1917     	CALL	PMSG
 1783 0C83  18 D9       	JR	HOW_MANY
 1784                   ;
 1785 0C85              VGOT_TRK_CNT:
 1786 0C85  32 3928     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1787                   ;	
 1788 0C88              VERIFY_R_LOOP:
 1789 0C88  CD 11C2     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1790 0C8B  CD 1213     	CALL	SET_SIDE		;Update the side hardware 
 1791 0C8E  FD 7E 02    	LD	A,(IY+SCTR)		;Is it a new track
 1792 0C91  FE 01       	CP	A,1
 1793 0C93  20 12       	JR	NZ,VR_1
 1794 0C95  CD 0E2D     	CALL	HOME			;If a new track need to seek
 1795 0C98  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1796 0C9B  3A 3929     	LD	A,(COPY_TRK)
 1797 0C9E  FD 77 00    	LD	(IY+TRK),A
 1798                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  32
VF      Z80

 1799 0CA1  CD 0E70     	CALL	SEEK_TRACK_V		;seek to the new track position	
 1800 0CA4  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1801 0CA7              VR_1:	
 1802 0CA7  21 2D78     	LD	HL,READ_AT_TRK
 1803 0CAA  CD 1917     	CALL	PMSG
 1804 0CAD  CD 1256     	CALL	SHOW_TSS_LOC		;Announce current Track/Sec 
 1805                   
 1806 0CB0  21 5000     	LD	HL,FBUFFER		;Will place the complete sector image here (5000H)
 1807 0CB3  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1808                   ;
 1809 0CB6  CD 0EDF     	CALL	READ_SECTOR		;<<<<<< Read sector of A: Drive>>>>>>>
 1810 0CB9  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1811                   ;
 1812 0CBC  CD 11C7     	CALL	START_DRIVE_2		;Start the drive hardware (A side)
 1813 0CBF  CD 1213     	CALL	SET_SIDE		;Update the side hardware -- assume side A only
 1814 0CC2  FD 7E 02    	LD	A,(IY+SCTR)		;Is it a new track
 1815 0CC5  FE 01       	CP	A,1
 1816 0CC7  20 12       	JR	NZ,VR_2
 1817 0CC9  CD 0E2D     	CALL	HOME			;Not clear why but get a seek error without this!
 1818 0CCC  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1819 0CCF  3A 3929     	LD	A,(COPY_TRK)
 1820 0CD2  FD 77 00    	LD	(IY+TRK),A
 1821                   
 1822 0CD5  CD 0E70     	CALL	SEEK_TRACK_V		;seek to the new track position
 1823 0CD8  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1824 0CDB              VR_2:	
 1825 0CDB  21 2D83     	LD	HL,VERIFY_AT_TRK
 1826 0CDE  CD 1917     	CALL	PMSG
 1827 0CE1  CD 1256     	CALL	SHOW_TSS_LOC		;Announce current Track 
 1828                   
 1829 0CE4  21 6000     	LD	HL,FBUFFER2		;Will place  the complete sector image here (5000H)
 1830 0CE7  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1831                   
 1832 0CEA  CD 0EDF     	CALL	READ_SECTOR		;<<<<<< Read sector on B: Drive
 1833 0CED  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1834                   ;
 1835 0CF0  CD 133A     	CALL	CMP_BUFFERS		;Check for errors
 1836 0CF3  28 09       	JR	Z,VCOMPARE_OK
 1837 0CF5  21 2904     	LD	HL,SEC_V_ERROR		;R/W Error found 
 1838 0CF8  CD 1917     	CALL	PMSG
 1839 0CFB  CD 1256     	CALL	SHOW_TSS_LOC		;trk,sec,head
 1840                   
 1841 0CFE              VCOMPARE_OK:
 1842 0CFE  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1843 0D01  C2 0D33     	JP	NZ,DONE_VERIFY1		;Abort if requested
 1844                   
 1845 0D04  FD 34 02    	INC	(IY+SCTR)		;Get next sector
 1846 0D07  FD 7E 02    	LD	A,(IY+SCTR)
 1847 0D0A  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1848 0D0B  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1849 0D0E  C2 0C88     	JP	NZ,VERIFY_R_LOOP
 1850                   
 1851 0D11  CD 11F4     	CALL	SWAP_SIDES		;Sides swap check
 1852 0D14  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1853 0D16  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1854 0D19  C2 0C88     	JP	NZ,VERIFY_R_LOOP	;If B side (NZ), same track, back to sec 1
 1855                   
 1856 0D1C  3A 3929     	LD	A,(COPY_TRK)		;bump up a track
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  33
VF      Z80

 1857 0D1F  3C          	INC	A
 1858 0D20  32 3929     	LD	(COPY_TRK),A
 1859 0D23  3A 3928     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1860 0D26  3D          	DEC	A
 1861 0D27  32 3928     	LD	(COPY_TRK_COUNT),A	
 1862 0D2A  C2 0C88     	JP	NZ,VERIFY_R_LOOP
 1863                   ;
 1864 0D2D              END_VERIFY:				;We are done restore both drives
 1865 0D2D  21 2D8C     	LD	HL,VERIFY_DONE
 1866 0D30  CD 1917     	CALL	PMSG
 1867                   ;
 1868 0D33              DONE_VERIFY1:
 1869 0D33  CD 11C2     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1870 0D36  CD 0E2D     	CALL	HOME			;Will set TRK to 0
 1871 0D39  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1872 0D3C  3A 391A     	LD	A,(CMD_STORE)		;So we dont pick up other menu items
 1873 0D3F  C9          	RET				;Back to main menu	
 1874                   ;
 1875                   ;
 1876                   ;
 1877                   ; This routine will copy the CPM system tracks FROM another current disk and writes it TO 
 1878                   ; the current disk. Its just a modification of COPY_DISK where the number of tracks set aside
 1879                   ; is picked off from the Disk paramater table
 1880                   ; It should be OK with any disk format but so far has just been checked out on 
 1881                   ; standard 8" SSSD IBM 3740 disks. Both disks must use the same format. (untested for 5" disks)
 1882                   ;
 1883 0D40              COPY_CPM3_SYS:
 1884 0D40  AF          	XOR	A,A
 1885 0D41  32 3912     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1886                   
 1887 0D44  21 2E07     	LD	HL,SYS_COPY_MSG
 1888 0D47  CD 1917     	CALL	PMSG
 1889 0D4A  AF          	XOR	A,A			;Setup for the BIOS below
 1890 0D4B  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1891 0D4E  32 3929     	LD	(COPY_TRK),A
 1892 0D51  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1893                   
 1894 0D54  CD 11C2     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1895 0D57  CD 0E2D     	CALL	HOME		
 1896 0D5A  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1897 0D5D  C2 0273     	JP	NZ,END_CMD
 1898                   
 1899 0D60  CD 17DA     	CALL	CHECK_WP		;See if disk is write protected
 1900 0D63  C2 0273     	JP	NZ,END_CMD
 1901                   
 1902 0D66              GET_SDEST:				;<<<  SOURCE DRIVE
 1903 0D66  21 2E58     	LD	HL,SYS_COPY_MSG1	;Source disk of CPM 
 1904 0D69  CD 1917     	CALL	PMSG
 1905 0D6C  CD 15E3     	CALL	SELECT_DR_2		;Ask user which drive to get the CPM system tracks from
 1906 0D6F  FE FF       	CP	A,0FFH			;Note IX will be the same for both disks
 1907 0D71  28 F3       	JR	Z,GET_SDEST		;Invalid drive, start over
 1908 0D73  FE 1B       	CP	A,ESC
 1909 0D75  CA 0273     	JP	Z,END_CMD
 1910                   
 1911 0D78  CD 11C7     	CALL	START_DRIVE_2		;Start the drive hardware (A side)
 1912 0D7B  CD 0E2D     	CALL	HOME
 1913 0D7E  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1914 0D81  C2 0273     	JP	NZ,END_CMD
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  34
VF      Z80

 1915                   	
 1916 0D84              COPYWP_SOK:
 1917 0D84  DD 7E 12    	LD	A,(IX+SYS_TRKS)		;How many tracks for CPM system on this disk	
 1918 0D87  32 3928     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1919                   	
 1920 0D8A              SYS_R_LOOP:				; <<<< READ FROM Source drive
 1921 0D8A  CD 11C7     	CALL	START_DRIVE_2		;Start the source drive hardware (A side)
 1922 0D8D  CD 1213     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1923 0D90  CD 0E2D     	CALL	HOME		
 1924 0D93  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1925                   
 1926 0D96  3A 3929     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1927 0D99  FD 77 00    	LD	(IY+TRK),A
 1928 0D9C  CD 0E70     	CALL	SEEK_TRACK_V
 1929 0D9F  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1930                   
 1931 0DA2  21 2E7D     	LD	HL,COPY_SYS_TRK
 1932 0DA5  CD 1917     	CALL	PMSG
 1933 0DA8  CD 12A5     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1934                   
 1935 0DAB  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1936 0DAE  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1937 0DB1  1E 01       	LD	E,1			;Start with 1st sector 
 1938 0DB3  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1939                   ;
 1940 0DB6  CD 0F77     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1941 0DB9  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1942                   ;
 1943                   ;---					
 1944                   ;					;<<<<< WRITE TO Destination drive
 1945 0DBC  CD 11C2     	CALL	START_DRIVE_1		;Start the destination drive hardware (A side)
 1946 0DBF  CD 1213     	CALL	SET_SIDE		;Update the side hardware (A)
 1947 0DC2  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1948 0DC5  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1949                   
 1950 0DC8  3A 3929     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1951 0DCB  FD 77 00    	LD	(IY+TRK),A
 1952 0DCE  CD 0E70     	CALL	SEEK_TRACK_V
 1953 0DD1  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1954                   
 1955 0DD4  21 2E91     	LD	HL,WRITE_SYS_TRK
 1956 0DD7  CD 1917     	CALL	PMSG
 1957 0DDA  CD 12A5     	CALL	SHOW_TS_LOC		;Shows current (TRK,SIDE)
 1958                   
 1959 0DDD  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1960 0DE0  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1961 0DE3  1E 01       	LD	E,1			;Start with 1st sector 
 1962 0DE5  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1963                   ;
 1964 0DE8  CD 10C4     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1965 0DEB  C4 12B4     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1966                   ;
 1967 0DEE  CD 11F4     	CALL	SWAP_SIDES		;Sides swap check
 1968 0DF1  20 11       	JR	NZ,R_TRK_SOK		;If B side (NZ), same track
 1969                   ;					;Else see if more tracks are required
 1970 0DF3  3A 3929     	LD	A,(COPY_TRK)		;bump up a track
 1971 0DF6  3C          	INC	A
 1972 0DF7  32 3929     	LD	(COPY_TRK),A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  35
VF      Z80

 1973 0DFA  3A 3928     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1974 0DFD  3D          	DEC	A
 1975 0DFE  32 3928     	LD	(COPY_TRK_COUNT),A	
 1976 0E01  CA 0E0C     	JP	Z,DONE_SYS2
 1977                   ;
 1978 0E04              R_TRK_SOK:
 1979 0E04  CD 19D0     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1980 0E07  20 0F       	JR	NZ,DONE_SYS1		;Loop until abort or all tracks done
 1981 0E09  C3 0D8A     	JP	SYS_R_LOOP
 1982                   ;
 1983 0E0C              DONE_SYS2:				;We are done restore both drives
 1984 0E0C  3A 3912     	LD	A,(ERRORS_FLAG)		;Were there errors
 1985 0E0F  B7          	OR	A,A
 1986 0E10  20 13       	JR	NZ,ERROR_SYS3
 1987 0E12  21 2EA2     	LD	HL,DONE_SYS_MSG		;Announce we are finished
 1988 0E15  CD 1917     	CALL	PMSG
 1989 0E18              DONE_SYS1:
 1990 0E18  CD 11C2     	CALL	START_DRIVE_1		;Start the source drive hardware (A side)
 1991 0E1B  CD 0E2D     	CALL	HOME			;Will set TRK to 0
 1992 0E1E  C4 12B4     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1993 0E21  3A 391A     	LD	A,(CMD_STORE)		;So we dont pick up other menu items
 1994 0E24  C9          	RET				;Back to main menu	
 1995                   ;
 1996 0E25              ERROR_SYS3:
 1997 0E25  21 2F5F     	LD	HL,ERRORS_SEEN		;errors encountered
 1998 0E28  CD 1917     	CALL	PMSG
 1999 0E2B  18 EB       	JR	DONE_SYS1
 2000                   
 2001                   ;
 2002                   ;
 2003                   ;
 2004                   ;==============================================================================
 2005                   ;================== 1791/5 COMMAND ROUTINES ===================================
 2006                   ;==============================================================================
 2007                   ;
 2008                   ; SEND A RESTORE COMMAND FOR THE CURRENT DISK. 
 2009                   ; On return: Z if no errors. NZ if errors with errors in (ERSTAT)and [A]
 2010                   ; Note (TRK) IS set to 0, (IX+HW_BYTE) SIDE_BIT (7) is not changed
 2011                   ;
 2012 0E2D  3E 80       HOME:	LD	A,HOME_ERR_MASK		;Error mask for Type I RESTORE CMD
 2013 0E2F  32 391B     	LD	(ERMASK),A		;Save error mask for end/error routine
 2014 0E32  AF          	XOR	A,A
 2015 0E33  FD 77 00    	LD	(IY+TRK),A	
 2016 0E36  DB 64       HOME2:	IN	A,(STATUS)
 2017 0E38  E6 01       	AND	A,1
 2018 0E3A  20 FA       	JR	NZ,HOME2		;Wait until 1791/5 is ready
 2019 0E3C  CD 123C     	CALL	WAIT_OFF		;Disable Wait State Hardware (just in case it is on)
 2020 0E3F  3E 88       	LD A, 088H
 2021 0E41  D3 05       	OUT (DEBUG),A
 2022 0E43  3E 0C       	LD	A,RSCMD
 2023 0E45  32 391D     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2024 0E48  D3 64       	OUT	(CMD),A
 2025 0E4A  3E 99       	LD A, 099H
 2026 0E4C  D3 05       	OUT (DEBUG),A
 2027 0E4E  CD 1175     	CALL	END_ROUTINE		;Wait, check status and return
 2028 0E51  C9          	RET
 2029                   ;
 2030                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  36
VF      Z80

 2031                   ; SEND A HEAD STEP-IN COMMAND TO THE CURRENT DRIVE 
 2032                   ; On return: Z if no errors. NZ if errors with errors in (ERSTAT)and [A]
 2033                   ; Note (TRK) is NOT updated to new track position, (IX+HW_BYTE) SIDE_BIT (7) is unchanged
 2034                   ;
 2035 0E52              STEP_IN_CMD:
 2036 0E52  3E 90       	LD	A,SIN_ERR_MASK		;Error mask for Type I CMD
 2037 0E54  32 391B     	LD	(ERMASK),A		;Save error mask for end/error routine
 2038 0E57  3E 5C       	LD	A,STEPIN		;Send Step-in (with verify) CMD
 2039 0E59  32 391D     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2040 0E5C              STEP_IN2:
 2041 0E5C  DB 64       	IN	A,(STATUS)
 2042 0E5E  E6 01       	AND	A,1
 2043 0E60  20 FA       	JR	NZ,STEP_IN2		;Wait until 1791/5 is ready
 2044 0E62  CD 123C     	CALL	WAIT_OFF		;Disable Wait State Hardware (just in case it is on)
 2045 0E65  3E 5C       	LD	A,STEPIN
 2046 0E67  32 391D     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2047 0E6A  D3 64       	OUT	(CMD),A
 2048 0E6C  CD 1175     	CALL	END_ROUTINE		;Wait, check status and return
 2049 0E6F  C9          	RET
 2050                   ;
 2051                   ; Seek with track WITH verify. Assumes valid track in (TRK)
 2052                   ; On return: Z if no errors. NZ if errors, (ERSTAT)and [A] has errors 
 2053                   ; Note (TRK) is NOT updated to new track position
 2054                   ;
 2055 0E70              SEEK_TRACK_V:
 2056 0E70  3E 90       	LD	A,SK_ERR_MASK		;Error mask for Type I Seek CMD
 2057 0E72  32 391B     	LD	(ERMASK),A		;Save error mask for end/error routine
 2058 0E75  3E 1C       	LD	A,SKCMD			;Send seek (with verify) CMD
 2059 0E77  32 391D     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2060 0E7A  3E 02       	LD	A,SEEK_RETRY_MAX	;In case of errors will retry seeking
 2061 0E7C  32 3921     	LD	(SEEK_RT_COUNT),A	;a few times
 2062 0E7F  18 0F       	JR	SEEK_TRK
 2063                   
 2064                   ;
 2065                   ;
 2066                   ; Seek track with NO verify. Assumes valid track in (TRK)
 2067                   ; On return: Z if no errors. NZ if errors, (ERSTAT)and [A] has errors 
 2068                   ; Note (TRK) is NOT updated to new track position
 2069                   ;
 2070 0E81              SEEK_TRACK_NV:	
 2071 0E81  3E 90       	LD	A,SK_ERR_MASK		;Error mask for Type I Seek CMD
 2072 0E83  32 391B     	LD	(ERMASK),A		;Save error mask for end/error routine
 2073 0E86  3E 18       	LD	A,SKNCMD		;Send seek CMD ((with NO verify)
 2074 0E88  32 391D     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2075 0E8B  3E 02       	LD	A,SEEK_RETRY_MAX	;In case of errors will retry seeking
 2076 0E8D  32 3921     	LD	(SEEK_RT_COUNT),A	;a few times
 2077 0E90              SEEK_TRK:
 2078 0E90  DB 64       	IN	A,(STATUS)
 2079 0E92  E6 01       	AND	A,1
 2080 0E94  20 FA       	JR	NZ,SEEK_TRK		;wait until 1791/5 is ready
 2081 0E96  CD 123C     	CALL	WAIT_OFF		;Disable Wait State Hardware (in case it was on)
 2082 0E99  FD 7E 00    	LD	A,(IY+TRK)		;Send required track to 1791/5
 2083 0E9C  D3 67       	OUT	(DATA),A
 2084 0E9E  3A 391D     	LD	A,(CHIP_CMDSV)		;Was it a seek or seek_nv
 2085 0EA1  D3 64       	OUT	(CMD),A			;Send seek cmd		
 2086 0EA3  CD 1175     	CALL	END_ROUTINE		;Wait, check status and return
 2087 0EA6  C8          	RET	Z			;Return if no errors
 2088                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  37
VF      Z80

 2089 0EA7  3A 3921     	LD	A,(SEEK_RT_COUNT)
 2090 0EAA  3D          	DEC	A			;Retrys 2,1... Will reseek
 2091 0EAB  32 3921     	LD	(SEEK_RT_COUNT),A
 2092 0EAE  28 02       	JR	Z,BAD_SEEK
 2093 0EB0  18 DE       	JR	SEEK_TRK		;Try re-reading the sector
 2094 0EB2              BAD_SEEK:
 2095 0EB2  AF          	XOR	A,A
 2096 0EB3  3D          	DEC	A			;Set to NZ
 2097 0EB4  3A 391C     	LD	A,(ERSTAT)
 2098 0EB7  C9          	RET	
 2099                   ;
 2100                   ;
 2101                   ;
 2102                   ;
 2103                   ; Read an ID from the track. Assumes valid track in (TRK) 
 2104                   ; Note any Sector ID from the track will be obtained depending where the head falls
 2105                   ; The currently selected side at (SIDE) is read
 2106                   ;
 2107 0EB8  3E 9F       READ_ID:LD	A,ID_ERR_MASK
 2108 0EBA  32 391B     	LD	(ERMASK),A		;Store for error display
 2109 0EBD  DB 64       RDSC_1:	IN	A,(STATUS)
 2110 0EBF  E6 01       	AND	A,1
 2111 0EC1  20 FA       	JR	NZ,RDSC_1		;wait until 1791/5 is ready
 2112 0EC3  21 3914     	LD	HL,IDSV			;Will store the 6 bytes here
 2113 0EC6  01 0667     	LD	BC,600H+DATA		;6 bytes in B, Data port in C below
 2114 0EC9  CD 1243     	CALL	WAIT_ON			;Enable hardware wait states
 2115 0ECC  3E C4       	LD	A,RDACMD		;Send the Read Track ID CMD
 2116 0ECE  32 391D     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2117 0ED1  F3          	DI				;Just in case
 2118 0ED2  D3 64       	OUT	(CMD),A
 2119 0ED4  18 00       	JR	MM2			;Slight delay
 2120 0ED6  18 00       MM2:	JR	MM3
 2121 0ED8  ED B2       MM3:	INIR				;Block input 6 bytes
 2122 0EDA  FB          	EI
 2123 0EDB  CD 1175     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status 
 2124 0EDE  C9          	RET				;and return
 2125                   ;	
 2126                   ;
 2127                   ;
 2128                   ; <<< CORE SECTOR READ ROUTINE>>>. Assumes valid track in (TRK)&(SEC) 
 2129                   ; Address in (TADDR). The currently selected side at (SIDE) is setup
 2130                   ; Note: (TADDR) is unaltered, (DMA_NEXT) is updated for repetative calls to this routine
 2131                   ;
 2132 0EDF              READ_SECTOR:
 2133 0EDF  3E BF       	LD	A,RS_ERR_MASK	;Error mask from 1791/5 after read is done
 2134 0EE1  32 391B     	LD	(ERMASK),A
 2135 0EE4  3E 04       	LD	A,SEC_RETRY_MAX		;In case of errors will retry reading sector 
 2136 0EE6  32 3920     	LD	(SEC_RT_COUNT),A	;a few times
 2137 0EE9              AGAIN_RD:
 2138 0EE9  2A 0040     	LD	HL,(TADDR)	;Deposit sector info here
 2139 0EEC  FD 7E 02    	LD	A,(IY+SCTR)
 2140 0EEF  D3 66       	OUT	(SECTOR),A
 2141 0EF1  0E 67       	LD	C,DATA		;C = DATA port for INIR below
 2142 0EF3  CD 1243     	CALL	WAIT_ON
 2143                   
 2144         0000           if	CHIP_1791
 2147                        endif
 2148                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  38
VF      Z80

 2149         0001           if	CHIP_1795
 2150 0EF6  3E 88       	LD	A,RDCMD95	;Read sector command to 1795
 2151 0EF8  32 391D     	LD	(CHIP_CMDSV),A	;store cmd here for Error display (if any)
 2152 0EFB  FD B6 01    	OR	A,(IY+SIDE)	;If B side, need to OR in bit 1 (02H).
 2153                        endif
 2154                   	
 2155 0EFE  F3          	DI
 2156 0EFF  D3 64       	OUT	(CMD),A
 2157 0F01  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2158 0F04  06 80       	LD	B,NBYTES
 2159 0F06  B7          	OR	A,A		;Block input [B] Bytes->[HL] from port [C]
 2160 0F07  28 10       	JR	Z,R128256	;Do 128 byte read
 2161 0F09  06 00       	LD	B,0
 2162 0F0B  FE 01       	CP	A,1
 2163 0F0D  28 0A       	JR	Z,R128256	;Do 256 byte read
 2164 0F0F  FE 02       	CP	A,2
 2165 0F11  28 04       	JR	Z,R512		;Do 512 byte read
 2166 0F13  ED B2       	INIR			;Must be 1024 byte sectors so 4X256		
 2167 0F15  ED B2       	INIR
 2168 0F17  ED B2       R512:	INIR			;256X2 bytes
 2169 0F19  ED B2       R128256:INIR			;128 or 256 bytes (B=128 or 0)
 2170 0F1B  FB          	EI
 2171 0F1C  22 3926     	LD	(DMA_NEXT),HL	;Store next byte of DMA
 2172 0F1F  CD 1175     	CALL	END_ROUTINE	;Wait, turn off wait hware, check status and return
 2173 0F22  C8          	RET	Z		;RET Z if all is OK
 2174                   				;Read failed. Do we retry again
 2175 0F23  3A 3913     	LD	A,(CRTDISP)	;Check if detailed display flag is on
 2176 0F26  B7          	OR	A,A
 2177 0F27  28 12       	JR	Z,MM6
 2178 0F29  21 2888     	LD	HL,SEC_READ_RETRY     ;'Re-reading SECTOR XXH.'
 2179 0F2C  CD 1917     	CALL	PMSG
 2180 0F2F  FD 7E 02    	LD	A,(IY+SCTR)
 2181 0F32  CD 199D     	CALL	PACC
 2182 0F35  21 2529     	LD	HL,H_MSG
 2183 0F38  CD 1917     	CALL	PMSG
 2184 0F3B  3A 3920     MM6:	LD	A,(SEC_RT_COUNT)
 2185 0F3E  3D          	DEC	A			;Retrys 4,3 2,1... Will reseek on 3rd re-read try
 2186 0F3F  32 3920     	LD	(SEC_RT_COUNT),A
 2187 0F42  28 2D       	JR	Z,BAD_RD
 2188 0F44  FE 02       	CP	A,2
 2189 0F46  20 A1       	JR	NZ,AGAIN_RD		;Try re-reading the sector
 2190 0F48  3A 3913     	LD	A,(CRTDISP)		;Check if detailed display flag is on
 2191 0F4B  B7          	OR	A,A
 2192 0F4C  28 12       	JR	Z,MM7B
 2193 0F4E  21 28B2     	LD	HL,SEC_RH_RETRY		;'Re-Seeking head for re-reading SECTOR XXH.'
 2194 0F51  CD 1917     	CALL	PMSG
 2195 0F54  FD 7E 02    	LD	A,(IY+SCTR)
 2196 0F57  CD 199D     	CALL	PACC
 2197 0F5A  21 2529     	LD	HL,H_MSG
 2198 0F5D  CD 1917     	CALL	PMSG
 2199 0F60              MM7B:
 2200 0F60  FD 7E 00    	LD	A,(IY+TRK)	;If it failed a second time, home, reseek and try again
 2201 0F63  F5          	PUSH	AF		;Save TRK because HOME sets it to 0
 2202 0F64  CD 0E2D     	CALL	HOME		;Restore to track 0 (Note assumes TRK is unchanged in HOME)
 2203 0F67  F1          	POP	AF
 2204 0F68  FD 77 00    	LD	(IY+TRK),A
 2205 0F6B  CD 0E70     	CALL	SEEK_TRACK_V	;Re-seek to track
 2206 0F6E  C3 0EE9     	JP	AGAIN_RD
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  39
VF      Z80

 2207 0F71  AF          BAD_RD	XOR	A,A
 2208 0F72  3D          	DEC	A		;Set to NZ
 2209 0F73  3A 391C     	LD	A,(ERSTAT)
 2210 0F76  C9          	RET	
 2211                   ;
 2212                   ;
 2213                   ; Multi_sector Read of ALL sectors on a TRACK. Assumes head is over relevent track in (TRK)
 2214                   ; Will place data at (TADDR). The currently selected side at (SIDE) is read.
 2215                   ; (DMA_NEXT) is updated for repetative calls to this routine
 2216                   ; [D] = the number of sectors (Max IX+NSCTRS), [E] = the starting sector number.
 2217                   ; Note this can be easily modified for CPM3 to multi sector write by adjusting [D] & [E]. 
 2218                   ; Also note, actual timing for data I/O is quite tight for slow CPU's. Thus the strange layout.
 2219                   ;
 2220 0F77              MULTI_SEC_RD:
 2221 0F77  3E AF       	LD	A,MRS_ERR_MASK		;Setup for error checking
 2222 0F79  32 391B     	LD	(ERMASK),A
 2223 0F7C  2A 0040     	LD	HL,(TADDR)
 2224 0F7F  FD 7E 00    	LD	A,(IY+TRK)
 2225 0F82  D3 65       	OUT	(TRACK),A
 2226 0F84  7B          	LD	A,E			;first sector (usually 1)
 2227 0F85  FD 77 02    	LD	(IY+SCTR),A		;For error dump (Actully error could be any sector on the track)
 2228 0F88  D3 66       	OUT	(SECTOR),A
 2229 0F8A  0E 67       	LD	C,DATA			;C = DATA port for INIR below
 2230                   
 2231 0F8C  CD 1243     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2232                   
 2233         0000          if	CHIP_1791
 2236                       endif
 2237                   
 2238         0001          if	CHIP_1795
 2239 0F8F  3E 88       	LD	A,RDCMD95		;Read sector command to 1795
 2240 0F91  32 391D     	LD	(CHIP_CMDSV),A		;store cmd here for Error display (if any)
 2241 0F94  FD B6 01    	OR	A,(IY+SIDE)		;If B side, need to OR in bit 1 (02H).
 2242                        endif
 2243                   
 2244 0F97  CB E7       	SET	4,A			;Set "Multi sec bit"
 2245 0F99  F5          	PUSH	AF			;Store until we get sec size info
 2246 0F9A  F3          	DI				;Disable Interrupts
 2247                   ;
 2248 0F9B  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2 or 1024=3 byte sector size
 2249 0F9E  B7          	OR	A,A			;Block input [B] Bytes->[HL] from port [C]
 2250 0F9F  28 0A       	JR	Z,MR128			;Do 128 byte read
 2251 0FA1  FE 01       	CP	A,1
 2252 0FA3  28 14       	JR	Z,MR256			;Do 256 byte read
 2253 0FA5  FE 02       	CP	A,2
 2254 0FA7  28 1E       	JR	Z,MR512			;Do 512 byte read
 2255 0FA9  18 2C       	JR	MR1K			;Must be 1K sectors
 2256                   
 2257 0FAB  06 80       MR128:	LD	B,128
 2258 0FAD  F1          	POP	AF
 2259 0FAE  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2260 0FB0  ED B2       MR128A:	INIR				;128 bytes (B=128)
 2261 0FB2  06 80       	LD	B,128
 2262 0FB4  15          	DEC	D
 2263 0FB5  20 F9       	JR	NZ,MR128A
 2264 0FB7  18 32       	JR	DONE_MR
 2265                   
 2266 0FB9  06 00       MR256:	LD	B,0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  40
VF      Z80

 2267 0FBB  F1          	POP	AF
 2268 0FBC  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2269 0FBE  ED B2       MR256A:	INIR				;256 bytes 
 2270 0FC0  06 00       	LD	B,0
 2271 0FC2  15          	DEC	D
 2272 0FC3  20 F9       	JR	NZ,MR256A
 2273 0FC5  18 24       	JR	DONE_MR
 2274                   
 2275 0FC7  06 00       MR512:	LD	B,0
 2276 0FC9  F1          	POP	AF
 2277 0FCA  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2278 0FCC  ED B2       MR512A:	INIR				;512 = 256x2
 2279 0FCE  ED B2       	INIR
 2280 0FD0  06 00       	LD	B,0
 2281 0FD2  15          	DEC	D
 2282 0FD3  20 F7       	JR	NZ,MR512A
 2283 0FD5  18 14       	JR	DONE_MR
 2284                   
 2285 0FD7  06 00       MR1K:	LD	B,0
 2286 0FD9  F1          	POP	AF
 2287 0FDA  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2288 0FDC  ED B2       MR1KA:	INIR				;1K = 256x4
 2289 0FDE  ED B2       	INIR
 2290 0FE0  ED B2       	INIR
 2291 0FE2  ED B2       	INIR
 2292 0FE4  06 00       	LD	B,0
 2293 0FE6  15          	DEC	D
 2294 0FE7  20 F3       	JR	NZ,MR1KA
 2295 0FE9  18 00       	JR	DONE_MR
 2296                   
 2297 0FEB              DONE_MR:
 2298 0FEB  FB          	EI
 2299 0FEC  22 3926     	LD	(DMA_NEXT),HL		;Store "next location". Used by other routines
 2300 0FEF  CD 1175     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2301 0FF2  C8          	RET	Z			;RET Z if all is OK
 2302 0FF3  AF          	XOR	A,A
 2303 0FF4  3D          	DEC	A			;Set to NZ
 2304 0FF5  3A 391C     	LD	A,(ERSTAT)		;Return with error bits
 2305 0FF8  C9          	RET	
 2306                   ;
 2307                   ;
 2308                   ; Read Track. Assumes head is over relevent track in (TRK)
 2309                   ; Will place data at (TADDR)
 2310                   ; The currently selected side at (SIDE) is read
 2311                   ; The total size of a  track in bytes is in [DE]
 2312                   
 2313 0FF9              READ_TRACK:
 2314 0FF9  3E 80       	LD	A,RT_ERR_MASK		;Setup for error checking
 2315 0FFB  32 391B     	LD	(ERMASK),A
 2316 0FFE  2A 0040     	LD	HL,(TADDR)
 2317 1001  FD 7E 00    	LD	A,(IY+TRK)
 2318 1004  D3 65       	OUT	(TRACK),A
 2319 1006  CD 1243     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2320 1009  3E E4       	LD	A,RDTCMD		;setup for 179x read track command
 2321 100B  32 391D     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2322 100E  F3          	DI				;Disable Interrupts
 2323 100F  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port
 2324 1011  18 00       	JR	MM7			;Slight delay
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  41
VF      Z80

 2325 1013  18 00       MM7:	JR	R_LOOP
 2326                   
 2327 1015  DB 67       R_LOOP:	IN	A,(DATA)		;Get all track bytes
 2328 1017  77          	LD	(HL),A
 2329 1018  23          	INC	HL
 2330 1019  1B          	DEC	DE			;Track size is in DE
 2331 101A  7B          	LD	A,E
 2332 101B  B7          	OR	A,A
 2333 101C  20 F7       	JR	NZ,R_LOOP
 2334 101E  B2          	OR	A,D
 2335 101F  20 F4       	JR	NZ,R_LOOP		;Have we sent DE bytes yet
 2336 1021  FB          	EI
 2337 1022  CD 1175     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2338 1025  C8          	RET	Z			;RET Z if all is OK
 2339 1026  AF          	XOR	A,A
 2340 1027  3D          	DEC	A			;Set to NZ
 2341 1028  3A 391C     	LD	A,(ERSTAT)		;Return with error bits
 2342 102B  C9          	RET	
 2343                   ;
 2344                   ;
 2345                   ; <<< CORE SECTOR WRITE ROUTINE >>> . Assumes valid track in (TRK) & (SEC) 
 2346                   ; Address in (TADDR). The currently selected side at (SIDE) is setup
 2347                   ; Note: (TADDR) is unaltered, (DMA_NEXT) is updated for repetative calls to this routine
 2348                   ;
 2349 102C              WRITE_SECTOR:
 2350 102C  3E EF       	LD	A,WS_ERR_MASK	;Error mask from 1791/5 after read is done
 2351 102E  32 391B     	LD	(ERMASK),A
 2352 1031  3E 04       	LD	A,SEC_RETRY_MAX	;In case of errors will retry reading sector 
 2353 1033  32 3920     	LD	(SEC_RT_COUNT),A	;a few times
 2354 1036              AGAIN_WR:
 2355 1036  2A 0040     	LD	HL,(TADDR)	;Deposit sector info here
 2356 1039  FD 7E 02    	LD	A,(IY+SCTR)
 2357 103C  D3 66       	OUT	(SECTOR),A
 2358 103E  0E 67       	LD	C,DATA		;C = DATA port for OTIR below
 2359 1040  CD 1243     	CALL	WAIT_ON
 2360                   
 2361         0000           if	CHIP_1791
 2364                        endif
 2365                   
 2366         0001           if	CHIP_1795
 2367 1043  3E A8       	LD	A,WRCMD95	;Read sector command to 1795
 2368 1045  32 391D     	LD	(CHIP_CMDSV),A	;store cmd here for Error display (if any)
 2369 1048  FD B6 01    	OR	A,(IY+SIDE)	;If B side, need to OR in bit 1 (02H).
 2370                         endif
 2371                   
 2372 104B  F3          	DI
 2373 104C  D3 64       	OUT	(CMD),A
 2374 104E  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2375 1051  06 80       	LD	B,NBYTES
 2376 1053  B7          	OR	A,A		;Block input [B] Bytes->[HL] from port [C]
 2377 1054  28 10       	JR	Z,W128256	;Do 128 byte read
 2378 1056  06 00       	LD	B,0
 2379 1058  FE 01       	CP	A,1
 2380 105A  28 0A       	JR	Z,W128256	;Do 256 byte read
 2381 105C  FE 02       	CP	A,2
 2382 105E  28 04       	JR	Z,W512		;Do 512 byte read
 2383 1060  ED B3       	OTIR			;Must be 1024 byte sectors so 4X256		
 2384 1062  ED B3       	OTIR
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  42
VF      Z80

 2385 1064  ED B3       W512:	OTIR			;256X2 bytes
 2386 1066  ED B3       W128256:OTIR			;128 or 256 bytes (B=128 or 0)
 2387 1068  FB          	EI
 2388 1069  22 3926     	LD	(DMA_NEXT),HL	;Store next byte of DMA (for multiple sec R/W's)
 2389 106C  CD 1175     	CALL	END_ROUTINE	;Wait, turn off wait hware, check status and return
 2390 106F  C8          	RET	Z		;RET Z if all is OK
 2391                   				;Read failed. Do we retry again
 2392 1070  3A 3913     	LD	A,(CRTDISP)	;Check if detailed display flag is on
 2393 1073  B7          	OR	A,A
 2394 1074  28 12       	JR	Z,MM6W
 2395 1076  21 289D     	LD	HL,SEC_WR_RETRY  ;'Re-writing SECTOR XXH.'
 2396 1079  CD 1917     	CALL	PMSG
 2397 107C  FD 7E 02    	LD	A,(IY+SCTR)
 2398 107F  CD 199D     	CALL	PACC
 2399 1082  21 2529     	LD	HL,H_MSG
 2400 1085  CD 1917     	CALL	PMSG
 2401 1088  3A 3920     MM6W:	LD	A,(SEC_RT_COUNT)
 2402 108B  3D          	DEC	A			;Retrys 4,3 2,1... Will reseek on 3rd re-read try
 2403 108C  32 3920     	LD	(SEC_RT_COUNT),A
 2404 108F  28 2D       	JR	Z,BAD_WR
 2405 1091  FE 02       	CP	A,2
 2406 1093  20 A1       	JR	NZ,AGAIN_WR		;Try re-reading the sector
 2407 1095  3A 3913     	LD	A,(CRTDISP)		;Check if detailed display flag is on
 2408 1098  B7          	OR	A,A
 2409 1099  28 12       	JR	Z,MM7W
 2410 109B  21 28DB     	LD	HL,SEC_WH_RETRY		;'Re-Seeking head for re-reading SECTOR XXH.'
 2411 109E  CD 1917     	CALL	PMSG
 2412 10A1  FD 7E 02    	LD	A,(IY+SCTR)
 2413 10A4  CD 199D     	CALL	PACC
 2414 10A7  21 2529     	LD	HL,H_MSG
 2415 10AA  CD 1917     	CALL	PMSG
 2416 10AD              MM7W:
 2417 10AD  FD 7E 00    	LD	A,(IY+TRK)	;If it failed a second time, home, reseek and try again
 2418 10B0  F5          	PUSH	AF
 2419 10B1  CD 0E2D     	CALL	HOME		;Restore to track 0 
 2420 10B4  F1          	POP	AF
 2421 10B5  FD 77 00    	LD	(IY+TRK),A
 2422 10B8  CD 0E70     	CALL	SEEK_TRACK_V	;Re-seek to track
 2423 10BB  C3 0EE9     	JP	AGAIN_RD
 2424 10BE  AF          BAD_WR	XOR	A,A
 2425 10BF  3D          	DEC	A		;Set to NZ
 2426 10C0  3A 391C     	LD	A,(ERSTAT)	;Return with error bits
 2427 10C3  C9          	RET	
 2428                   ;
 2429                   ; Multi_sector Write of multiple sectors on a TARCK. Assumes head is over relevent track in (TRK)
 2430                   ; Will place data at (TADDR) The currently selected side at (SIDE) is read
 2431                   ; (DMA_NEXT) is updated for repetative calls to this routine.
 2432                   ; [D] contains the number of sectors (Max IX+NSCTRS), [E] the starting sector number.
 2433                   ; Note this can be easily modified for CPM3 to multi sector write by adjusting [D] & [E]. 
 2434                   ; Also note, actual timing for data I/O is quite tight for slow CPU's. Thus the strange layout.
 2435                   ;
 2436 10C4              MULTI_SEC_WR:
 2437 10C4  3E EF       	LD	A,WS_ERR_MASK		;Setup for error checking
 2438 10C6  32 391B     	LD	(ERMASK),A
 2439 10C9  2A 0040     	LD	HL,(TADDR)
 2440 10CC  FD 7E 00    	LD	A,(IY+TRK)
 2441 10CF  D3 65       	OUT	(TRACK),A
 2442 10D1  7B          	LD	A,E			;first sector (usually 1)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  43
VF      Z80

 2443 10D2  FD 77 02    	LD	(IY+SCTR),A		;For error dump (Actully error could be any sector on the track)
 2444 10D5  D3 66       	OUT	(SECTOR),A
 2445 10D7  0E 67       	LD	C,DATA			;C = DATA port for INIR below
 2446                   
 2447 10D9  CD 1243     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2448                   
 2449         0000          if	CHIP_1791
 2452                        endif
 2453                   
 2454         0001           if	CHIP_1795
 2455 10DC  3E A8       	LD	A,WRCMD95		;Read sector command to 1795
 2456 10DE  32 391D     	LD	(CHIP_CMDSV),A		;store cmd here for Error display (if any)
 2457 10E1  FD B6 01    	OR	A,(IY+SIDE)		;If B side need to OR in bit 1 (02H).
 2458                        endif
 2459                   
 2460 10E4  CB E7       	SET	4,A			;Multi sec bit
 2461 10E6  F5          	PUSH	AF			;Store for now
 2462 10E7  F3          	DI				;Disable Interrupts
 2463                   
 2464 10E8  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2 or 1024=3 byte sector size
 2465 10EB  B7          	OR	A,A			;Block input [B] Bytes->[HL] from port [C]
 2466 10EC  28 0A       	JR	Z,MW128			;Do 128 byte read
 2467 10EE  FE 01       	CP	A,1
 2468 10F0  28 14       	JR	Z,MW256			;Do 256 byte read
 2469 10F2  FE 02       	CP	A,2
 2470 10F4  28 1E       	JR	Z,MW512			;Do 512 byte read
 2471 10F6  18 2C       	JR	MW1K			;Must be 1K sectors
 2472                   
 2473 10F8  06 80       MW128:	LD	B,128			;Note the code is spread out like this with
 2474 10FA  F1          	POP	AF			;each sector having its own module because of timing
 2475 10FB  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2476 10FD  ED B3       MW128A:	OTIR				;128 bytes (B=128)
 2477 10FF  06 80       	LD	B,128
 2478 1101  15          	DEC	D
 2479 1102  20 F9       	JR	NZ,MW128A
 2480 1104  18 32       	JR	DONE_MW
 2481                   
 2482 1106  06 00       MW256:	LD	B,0
 2483 1108  F1          	POP	AF
 2484 1109  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2485 110B  ED B3       MW256A:	OTIR				;256 bytes 
 2486 110D  06 00       	LD	B,0
 2487 110F  15          	DEC	D
 2488 1110  20 F9       	JR	NZ,MW256A
 2489 1112  18 24       	JR	DONE_MW
 2490                   
 2491 1114  06 00       MW512:	LD	B,0
 2492 1116  F1          	POP	AF
 2493 1117  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2494 1119  ED B3       MW512A:	OTIR				;512 = 256x2
 2495 111B  ED B3       	OTIR
 2496 111D  06 00       	LD	B,0
 2497 111F  15          	DEC	D
 2498 1120  20 F7       	JR	NZ,MW512A
 2499 1122  18 14       	JR	DONE_MW
 2500                   
 2501 1124  06 00       MW1K:	LD	B,0
 2502 1126  F1          	POP	AF
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  44
VF      Z80

 2503 1127  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2504 1129  ED B3       MW1KA:	OTIR				;1K = 256x4
 2505 112B  ED B3       	OTIR
 2506 112D  ED B3       	OTIR
 2507 112F  ED B3       	OTIR
 2508 1131  06 00       	LD	B,0
 2509 1133  15          	DEC	D
 2510 1134  20 F3       	JR	NZ,MW1KA
 2511 1136  18 00       	JR	DONE_MW
 2512                   
 2513 1138              DONE_MW:
 2514 1138  FB          	EI
 2515 1139  22 3926     	LD	(DMA_NEXT),HL		;Store "next" location. Used by other routines
 2516 113C  CD 1175     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2517 113F  C8          	RET	Z			;RET Z if all is OK
 2518 1140  AF          	XOR	A,A
 2519 1141  3D          	DEC	A			;Set to NZ
 2520 1142  3A 391C     	LD	A,(ERSTAT)		;Return with error bits
 2521 1145  C9          	RET	
 2522                   ;
 2523                   ;
 2524                   ;	
 2525                   ; Write Track. Assumes head is over relevent track in (TRK)
 2526                   ; Track data at (TADDR)
 2527                   ; The currently selected side at (SIDE) is written to
 2528                   ; The total size of a track in bytes is in [DE]
 2529                   ;
 2530 1146              WRITE_TRACK:
 2531 1146  3E E0       	LD	A,WT_ERR_MASK		;Setup for error checking
 2532 1148  32 391B     	LD	(ERMASK),A
 2533 114B  2A 0040     	LD	HL,(TADDR)
 2534 114E  FD 7E 00    	LD	A,(IY+TRK)
 2535 1151  D3 65       	OUT	(TRACK),A
 2536 1153  CD 1243     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2537 1156  3E F4       	LD	A,WRTCMD		;setup for 179x WRITE track command
 2538 1158  32 391D     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2539 115B  F3          	DI				;Disable Interrupts
 2540 115C  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port
 2541 115E  7E          W_LOOP:	LD	A,(HL)
 2542 115F  D3 67       	OUT	(DATA),A		;Send all track bytes
 2543 1161  23          	INC	HL
 2544 1162  1B          	DEC	DE
 2545 1163  7B          	LD	A,E
 2546 1164  B7          	OR	A,A
 2547 1165  20 F7       	JR	NZ,W_LOOP
 2548 1167  B2          	OR	A,D
 2549 1168  20 F4       	JR	NZ,W_LOOP	;Have we sent DE bytes yet
 2550 116A  FB          	EI
 2551 116B  CD 1175     	CALL	END_ROUTINE	;Wait,  turn off wait hware, check status and return
 2552 116E  C8          	RET	Z		;RET Z if all is OK
 2553 116F  AF          	XOR	A,A
 2554 1170  3D          	DEC	A		;Set to NZ
 2555 1171  3A 391C     	LD	A,(ERSTAT)
 2556 1174  C9          	RET	
 2557                   ;
 2558                   ;
 2559                   ; END Routine comes after each Type I command is completed. It waits for the 1791/5 
 2560                   ; chip to time out then switches off the wait state generator and checks for errors. 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  45
VF      Z80

 2561                   ; Returns Z if no errors, otherewise NZ with error in (ERSTAT). If chip gets hung waiting
 2562                   ; for status it forces a 1791/5 Interrupt CMD after ~ 5 seconds.  This is usually due to
 2563                   ; a hardware problem.
 2564                   ;
 2565 1175              END_ROUTINE:
 2566 1175  CD 11E2     	CALL	DELAY		;Delay for hardware
 2567 1178  C5          	PUSH	BC		;Setup a loop count
 2568 1179  D5          	PUSH	DE
 2569 117A  E5          	PUSH	HL
 2570 117B  01 0000     	LD	BC,0
 2571 117E  1E 05       	LD	E,STATUS_DELAY	;time out about 5 seconds
 2572 1180  DB 64       ENDR2:	IN	A,(STATUS)	;Wait until chip is not busy
 2573 1182  E6 01       	AND	A,1
 2574 1184  28 25       	JR	Z,ENDR2_OK
 2575 1186  10 F8       	DJNZ	ENDR2		;Try for ~5 seconds
 2576 1188  05          	DEC	B
 2577 1189  0D          	DEC	C
 2578 118A  20 F4       	JR	NZ,ENDR2
 2579 118C  05          	DEC	B
 2580 118D  0D          	DEC	C
 2581 118E  1D          	DEC	E
 2582 118F  20 EF       	JR	NZ,ENDR2
 2583 1191  CD 123C     	CALL	WAIT_OFF	;Disable Hardware wait states
 2584 1194  21 2C09     	LD	HL,TIMEOUT_ERR
 2585 1197  CD 1917     	CALL	PMSG
 2586 119A  CD 17CE     	CALL	SHOW_STAT_BITS
 2587 119D  32 391C     	LD	(ERSTAT),A	
 2588 11A0  CD 1934     	CALL	ZCRLF
 2589 11A3  CD 124A     	CALL	FRCINT
 2590 11A6  E1          	POP	HL
 2591 11A7  D1          	POP	DE
 2592 11A8  C1          	POP	BC
 2593 11A9  18 11       	JR	ENDR3
 2594 11AB              ENDR2_OK:
 2595 11AB  E1          	POP	HL
 2596 11AC  D1          	POP	DE
 2597 11AD  C1          	POP	BC
 2598 11AE  CD 123C     	CALL	WAIT_OFF	;Disable Hardware wait states
 2599 11B1  DB 64       	IN	A,(STATUS)	;(May already be off anyway for Seeks etc)
 2600 11B3  57          	LD	D,A
 2601 11B4  3A 391B     	LD	A,(ERMASK)	;Error mask was stored here
 2602 11B7  A2          	AND	A,D
 2603 11B8  32 391C     	LD	(ERSTAT),A	;Save error status for error routine
 2604 11BB  C8          	RET	Z		;RET Z if all is OK
 2605 11BC  AF          ENDR3:	XOR	A,A
 2606 11BD  3D          	DEC	A		;Set to NZ
 2607 11BE  3A 391C     	LD	A,(ERSTAT)
 2608 11C1  C9          	RET	
 2609                   ;
 2610                   ;
 2611                   ;
 2612                   ;
 2613                   ; SELECT DRIVE IN HARDWARE, WILL BE THE NEW CURRENT DRIVE 
 2614                   ; (IX+HW_BYTE) points to relevent drive selection, density and 
 2615                   ; side(s) info for the current disk. Note: Sets head to Side A - ALWAYS
 2616                   ;
 2617 11C2              START_DRIVE_1:
 2618 11C2  3A 0046     	LD	A,(DRIVE_1)	;Get the drive selection bit
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  46
VF      Z80

 2619 11C5  18 03       	JR	START_DR
 2620                   
 2621 11C7              START_DRIVE_2:
 2622 11C7  3A 0047     	LD	A,(DRIVE_2)	;Get the drive selection bit
 2623 11CA              START_DR:
 2624 11CA  DD B6 02    	OR	A,(IX+HW_BYTE)	;OR in the density,side and size bits
 2625 11CD  32 0048     	LD	(IOBYTE),A	;For diagnostic display	
 2626 11D0  E6 7F       	AND	A,7FH		;Strip off the current side bit flag of (IOBYTE)
 2627 11D2  2F          	CPL			;Hardware is inverted
 2628 11D3  CB E7       	SET	4,A		;Force to side A
 2629 11D5  D3 63       	OUT	(SELECT),A
 2630 11D7  CD 11E2     	CALL	DELAY
 2631 11DA  DB 64       RDYCK:	IN	A,(STATUS)	;Drive select delay
 2632 11DC  E6 80       	AND	80H
 2633 11DE  C2 11DA     	JP	NZ,RDYCK	;Return when ready
 2634 11E1  C9          	RET
 2635                   ;
 2636                   ; Delay for drive select hardware. Different for 8" and 5" drives
 2637                   ;
 2638 11E2  DD CB 02 6E DELAY:	BIT	5,(IX+HW_BYTE)	;8" or 5"
 2639 11E6  3E 27       	LD	A,39
 2640 11E8  28 02       	JR	Z,DELAY1  
 2641 11EA  3E 3C       	LD	A,60
 2642 11EC  06 00       DELAY1:	LD	B,0
 2643 11EE  10 FE       M0:	DJNZ	M0
 2644 11F0  3D          	DEC	A
 2645 11F1  20 F9       	JR	NZ,DELAY1  
 2646 11F3  C9          	RET
 2647                   ;	
 2648                   ; This routine switches the active side of the current disk.
 2649                   ; Returns Z if no sides OR new side is A, NZ if new side is B. 
 2650                   ;
 2651 11F4              SWAP_SIDES:
 2652 11F4  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
 2653 11F8  C8          	RET	Z			;If 1 sided then return Z
 2654                   
 2655 11F9  FD 7E 01    	LD	A,(IY+SIDE)
 2656 11FC  B7          	OR	A,A			;If 0 we have done A side now do B
 2657 11FD  28 09       	JR	Z,GOTO_B_SIDE1		;switch over to B side
 2658 11FF  AF          	XOR	A,A
 2659 1200  FD 77 01    	LD	(IY+SIDE),A
 2660 1203  CD 1213     	CALL	SET_SIDE		;update the hardware
 2661 1206  AF          	XOR	A,A
 2662 1207  C9          	RET				;Return Z
 2663 1208              GOTO_B_SIDE1:
 2664 1208  3E 02       	LD	A,02H
 2665 120A  FD 77 01    	LD	(IY+SIDE),A	
 2666 120D  CD 1213     	CALL	SET_SIDE		;Update the hardware	
 2667 1210  AF          	XOR	A,A
 2668 1211  3D          	DEC	A
 2669 1212  C9          	RET				;Returns NZ
 2670                   ;
 2671                   ;
 2672                   ; SELECT DRIVE SIDE IN HARDWARE
 2673                   ; Set side for sector R/W if different than current side
 2674                   ; (SIDE) = 0 if A side, (SIDE)= 02H if B side.
 2675                   ; Note Hardware bit 7 of HW_BYTE is updated here!
 2676                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  47
VF      Z80

 2677 1213              SET_SIDE:
 2678 1213  DD 7E 02    	LD	A,(IX+HW_BYTE)	;Get current side info
 2679 1216  CB 67       	BIT	4,A		;Is it a 1 or 2 sided disk
 2680 1218  C8          	RET	Z		;Return if single sided
 2681                   
 2682 1219  FD 7E 01    	LD	A,(IY+SIDE)	;Which side do we want. (0 for A, 02H for B)
 2683 121C  B7          	OR	A,A
 2684 121D  20 0C       	JR	NZ,SET_HW_B
 2685 121F  DB 63       	IN	A,(SELECT)	;get hardware selection
 2686 1221  CB E7       	SET	4,A		;Port hardware for side selection (1=A, 0=B)
 2687 1223  D3 63       	OUT	(SELECT),A	;Select side A in hardware (inverted)
 2688 1225  DD CB 02 BE 	RES	7,(IX+HW_BYTE)	;Set to side to A (Will show up in IOBYTE info)
 2689 1229  18 0A       	JR	DONE_SET_SIDES
 2690 122B              SET_HW_B:
 2691 122B  DB 63       	IN	A,(SELECT)	;get hardware selection
 2692 122D  CB A7       	RES	4,A		;Port hardware for side selection (1=A, 0=B)
 2693 122F  D3 63       	OUT	(SELECT),A	;Select side B in hardware
 2694 1231  DD CB 02 FE 	SET	7,(IX+HW_BYTE)	;Set to side to B (Will show up in IOBYTE info)
 2695                   ;
 2696 1235              DONE_SET_SIDES:
 2697 1235  C5          	PUSH	BC
 2698 1236  06 FF       	LD	B,0FFH		;Slight delay for hardware
 2699 1238  10 FE       DELYS:	DJNZ	DELYS
 2700 123A  C1          	POP	BC
 2701 123B  C9          	RET
 2702                   ;
 2703                   ;
 2704                   ;
 2705                   ;
 2706                   ; Turn on or off the hardware wait state generator. This hardware stops and starts the CPU
 2707                   ; as bytes are read/written to the 179x/Disk
 2708                   ;
 2709                   ;	DISABLE WAIT STATES
 2710 123C              WAIT_OFF:
 2711 123C  DB 63       	IN	A,(SELECT)
 2712 123E  F6 80       	OR	80H
 2713 1240  D3 63       	OUT	(SELECT),A
 2714 1242  C9          	RET
 2715                   ;
 2716                   ;	ENABLE WAIT STATES
 2717 1243              WAIT_ON:
 2718 1243  DB 63       	IN	A,(SELECT)
 2719 1245  E6 7F       	AND	7FH
 2720 1247  D3 63       	OUT	(SELECT),A
 2721 1249  C9          	RET
 2722                   ;
 2723                   ;
 2724                   ;	FORCE CHIP INTERUPT
 2725 124A  3E D0       FRCINT:	LD	A,0D0H
 2726 124C  D3 64       	OUT	(CMD),A
 2727 124E  3E 0A       	LD	A,10
 2728 1250  3D          FRC1:	DEC	A
 2729 1251  20 FD       	JR	NZ,FRC1
 2730 1253  DB 64       	IN	A,(STATUS)
 2731 1255  C9          	RET
 2732                   ;
 2733                   ;
 2734                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  48
VF      Z80

 2735                   ; General routine to show the current location of the active disk head.
 2736                   ; Will display track, sector and side if two sided drive/disk
 2737                   ; Format is 'At TRACK xxH, SCETOR yyH, SIDE A/B.' 
 2738                   ; Note: NO CR/LF at start of string
 2739                   ;
 2740 1256              SHOW_TSS_LOC:
 2741 1256  E5          	PUSH	HL
 2742 1257  21 2502     	LD	HL,ATTRK	;Announce current track position
 2743 125A  CD 1917     	CALL	PMSG
 2744 125D  DB 65       	IN	A,(TRACK)		
 2745 125F  CD 199D     	CALL	PACC
 2746 1262  21 250A     	LD	HL,ATSEC	;and sector position
 2747 1265  CD 1917     	CALL	PMSG
 2748 1268  DB 66       	IN	A,(SECTOR)		
 2749 126A  CD 199D     	CALL	PACC
 2750 126D              SHOW_SIDES:			;Announce head if 2 sided disk
 2751 126D  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 2752 1271  28 16       	JR	Z,RW_SKIP_SIDES	;If 1 sided then skip side swap
 2753 1273  DB 63       	IN	A,(SELECT)	;Get hardware selection
 2754 1275  CB 67       	BIT	4,A		;Port Hardware for side selection (1=A, 0=B)
 2755 1277  28 08       	JR	Z,RW_B_SIDE	
 2756 1279  21 2515     	LD	HL,HEAD0_MSG	;Announce side 0 (or A)
 2757 127C  CD 1917     	CALL	PMSG
 2758 127F  E1          	POP	HL
 2759 1280  C9          	RET
 2760 1281              RW_B_SIDE:
 2761 1281  21 251F     	LD	HL,HEAD1_MSG	;Announce side 1 (or B)
 2762 1284  CD 1917     	CALL	PMSG
 2763 1287  E1          	POP	HL
 2764 1288  C9          	RET
 2765 1289              RW_SKIP_SIDES:
 2766 1289  21 2529     	LD	HL,H_MSG	;If SS disk, no need for a HEAD# message
 2767 128C  CD 1917     	CALL	PMSG
 2768 128F  E1          	POP	HL
 2769 1290  C9          	RET
 2770                   ;
 2771                   ;
 2772                   ;
 2773                   ; General routine to show the current TRACK location of the active disk head.
 2774                   ; Will display track only.  The format is 'At TRACK xxH.'
 2775                   ; Note: NO CR,LF at start of string
 2776                   ;
 2777 1291              SHOW_T_LOC:
 2778 1291  E5          	PUSH	HL
 2779 1292  21 2502     	LD	HL,ATTRK
 2780 1295  CD 1917     	CALL	PMSG
 2781 1298  DB 65       	IN	A,(TRACK)	;Say what track we are now on.
 2782 129A  CD 199D     	CALL	PACC		;Display current track number 
 2783 129D  21 2529     	LD	HL,H_MSG
 2784 12A0  CD 1917     	CALL	PMSG
 2785 12A3  E1          	POP	HL
 2786 12A4  C9          	RET
 2787                   ;
 2788                   ;
 2789                   ; General routine to show the current TRACK & SIDE location of the active 
 2790                   ; disk head. The format is 'At TRACK xxH Side A/B.'
 2791                   ; Note: NO CR,LF at start of string
 2792                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  49
VF      Z80

 2793 12A5              SHOW_TS_LOC:
 2794 12A5  E5          	PUSH	HL
 2795 12A6  21 2502     	LD	HL,ATTRK
 2796 12A9  CD 1917     	CALL	PMSG
 2797 12AC  DB 65       	IN	A,(TRACK)	;Say what track we are now on.
 2798 12AE  CD 199D     	CALL	PACC		;Display current track number 
 2799 12B1  C3 126D     	JP	SHOW_SIDES
 2800                   ;
 2801                   ;
 2802                   ; General routine to print out the error status returned by the 1791/5 chip
 2803                   ; after seeks, sector reads etc. 
 2804                   ; Note: will end with CRLF and error bits in [A]
 2805                   ;
 2806 12B4              SHOW_ERRORS:
 2807 12B4  3A 3912     	LD	A,(ERRORS_FLAG)
 2808 12B7  3C          	INC	A
 2809 12B8  32 3912     	LD	(ERRORS_FLAG),A	;Assuming we have less than 256 errors!
 2810                   
 2811 12BB  3A 391D     	LD	A,(CHIP_CMDSV)	;What was the last command to the chip
 2812 12BE  FE 80       	CP	A,RDCMD91	;Was it a read sector 1791 CMD?
 2813 12C0  20 05       	JR	NZ,NOT_RDCMD91
 2814 12C2  21 30C0     	LD	HL,SEC_READ_ERROR 
 2815 12C5  18 5D       	JR	DONE_ERRS
 2816 12C7              NOT_RDCMD91:
 2817 12C7  FE 88       	CP	A,RDCMD95	;Was it a read sector 1795 CMD?
 2818 12C9  20 05       	JR	NZ,NOT_RDCMD95
 2819 12CB  21 30C0     	LD	HL,SEC_READ_ERROR 
 2820 12CE  18 54       	JR	DONE_ERRS
 2821 12D0              NOT_RDCMD95:
 2822 12D0  FE 18       	CP	A,SKNCMD	;Was it a seek no verify cmd 
 2823 12D2  20 05       	JR	NZ,NOT_SKNCMD
 2824 12D4  21 3103     	LD	HL,SEEKNV_ERROR
 2825 12D7  18 4B       	JR	DONE_ERRS
 2826 12D9              NOT_SKNCMD:
 2827 12D9  FE 0C       	CP	A,RSCMD		;Was it a restore CMD 
 2828 12DB  20 05       	JR	NZ,NOT_RSCMD
 2829 12DD  21 3144     	LD	HL,RSCMD_ERROR
 2830 12E0  18 42       	JR	DONE_ERRS
 2831 12E2              NOT_RSCMD:
 2832 12E2  FE C4       	CP	A,RDACMD	;Was it a read track address command
 2833 12E4  20 05       	JR	NZ,NOT_RDACMD
 2834 12E6  21 3183     	LD	HL,SEC_ID_ERROR
 2835 12E9  18 39       	JR	DONE_ERRS
 2836 12EB              NOT_RDACMD:
 2837 12EB  FE 1C       	CP	A,SKCMD		;Was it seek cmd with verify
 2838 12ED  20 05       	JR	NZ,NOT_SKCMD
 2839 12EF  21 31BA     	LD	HL,SKCMD_ERROR
 2840 12F2  18 30       	JR	DONE_ERRS
 2841 12F4              NOT_SKCMD:
 2842 12F4  FE E4       	CP	A,RDTCMD	;Was it a read track command
 2843 12F6  20 05       	JR	NZ,NOT_RDTCMD
 2844 12F8  21 3235     	LD	HL,RDTCMD_ERROR
 2845 12FB  18 27       	JR	DONE_ERRS
 2846 12FD              NOT_RDTCMD:
 2847 12FD  FE F4       	CP	A,WRTCMD	;Was it a write track cmd
 2848 12FF  20 05       	JR	NZ,NOT_WRTCMD
 2849 1301  21 326C     	LD	HL,WRTCMD_ERROR
 2850 1304  18 1E       	JR	DONE_ERRS
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  50
VF      Z80

 2851 1306              NOT_WRTCMD:
 2852 1306  FE A0       	CP	A,WRCMD91	;Was it a sector write cmd 1791
 2853 1308  20 05       	JR	NZ,NOT_WRCMD91
 2854 130A  21 32A6     	LD	HL,WRCMD_ERROR
 2855 130D  18 15       	JR	DONE_ERRS
 2856 130F              NOT_WRCMD91:
 2857 130F  FE A8       	CP	A,WRCMD95	;Was it a sector write cmd 1795
 2858 1311  20 05       	JR	NZ,NOT_WRCMD95
 2859 1313  21 32A6     	LD	HL,WRCMD_ERROR
 2860 1316  18 0C       	JR	DONE_ERRS
 2861 1318              NOT_WRCMD95:
 2862 1318  FE 5C       	CP	A,STEPIN	;Was it a step-in CMD
 2863 131A  20 05       	JR	NZ,NOT_STEPIN
 2864 131C  21 31F6     	LD	HL,STEPIN_ERROR
 2865 131F  18 03       	JR	DONE_ERRS
 2866 1321              NOT_STEPIN:
 2867 1321  21 2DE6     	LD	HL,UNKNOWN_ERROR
 2868 1324              DONE_ERRS:
 2869 1324  CD 1917     	CALL	PMSG
 2870 1327  3A 391C     	LD	A,(ERSTAT)
 2871 132A  CD 19BB     	CALL	ZBITS		;Drop in bit pattern
 2872 132D  21 2DE4     	LD	HL,CLOSE_BRACKET
 2873 1330  CD 1917     	CALL	PMSG
 2874 1333  CD 1934     	CALL	ZCRLF		;Always end with CRLF
 2875 1336  3A 391C     	LD	A,(ERSTAT)	;Return with error in A
 2876 1339  C9          	RET
 2877                   ;
 2878                   ;
 2879                   ; This routine simply checks the written and re-read sectors in memory are the same.
 2880                   ; Z if all OK. NZ, if error(s)
 2881                   ;
 2882 133A              CMP_BUFFERS:
 2883 133A  21 5000     	LD	HL,FBUFFER
 2884 133D  11 6000     	LD	DE,FBUFFER2
 2885 1340  0E 00       	LD	C,0		;Will flag errors
 2886 1342  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2887 1345  06 80       	LD	B,NBYTES
 2888 1347  B7          	OR	A,A		;Block size count
 2889 1348  28 13       	JR	Z,C128256	;Do 128 byte compare
 2890 134A  06 00       	LD	B,0
 2891 134C  FE 01       	CP	A,1
 2892 134E  28 0D       	JR	Z,C128256	;Do 256 byte read
 2893 1350  FE 02       	CP	A,2
 2894 1352  28 06       	JR	Z,C512		;Do 512 byte read
 2895 1354  CD 1363     	CALL	CHECK_BLOCK	;Must be 1024 byte sectors so 4X256		
 2896 1357  CD 1363     	CALL	CHECK_BLOCK
 2897 135A  CD 1363     C512:	CALL	CHECK_BLOCK	;256X2 bytes
 2898 135D  CD 1363     C128256:CALL	CHECK_BLOCK
 2899 1360  AF          	XOR	A,A
 2900 1361  B9          	CP	A,C
 2901 1362  C9          	RET	
 2902 1363              CHECK_BLOCK:
 2903 1363  1A          	LD	A,(DE)
 2904 1364  BE          	CP	A,(HL)		;Do they match
 2905 1365  C4 136D     	CALL	NZ,MIS_MATCH
 2906 1368  23          	INC	HL
 2907 1369  13          	INC	DE
 2908 136A  10 F7       	DJNZ	CHECK_BLOCK	;Decrease count
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  51
VF      Z80

 2909 136C  C9          	RET
 2910 136D              MIS_MATCH:
 2911 136D  0E 01       	LD	C,1		;Flag for error
 2912 136F  C9          	RET	
 2913                   ;
 2914                   ; Fill memory buffer with a byte [C]. Is be used for sector write and CPM86
 2915                   ; disk initilization
 2916                   ; Return with [HL] pointing to end of sector buffer +1
 2917 1370              FILL_BUFFER:
 2918 1370  21 5000     	LD	HL,FBUFFER
 2919 1373  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2920 1376  06 80       	LD	B,NBYTES
 2921 1378  B7          	OR	A,A		;Block size count
 2922 1379  28 13       	JR	Z,B128256	;Do 128 byte compare
 2923 137B  06 00       	LD	B,0
 2924 137D  FE 01       	CP	A,1
 2925 137F  28 0D       	JR	Z,B128256	;Do 256 byte read
 2926 1381  FE 02       	CP	A,2
 2927 1383  28 06       	JR	Z,B512		;Do 512 byte read
 2928 1385  CD 1392     	CALL	BUILD_BLOCK	;Must be 1024 byte sectors so 4X256		
 2929 1388  CD 1392     	CALL	BUILD_BLOCK
 2930 138B  CD 1392     B512:	CALL	BUILD_BLOCK	;256X2 bytes
 2931 138E  CD 1392     B128256:CALL	BUILD_BLOCK
 2932 1391  C9          	RET
 2933                   
 2934 1392              BUILD_BLOCK:
 2935 1392  71          	LD	(HL),C		;Drop in the fill character	
 2936 1393  23          	INC	HL
 2937 1394  10 FC       	DJNZ	BUILD_BLOCK	;Decrease count
 2938 1396  C9          	RET
 2939                   ;
 2940                   ;
 2941                   ;
 2942                   ;
 2943                   ;---------------- BUILD TRACK IMAGE IN RAM ------------------------
 2944                   ; Assumes	IX points to the table or relevent Disk paramaters and
 2945                   ;		(TADDR) points to the buffer in RAM to build the track.
 2946                   ;		Requires valid (TADDR),(TRK),(SCTR) & (SIDE)
 2947                   ;		For maximum flexibility I have used seperate routines 
 2948                   ;		for Single and Double density formats. This routine is 
 2949                   ;		a very sensitive. Don't change unless you know what
 2950                   ;		you are doing.
 2951                   ;
 2952                   ;	Build in memory (@5000H)a complete SD Track.
 2953                   ;
 2954 1397              BUILD_TRACK:
 2955 1397  FD E5       	PUSH	IY			;Save the "main" IY pointer to TRACK,SIDE,SECTOR
 2956 1399  FD 7E 00    	LD	A,(IY+TRK)
 2957 139C  32 392B     	LD	(F_TRK),A		;store trk & side numbers locally
 2958 139F  FD 7E 01    	LD	A,(IY+SIDE)
 2959 13A2  32 392C     	LD	(F_SIDE),A
 2960                   
 2961 13A5  DD 66 10    	LD	H,(IX+SKEW1)		;IY Now points to the table containing the order of 
 2962 13A8  DD 6E 0F    	LD	L,(IX+SKEW)		;the sector numbers on a track (usually 1,2,3,4...
 2963 13AB  E5          	PUSH	HL			;but not always
 2964 13AC  FD E1       	POP	IY			;HL->IY
 2965                   
 2966 13AE  2A 0040     	LD	HL,(TADDR)		;This will be FBUFFER where track ins built in RAM
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  52
VF      Z80

 2967 13B1  DD CB 02 76 	BIT	6,(IX+HW_BYTE)		;Will build a different track image for SD or DD disks
 2968 13B5  C2 148F     	JP	NZ,DD_TRACKS		;Seperate sector image for DD tracks
 2969                   
 2970 13B8              SD_TRACKS:	
 2971 13B8  CD 13D2     	CALL	SD_TRK_HEADER		;Drop in header and Index mark BEFORE first sector
 2972                   					
 2973 13BB  FD 56 00    	LD	D,(IY+0)		;sector# in D, usually 1 at the start
 2974 13BE  DD 5E 00    	LD	E,(IX+NSCTRS)		;Total Sectors/side
 2975 13C1              NEXT_SEC:
 2976 13C1  CD 13F1     	CALL	SD_BUILD_SEC		;<<< Build a sector >>>>>
 2977 13C4  FD 23       	INC	IY			;point to next sector number in sec skew table
 2978 13C6  FD 56 00    	LD	D,(IY+0)		;store sector # in D
 2979 13C9  1D          	DEC	E
 2980 13CA  20 F5       	JR	NZ,NEXT_SEC		;All sectors are in RAM
 2981                   	
 2982 13CC  CD 1474     	CALL	SD_TRK_END		;Now need to flush out track to end
 2983 13CF  FD E1       	POP	IY			;Get back the main IY pointer
 2984 13D1  C9          	RET
 2985                   ;
 2986                   ;	Build in memory (@5000H)a complete Single Density Track.
 2987                   ;
 2988 13D2              SD_TRK_HEADER:				;Lay down the track header before the 1st sector
 2989 13D2  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Do not alter [D]= Sec# or [E]= Sec/side
 2990 13D5  DD 46 03    	LD	B,(IX+HEADR)		;Header has 40 (FF's)
 2991 13D8  CD 148A     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 2992 13DB  AF          	XOR	A,A			;Now 6 0's
 2993 13DC  06 06       	LD	B,6
 2994 13DE  CD 148A     	CALL	DROP
 2995 13E1  3E FC       	LD	A,0FCH			;Index ID mark
 2996 13E3  77          	LD	(HL),A			;drop into image
 2997 13E4  23          	INC	HL
 2998 13E5  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Now 26 (FF's)
 2999 13E8  06 1A       	LD	B,26			;Header has the count of fill characters required
 3000 13EA  CD 148A     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3001 13ED  22 392D     	LD	(INDEX_MARK),HL		;pointer+1 to end of track header
 3002 13F0  C9          	RET				;return with [HL] pointing to first sector byte
 3003                   ;
 3004 13F1              SD_BUILD_SEC:				;Lay down a sector at current [HL]. Do not alter [D] or [E]
 3005 13F1  AF          	XOR	A,A
 3006 13F2  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 6,0's for IMB 3740, 8")
 3007 13F5  CD 148A     	CALL	DROP
 3008 13F8  3E FE       	LD	A,0FEH			;Sector ID Address mark
 3009 13FA  77          	LD	(HL),A			;drop it in the growing image
 3010 13FB  23          	INC	HL
 3011 13FC  3A 392B     	LD	A,(F_TRK)		;Drop in the track #
 3012 13FF  77          	LD	(HL),A
 3013 1400  23          	INC	HL
 3014 1401  3A 392C     	LD	A,(F_SIDE)		;Side#, 0 for A side, 02H for B side
 3015 1404  B7          	OR	A,A
 3016 1405  3E 00       	LD	A,0
 3017 1407  28 02       	JR	Z,BLD_ASIDE
 3018 1409  3E 01       	LD	A,1			
 3019 140B              BLD_ASIDE:			
 3020 140B  77          	LD	(HL),A			;0 here for A side, 1 for B side
 3021 140C  23          	INC	HL
 3022 140D  72          	LD	(HL),D			;Drop in sector #
 3023 140E  23          	INC	HL
 3024 140F  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2, 1024=3
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  53
VF      Z80

 3025 1412  77          	LD	(HL),A			;drop in sector length byte
 3026 1413  23          	INC	HL	
 3027 1414  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 179x 	
 3028 1416  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3029 1417  23          	INC	HL
 3030 1418  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3031 141B  DD 46 05    	LD	B,(IX+GAP2)		;<---- (eg. 11,FF's for IMB 3740, 8")
 3032 141E  CD 148A     	CALL	DROP
 3033 1421  AF          	XOR	A,A
 3034 1422  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 6,0's for IMB 3740, 8")
 3035 1425  CD 148A     	CALL	DROP
 3036 1428  3E FB       	LD	A,0FBH			;Data address mark for 1791/5 	
 3037 142A  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3038 142B  23          	INC	HL
 3039 142C  7A          	LD	A,D
 3040 142D  FE 01       	CP	A,1			;If first sector then store data marker
 3041 142F  20 03       	JR	NZ,SDATA_FIELD 
 3042 1431  22 392F     	LD	(S_DATA_MARK),HL	;Pointer to start of sector data area
 3043 1434              SDATA_FIELD:				;Now write in the sector data field itself
 3044 1434  DD 7E 09    	LD	A,(IX+SIZE)		;128,256,512 or 1024 byte sector size
 3045 1437  06 80       	LD	B,NBYTES
 3046 1439  0E 01       	LD	C,1			;1 loop of 128 bytes in WR_DATA_FIELD below
 3047 143B  B7          	OR	A,A
 3048 143C  28 10       	JR	Z,SD_DATA_FIELD		;Do 128 byte write (B=128)
 3049 143E  06 00       	LD	B,0			;Need 256 bytes for the rest of possible sectors
 3050 1440  0E 01       	LD	C,1			;One loop
 3051 1442  FE 01       	CP	A,1
 3052 1444  28 08       	JR	Z,SD_DATA_FIELD		;Do 256 byte write
 3053 1446  0E 02       	LD	C,2			;2 loops of 256 bytes in WRITE_DATA_FIELD
 3054 1448  FE 02       	CP	A,2
 3055 144A  28 02       	JR	Z,SD_DATA_FIELD		;Do 512 byte read
 3056 144C  0E 04       	LD	C,4			;(must be 3) so 1024 byte sector
 3057 144E              SD_DATA_FIELD:
 3058 144E  DD 7E 0B    	LD	A,(IX+DATA_FILL_CHAR)	;get the sector fill character (usually E5)
 3059 1451  CD 148A     SDF0:	CALL	DROP
 3060 1454  0D          	DEC	C
 3061 1455  20 FA       	JR	NZ,SDF0			;Decrese [C] to 0
 3062 1457  7A          	LD	A,D
 3063 1458  FE 01       	CP	A,1			;If first sector then store image mark 
 3064 145A  20 03       	JR	NZ,NOT_FIRST
 3065 145C  22 3931     	LD	(E_DATA_MARK),HL	;For first sector will  diaplay data late
 3066 145F              NOT_FIRST:
 3067 145F  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 1791/5 
 3068 1461  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3069 1462  23          	INC	HL
 3070 1463  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3071 1466  DD 46 06    	LD	B,(IX+GAP3)		;<---- (eg. 27,FF's for IMB 3740, 8")
 3072 1469  CD 148A     	CALL	DROP
 3073 146C  7A          	LD	A,D
 3074 146D  FE 01       	CP	A,1			;If first sector then store image mark 
 3075 146F  C0          	RET	NZ
 3076 1470  22 3933     	LD	(E_SEC_MARK),HL		;For first sector will diaplay data later
 3077 1473  C9          	RET
 3078                   ;
 3079 1474              SD_TRK_END
 3080 1474  22 3935     	LD	(S_GAP4_MARK),HL	;Mark beginning of end of track field (GAP4)
 3081 1477  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3082 147A  DD 46 07    	LD	B,(IX+GAP4)		;<---- (eg 247,FF's  for IMB 3740, 8")
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  54
VF      Z80

 3083 147D  DD 4E 08    	LD	C,(IX+GAP4R)		;Times to repeat DROP
 3084 1480  CD 148A     SD_TRK1:CALL	DROP
 3085 1483  0D          	DEC	C
 3086 1484  20 FA       	JR	NZ,SD_TRK1
 3087 1486  22 3937     	LD	(E_GAP4_MARK),HL	;Mark end of Track
 3088 1489  C9          	RET
 3089                   ;
 3090 148A  77          DROP:	LD	(HL),A			;DATA block loader
 3091 148B  23          	INC	HL			;B= byte count,HL pointer
 3092 148C  10 FC       	DJNZ	DROP			;A = value to drop into image. Count in B
 3093 148E  C9          	RET
 3094                   ;
 3095                   ;
 3096                   ;
 3097                   ;	Build in memory (@5000H)a complete Double Density Track.
 3098                   ;
 3099 148F              DD_TRACKS:				;Same thing for DD Trdcks. Extra stuff req.
 3100 148F  CD 14A9     	CALL	DD_TRK_HEADER		;Drop in header and Index mark BEFORE first sector
 3101                   	
 3102 1492  FD 56 00    	LD	D,(IY+0)		;sector# in D, usually 1 at the start
 3103 1495  DD 5E 00    	LD	E,(IX+NSCTRS)		;Total Sectors/side
 3104 1498              DD_NEXT_SEC:
 3105 1498  CD 14CF     	CALL	DD_BUILD_SEC		;<<< Build a DD sector >>>>>
 3106 149B  FD 23       	INC	IY			;point to next sector number in sec skew table
 3107 149D  FD 56 00    	LD	D,(IY+0)		;store sector # in D
 3108 14A0  1D          	DEC	E
 3109 14A1  20 F5       	JR	NZ,DD_NEXT_SEC		;All sectors are in RAM
 3110                   	
 3111 14A3  CD 1560     	CALL	DD_TRK_END		;Now need to flush out track to end
 3112 14A6  FD E1       	POP	IY			;get back the main IY pointer
 3113 14A8  C9          	RET
 3114                   ;
 3115                   ;
 3116 14A9              DD_TRK_HEADER:				;Lay down the track header before the 1st sector
 3117 14A9  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Do not alter [D]= Sec# or [E]= Sec/side
 3118 14AC  DD 46 03    	LD	B,(IX+HEADR)		;Header has 80 (4E's)
 3119 14AF  CD 148A     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3120 14B2  AF          	XOR	A,A			;Now 12 0's
 3121 14B3  06 0C       	LD	B,12
 3122 14B5  CD 148A     	CALL	DROP
 3123 14B8  3E F6       	LD	A,0F6H			;3 of F6's
 3124 14BA  06 03       	LD	B,3
 3125 14BC  CD 148A     	CALL	DROP
 3126 14BF  3E FC       	LD	A,0FCH			;Index ID mark (FC)
 3127 14C1  77          	LD	(HL),A			;drop into image
 3128 14C2  23          	INC	HL
 3129 14C3  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Now 50 (4Es)
 3130 14C6  06 32       	LD	B,50			;Header has the count of fill characters required
 3131 14C8  CD 148A     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3132 14CB  22 392D     	LD	(INDEX_MARK),HL		;pointer+1 to end of track header
 3133 14CE  C9          	RET				;return with [HL] pointing to first sector byte
 3134                   ;
 3135 14CF              DD_BUILD_SEC:				;Lay down a sector at current [HL]. Do not alter [D] or [E]
 3136 14CF  AF          	XOR	A,A
 3137 14D0  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 12,0's for IBM System 34 Format)
 3138 14D3  CD 148A     	CALL	DROP
 3139 14D6  3E F5       	LD	A,0F5H			;Special DD bytes
 3140 14D8  06 03       	LD	B,3
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  55
VF      Z80

 3141 14DA  CD 148A     	CALL	DROP
 3142 14DD  3E FE       	LD	A,0FEH			;Sector ID Address mark
 3143 14DF  77          	LD	(HL),A			;drop it in the growing image
 3144 14E0  23          	INC	HL
 3145 14E1  3A 392B     	LD	A,(F_TRK)			;Drop in the track #
 3146 14E4  77          	LD	(HL),A
 3147 14E5  23          	INC	HL
 3148 14E6  3A 392C     	LD	A,(F_SIDE)		;Side#, 0 for A side, 02H for B side
 3149 14E9  B7          	OR	A,A
 3150 14EA  3E 00       	LD	A,0
 3151 14EC  28 02       	JR	Z,DBLD_ASIDE
 3152 14EE  3E 01       	LD	A,1			;1 for side B
 3153 14F0              DBLD_ASIDE:			
 3154 14F0  77          	LD	(HL),A			;0 here for A side, 1 for B side
 3155 14F1  23          	INC	HL
 3156 14F2  72          	LD	(HL),D			;Drop in sector #
 3157 14F3  23          	INC	HL
 3158 14F4  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2, 1024=3
 3159 14F7  77          	LD	(HL),A			;drop in sector length byte
 3160 14F8  23          	INC	HL	
 3161 14F9  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 179x 	
 3162 14FB  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3163 14FC  23          	INC	HL
 3164 14FD  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3165 1500  DD 46 05    	LD	B,(IX+GAP2)		;<----(eg 22,4E's for IBM System 34 Format)
 3166 1503  CD 148A     	CALL	DROP
 3167 1506  AF          	XOR	A,A
 3168 1507  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg 8,0's for IBM System 34 Format)
 3169 150A  CD 148A     	CALL	DROP
 3170 150D  3E F5       	LD	A,0F5H			;Special DD bytes
 3171 150F  06 03       	LD	B,3
 3172 1511  CD 148A     	CALL	DROP
 3173 1514  3E FB       	LD	A,0FBH			;Data address mark for 1791/5 	
 3174 1516  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3175 1517  23          	INC	HL
 3176 1518  7A          	LD	A,D			;Get sec #
 3177 1519  FE 01       	CP	A,1			;If first sector then store data marker
 3178 151B  20 03       	JR	NZ,DDATA_FIELD 
 3179 151D  22 392F     	LD	(S_DATA_MARK),HL	;Pointer to start of sector data area
 3180 1520              DDATA_FIELD:				;Now write in the sector data field itself
 3181 1520  DD 7E 09    	LD	A,(IX+SIZE)		;128,256,512 or 1024 byte sector size
 3182 1523  06 80       	LD	B,NBYTES
 3183 1525  0E 01       	LD	C,1			;1 loop of 128 bytes in WR_DATA_FIELD below
 3184 1527  B7          	OR	A,A
 3185 1528  28 10       	JR	Z,DD_DATA_FIELD		;Do 128 byte write (B=128)
 3186 152A  06 00       	LD	B,0			;Need 256 bytes for the rest of possible sectors
 3187 152C  0E 01       	LD	C,1			;One loop
 3188 152E  FE 01       	CP	A,1
 3189 1530  28 08       	JR	Z,DD_DATA_FIELD		;Do 256 byte write
 3190 1532  0E 02       	LD	C,2			;2 loops of 256 bytes in WRITE_DATA_FIELD
 3191 1534  FE 02       	CP	A,2
 3192 1536  28 02       	JR	Z,DD_DATA_FIELD		;Do 512 byte read
 3193 1538  0E 04       	LD	C,4			;(must be 3) so 1024 byte sector
 3194 153A              DD_DATA_FIELD:
 3195 153A  DD 7E 0B    	LD	A,(IX+DATA_FILL_CHAR)	;get the sector fill character (usually E5)
 3196 153D  CD 148A     DDF0:	CALL	DROP
 3197 1540  0D          	DEC	C
 3198 1541  20 FA       	JR	NZ,DDF0			;Decrease [C] to 0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  56
VF      Z80

 3199 1543  7A          	LD	A,D			;Get back sec #
 3200 1544  FE 01       	CP	A,1			;If first sector then store image mark 
 3201 1546  20 03       	JR	NZ,DNOT_FIRST
 3202 1548  22 3931     	LD	(E_DATA_MARK),HL	;For first sector will  diaplay data late
 3203 154B              DNOT_FIRST:
 3204 154B  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 1791/5 
 3205 154D  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3206 154E  23          	INC	HL
 3207 154F  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3208 1552  DD 46 06    	LD	B,(IX+GAP3)		;<---- (54,4E's for IBM System 34 Format)
 3209 1555  CD 148A     	CALL	DROP
 3210 1558  7A          	LD	A,D
 3211 1559  FE 01       	CP	A,1			;If first sector then store image mark 
 3212 155B  C0          	RET	NZ
 3213 155C  22 3933     	LD	(E_SEC_MARK),HL		;For first sector will diaplay data later
 3214 155F  C9          	RET
 3215                   ;
 3216 1560              DD_TRK_END
 3217 1560  22 3935     	LD	(S_GAP4_MARK),HL	;Mark beginning of end of track field (GAP4)
 3218 1563  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3219 1566  DD 46 07    	LD	B,(IX+GAP4)		;<---- (eg 598 4E's for IBM System 34 Format)
 3220 1569  DD 4E 08    	LD	C,(IX+GAP4R)		;Times to repeat DROP
 3221 156C  CD 148A     DD_TRK1:CALL	DROP
 3222 156F  0D          	DEC	C
 3223 1570  20 FA       	JR	NZ,DD_TRK1
 3224 1572  22 3937     	LD	(E_GAP4_MARK),HL	;Mark end of Double density Track
 3225 1575  C9          	RET
 3226                   ;
 3227                   ; This routine initilized the first sector of a CPM86 5" Disk. 
 3228                   ; For DDDS CPM86 disks the last byte of the first sector has to be a 01.
 3229                   ; (For a DDSS CPM86 disk BTW it has to be 00)
 3230                   ;
 3231 1576              INIT_CPM86:
 3232 1576  21 29D3     	LD	HL,INITCPM_MSG	;Say Initilizing disk for CPM86
 3233 1579  CD 1917     	CALL	PMSG
 3234 157C  AF          	XOR	A,A		;Setup for the BIOS below
 3235 157D  FD 77 00    	LD	(IY+TRK),A	;Track 0 
 3236 1580  FD 77 01    	LD	(IY+SIDE),A	;Side A 
 3237 1583  3C          	INC	A
 3238 1584  FD 77 02    	LD	(IY+SCTR),A	;Sector 1 
 3239 1587  CD 1213     	CALL	SET_SIDE	;Make sure IX+HW_BYTE is set for correct side
 3240 158A  CD 11C2     	CALL	START_DRIVE_1	;Select the drive in hardware
 3241 158D  CD 0E2D     	CALL	HOME	
 3242 1590  C4 12B4     	CALL	NZ,SHOW_ERRORS	;print out errors if any
 3243                   
 3244 1593  21 5000     	LD	HL,FBUFFER	;Sector data to be written is here
 3245 1596  22 0040     	LD	(TADDR),HL	;Setup DMA address for BIOS
 3246 1599  0E E5       	LD	C,0E5H		;Data fill character (for CPM86 always 0E5H)
 3247 159B  CD 1370     	CALL	FILL_BUFFER	;Fill buffer with character E5's 
 3248 159E  2B          	DEC	HL		;Backup to last data byte
 3249 159F  3E 01       	LD	A,01
 3250 15A1  77          	LD	(HL),A		;drop in the 01 flag at end.
 3251                   	
 3252 15A2  CD 102C     	CALL	WRITE_SECTOR	;Write sector back to disk
 3253 15A5  C4 12B4     	CALL	NZ,SHOW_ERRORS	;If any, show error flags
 3254 15A8  AF          	XOR	A,A		;Return Z so no further special commands will 
 3255 15A9  C9          	RET			;be picked up.
 3256                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  57
VF      Z80

 3257                   ;
 3258                   ;
 3259                   ; Setup the "current drive" hardware selection bits for (A:,B:,C: or D:)
 3260                   ; Store bits in memory location (DRIVE_1)
 3261                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3262                   ;
 3263 15AA              SELECT_DR_1:
 3264 15AA  21 1A65     	LD	HL,GETDRV_MSG	;Ask which drive is the current drive
 3265 15AD  CD 1917     	CALL	PMSG
 3266 15B0  CD 1922     	CALL	GETCMD		;Get the input option
 3267 15B3  FE 1B       	CP	A,ESC		;Abort if ESC character
 3268 15B5  CA 15DB     	JP	Z,ABORT_CMD
 3269 15B8  FE 41       	CP	A,'A'
 3270 15BA  20 04       	JR	NZ,NOT_A1
 3271 15BC  3E 01       	LD	A,1
 3272 15BE  18 16       	JR	GOT_DRIVE1
 3273 15C0  FE 42       NOT_A1:	CP	A,'B'
 3274 15C2  20 04       	JR	NZ,NOT_B1
 3275 15C4  3E 02       	LD	A,2
 3276 15C6  18 0E       	JR	GOT_DRIVE1
 3277 15C8  FE 43       NOT_B1:	CP	A,'C'
 3278 15CA  20 04       	JR	NZ,NOT_C1
 3279 15CC  3E 04       	LD	A,4
 3280 15CE  18 06       	JR	GOT_DRIVE1
 3281 15D0  FE 44       NOT_C1:	CP	A,'D'
 3282 15D2  20 0C       	JR	NZ,INVALID_DR
 3283 15D4  3E 08       	LD	A,8
 3284 15D6              GOT_DRIVE1:
 3285 15D6  32 0046     	LD	(DRIVE_1),A
 3286 15D9  AF          	XOR	A,A
 3287 15DA  C9          	RET
 3288                   ;
 3289 15DB              ABORT_CMD:
 3290 15DB  AF          	XOR	A,A		;Abort with z flag but ESC in A
 3291 15DC  3D          	DEC	A		;Make NZ
 3292 15DD  3E 1B       	LD	A,ESC
 3293 15DF  C9          	RET
 3294                   ;
 3295 15E0              INVALID_DR:
 3296 15E0  AF          	XOR	A,A		;Abort with z flag but FF in A
 3297 15E1  3D          	DEC	A		;Make NZ
 3298 15E2  C9          	RET
 3299                   ;
 3300                   ;
 3301                   ; Setup the "second drive" hardware selection bits for (A:,B:,C: or D:)
 3302                   ; Store bits in memory location (DRIVE_21)
 3303                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3304                   ;
 3305 15E3              SELECT_DR_2:
 3306 15E3  21 1A65     	LD	HL,GETDRV_MSG	;Ask which drive is the current drive
 3307 15E6  CD 1917     	CALL	PMSG
 3308 15E9  CD 1922     	CALL	GETCMD		;Get the input option
 3309 15EC  FE 1B       	CP	A,ESC		;Abort if ESC character
 3310 15EE  CA 15DB     	JP	Z,ABORT_CMD
 3311 15F1  FE 41       	CP	A,'A'
 3312 15F3  20 04       	JR	NZ,NOT_A2
 3313 15F5  3E 01       	LD	A,1
 3314 15F7  18 16       	JR	GOT_DRIVE2
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  58
VF      Z80

 3315 15F9  FE 42       NOT_A2:	CP	A,'B'
 3316 15FB  20 04       	JR	NZ,NOT_B2
 3317 15FD  3E 02       	LD	A,2
 3318 15FF  18 0E       	JR	GOT_DRIVE2
 3319 1601  FE 43       NOT_B2:	CP	A,'C'
 3320 1603  20 04       	JR	NZ,NOT_C2
 3321 1605  3E 04       	LD	A,4
 3322 1607  18 06       	JR	GOT_DRIVE2
 3323 1609  FE 44       NOT_C2:	CP	A,'D'
 3324 160B  20 D3       	JR	NZ,INVALID_DR
 3325 160D  3E 08       	LD	A,8
 3326 160F              GOT_DRIVE2:
 3327 160F  32 0047     	LD	(DRIVE_2),A
 3328 1612  AF          	XOR	A,A
 3329 1613  C9          	RET
 3330                   
 3331                   
 3332                   ;------Select the appropiate disk parameter table ----------------------
 3333                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3334                   ; [IX] to Drive paramater table 
 3335                   ;
 3336 1614              SELECT_IX:
 3337 1614  CD 1934     	CALL	ZCRLF
 3338 1617              SELECT_IX1:
 3339 1617  21 1AAC     	LD	HL,GETSIZE_MSG	;Ask if 5" or 8"
 3340 161A  CD 1917     	CALL	PMSG
 3341 161D  CD 1922     	CALL	GETCMD		;get the input option
 3342 1620  FE 1B       	CP	A,ESC		;Abort if ESC character
 3343 1622  CA 15DB     	JP	Z,ABORT_CMD
 3344 1625  FE 35       	CP	A,'5'
 3345 1627  28 48       	JR	Z,GET_TABLE_5
 3346 1629  FE 38       	CP	A,'8'
 3347 162B  28 09       	JR	Z,GET_TABLE_8
 3348 162D  21 256E     BAD_CMD:LD	HL,BADCMD
 3349 1630  CD 1917     	CALL	PMSG
 3350 1633  AF          	XOR	A,A		;NZ Flag to indicate no selection
 3351 1634  3D          	DEC	A
 3352 1635  C9          	RET
 3353                   
 3354 1636              GET_TABLE_8:
 3355 1636  21 1ACF     	LD	HL,DISK_8_FORMATS	;Pointer for 8" disk table
 3356 1639  CD 1917     	CALL	PMSG		
 3357 163C  CD 1922     	CALL	GETCMD		;SELECT A DISK PARAMATER TABLE
 3358 163F  FE 1B       	CP	A,ESC		;Abort if ESC character
 3359 1641  CA 15DB     	JP	Z,ABORT_CMD
 3360 1644  FE 41       	CP	A,'A'		;128 bytes/sec
 3361 1646  DD 21 32E0  	LD	IX,STDSDT	;Set to 128 byte sectors 8" SD IBM Disk
 3362 164A  C8          	RET	Z
 3363 164B  FE 42       	CP	A,'B'
 3364 164D  DD 21 3331  	LD	IX,STDDDT	;Set to 128 byte sectors 8" DD format
 3365 1651  C8          	RET	Z
 3366 1652  FE 43       	CP	A,'C'
 3367 1654  DD 21 339C  	LD	IX,DDT256	;Set to 256 byte sectors IBM DDDS disk
 3368 1658  C8          	RET	Z		
 3369 1659  FE 44       	CP	A,'D'
 3370 165B  DD 21 33F9  	LD	IX,DDT512	;Set for 512 byte sectors 8" DDDS disk
 3371 165F  C8          	RET	Z		
 3372 1660  FE 45       	CP	A,'E'
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  59
VF      Z80

 3373 1662  DD 21 3436  	LD	IX,DDT1K	;Set for 1024 byte sectors 8" DDSS disk
 3374 1666  C8          	RET	Z
 3375 1667  FE 46       	CP	A,'F'
 3376 1669  DD 21 3486  	LD	IX,DDT1K2	;Set for 1024 byte sectors 8" DDDS disk
 3377 166D  C8          	RET	Z
 3378 166E  C3 162D     	JP	BAD_CMD
 3379                   
 3380 1671              GET_TABLE_5:
 3381 1671  21 1C58     	LD	HL,DISK_5_FORMATS	;Pointer for 5" disk table
 3382 1674  CD 1917     	CALL	PMSG		
 3383 1677  CD 1922     	CALL	GETCMD		;SELECT A DISK PARAMATER TABLE
 3384 167A  FE 1B       	CP	A,ESC		;Abort if ESC character
 3385 167C  CA 15DB     	JP	Z,ABORT_CMD
 3386 167F  FE 41       	CP	A,'A'
 3387 1681  DD 21 3575  	LD	IX,MINCPM	;Set for 512 byte CPM-86 5" DD disk
 3388 1685  C8          	RET	Z
 3389 1686  FE 42       	CP	A,'B'
 3390 1688  DD 21 34D6  	LD	IX,MINSDT	;Set for 128 byte 5" SD disk
 3391 168C  C8          	RET	Z
 3392 168D  FE 43       	CP	A,'C'
 3393 168F  DD 21 3520  	LD	IX,MINDDT	;Set for 128 byte 5" DD disk
 3394 1693  C8          	RET	Z
 3395 1694  FE 44       	CP	A,'D'
 3396 1696  DD 21 35C2  	LD	IX,DEC		;Set for 512 byte 5" DEC-VT180 DD disk
 3397 169A  C8          	RET	Z
 3398 169B  FE 45       	CP	A,'E'
 3399 169D  DD 21 360C  	LD	IX,TOSHIBA	;Set for TOSHIBA DD disk
 3400 16A1  C8          	RET	Z
 3401 16A2  FE 46       	CP	A,'F'
 3402 16A4  DD 21 3661  	LD	IX,CDOS		;Set for CDOS SD disk
 3403 16A8  C8          	RET	Z
 3404 16A9  FE 47       	CP	A,'G'
 3405 16AB  DD 21 36AE  	LD	IX,CDOSDD	;Set for CDOS DD disk
 3406 16AF  C8          	RET	Z
 3407 16B0  FE 48       	CP	A,'H'
 3408 16B2  DD 21 36F8  	LD	IX,EPSON	;Set for EPSON QX-10 DD disk
 3409 16B6  C8          	RET	Z
 3410 16B7  FE 49       	CP	A,'I'
 3411 16B9  DD 21 373C  	LD	IX,MORROW	;Set for MORROW DD disk
 3412 16BD  C8          	RET	Z
 3413 16BE  FE 4A       	CP	A,'J'
 3414 16C0  DD 21 3784  	LD	IX,ZENITH	;Set for ZENITH Z-100 DD disk
 3415 16C4  C8          	RET	Z
 3416 16C5  FE 4B       	CP	A,'K'
 3417 16C7  DD 21 37D0  	LD	IX,SUPER	;Set for SUPERBRAIN DD disk
 3418 16CB  C8          	RET	Z
 3419 16CC  FE 4C       	CP	A,'L'
 3420 16CE  DD 21 3820  	LD	IX,MSDOS	;Set for MSDOS 1.1 DD disk
 3421 16D2  C8          	RET	Z
 3422 16D3  FE 4D       	CP	A,'M'
 3423 16D5  DD 21 386F  	LD	IX,MSDOS2	;Set for MSDOS 2.2 DD disk
 3424 16D9  C8          	RET	Z
 3425 16DA  FE 4E       	CP	A,'N'
 3426 16DC  DD 21 38BF  	LD	IX,TRS80	;Set for TRS80 III DD disk
 3427 16E0  C8          	RET	Z
 3428 16E1  C3 162D     	JP	BAD_CMD
 3429                   ;
 3430                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  60
VF      Z80

 3431                   ;-------------------------------------------------------------------------
 3432                   ; Describe on one line the type of disk format selected
 3433                   ; Assumes a valid IX pointer to relevent disk table
 3434                   ;
 3435 16E4              SHOW_HW_TITLE:
 3436 16E4  21 20F8     	LD	HL,DISK_INFO		;CR,LF,'Current drive:-'
 3437 16E7  CD 1917     	CALL	PMSG
 3438 16EA  DD E5       	PUSH	IX			;IX->HL
 3439 16EC  E1          	POP	HL
 3440 16ED  11 0013     	LD	DE,TITLE		;add in offset
 3441 16F0  19          	ADD	HL,DE			;HL now points to the title entry of the selected disk
 3442 16F1  CD 1917     	CALL	PMSG			;Show the title line
 3443 16F4  C9          	RET
 3444                   ;
 3445                   ;--------------------------------------------------------------------------
 3446                   ; Decode the IOBYTE byte and print out hardware disk parameters on one line
 3447                   ; Assumes a valid IX pointer to relevent disk table
 3448                   ;
 3449 16F5              SHOW_HW_BYTE:
 3450 16F5  21 210B     	LD	HL,DISK_INFO0		;CR,LF,'Drive '
 3451 16F8  CD 1917     	CALL	PMSG
 3452 16FB  3A 0048     	LD	A,(IOBYTE)		;Obtain the current drive letter (A;,B:....)
 3453 16FE  E6 03       	AND	A,03H			
 3454 1700  FE 01       	CP	A,1			
 3455 1702  20 04       	JR	NZ,NOT_A_DR
 3456 1704  3E 41       	LD	A,'A'
 3457 1706  18 12       	JR	DRV_DONE
 3458 1708              NOT_A_DR:
 3459 1708  FE 02       	CP	A,2
 3460 170A  20 04       	JR	NZ,NOT_B_DR
 3461 170C  3E 42       	LD	A,'B'
 3462 170E  18 0A       	JR	DRV_DONE
 3463 1710              NOT_B_DR
 3464 1710  FE 04       	CP	A,4
 3465 1712  20 04       	JR	NZ,NOT_C_DR
 3466 1714  3E 43       	LD	A,'C'
 3467 1716  18 02       	JR	DRV_DONE
 3468 1718              NOT_C_DR
 3469 1718  3E 44       	LD	A,'D'
 3470 171A              DRV_DONE:
 3471 171A  4F          	LD	C,A			;Drop it on to the CRT/LCD
 3472 171B  CD 011B     	CALL	CO
 3473 171E  21 2114     	LD	HL,DISK_INFO1
 3474 1721  CD 1917     	CALL	PMSG
 3475 1724  3A 0048     	LD	A,(IOBYTE)
 3476 1727  CD 19BB     	CALL	ZBITS			;Print out bit pattern in IOBYTE for hardware
 3477 172A  21 2120     	LD	HL,DISK_INFO2
 3478 172D  CD 1917     	CALL	PMSG
 3479 1730  DD CB 02 6E 	BIT	5,(IX+HW_BYTE)		;Say whether 8" or 5"
 3480 1734  28 04       	JR	Z,INCH8
 3481 1736  0E 35       	LD	C,'5'
 3482 1738  18 02       	JR	NEXT2
 3483 173A  0E 38       INCH8:	LD	C,'8'
 3484 173C  CD 011B     NEXT2:	CALL	CO
 3485 173F  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Say whether Single or Double sided disk
 3486 1743  28 05       	JR	Z,S_SIDE
 3487 1745  21 2128     	LD	HL,DISK_INFO3
 3488 1748  18 03       	JR	NEXT3
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  61
VF      Z80

 3489 174A  21 213B     S_SIDE:	LD	HL,DISK_INFO4
 3490 174D  CD 1917     NEXT3:	CALL	PMSG
 3491 1750  DD CB 02 76 	BIT	6,(IX+HW_BYTE)		;Say whether SD or DD disk
 3492 1754  28 05       	JR	Z,DD_DSK
 3493 1756  21 214E     	LD	HL,DISK_INFO5
 3494 1759  18 03       	JR	NEXT4
 3495 175B  21 2163     DD_DSK:	LD	HL,DISK_INFO6
 3496 175E  CD 1917     NEXT4:	CALL	PMSG
 3497 1761  C9          	RET
 3498                   ;
 3499                   ;
 3500                   ;----------------------------------------------------------
 3501                   ; Display the disk paramater table pointed to by IX
 3502                   ;
 3503 1762              SHOW_IX_TABLE:
 3504 1762  21 2178     	LD	HL,DISK_INFO7		;Print sectors/track
 3505 1765  CD 1917     	CALL	PMSG
 3506 1768  DD 7E 00    	LD	A,(IX+NSCTRS)
 3507 176B  CD 199D     	CALL	PACC
 3508 176E  21 219E     	LD	HL,DISK_INFO8		;Print tracks/side
 3509 1771  CD 1917     	CALL	PMSG
 3510 1774  DD 7E 01    	LD	A,(IX+NTRKS)
 3511 1777  CD 199D     	CALL	PACC
 3512 177A  21 21AE     	LD	HL,DISK_INFO9		;Sector Size
 3513 177D  DD 7E 09    	LD	A,(IX+SIZE)
 3514 1780  B7          	OR	A,A
 3515 1781  20 05       	JR	NZ,NOT_128
 3516 1783  21 21BB     	LD	HL,DISK_INFO10		;128 Bytes/sector
 3517 1786  18 15       	JR	DONE_IX_TABLE
 3518 1788  FE 01       NOT_128:CP	1
 3519 178A  20 05       	JR	NZ,NOT_256
 3520 178C  21 21CE     	LD	HL,DISK_INFO11		;256 Bytes/Sector
 3521 178F  18 0C       	JR	DONE_IX_TABLE
 3522 1791  FE 02       NOT_256:CP	2
 3523 1793  20 05       	JR	NZ,NOT_512
 3524 1795  21 21E1     	LD	HL,DISK_INFO12		;512 Bytes/sector
 3525 1798  18 03       	JR	DONE_IX_TABLE
 3526 179A  21 21F4     NOT_512:LD	HL,DISK_INFO13		;1024 Bytes/Sector
 3527 179D              DONE_IX_TABLE:
 3528 179D  CD 1917     	CALL	PMSG
 3529 17A0  C9          	RET
 3530                   ;
 3531                   ;----------------------------------------------------------
 3532                   ; Display the current track ID Field.
 3533                   ; NOTE this is NOT the current sector read. It's whatever sector 
 3534                   ; the head happens to be over at the time.
 3535                   ;
 3536 17A1              SHOW_ID:
 3537 17A1  21 2207     	LD	HL,IDMSG0		;'Track/Side/Sec/Size/(CRC) TRACK ID field='
 3538 17A4  CD 1917     	CALL	PMSG
 3539 17A7  21 3914     	LD	HL,IDSV			;Point to where data was saved
 3540 17AA  06 04       	LD	B,4			;4+2 bytes in ID
 3541 17AC  7E          IDLOOP1:LD	A,(HL)
 3542 17AD  CD 199D     	CALL	PACC			;Print [A] in ASCII
 3543 17B0  23          	INC	HL
 3544 17B1  05          	DEC	B
 3545 17B2  20 F8       	JR	NZ,IDLOOP1
 3546 17B4  0E 20       	LD	C,' '
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  62
VF      Z80

 3547 17B6  CD 011B     	CALL	CO
 3548 17B9  0E 28       	LD	C,'('
 3549 17BB  CD 011B     	CALL	CO
 3550 17BE  06 02       	LD	B,2
 3551 17C0  7E          IDLOOP5:LD	A,(HL)
 3552 17C1  CD 199D     	CALL	PACC			;Print CRC value
 3553 17C4  23          	INC	HL
 3554 17C5  05          	DEC	B
 3555 17C6  20 F8       	JR	NZ,IDLOOP5
 3556 17C8  0E 29       	LD	C,')'
 3557 17CA  CD 011B     	CALL	CO
 3558 17CD  C9          	RET
 3559                   ;
 3560                   ;
 3561                   ; Display Bits of Versafloppy II Status Port
 3562                   ; Return with bits in [A]
 3563                   ;
 3564 17CE              SHOW_STAT_BITS:
 3565 17CE  21 27FA     	LD	HL,STATUS_179x
 3566 17D1  CD 1917     	CALL	PMSG
 3567 17D4  DB 64       	IN	A,(STATUS)
 3568 17D6  CD 19BB     	CALL	ZBITS			;display bit pattern of [A]
 3569 17D9  C9          	RET				;Will return with error in [A]
 3570                   ;
 3571                   ; Check to see if disk is write protected
 3572                   ; Z if not protected, NZ if write protected
 3573                   ;
 3574 17DA              CHECK_WP:
 3575 17DA  DB 64       	IN	A,(STATUS)		;Remember data is inverted
 3576 17DC  CB 77       	BIT	6,A
 3577 17DE  C8          	RET	Z
 3578 17DF  21 29A8     	LD	HL,DISK_WP_MSG		;This disk is currently write protected
 3579 17E2  CD 1917     	CALL	PMSG
 3580 17E5  AF          	XOR	A,A
 3581 17E6  3D          	DEC	A
 3582 17E7  C9          	RET				;Will return with error in [A]
 3583                   ;
 3584                   ;
 3585                   ;
 3586                   ;--------------------- DISPLAY SECTOR DATA CONTENTS -------------------------
 3587                   ;Display the Sector read from disk to RAM location at (TADDR)
 3588 17E8              SEC_DISPLAY:
 3589 17E8  3A 3913     	LD	A,(CRTDISP)	;Do we have the more detail display option on
 3590 17EB  B7          	OR	A,A
 3591 17EC  C8          	RET	Z		;If not just return
 3592 17ED  F5          	PUSH	AF
 3593 17EE  C5          	PUSH	BC
 3594 17EF  D5          	PUSH	DE
 3595 17F0  E5          	PUSH	HL
 3596 17F1  21 253F     	LD	HL,SEC_MSG
 3597 17F4  CD 1917     	CALL	PMSG
 3598 17F7  2A 0040     	LD	HL,(TADDR)	;Move Transfer address into HL
 3599 17FA  DD 7E 09    	LD	A,(IX+SIZE)	;Get sector size
 3600 17FD  B7          	OR	A,A
 3601 17FE  11 0080     	LD	DE,NBYTES	;128 byte sectors
 3602 1801  28 11       	JR	Z,DISP1
 3603 1803  FE 01       	CP	A,1
 3604 1805  11 0100     	LD	DE,NBYTES*2	;256 byte sectors
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  63
VF      Z80

 3605 1808  28 0A       	JR	Z,DISP1
 3606 180A  FE 02       	CP	A,2
 3607 180C  11 0200     	LD	DE,NBYTES*4	;512 byte sectors
 3608 180F  28 03       	JR	Z,DISP1
 3609 1811  11 0400     	LD	DE,NBYTES*8	;Must be 1024 byte sectors
 3610                   
 3611 1814  7B          DISP1:	LD	A,E
 3612 1815  E6 3F       	AND	A,00111111B	;64 characters /line
 3613 1817  20 03       	JR	NZ,NOCR
 3614 1819  CD 1934     	CALL	ZCRLF
 3615 181C  7E          NOCR:	LD	A,(HL)
 3616 181D  E6 7F       	AND	A,7FH
 3617 181F  FE 20       	CP	' ' 		;FILTER OUT CONTROL CHARACTERS'
 3618 1821  30 02       	JR	NC,T33
 3619 1823  3E 2E       T22:	LD	A,'.'
 3620 1825  FE 7C       T33:	CP	A,07CH
 3621 1827  30 FA       	JR	NC,T22
 3622 1829  4F          	LD	C,A	
 3623 182A  CD 011B     	CALL	CO
 3624 182D  23          	INC	HL
 3625 182E  1B          	DEC	DE		;Decrease DE count by 1
 3626 182F  7B          	LD	A,E
 3627 1830  B7          	OR	A,A		;Not XX00 at least
 3628 1831  20 E1       	JR	NZ,DISP1
 3629 1833  B2          	OR	A,D		
 3630 1834  20 DE       	JR	NZ,DISP1	;Not 0000
 3631 1836  CD 1934     	CALL	ZCRLF
 3632 1839  E1          NODISP:	POP	HL
 3633 183A  D1          	POP	DE
 3634 183B  C1          	POP	BC
 3635 183C  F1          	POP	AF
 3636 183D  C9          	RET
 3637                   ;
 3638                   ;------------ SHOW DETAILS OF RAW SECTOR IMAGE FOR TRACK WRITE -------------
 3639 183E              FORMAT_INFO:
 3640 183E  F5          	PUSH	AF		;Save everything since track formating uses all
 3641 183F  C5          	PUSH	BC
 3642 1840  D5          	PUSH	DE
 3643 1841  E5          	PUSH	HL
 3644 1842  21 2618     	LD	HL,FORM_TRK	;Formatting track...
 3645 1845  CD 1917     	CALL	PMSG
 3646 1848  FD 7E 00    	LD	A,(IY+TRK)
 3647 184B  CD 199D     	CALL	PACC
 3648                   ;
 3649 184E  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 3650 1852  28 10       	JR	Z,NO_SIDESF	;If 1 sided then skip sides info
 3651 1854  FD 7E 01    	LD	A,(IY+SIDE)
 3652 1857  B7          	OR	A,A		;If 0 we have done A side now do B
 3653 1858  20 05       	JR	NZ,B_SIDEF	;is B side
 3654 185A  21 2515     	LD	HL,HEAD0_MSG
 3655 185D  18 08       	JR	SEC_INFO1
 3656 185F  21 251F     B_SIDEF:LD	HL,HEAD1_MSG
 3657 1862  18 03       	JR	SEC_INFO1
 3658 1864              NO_SIDESF:
 3659 1864  21 2529     	LD	HL,H_MSG	;H.
 3660 1867              SEC_INFO1:
 3661 1867  CD 1917     	CALL	PMSG
 3662 186A  3A 3913     	LD	A,(CRTDISP)	;Do we have the more detail display option on
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  64
VF      Z80

 3663 186D  B7          	OR	A,A
 3664 186E  CA 1912     	JP	Z,NO_TDISPLAY	;If Z do not list the sector contents.
 3665                   
 3666                   				;OK we are going to step along the image one
 3667                   				;section at a time. Key locations were stored 
 3668                   				;previously in the SCTRIM: routine.  
 3669 1871  21 262C     	LD	HL,TRACK_MSG	
 3670 1874  CD 1917     	CALL	PMSG
 3671 1877  11 5000     	LD	DE,FBUFFER	;Move Start of track image into DE
 3672 187A  D5          	PUSH	DE		;save it
 3673 187B  2A 392D     	LD	HL,(INDEX_MARK)	;End+1 of track header
 3674 187E  2B          	DEC	HL
 3675 187F  ED 52       	SBC	HL,DE
 3676 1881  EB          	EX	DE,HL		;Count now in DE
 3677 1882  E1          	POP	HL		;DE on stack to HL
 3678 1883  7E          HDRX:	LD	A,(HL)
 3679 1884  CD 199D     	CALL	PACC		;Print out HEX values of HEADER Field
 3680 1887  23          	INC	HL		
 3681 1888  1B          	DEC	DE		;Decrease DE count by 1
 3682 1889  7B          	LD	A,E
 3683 188A  B7          	OR	A,A		;Not XX00 at least
 3684 188B  20 F6       	JR	NZ,HDRX
 3685 188D  B2          	OR	A,D		
 3686 188E  20 F3       	JR	NZ,HDRX		;Not 0000
 3687                   
 3688                   				;Now display the FIRST sector ID field area
 3689 1890  21 265E     	LD	HL,SECTOR_MSG	
 3690 1893  CD 1917     	CALL	PMSG
 3691 1896  ED 5B 392D  	LD	DE,(INDEX_MARK)		;Move Start of sector image into DE
 3692 189A  D5          	PUSH	DE			;save it
 3693 189B  2A 392F     	LD	HL,(S_DATA_MARK)	;End+1 of sec ID field (allow the +1 to capture the FB byte)
 3694 189E  ED 52       	SBC	HL,DE
 3695 18A0  EB          	EX	DE,HL		;Count now in DE
 3696 18A1  E1          	POP	HL		;DE on stack to HL
 3697 18A2  7E          HSECX:	LD	A,(HL)
 3698 18A3  CD 199D     	CALL	PACC		;Print out HEX values of 1st Sector ID Field
 3699 18A6  23          	INC	HL		
 3700 18A7  1B          	DEC	DE		;Decrease DE count by 1
 3701 18A8  7B          	LD	A,E
 3702 18A9  B7          	OR	A,A		;Not XX00 at least
 3703 18AA  20 F6       	JR	NZ,HSECX
 3704 18AC  B2          	OR	A,D		
 3705 18AD  20 F3       	JR	NZ,HSECX	;Not 0000
 3706                   
 3707                   				;Now display the FIRST sector DATA field area
 3708 18AF  21 2673     	LD	HL,SEC_DATA_MSG	
 3709 18B2  CD 1917     	CALL	PMSG
 3710 18B5  ED 5B 392F  	LD	DE,(S_DATA_MARK)	;Move Start of sector image into DE
 3711 18B9  D5          	PUSH	DE			;save it
 3712 18BA  2A 3931     	LD	HL,(E_DATA_MARK)	;End+1 of DATA field
 3713 18BD  2B          	DEC	HL
 3714 18BE  ED 52       	SBC	HL,DE
 3715 18C0  EB          	EX	DE,HL		;Count now in DE
 3716 18C1  E1          	POP	HL		;DE on stack to HL
 3717 18C2  7E          HDATAX:	LD	A,(HL)
 3718 18C3  CD 199D     	CALL	PACC		;Print out HEX values of 1st Sector DATA Field
 3719 18C6  23          	INC	HL		
 3720 18C7  1B          	DEC	DE		;Decrease DE count by 1
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  65
VF      Z80

 3721 18C8  7B          	LD	A,E
 3722 18C9  B7          	OR	A,A		;Not XX00 at least
 3723 18CA  20 F6       	JR	NZ,HDATAX
 3724 18CC  B2          	OR	A,D		
 3725 18CD  20 F3       	JR	NZ,HDATAX	;Not 0000
 3726                   
 3727                   				;Now display the FIRST sector GAP3 field area
 3728 18CF  21 268A     	LD	HL,SEC_GAP3_MSG	
 3729 18D2  CD 1917     	CALL	PMSG
 3730 18D5  ED 5B 3931  	LD	DE,(E_DATA_MARK)	;Move Start of sector image into DE
 3731 18D9  D5          	PUSH	DE			;save it
 3732 18DA  2A 3933     	LD	HL,(E_SEC_MARK)		;End+1 of GAP3 field
 3733 18DD  2B          	DEC	HL
 3734 18DE  ED 52       	SBC	HL,DE
 3735 18E0  EB          	EX	DE,HL		;Count now in DE
 3736 18E1  E1          	POP	HL		;DE on stack to HL
 3737 18E2  7E          HGAP3X:	LD	A,(HL)
 3738 18E3  CD 199D     	CALL	PACC		;Print out HEX values of 1st Sector GAP3 Field
 3739 18E6  23          	INC	HL		
 3740 18E7  1B          	DEC	DE		;Decrease DE count by 1
 3741 18E8  7B          	LD	A,E
 3742 18E9  B7          	OR	A,A		;Not XX00 at least
 3743 18EA  20 F6       	JR	NZ,HGAP3X
 3744 18EC  B2          	OR	A,D		
 3745 18ED  20 F3       	JR	NZ,HGAP3X	;Not 0000
 3746                   
 3747                   				;Now display the Track GAP4 field area
 3748 18EF  21 26A1     	LD	HL,SEC_GAP4_MSG	
 3749 18F2  CD 1917     	CALL	PMSG
 3750 18F5  ED 5B 3935  	LD	DE,(S_GAP4_MARK)	;Start of sector GAP4 into DE
 3751 18F9  D5          	PUSH	DE		;save it
 3752 18FA  2A 3937     	LD	HL,(E_GAP4_MARK)	;End+1 of GAP3 field
 3753 18FD  2B          	DEC	HL
 3754 18FE  ED 52       	SBC	HL,DE
 3755 1900  EB          	EX	DE,HL		;Count now in DE
 3756 1901  E1          	POP	HL		;DE on stack to HL
 3757 1902  7E          HGAP4X:	LD	A,(HL)
 3758 1903  CD 199D     	CALL	PACC		;Print out HEX values of 1st Sector GAP3 Field
 3759 1906  23          	INC	HL		
 3760 1907  1B          	DEC	DE		;Decrease DE count by 1
 3761 1908  7B          	LD	A,E
 3762 1909  B7          	OR	A,A		;Not XX00 at least
 3763 190A  20 F6       	JR	NZ,HGAP4X
 3764 190C  B2          	OR	A,D
 3765 190D  20 F3       	JR	NZ,HGAP4X	;Not 0000
 3766 190F  CD 1934     	CALL	ZCRLF
 3767                   ;
 3768 1912              NO_TDISPLAY:
 3769 1912  E1          	POP	HL
 3770 1913  D1          	POP	DE
 3771 1914  C1          	POP	BC
 3772 1915  F1          	POP	AF
 3773 1916  C9          	RET
 3774                   ;
 3775                   ;
 3776                   ;====================== SUPPORT ROUTINES ==================================
 3777                   ;
 3778 1917  7E          PMSG:	LD	A,(HL)		;PRINT MESSAGE STRING in [HL] up to 0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  66
VF      Z80

 3779 1918  B7          	OR	A
 3780 1919  C8          	RET	Z
 3781 191A  4F          	LD	C,A
 3782 191B  CD 011B     	CALL	CO
 3783 191E  23          	INC	HL
 3784 191F  C3 1917     	JP	PMSG
 3785                   ;
 3786 1922  CD 0112     GETCMD:	CALL	CI		;GET A CHARACTER, convert to UC, ECHO it
 3787 1925  CD 1943     	CALL	UCASE
 3788 1928  FE 1B       	CP	A,ESC
 3789 192A  C8          	RET	Z		;Don't echo an ESC
 3790 192B  F5          	PUSH	AF		;Save it
 3791 192C  C5          	PUSH	BC
 3792 192D  4F          	LD	C,A
 3793 192E  CD 011B     	CALL	CO		;Echo it
 3794 1931  C1          	POP	BC
 3795 1932  F1          	POP	AF		;get it back
 3796 1933  C9          	RET
 3797                   
 3798 1934  F5          ZCRLF:	PUSH	AF		;Send CR/LF to CRT
 3799 1935  C5          	PUSH	BC
 3800 1936  0E 0D       	LD	C,CR
 3801 1938  CD 011B     	CALL	CO
 3802 193B  0E 0A       	LD	C,LF
 3803 193D  CD 011B     	CALL	CO
 3804 1940  C1          	POP	BC
 3805 1941  F1          	POP	AF
 3806 1942  C9          	RET
 3807                   ;				;Convert LC to UC
 3808 1943  FE 61       UCASE:	CP	A,'a'		;must be >= lowercase a
 3809 1945  D8          	RET	C		; else go back...
 3810 1946  FE 7B       	CP	A,'z'+1		;must be <= lowercase z
 3811 1948  D0          	RET	NC		; else go back...
 3812 1949  D6 20       	SUB	A,'a'-'A'	;subtract lowercase bias
 3813 194B  C9          	RET
 3814                   ;
 3815                   ;
 3816                   ; Return with 2 HEX digits in [A]. If abort, Carry flag set + ESC in [A]
 3817 194C              GET_HEX:
 3818 194C  C5          	PUSH	BC			
 3819 194D  CD 1922     	CALL	GETCMD		;Get a character from keyboard & ECHO
 3820 1950  FE 1B       	CP	A,ESC
 3821 1952  28 2A       	JR	Z,HEX_ABORT
 3822 1954  FE 2F       	CP	'/'		;check 0-9, A-F
 3823 1956  38 26       	JR	C,HEX_ABORT
 3824 1958  FE 47       	CP	'F'+1
 3825 195A  30 22       	JR	NC,HEX_ABORT
 3826 195C  CD 1995     	CALL	ASBIN		;Convert to binary
 3827 195F  CB 27       	SLA	A
 3828 1961  CB 27       	SLA	A
 3829 1963  CB 27       	SLA	A
 3830 1965  CB 27       	SLA	A		;Shift to high nibble	
 3831 1967  47          	LD	B,A		;Store it
 3832 1968  CD 1922     	CALL	GETCMD		;Get 2nd character from keyboard & ECHO
 3833 196B  FE 1B       	CP	A,ESC
 3834 196D  28 0F       	JR	Z,HEX_ABORT
 3835 196F  FE 2F       	CP	'/'		;check 0-9, A-F
 3836 1971  38 0B       	JR	C,HEX_ABORT
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  67
VF      Z80

 3837 1973  FE 47       	CP	'F'+1
 3838 1975  30 07       	JR	NC,HEX_ABORT
 3839 1977  CD 1995     	CALL	ASBIN		;Convert to binary
 3840 197A  B0          	OR	A,B		;add in the first digit
 3841 197B  B7          	OR	A,A		;To return NC
 3842 197C  C1          	POP	BC
 3843 197D  C9          	RET
 3844 197E              HEX_ABORT:
 3845 197E  37          	SCF			;Set Carry flag 
 3846 197F  3E 1B       	LD	A,ESC
 3847 1981  C1          	POP	BC
 3848 1982  C9          	RET
 3849                   ;
 3850                   ;
 3851                   ; Put 4 HEX characters in [HL] (To set RAM location etc.)
 3852                   ;
 3853 1983              GET_HEX4:	
 3854 1983  26 00       	LD      H,0000H
 3855 1985  CD 194C     	CALL	GET_HEX		;get 2 HEX digits
 3856 1988  38 09       	JR	C,SCAN_ABORT
 3857 198A  67          	LD	H,A
 3858 198B  CD 194C     	CALL	GET_HEX		;get 2 more HEX digits
 3859 198E  38 03       	JR	C,SCAN_ABORT
 3860 1990  6F          	LD	L,A
 3861 1991  B7          	OR	A,A		;To return NC
 3862 1992  C9          	RET
 3863 1993              SCAN_ABORT:
 3864 1993  37          	SCF			;Set Carry flag 
 3865 1994  C9          	RET
 3866                   
 3867                   ; ASCII TO BINARY CONVERSION ROUTINE
 3868 1995  D6 30       ASBIN:	SUB	30H 
 3869 1997  FE 0A       	CP	0AH 
 3870 1999  F8          	RET	M
 3871 199A  D6 07       	SUB	07H 
 3872 199C  C9          	RET
 3873                   
 3874                   ;Print the acccumulator value on CRT in HEX-ASCII
 3875 199D  F5          PACC:	PUSH	AF
 3876 199E  C5          	PUSH	BC
 3877 199F  F5          	PUSH	AF
 3878 19A0  0F          	RRCA
 3879 19A1  0F          	RRCA
 3880 19A2  0F          	RRCA
 3881 19A3  0F          	RRCA
 3882 19A4  CD 19AE     	CALL	ZCONV
 3883 19A7  F1          	POP	AF
 3884 19A8  CD 19AE     	CALL	ZCONV
 3885 19AB  C1          	POP	BC
 3886 19AC  F1          	POP	AF
 3887 19AD  C9          	RET
 3888                   
 3889 19AE  E6 0F       ZCONV:	AND	A,0FH		;HEX to ASCII
 3890 19B0  C6 90       	ADD	90H
 3891 19B2  27          	DAA
 3892 19B3  CE 40       	ADC	40H
 3893 19B5  27          	DAA
 3894 19B6  4F          	LD	C,A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  68
VF      Z80

 3895 19B7  CD 011B     	CALL	CO
 3896 19BA  C9          	RET
 3897                   ;
 3898                   ;DISPLAY BIT PATTERN IN [A]
 3899                   ;
 3900 19BB  F5          ZBITS:	PUSH	AF
 3901 19BC  C5          	PUSH	BC
 3902 19BD  D5          	PUSH	DE
 3903 19BE  5F          	LD	E,A		
 3904 19BF  06 08       	LD	B,8
 3905 19C1  CB 23       BQ2:	SLA	E
 3906 19C3  3E 18       	LD	A,18H
 3907 19C5  8F          	ADC	A
 3908 19C6  4F          	LD	C,A
 3909 19C7  CD 011B     	CALL	CO
 3910 19CA  10 F5       	DJNZ	BQ2
 3911 19CC  D1          	POP	DE
 3912 19CD  C1          	POP	BC
 3913 19CE  F1          	POP	AF
 3914 19CF  C9          	RET
 3915                   ;
 3916                   ;
 3917                   ; CHECK IF AN ABORT (ESC) CHARACTER IS PRESENT AT THE CONSOL
 3918                   ; HOLD EVERYTHING IF SPACEBAR IS PRESSED
 3919                   ;
 3920 19D0              CHECKABORT:			;see if an abort is required
 3921 19D0  CD 010A     	CALL	CONST
 3922 19D3  C8          	RET	Z	
 3923 19D4  CD 0112     CHECK1:	CALL	CI
 3924 19D7  FE 1B       	CP	A,ESC		;ESC to abort
 3925 19D9  28 06       	JR	Z,CABORT
 3926 19DB  FE 20       	CP	A,' '		;If spacebar then freeze CRT display
 3927 19DD  28 F5       	JR	Z,CHECK1
 3928 19DF  AF          	XOR	A,A
 3929 19E0  C9          	RET
 3930 19E1  AF          CABORT:	XOR	A,A		;Was ESC, so return with NZ flag
 3931 19E2  3D          	DEC	A		;return NZ, & 0FFH in A if ESC there
 3932 19E3  C9          	RET
 3933                   ;
 3934                   ;
 3935                   ;
 3936                   ;---------- Debug Routines -----------------------------
 3937 19E4              DEBUG_A:			;Display contents of A of CRT
 3938 19E4  F5          	PUSH	AF
 3939 19E5  C5          	PUSH	BC
 3940 19E6  D5          	PUSH	DE
 3941 19E7  E5          	PUSH	HL
 3942 19E8  F5          	PUSH	AF
 3943 19E9  0E 3E       	LD	C,'>'
 3944 19EB  CD 011B     	CALL	CO
 3945 19EE  F1          	POP	AF
 3946 19EF  CD 199D     	CALL	PACC
 3947 19F2  0E 3C       	LD	C,'<'
 3948 19F4  CD 011B     	CALL	CO
 3949 19F7  E1          	POP	HL
 3950 19F8  D1          	POP	DE
 3951 19F9  C1          	POP	BC
 3952 19FA  F1          	POP	AF
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  69
VF      Z80

 3953 19FB  C9          	RET
 3954                   ;
 3955 19FC              DEBUG_B				;Display A on CRT wait for keyboard
 3956 19FC  CD 19E4     	CALL	DEBUG_A
 3957 19FF  F5          	PUSH	AF
 3958 1A00  CD 0112     	CALL	CI
 3959 1A03  F1          	POP	AF
 3960 1A04  C9          	RET
 3961                   ;
 3962 1A05              DEBUG_HL			;Display HL on CRT
 3963 1A05  F5          	PUSH	AF
 3964 1A06  7C          	LD	A,H
 3965 1A07  CD 19E4     	CALL	DEBUG_A
 3966 1A0A  7D          	LD	A,L
 3967 1A0B  CD 19E4     	CALL	DEBUG_A
 3968 1A0E  F1          	POP	AF
 3969 1A0F  C9          	RET 
 3970                   ;
 3971                   ;
 3972                   ;
 3973                   ;---------------------------------------------------------------------------
 3974                   ;
 3975 1A10  0D 0A 0A    SIGNON:		DB	CR,LF,LF
 3976         0001      	    if	CHIP_1795
 3977 1A13  56 65 72 73 		DB	'Versafloppy II (for 1795 chip) Diagnostic Program. '
 3978 1A46  28 56 31 2E 		DB	'(V1.01 by John Monahan 2009)',CR,LF,0
 3979                   	     endif
 3980                   
 3981         0000      	    if	CHIP_1791
 3984                   	    endif
 3985                   
 3986 1A65  50 6C 65 61 GETDRV_MSG:	DB	'Please select a drive. (A,B,C or D): ',0
 3987                   	
 3988 1A8B  0D 0A 53 6F XXXDRV:		DB	CR,LF,	'Sorry that is an invalid drive',0
 3989 1AAC  0D 0A 49 73 GETSIZE_MSG:	DB	CR,LF,	'Is this a 5" or 8" Drive (5,8): ',0	
 3990 1ACF  0D 0A 0A 50 DISK_8_FORMATS:	DB	CR,LF,LF,'Possible 8" disk formats:-'
 3991 1AEC  0D 0A 41 20 		DB	CR,LF,	'A = 128 Bytes/Sec, 26 Sec/Ttk. 8" SDSS. (IBM 3740 Format)'  
 3992 1B27  0D 0A 42 20 		DB	CR,LF,	'B = 128 Bytes/Sec, 50 Sec/Ttk. 8" DDSS. (SD Systems 8" DD Format)'  
 3993 1B6A  0D 0A 43 20 		DB	CR,LF,	'C = 256 Bytes/Sec, 26 Sec/Ttk. 8" DDDS. (IBM System 34 Format)'  
 3994 1BAA  0D 0A 44 20 		DB	CR,LF,	'D = 512 Bytes/Sec, 15 Sec/Trk. 8" DDDS. '
 3995 1BD4  0D 0A 45 20 		DB	CR,LF,	'E = 1024 Bytes/Sec, 9 Sec/Trk. 8" DDSS. (For CPM3 System)'
 3996 1C0F  0D 0A 46 20 		DB	CR,LF,	'F = 1024 Bytes/Sec, 9 Sec/Trk. 8" DDDS.'
 3997 1C38  0D 0A 50 6C 		DB	CR,LF,	'Please select a disk format: ',0
 3998 1C58  0D 0A 0A 50 DISK_5_FORMATS:	DB	CR,LF,LF,'Possible 5" disk formats:-'
 3999 1C75  0D 0A 41 20 		DB	CR,LF,	'A = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (CPM3 & IBM PC CPM-86 Format)'
 4000 1CBB  0D 0A 42 20 		DB	CR,LF,	'B = 128 Bytes/Sec, 18 Sec/Ttk. 5" SDSS. (SD Systems 5" SD Format)'  
 4001 1CFE  0D 0A 43 20 		DB	CR,LF,	'C = 128 Bytes/Sec, 29 Sec/Ttk. 5" DDSS. (SD Systems 5" DD Format)'  
 4002 1D41  0D 0A 44 20 		DB	CR,LF,	'D = 512 Bytes/Sec, 9 Sec/Ttk. 5" DDDS. (DEC VT180 Format)'
 4003 1D7C  0D 0A 45 20 		DB	CR,LF,	'E = 256 Bytes/Sec, 16 Sec/Ttk. 5" DDDS. (TOSHIBA T-100 Format)'
 4004 1DBC  0D 0A 46 20 		DB	CR,LF,	'F = 128 Bytes/Sec, 18 Sec/Ttk. 5" SDDS. (CROMEMCO-SD CDOS Format)'
 4005 1DFF  0D 0A 47 20 		DB	CR,LF,	'G = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDDS. (CROMEMCO-DD CDOS Format)'
 4006 1E42  0D 0A 48 20 		DB	CR,LF,	'H = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDDS. (EPSON QX-10 Format)'
 4007 1E80  0D 0A 49 20 		DB	CR,LF,	'I = 1024 Bytes/Sec, 5 Sec/Ttk. 5" DDDS. (MORROW MD3 Format)'
 4008 1EBD  0D 0A 4A 20 		DB	CR,LF,	'J = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (ZENITH Z-100 Format)'
 4009 1EFB  0D 0A 4B 20 		DB	CR,LF,	'K = 256 Bytes/Sec, 16 Sec/Ttk. 5" DDDS. (SUPERBRAIN QD Format)'
 4010 1F3B  0D 0A 4C 20 		DB	CR,LF,	'L = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (IBM PC, MSDOS 1.1 Format)'
 4011 1F7E  0D 0A 4D 20 		DB	CR,LF,	'M = 512 Bytes/Sec, 9 Sec/Ttk. 5" DDDS. (IBM PC, MSDOS 2.x Format)'
 4012 1FC1  0D 0A 4E 20 		DB	CR,LF,	'N = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDSS. (TRS-80 MOD III Format)'
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  70
VF      Z80

 4013 2002  0D 0A 50 6C 		DB	CR,LF,	'Please select a disk format: ',0
 4014 2022  0D 0A 53 6F OPTION_ERROR:	DB	CR,LF,	'Sorry invalid option',0
 4015 2039  0D 0A 53 65 SEC_COUNT_ERR	DB	CR,LF,	'Sector count error',0
 4016 204E  0D 0A 49 6E RAM_ERROR	DB	CR,LF,	'Invalid RAM location error',0
 4017                   
 4018 206B  0D 0A 0A 56 MAIN_MENU0:	DB	CR,LF,LF,'VERSAFLOPPY II DIAGNOSTICS ---- MAIN MENU ---- (Detail Display OFF)',0
 4019 20B2  0D 0A 0A 56 MAIN_MENU1:	DB	CR,LF,LF,'VERSAFLOPPY II DIAGNOSTICS ---- MAIN MENU ---- (Detail Display ON)',0
 4020 20F8  0D 0A 43 75 DISK_INFO	DB	CR,LF,'Current drive:- ',0
 4021 210B  0D 0A 44 72 DISK_INFO0:	DB	CR,LF,'Drive ',0
 4022 2114  3A 20 28 49 DISK_INFO1:	DB		': (IOBYTE)=',0
 4023 2120  20 20 53 69 DISK_INFO2:	DB		'  Size=',0
 4024 2128  22 2C 20 44 DISK_INFO3:	DB		'", Double Sided,  ',0
 4025 213B  22 2C 20 53 DISK_INFO4:	DB		'", Single Sided,  ',0
 4026 214E  44 6F 75 62 DISK_INFO5:	DB		'Double Density disk.',0
 4027 2163  53 69 6E 67 DISK_INFO6:	DB		'Single Density disk.',0
 4028                   
 4029 2178  0D 0A 43 75 DISK_INFO7:	DB	CR,LF,	'Current Disk [IX] Table: Sec/Track=',0
 4030 219E  48 2C 20 54 DISK_INFO8:	DB		'H, Tracks/Side=',0
 4031 21AE  48 2C 20 53 DISK_INFO9:	DB		'H, Sec Size=',0
 4032 21BB  48 2C 20 20 DISK_INFO10:	DB		'H,  128 Bytes/Sec.',0
 4033 21CE  48 2C 20 20 DISK_INFO11:	DB		'H,  256 Bytes/Sec.',0
 4034 21E1  48 2C 20 20 DISK_INFO12:	DB		'H,  512 Bytes/Sec.',0
 4035 21F4  48 2C 20 31 DISK_INFO13:	DB		'H, 1024 Bytes/Sec.',0
 4036 2207  54 72 61 63 IDMSG0:		DB		'Track/Side/Sec/Size/(CRC) TRACK ID field= ',0
 4037                   
 4038 2232  0D 0A 0A 30 MENU_OPTIONS	DB	CR,LF,LF, '0 = Select a DRIVE/DISK to analyze'
 4039 2257  0D 0A 31 20 		DB	CR,LF,	'1 = Seek Test                    2 = Sequental Read Sector Test'
 4040 2298  0D 0A 33 20 		DB	CR,LF,	'3 = Sequental Write Sector Test  4 = Sequental R/W Sector Test'
 4041 22D8  0D 0A 35 20 		DB	CR,LF,	'5 = Random Track/Sector R/W Test 6 = Continously Read sectors from a Track'
 4042 2324  0D 0A 37 20 		DB	CR,LF,	'7 = Examine one complet track    8 = Load disk sctors to RAM'
 4043 2362  0D 0A 39 20 		DB	CR,LF,	'9 = Write RAM to disk sectors    C = Copy current disk to another disk'
 4044 23AA  0D 0A 46 20 		DB	CR,LF,	'F = Format the current disk      S = Copy CPM system tracks from ' 
 4045 23ED  61 6E 6F 74 		DB		'another disk.'
 4046 23FA  0D 0A 56 20 		DB	CR,LF,	'V = Verify sectors disk to disk  I = Quick Format of 8" CPM SSSD Disk in B:',0
 4047                   
 4048 2448  0D 0A 44 20 MENU1_MSG:	DB	CR,LF,	'D = Turn ON detailed display.    ESC To return to CPM'
 4049 247F  0D 0A 50 6C 		DB	CR,LF,	'Please enter a command:- ',0
 4050                   
 4051 249B  0D 0A 44 20 MENU2_MSG:	DB	CR,LF,	'D = Turn OFF detailed display.   ESC To return to CPM'
 4052 24D2  0D 0A 50 6C 		DB	CR,LF,	'Please enter a command:- ',0
 4053                   
 4054 24EE  0D 0A 44 69 SEKMSG		DB	CR,LF,  'Disk seek test.',CR,LF,0
 4055 2502  20 54 52 41 ATTRK:		DB		' TRACK ',0
 4056 250A  48 2C 20 53 ATSEC:		DB		'H, SECTOR ',0
 4057 2515  48 2C 20 53 HEAD0_MSG	DB		'H, SIDE A',0
 4058 251F  48 2C 20 53 HEAD1_MSG	DB		'H, SIDE B',0
 4059 2529  48 2E 20 00 H_MSG		DB		'H. ',0
 4060 252D  20 53 49 44 ATHEAD0		DB		' SIDE A ',0 
 4061 2536  20 53 49 44 ATHEAD1		DB		' SIDE B ',0 
 4062 253F  0D 0A 53 65 SEC_MSG:	DB	CR,LF,	'Sector Contents=',0
 4063 2552  0D 0A 46 6F FORMATTING_MSG:	DB	CR,LF,	'Formating Disk.  Format= ',0
 4064 256E  0D 0A 07 49 BADCMD		DB	CR,LF,BELL, 'Invalid command selected.',0
 4065 258B  0D 0A 07 44 FORM_ERRMSG:	DB	CR,LF,BELL,'Disk formatting aborted or write error.',0
 4066 25B6  0D 0A 44 69 END_FORM_MSG:	DB	CR,LF,	'Disk has been formatted correctly. Each track is ',0
 4067 25EA  48 20 42 79 END_FORM1_MSG	DB	        'H Bytes long.',0
 4068 25F8  0D 0A 53 6F CODE_NOT_DONE:	DB	CR,LF,	'Sorry Code not done yet. HALT',0
 4069 2618  0D 0A 46 6F FORM_TRK:	DB	CR,LF,	'Formatting TRACK ',0
 4070 262C  54 72 61 63 TRACK_MSG:	DB		'Track Image:- '
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  71
VF      Z80

 4071 263A  0D 0A 49 6E 		DB	CR,LF,	'Index field up to First sector=',CR,LF,0
 4072 265E  0D 0A 53 65 SECTOR_MSG:	DB	CR,LF,	'Sector ID Field=',CR,LF,0
 4073 2673  0D 0A 53 65 SEC_DATA_MSG:	DB	CR,LF,	'Sector DATA Field=',CR,LF,0
 4074 268A  0D 0A 53 65 SEC_GAP3_MSG:	DB	CR,LF,	'Sector GAP3 Field=',CR,LF,0
 4075 26A1  0D 0A 45 6E SEC_GAP4_MSG:	DB	CR,LF,	'End of Track GAP4 Field=',CR,LF,0
 4076 26BE  0D 0A 50 6C GET_TRACK_MSG:	DB	CR,LF,	'Please enter track number. (Enter 2 HEX digits): ',0
 4077 26F2  0D 0A 50 6C GET_SIDE_MSG:	DB	CR,LF,	'Please select Disk SIDE A or B (A,B): ',0
 4078 271B  0D 0A 07 49 SIDE_ERROR:	DB	CR,LF,BELL, 'Invalid SIDE selection',0
 4079 2735  0D 0A 50 6C GET_SEC_MSG:	DB	CR,LF,	'Please enter sector number. (Enter 2 HEX digits): ',0
 4080 276A  0D 0A 54 72 TRACK_CONTENTS:	DB	CR,LF,	'Track contents:-',CR,LF,0
 4081 277F  0D 0A 44 6F MORE_MSG:	DB	CR,LF,	'Do you wish to see more (Y/N): ',0
 4082 27A1  0D 0A 49 6E SEC_ERROR:	DB	CR,LF,	'Invalid sector number selection',0
 4083 27C3  0D 0A 47 41 GAP3_MSG:	DB	CR,LF,	'GAP3=',0
 4084 27CB  0D 0A 47 41 GAP1_MSG:	DB	CR,LF,	'GAP1=',0
 4085 27D3  0D 0A 53 65 ID_MSG:		DB	CR,LF,	'Sector ID Mark=',0
 4086 27E5  0D 0A 47 41 GAP2_MSG:	DB	CR,LF,	'GAP2=',0
 4087 27ED  0D 0A 44 61 SYNC_MSG:	DB	CR,LF,	'Data Sync=',0
 4088 27FA  0D 0A 53 74 STATUS_179x:	DB	CR,LF,	'Status Bits of 1791/5 Chip= ',0
 4089 2819  0D 0A 07 44 ENDMSG:		DB	CR,LF,BELL,'Disk has been formatted ',CR,LF,0
 4090 2837  0D 0A 07 53 ERRMSG:		DB	CR,LF,BELL,'SORRY COULD NOT SEEK NEXT TRACK',CR,LF,0
 4091 285C  0D 0A 07 54 TRACK_ERROR:	DB	CR,LF,BELL,'That track is out of range for this disk',0
 4092 2888  0D 0A 52 65 SEC_READ_RETRY:	DB	CR,LF,	'Re-reading SECTOR ',0
 4093 289D  0D 0A 52 65 SEC_WR_RETRY:	DB	CR,LF,	'Re-writing SECTOR ',0
 4094 28B2  0D 0A 52 65 SEC_RH_RETRY	DB	CR,LF, 'Re-Seeking head for re-reading SECTOR ',0
 4095 28DB  0D 0A 52 65 SEC_WH_RETRY	DB	CR,LF, 'Re-Seeking head for re-writing SECTOR ',0
 4096 2904  0D 0A 07 53 SEC_V_ERROR	DB	CR,LF,BELL,'Sector Verify Error found -----',0
 4097 2927  0D 0A 53 65 RDTST_MSG	DB	CR,LF,	'Sequental Read Sectors Test',0
 4098 2945  0D 0A 53 65 WRTST_MSG	DB	CR,LF,	'Sequental Write Sectors Test',0
 4099 2964  0D 0A 53 65 RDWRTST_MSG	DB	CR,LF,	'Sequental R/W Sectors Test',0
 4100 2981  0D 0A 52 61 RAND_TST_MSG	DB	CR,LF,	'Random Track/Sector R/W Sectors Test',0
 4101 29A8  0D 0A 07 54 DISK_WP_MSG	DB	CR,LF,BELL, 'This disk is currently Write Protected.',0
 4102 29D3  0D 0A 53 70 INITCPM_MSG	DB	CR,LF,	'Special modification of first sector for CPM86 done.',0
 4103 2A0A  0D 0A 07 53 TRK_SIZE_ERR	DB	CR,LF,BELL, 'Size of track (TRK_SIZE) in the disk paramater table is invalid',0
 4104 2A4D  0D 0A 4E 75 SEC_COUNT_MSG	DB	CR,LF,	'Number of sectors (Enter 2 HEX digits): ',0
 4105 2A78  0D 0A 45 6E GET_DMA_MSG	DB	CR,LF,	'Enter RAM loaction to recieve the data (Enter 4 HEX digits): ',0
 4106 2AB8  0D 0A 45 6E GET_DMAD_MSG	DB	CR,LF,	'Enter RAM loaction of data to write (Enter 4 HEX digits): ',0
 4107 2AF5  0D 0A 4C 6F LOADING_MSG:	DB	CR,LF,	'Loading data ',0
 4108 2B05  20 54 6F 20 LOADING1_MSG:	DB	' To RAM at ',0
 4109 2B11  0D 0A 07 45 ERR_TK_MSG:	DB	CR,LF,BELL, 'ERROR. Ran out of tracks!',0
 4110 2B2E  0D 0A 44 61 LOAD_DONE_MSG:	DB	CR,LF,	'Data read correctly.',0
 4111 2B45  0D 0A 4C 6F TRK_DUMP_MSG	DB	CR,LF,	'Load a selected track from current disk into RAM',0
 4112 2B78  0D 0A 4C 6F LOAD_MSG	DB	CR,LF,	'Load sector(s) from disk to RAM',0
 4113 2B9A  0D 0A 57 72 DUMP_MSG	DB	CR,LF,	'Write sector(s) to disk with data from RAM location.',0
 4114 2BD1  0D 0A 57 72 DUMPING_MSG:	DB	CR,LF,	'Writing data ',0
 4115 2BE1  20 46 72 6F DUMPING1_MSG:	DB	' From RAM at ',0
 4116 2BEF  0D 0A 44 61 DUMP_DONE_MSG:	DB	CR,LF,	'Data written correctly.',0
 4117 2C09  0D 0A 07 46 TIMEOUT_ERR:	DB	CR,LF,BELL,'Forced a 1791/5 chip RESET because the status port was hung up busy!'
 4118 2C50  0D 0A 43 68 		DB	CR,LF,	'Check hardware such as drive type, connections etc.',0
 4119 2C86  0D 0A 43 6F COPY_MSG:	DB	CR,LF,	'Copy current disk to another disk (Note: Disks MUST be same format).',0
 4120 2CCD  0D 0A 46 6F COPY2_MSG	DB	CR,LF,	'For the destination disk: ',0
 4121 2CEA  0D 0A 43 6F HOW_MANY_TRKS	DB	CR,LF,	'Copy just the System tracks or all tracks.  (S or A): ',0 
 4122 2D23  0D 0A 07 49 INVALID_TRK_CT	DB	CR,LF,BELL, 'Invalid track option.',0
 4123 2D3C  0D 0A 44 69 COPYING_DONE	DB	CR,LF,	'Disk Copying done.',0
 4124 2D51  0D 0A 52 65 COPY_AT_TRK:	DB	CR,LF,	'Reading data from ',0
 4125 2D66  20 57 72 69 WRITE_AT_TRK:	DB	' Writing data to ',0
 4126                   
 4127 2D78  0D 0A 52 65 READ_AT_TRK:	DB	CR,LF,	'Reading ',0
 4128 2D83  20 56 65 72 VERIFY_AT_TRK:	DB		' Verify ',0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  72
VF      Z80

 4129 2D8C  0D 0A 44 69 VERIFY_DONE	DB	CR,LF,	'Disk verifying done',0
 4130 2DA2  0D 0A 53 65 VERIFY_MSG	DB	CR,LF,	'Sector by Sector verifying of two disks',0
 4131 2DCC  0D 0A 46 6F VERIFY2_MSG	DB	CR,LF,	'For the second disk: ',0
 4132 2DE4  29 00       CLOSE_BRACKET:	DB		')',0
 4133 2DE6  0D 0A 07 55 UNKNOWN_ERROR:	DB	CR,LF,BELL,'Unknown Error. Status Bits= (',0
 4134 2E07  0D 0A 57 69 SYS_COPY_MSG:	DB	CR,LF,	'Will copy CPM system tracks FROM another disk and ' 
 4135 2E3B  77 72 69 74 		DB		'write it TO the current disk',0
 4136 2E58  0D 0A 53 6F SYS_COPY_MSG1:	DB	CR,LF,	'Source disk for CPM system tracks:',0
 4137 2E7D  0D 0A 43 6F COPY_SYS_TRK	DB	CR,LF,	'Copying CPM from ',0
 4138 2E91  20 57 72 69 WRITE_SYS_TRK	DB		' Writing CPM to ',0
 4139 2EA2  0D 0A 43 50 DONE_SYS_MSG	DB	CR,LF,	'CPM System tracks copied OK.',0
 4140 2EC1  0D 0A 51 75 IBM_FORMAT	DB	CR,LF,	'Quick formatting of a blank SSSD 8" IBM disk in B: drive for CPM.',0
 4141 2F05  0D 0A 46 6F IBM_FORMAT1	DB	CR,LF,	'Formatting in progress',CR,LF,0
 4142 2F20  0D 0A 44 69 END_FORM_MSG1:	DB	CR,LF,	'Disk has been formatted as a SSSD 8" disk (IBM 3740 Format).',0
 4143 2F5F  0D 0A 0A 07 ERRORS_SEEN:	DB	CR,LF,LF,BELL, 'Errors encountered. Format not reliable',0
 4144 2F8B  0D 0A 44 6F COPY_SYSTRKS	DB	CR,LF,	'Do you wish to copy CPM from the system tracks of drive A:'
 4145 2FC7  0D 0A 4E 6F 		DB	CR,LF,	'Note: It must be on an IBM 3740 formatted disk. (Y/N)',0
 4146 2FFF  0D 0A 43 6F COPYING_CPM	DB	CR,LF,	'Copying CPM from system tracks of Drive A:',0
 4147 302C  0D 0A 44 69 END_FORM_MSG2:	DB	CR,LF,	'Disk B: has been formatted and CPM system installed on it correctly.',0
 4148 3073  0D 41 74 20 FORM_TRK_MSG	DB	CR,	'At Track ',0
 4149 307E  0D 0A 0A 07 BAD_COPY_MSG	DB	CR,LF,LF,BELL, 'Errors encountered during disk copying. Copy may not be valid',0
 4150                   ;
 4151                   ;
 4152                   ;	
 4153 30C0  0D 0A 07 53 SEC_READ_ERROR: DB	CR,LF,BELL,'SEC READ Error.'
 4154 30D2  20 42 69 74 		DB	' Bits: DNR,0,Record Type,RNF,'
 4155 30EF  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4156                   
 4157 3103  0D 0A 07 53 SEEKNV_ERROR:	DB	CR,LF,BELL,'SEEK (NV) Error.'
 4158 3116  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4159 312E  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4160                   
 4161 3144  0D 0A 07 52 RSCMD_ERROR:	DB	CR,LF,BELL,'RESTORE Error.'
 4162 3155  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4163 316D  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4164                   
 4165 3183  0D 0A 07 53 SEC_ID_ERROR:	DB	CR,LF,BELL,'SEC ID Error.'
 4166 3193  20 42 69 74 		DB	' Bits: DNR,0,0,RNF,'
 4167 31A6  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4168                   
 4169 31BA  0D 0A 07 53 SKCMD_ERROR:	DB	CR,LF,BELL,'SEEK Error.'
 4170 31C8  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4171 31E0  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4172                   
 4173 31F6  0D 0A 07 53 STEPIN_ERROR:	DB	CR,LF,BELL,'STEP-IN Error.'
 4174 3207  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4175 321F  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4176                   
 4177 3235  0D 0A 07 54 RDTCMD_ERROR:	DB	CR,LF,BELL,'TRACK Read Error.'
 4178 3249  20 42 69 74 		DB	' Bits: DNR,0,0,0,'
 4179 325A  30 2C 44 41 		DB	'0,DATA,DRQ,Busy (',0
 4180                   
 4181 326C  0D 0A 07 54 WRTCMD_ERROR:	DB	CR,LF,BELL,'TRACK Write Error.'
 4182 3281  20 42 69 74 		DB	' Bits: DNR,WP,WF,0,'
 4183 3294  30 2C 44 41 		DB	'0,DATA,DRQ,Busy (',0
 4184                   
 4185 32A6  0D 0A 07 53 WRCMD_ERROR:	DB	CR,LF,BELL,'SEC WRITE Error.'
 4186 32B9  20 42 69 74 		DB	' Bits: DNR,WP,WF,0,'
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  73
VF      Z80

 4187 32CC  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4188                   ;
 4189                   ;
 4190                   ;---------------------------------------------------------------------------------------------------
 4191                   ;
 4192                   ;	LOOKUP TABLES OF DISK PARAMETERS
 4193                   ;
 4194                   ;	8" SINGLE DENSITY DRIVE VARIABLES (IBM 3740 Format)
 4195 32E0  1A          STDSDT:	DB	26		;SECTORS PER TRACK
 4196 32E1  4D          	DB	77		;TRACKS PER SIDE
 4197 32E2  00          	DB	00000000B	;Disk HW_BYTE (SDSS)
 4198 32E3  28          	DB	40		;HEADER GAP (SD-Systems has 100-27, IBM is 40!)
 4199 32E4  06          	DB	6		;GAP 1 (0's)
 4200 32E5  0B          	DB	11		;GAP 2 (FF's)
 4201 32E6  1B          	DB	27		;GAP 3 (FF's)
 4202 32E7  F7          	DB	247		;GAP 4 (FF's)
 4203 32E8  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4204 32E9  00          	DB	0		;128 Bytes/sec
 4205 32EA  FF          	DB	0FFH		;GAP Format fill character
 4206 32EB  E5          	DB	0E5H		;Data area fill character
 4207 32EC  1423        	DW	1423H		;Size in bytes of 1 formatted track
 4208 32EE  00          	DB     	0H     	       	;No special post format
 4209 32EF  3317        	DW	SKEW_IBM	;Location of this disks sector skew table
 4210 32F1  01          	DB	1H		;Each format will have a unique number. For disk to disk copy
 4211 32F2  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4212 32F3  38 22 20 53 	DB	'8" SINGLE DENSITY (IBM 3740 Format)',0
 4213 3317              SKEW_IBM:
 4214 3317  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4215 3326  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH
 4216                   
 4217                   
 4218                   ;	8" DOUBLE DENSITY (128 BYTE SECTORS)
 4219 3331  32          STDDDT:	DB	50		;SECTORS PER TRACK
 4220 3332  4D          	DB	77		;TRACKS PER SIDE
 4221 3333  40          	DB	01000000B	;Disk HW_BYTE  (DDSS)
 4222 3334  50          	DB	80		;HEADER GAP (SD-Systems has 100-16, IBM is 80!)
 4223 3335  08          	DB	8		;GAP 1 (4E's) 
 4224 3336  16          	DB	22		;GAP 2 (4E's)
 4225 3337  10          	DB	16		;GAP 3 (4E's)
 4226 3338  C7          	DB	199		;GAP 4 (4E's) (X3 = 597)
 4227 3339  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4228 333A  00          	DB	0		;128 Bytes/sec
 4229 333B  4E          	DB	4EH		;GAP Format fill character
 4230 333C  E5          	DB	0E5H		;Data area fill character
 4231 333D  29A0        	DW	29A0H		;Size in bytes of 1 formatted track
 4232 333F  00          	DB	0H		;No special post formating modifications of disk req
 4233 3340  336A        	DW	SKEW_SDT	;Location of this disks sector skew table
 4234 3342  02          	DB	2H		;Each format will have a unique number. For disk to disk copy
 4235 3343  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4236 3344  38 22 20 44 	DB	'8" DOUBLE DENSITY (SD_Systems Format)',0
 4237 336A              SKEW_SDT:
 4238 336A  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4239 3379  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH,1BH,1CH,1DH,1EH,1FH
 4240 3389  20 21 22 23 	db	20H,21H,22H,23H,24H,25H,26H,27H,28H,29H,2AH,2BH,2CH,2DH,2EH,2FH
 4241 3399  30 31 32    	db	30H,31H,32H
 4242                   
 4243                   ;
 4244                   ;	8" DOUBLE DENSITY (256 BYTE SECTORS) (IBM System 34 Format)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  74
VF      Z80

 4245 339C  1A          DDT256:	DB	26		;NBR SECTORS PER TRACK
 4246 339D  4D          	DB	77		;NBR TRACKS PER SIDE
 4247 339E  50          	DB	01010000B	;Disk HW_BYTE (DDDS)
 4248 339F  50          	DB	80		;HEADER GAP (SD-Systems has 100-54, IBM is 80!)
 4249 33A0  0C          	DB	12		;GAP 1
 4250 33A1  16          	DB	22		;GAP 2
 4251 33A2  36          	DB	54		;GAP 3
 4252 33A3  C7          	DB	199		;GAP 4 (4E's) (X3 = 597)
 4253 33A4  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4254 33A5  01          	DB	1		;256 Bytes/sec
 4255 33A6  4E          	DB	4EH		;GAP Format fill character
 4256 33A7  E5          	DB	0E5H		;Data area fill character
 4257 33A8  28EC        	DW	28ECH		;Size in bytes of 1 formatted track
 4258 33AA  00          	DB	0H		;No special post formating modifications of disk req
 4259 33AB  33DF        	DW	SKEW_256	;Location of this disks sector skew table
 4260 33AD  03          	DB	3H		;Each format will have a unique number. For disk to disk copy
 4261 33AE  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4262 33AF  38 22 20 44 	DB	'8" DD (256 BYTE SECTORS) (IBM System 34 Format)',0
 4263 33DF              SKEW_256:
 4264 33DF  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4265 33EE  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH
 4266                   
 4267                   ;
 4268                   ;	8" DOUBLE DENSITY (512 BYTE SECTORS) 
 4269 33F9  0F          DDT512:	DB	15		;NBR SECTORS PER TRACK
 4270 33FA  4D          	DB	77		;NBR TRACKS PER SIDE
 4271 33FB  50          	DB	01010000B	;Disk HW_BYTE (DDDS)
 4272 33FC  50          	DB	80		;HEADER GAP (SD-Systems has 100-54, IBM is 80!)
 4273 33FD  0C          	DB	12		;GAP 1
 4274 33FE  16          	DB	22		;GAP 2
 4275 33FF  54          	DB	84		;GAP 3
 4276 3400  C8          	DB	200		;GAP 4 (4E's) (X3 = 597)
 4277 3401  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4278 3402  02          	DB	2		;512 Bytes/sec
 4279 3403  4E          	DB	4EH		;GAP Format fill character
 4280 3404  E5          	DB	0E5H		;Data area fill character
 4281 3405  0000        	DW	0H		;Size in bytes of 1 formatted track
 4282 3407  00          	DB	0H		;No special post formating modifications of disk req
 4283 3408  3427        	DW	SKEW_512	;Location of this disks sector skew table
 4284 340A  04          	DB	4H		;Each format will have a unique number. For disk to disk copy
 4285 340B  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4286 340C  38 22 20 44 	DB	'8" DDDS (512 BYTE SECTORS)',0
 4287 3427              SKEW_512:
 4288 3427  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4289                   
 4290                   
 4291                   ;
 4292                   ;	8" DOUBLE DENSITY (1024 BYTE SECTORS - Single Sided) 
 4293 3436  09          DDT1K:	DB	9		;NBR SECTORS PER TRACK
 4294 3437  4D          	DB	77		;NBR TRACKS PER SIDE
 4295 3438  40          	DB	01000000B	;Disk HW_BYTE (DDDS) ;
 4296 3439  50          	DB	80		;INDEX HEADER GAP
 4297 343A  0C          	DB	12		;NBR GAP 1
 4298 343B  16          	DB	22		;NBR GAP 2
 4299 343C  36          	DB	54		;NBR GAP 3
 4300 343D  C7          	DB	199		;GAP 4 
 4301 343E  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4302 343F  03          	DB	3		;1024 Bytes/sec
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  75
VF      Z80

 4303 3440  4E          	DB	4EH		;GAP Format fill character
 4304 3441  E5          	DB	0E5H		;Data area fill character
 4305 3442  2B5A        	DW	2B5AH		;Size in bytes of 1 formatted track
 4306 3444  00          	DB	0H		;No special post formating modifications of disk req
 4307 3445  347D        	DW	SKEW_1K		;Location of this disks sector skew table
 4308 3447  05          	DB	5H		;Each format will have a unique number. For disk to disk copy
 4309 3448  01          	DB	1		;Tracks set aside for operating system (eg CPM 2)
 4310 3449  38 22 20 44 	DB	'8" DOUBLE DENSITY, SINGLE SIDED (1024 BYTE SECTORS)',0 
 4311 347D              SKEW_1K:
 4312 347D  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4313                   ;
 4314                   ;	8" DOUBLE DENSITY (1024 BYTE SECTORS - Double Sided)
 4315 3486  09          DDT1K2:	DB	9		;NBR SECTORS PER TRACK
 4316 3487  4D          	DB	77		;NBR TRACKS PER SIDE
 4317 3488  50          	DB	01010000B	;Disk HW_BYTE (DDDS) ;
 4318 3489  50          	DB	80		;INDEX HEADER GAP
 4319 348A  0C          	DB	12		;NBR GAP 1
 4320 348B  16          	DB	22		;NBR GAP 2
 4321 348C  36          	DB	54		;NBR GAP 3
 4322 348D  C7          	DB	199		;GAP 4 
 4323 348E  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4324 348F  03          	DB	3		;1024 Bytes/sec
 4325 3490  4E          	DB	4EH		;GAP Format fill character
 4326 3491  E5          	DB	0E5H		;Data area fill character
 4327 3492  2B5A        	DW	2B5AH		;Size in bytes of 1 formatted track
 4328 3494  00          	DB	0H		;No special post formating modifications of disk req
 4329 3495  34CD        	DW	SKEW_1KDS	;Location of this disks sector skew table
 4330 3497  06          	DB	6H		;Each format will have a unique number. For disk to disk copy
 4331 3498  01          	DB	1		;Tracks set aside for operating system (eg CPM 2)
 4332 3499  38 22 20 44 	DB	'8" DOUBLE DENSITY, DOUBLE SIDED (1024 BYTE SECTORS)',0 
 4333 34CD              SKEW_1KDS:
 4334 34CD  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4335                   
 4336                   ;
 4337                   ;	
 4338                   ; 5", 128 byte, SD SD-Systems Format
 4339 34D6  12          MINSDT: DB	18		;sectors per track
 4340 34D7  23          	DB	35		;tracks per side
 4341 34D8  20          	DB	00100000B	;Disk HW_BYTE (SDSS)
 4342 34D9  0C          	DB	20-8		;index header gap
 4343 34DA  06          	DB	6		;GAP 1
 4344 34DB  0B          	DB	11		;GAP 2
 4345 34DC  08          	DB	8		;GAP 3
 4346 34DD  DD          	DB	221		;GAP 4 (FF's)
 4347 34DE  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4348 34DF  00          	DB	0		;128 Bytes/sec
 4349 34E0  FF          	DB	0FFH		;GAP Format fill character
 4350 34E1  E5          	DB	0E5H		;Data area fill character
 4351 34E2  0CC7        	DW	0CC7H		;Size in bytes of 1 formatted track
 4352 34E4  00          	DB	0H		;No special post formating modifications of disk req
 4353 34E5  350F        	DW	SKEW_MINSD	;Location of this disks sector skew table
 4354 34E7  07          	DB	7H		;Each format will have a unique number. For disk to disk copy
 4355 34E8  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4356 34E9  35 22 2C 20 	DB	'5", SDSS, 128 byte, SD-Systems Format',0
 4357 350F              SKEW_MINSD:
 4358 350F  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH,10H,11H
 4359                   
 4360                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  76
VF      Z80

 4361                   ; 5", 128 byte, DD SD-Systems Format
 4362 3520  1D          MINDDT: DB	29		;sectors per track
 4363 3521  23          	DB	35		;tracks per side
 4364 3522  60          	DB	01100000B	;Disk HW_BYTE (DDSS)
 4365 3523  54          	DB	100-16		;index header gap
 4366 3524  08          	DB	8		;GAP 1
 4367 3525  16          	DB	22		;GAP 2
 4368 3526  10          	DB	16		;GAP 3
 4369 3527  F7          	DB	247		;GAP 4
 4370 3528  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4371 3529  00          	DB	0		;128 Bytes/sec
 4372 352A  4E          	DB	4EH		;GAP Format fill character
 4373 352B  E5          	DB	0E5H		;Data area fill character
 4374 352C  17C0        	DW	17C0H		;Size in bytes of 1 formatted track
 4375 352E  00          	DB	0H		;No special post formating modifications of disk req
 4376 352F  3559        	DW	SKEW_MINDD	;Location of this disks sector skew table
 4377 3531  08          	DB	8H		;Each format will have a unique number. For disk to disk copy
 4378 3532  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4379 3533  35 22 2C 20 	DB	'5", DDSS. 128 byte, SD-Systems Format',0
 4380 3559              SKEW_MINDD:
 4381 3559  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4382 3568  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH,1BH,1CH
 4383                   
 4384                   ;
 4385                   ; 5", 512 byte, DDDS, 8 sector IBM PC CPM-86 format
 4386 3575  08          MINCPM: DB	8		;sectors per track
 4387 3576  28          	DB	40		;tracks per side
 4388 3577  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4389 3578  50          	DB	80		;index header gap
 4390 3579  0C          	DB	12		;GAP 1
 4391 357A  16          	DB	22		;GAP 2
 4392 357B  50          	DB	80		;GAP 3
 4393 357C  CF          	DB	207		;GAP 4 (4E's) (1038)
 4394 357D  05          	DB	5		;GAPR (Flag for multiple repeats of GAP4)
 4395 357E  02          	DB	2		;512 Bytes/sec
 4396 357F  4E          	DB	04EH		;GAP Format fill character
 4397 3580  E5          	DB	0E5H		;Data area fill character (for CPM86)
 4398 3581  19C0        	DW	19C0H		;Size in bytes of 1 formatted track
 4399 3583  01          	DB	CPM86_FLAG	;Special post formating modifications of disk req
 4400 3584  35BA        	DW	SKEW_CPM86	;Location of this disks sector skew table
 4401 3586  09          	DB	9H		;Each format will have a unique number. For disk to disk copy
 4402 3587  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4403 3588  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector IBM PC CPM-86 format',0
 4404 35BA              SKEW_CPM86:
 4405 35BA  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4406                   ;
 4407                   ;
 4408                   ; 5", 512 byte, DDDS, 9 sector DEC VT180 format
 4409 35C2  09          DEC:	DB	9		;sectors per track
 4410 35C3  28          	DB	40		;tracks per side
 4411 35C4  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4412 35C5  50          	DB	80		;index header gap
 4413 35C6  0C          	DB	12		;GAP 1
 4414 35C7  16          	DB	22		;GAP 2
 4415 35C8  1A          	DB	26		;GAP 3
 4416 35C9  DA          	DB	218		;GAP 4 (4E's) (872)
 4417 35CA  04          	DB	4		;GAPR (Flag for multiple repeats of GAP4)
 4418 35CB  02          	DB	2		;512 Bytes/sec
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  77
VF      Z80

 4419 35CC  4E          	DB	04EH		;GAP Format fill character
 4420 35CD  E5          	DB	0E5H		;Data area fill character (for CPM)
 4421 35CE  1971        	DW	1971H		;Size in bytes of 1 formatted track
 4422 35D0  00          	DB	0		;No special post formating modifications of disk req
 4423 35D1  3603        	DW	SKEW_DEC	;Location of this disks sector skew table
 4424 35D3  0A          	DB	0AH		;Each format will have a unique number. For disk to disk copy
 4425 35D4  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4426 35D5  35 22 2C 20 	DB	'5", DDDS, 512 byte, 9 sector DEC VT180 format',0
 4427 3603              SKEW_DEC:
 4428 3603  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4429                   ;
 4430                   ;
 4431                   ; 5", 256 byte, DDDS, 16 sector TOSHIBA T-100 format
 4432 360C  10          TOSHIBA: DB	16		;sectors per track
 4433 360D  23          	DB	35		;tracks per side
 4434 360E  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4435 360F  50          	DB	80		;index header gap
 4436 3610  0C          	DB	12		;GAP 1
 4437 3611  16          	DB	22		;GAP 2
 4438 3612  32          	DB	50		;GAP 3
 4439 3613  B7          	DB	183		;GAP 4 (4E's) (366)
 4440 3614  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4441 3615  01          	DB	1		;256 Bytes/sec
 4442 3616  4E          	DB	04EH		;GAP Format fill character
 4443 3617  E5          	DB	0E5H		;Data area fill character (for CPM)
 4444 3618  1928        	DW	1928H		;Size in bytes of 1 formatted track
 4445 361A  00          	DB	0		;No special post formating modifications of disk req
 4446 361B  3652        	DW	SKEW_TOSH	;Location of this disks sector skew table
 4447 361D  0B          	DB	0BH		;Each format will have a unique number. For disk to disk copy
 4448 361E  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4449 361F  35 22 2C 20 	DB	'5", DDDS, 256 byte, 16 sector TOSHIBA T-100 format',0
 4450 3652              SKEW_TOSH:
 4451 3652  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4452                   ;
 4453                   ;
 4454                   ; 5", 128 byte, CROMEMCO CDOS (SINGLE density) Format
 4455 3661  12          CDOS:	DB	18		;sectors per track
 4456 3662  28          	DB	40		;tracks per side
 4457 3663  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4458 3664  0C          	DB	20-8		;index header gap
 4459 3665  06          	DB	6		;GAP 1
 4460 3666  0B          	DB	11		;GAP 2
 4461 3667  08          	DB	8		;GAP 3
 4462 3668  B9          	DB	185		;GAP 4 (FF's)
 4463 3669  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4464 366A  00          	DB	0		;128 Bytes/sec
 4465 366B  FF          	DB	0FFH		;GAP Format fill character
 4466 366C  E5          	DB	0E5H		;Data area fill character
 4467 366D  0CA3        	DW	0CA3H		;Size in bytes of 1 formatted track
 4468 366F  00          	DB	0H		;No special post formating modifications of disk req
 4469 3670  369D        	DW	SKEW_CDOS	;Location of this disks sector skew table
 4470 3672  0C          	DB	0CH		;Each format will have a unique number. For disk to disk copy
 4471 3673  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4472 3674  35 22 2C 20 	DB	'5", SDDS, 128 byte, CROMEMCO CDOS Format',0
 4473 369D              SKEW_CDOS:
 4474 369D  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH,10H,11H
 4475                   ;
 4476                   ; 5", 512 byte, CROMEMCO CDOS w/INTL TERM. CP/M Format
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  78
VF      Z80

 4477 36AE  0A          CDOSDD:	DB	10		;sectors per track
 4478 36AF  28          	DB	40		;tracks per side
 4479 36B0  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4480 36B1  50          	DB	80		;index header gap
 4481 36B2  0C          	DB	12		;GAP 1
 4482 36B3  16          	DB	22		;GAP 2
 4483 36B4  1E          	DB	30		;GAP 3
 4484 36B5  D6          	DB	214		;GAP 4 (FF's)
 4485 36B6  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4486 36B7  02          	DB	2		;512 Bytes/sec
 4487 36B8  FF          	DB	0FFH		;GAP Format fill character
 4488 36B9  E5          	DB	0E5H		;Data area fill character
 4489 36BA  188E        	DW	188EH		;Size in bytes of 1 formatted track
 4490 36BC  00          	DB	0H		;No special post formating modifications of disk req
 4491 36BD  36EE        	DW	SKEW_CDOS2	;Location of this disks sector skew table
 4492 36BF  0D          	DB	0DH		;Each format will have a unique number. For disk to disk copy
 4493 36C0  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4494 36C1  35 22 2C 20 	DB	'5", DDDS, 512 byte, CROMEMCO CDOS/CPM Format',0
 4495 36EE              SKEW_CDOS2:
 4496 36EE  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4497                   
 4498                   ; 5", 512 byte, EPSON QX-10 Format
 4499 36F8  0A          EPSON:	DB	10		;sectors per track
 4500 36F9  28          	DB	40		;tracks per side
 4501 36FA  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4502 36FB  50          	DB	80		;index header gap
 4503 36FC  0C          	DB	12		;GAP 1
 4504 36FD  16          	DB	22		;GAP 2
 4505 36FE  1E          	DB	30		;GAP 3
 4506 36FF  D6          	DB	214		;GAP 4 (FF's)
 4507 3700  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4508 3701  02          	DB	2		;512 Bytes/sec
 4509 3702  FF          	DB	0FFH		;GAP Format fill character
 4510 3703  E5          	DB	0E5H		;Data area fill character
 4511 3704  188E        	DW	188EH		;Size in bytes of 1 formatted track
 4512 3706  00          	DB	0H		;No special post formating modifications of disk req
 4513 3707  3732        	DW	SKEW_EPSON	;Location of this disks sector skew table
 4514 3709  0E          	DB	0EH		;Each format will have a unique number. For disk to disk copy
 4515 370A  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4516 370B  35 22 2C 20 	DB	'5", DDDS, 512 byte, EPSON QX-10 Format',0
 4517 3732              SKEW_EPSON:
 4518 3732  01 03 05 07 	DB	1H,3H,5H,7H,9H,2H,4H,6H,8H,0AH		;<-- note skew table
 4519                   ;
 4520                   ;
 4521                   ; 5", 1K byte, DDDS, 5 sector MORROW MD3 format
 4522 373C  05          MORROW: DB	5		;sectors per track
 4523 373D  28          	DB	40		;tracks per side
 4524 373E  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4525 373F  50          	DB	80		;index header gap
 4526 3740  0C          	DB	12		;GAP 1
 4527 3741  16          	DB	22		;GAP 2
 4528 3742  32          	DB	50		;GAP 3
 4529 3743  C0          	DB	192		;GAP 4 (4E's) (574)
 4530 3744  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4531 3745  03          	DB	3		;1024 Bytes/sec
 4532 3746  4E          	DB	04EH		;GAP Format fill character
 4533 3747  E5          	DB	0E5H		;Data area fill character (for CPM)
 4534 3748  1977        	DW	1977H		;Size in bytes of 1 formatted track
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  79
VF      Z80

 4535 374A  00          	DB	0		;No special post formating modifications of disk req
 4536 374B  377F        	DW	SKEW_MORROW	;Location of this disks sector skew table
 4537 374D  0F          	DB	0FH		;Each format will have a unique number. For disk to disk copy
 4538 374E  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4539 374F  35 22 2C 20 	DB	'5", DDDS, 1024 byte, 9 sector MORROW MD3 format',0
 4540 377F              SKEW_MORROW:
 4541 377F  01 02 03 04 	DB	1H,2H,3H,4H,5H
 4542                   ;
 4543                   ;
 4544                   ; 5", 512 byte, DDDS, 5 sector ZENITH Z-100 format
 4545 3784  08          ZENITH: DB	8		;sectors per track
 4546 3785  28          	DB	40		;tracks per side
 4547 3786  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4548 3787  50          	DB	80		;index header gap
 4549 3788  0C          	DB	12		;GAP 1
 4550 3789  16          	DB	22		;GAP 2
 4551 378A  1A          	DB	26		;GAP 3
 4552 378B  F2          	DB	242		;GAP 4 (4E's) (1454)
 4553 378C  06          	DB	6		;GAPR (Flag for multiple repeats of GAP4)
 4554 378D  02          	DB	2		;512 Bytes/sec
 4555 378E  4E          	DB	04EH		;GAP Format fill character
 4556 378F  E5          	DB	0E5H		;Data area fill character (for CPM)
 4557 3790  1933        	DW	1933H		;Size in bytes of 1 formatted track
 4558 3792  00          	DB	0		;No special post formating modifications of disk req
 4559 3793  37C8        	DW	SKEW_ZENITH	;Location of this disks sector skew table
 4560 3795  10          	DB	10H		;Each format will have a unique number. For disk to disk copy
 4561 3796  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4562 3797  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector ZENITH Z-100 format',0
 4563 37C8              SKEW_ZENITH:
 4564 37C8  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4565                   ;
 4566                   ;
 4567                   ; 5", 512 byte, DDDS, 10 sector SUPERBRAIN QD format
 4568 37D0  0A          SUPER: DB	10		;sectors per track
 4569 37D1  23          	DB	35		;tracks per side
 4570 37D2  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4571 37D3  50          	DB	80		;index header gap
 4572 37D4  0C          	DB	12		;GAP 1
 4573 37D5  16          	DB	22		;GAP 2
 4574 37D6  10          	DB	16		;GAP 3
 4575 37D7  B1          	DB	177		;GAP 4 (4E's) (354)
 4576 37D8  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4577 37D9  02          	DB	2		;512 Bytes/sec
 4578 37DA  4E          	DB	04EH		;GAP Format fill character
 4579 37DB  E5          	DB	0E5H		;Data area fill character (for CPM)
 4580 37DC  193A        	DW	193AH		;Size in bytes of 1 formatted track
 4581 37DE  00          	DB	0		;No special post formating modifications of disk req
 4582 37DF  3816        	DW	SKEW_SUPER	;Location of this disks sector skew table
 4583 37E1  11          	DB	11H		;Each format will have a unique number. For disk to disk copy
 4584 37E2  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4585 37E3  35 22 2C 20 	DB	'5", DDDS, 512 byte, 10 sector SUPERBRAIN QD format',0
 4586 3816              SKEW_SUPER:
 4587 3816  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4588                   ;
 4589                   ;
 4590                   ; 5", IBM PC, MSDOS 1.1, 512 byte, DDDS, 8 sector format
 4591 3820  08          MSDOS:	DB	8		;sectors per track
 4592 3821  28          	DB	40		;tracks per side
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  80
VF      Z80

 4593 3822  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4594 3823  50          	DB	80		;index header gap
 4595 3824  0C          	DB	12		;GAP 1
 4596 3825  16          	DB	22		;GAP 2
 4597 3826  50          	DB	80		;GAP 3
 4598 3827  C1          	DB	193		;GAP 4 (4E's)
 4599 3828  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4600 3829  02          	DB	2		;512 Bytes/sec
 4601 382A  4E          	DB	04EH		;GAP Format fill character
 4602 382B  E5          	DB	0E5H		;Data area fill character
 4603 382C  16B2        	DW	16B2H		;Size in bytes of 1 formatted track
 4604 382E  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4605 382F  3867        	DW	SKEW_DOS1	;Location of this disks sector skew table
 4606 3831  12          	DB	12H		;Each format will have a unique number. For disk to disk copy
 4607 3832  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4608 3833  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector IBMPC MSDOS 1.1 format',0
 4609 3867              SKEW_DOS1:
 4610 3867  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4611                   ;
 4612                   ;
 4613                   ; 5", IBM PC, MSDOS 2.x, 512 byte, DDDS, 9 sector format
 4614 386F  09          MSDOS2:	DB	9		;sectors per track
 4615 3870  28          	DB	40		;tracks per side
 4616 3871  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4617 3872  50          	DB	80		;index header gap
 4618 3873  0C          	DB	12		;GAP 1
 4619 3874  16          	DB	22		;GAP 2
 4620 3875  50          	DB	80		;GAP 3
 4621 3876  C1          	DB	193		;GAP 4 (4E's)
 4622 3877  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4623 3878  02          	DB	2		;512 Bytes/sec
 4624 3879  4E          	DB	04EH		;GAP Format fill character
 4625 387A  E5          	DB	0E5H		;Data area fill character
 4626 387B  193E        	DW	193EH		;Size in bytes of 1 formatted track
 4627 387D  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4628 387E  38B6        	DW	SKEW_DOS2	;Location of this disks sector skew table
 4629 3880  13          	DB	13H		;Each format will have a unique number. For disk to disk copy
 4630 3881  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4631 3882  35 22 2C 20 	DB	'5", DDDS, 512 byte, 9 sector IBMPC MSDOS 2.x format',0
 4632 38B6              SKEW_DOS2:
 4633 38B6  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4634                   ;
 4635                   ;
 4636                   ; 5", TRS-80 MOD-III, 512 byte, DDDS, 10 sector format
 4637 38BF  0A          TRS80:	DB	10		;sectors per track
 4638 38C0  28          	DB	40		;tracks per side
 4639 38C1  60          	DB	01100000B	;Disk HW_BYTE (DDSS)
 4640 38C2  50          	DB	80		;index header gap
 4641 38C3  0C          	DB	12		;GAP 1
 4642 38C4  16          	DB	22		;GAP 2
 4643 38C5  1A          	DB	26		;GAP 3
 4644 38C6  89          	DB	137		;GAP 4 (4E's)
 4645 38C7  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4646 38C8  02          	DB	2		;512 Bytes/sec
 4647 38C9  4E          	DB	04EH		;GAP Format fill character
 4648 38CA  E5          	DB	0E5H		;Data area fill character
 4649 38CB  1976        	DW	1976H		;Size in bytes of 1 formatted track
 4650 38CD  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  81
VF      Z80

 4651 38CE  3906        	DW	SKEW_TRS	;Location of this disks sector skew table
 4652 38D0  14          	DB	14H		;Each format will have a unique number. For disk to disk copy
 4653 38D1  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4654 38D2  35 22 2C 20 	DB	'5", DDSS, 512 byte, 10 sector TRS-80 MOD-III format',0
 4655 3906              SKEW_TRS:
 4656 3906  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4657                   ;
 4658                   ;
 4659                   ;----------------------------------------------------------------------------------------
 4660                   ;
 4661                   ;
 4662                   ; THE FOLLOWING RAM LOCATIONS ARE REQ
 4663                   ;
 4664 3910  0000        IX_OLD_STORE	DW	0000H
 4665 3912  00          ERRORS_FLAG	DB	0H	;Will keep tarck of errors during a routine
 4666 3913  00          CRTDISP		DB	0H
 4667 3914    0006      IDSV		DS	6H
 4668 391A  00          CMD_STORE	DB	0H	;Menu CMD Store (Note: NOT CHIP CMD,CHIP_CMDSV)
 4669 391B  00          ERMASK		DB	0H	;ERROR MASK
 4670 391C  00          ERSTAT		DB	0H	;PRESENT ERROR STORE
 4671 391D  00          CHIP_CMDSV	DB	0H	;COMMAND TO 1791/5 SAVE
 4672 391E  0000        SP_SAVE		DW	0000H	;SP SAVE
 4673 3920  00          SEC_RT_COUNT	DB	0H	;Number of sector reads before setting error flag
 4674 3921  00          SEEK_RT_COUNT	DB	0H	;Number of seek retrys
 4675 3922  00          TRK_RT_COUNT	DB	0H	;Number of track reads before setting error flag
 4676 3923  0000        TRACK_SIZE	DW	0000H	;Size in bytes of current formatted track
 4677 3925  00          SEC_COUNT	DB	0H	;number of sectors to load
 4678 3926  0000        DMA_NEXT	DW	0	;Store for next (TADDR) for multiple sec R/W's 
 4679 3928  00          COPY_TRK_COUNT:	DB	0H	;Used for disk to disk track copying
 4680 3929  00          COPY_TRK	DB	0H
 4681 392A  00          DRIVE_STORE	DB	0H	;For 8' quick formatting
 4682                   ;
 4683 392B  00          F_TRK		DB	0H	;for building format track image
 4684 392C  00          F_SIDE		DB	0H	;for building format track image
 4685 392D  0000        INDEX_MARK	DW	0000H	;End of Index field +1
 4686 392F  0000        S_DATA_MARK	DW	0000H	;Pointer to start of Data area
 4687 3931  0000        E_DATA_MARK	DW	0000H	;Pointer to end of Data area+1
 4688 3933  0000        E_SEC_MARK	DW	0000H	;End Sector image +1
 4689 3935  0000        S_GAP4_MARK	DW	0000H	;start GAP4 area
 4690 3937  0000        E_GAP4_MARK	DW	0000H	;End track +1
 4691                   	
 4692 3939    0100      		DS	100H
 4693         3A39      STACK	EQU	$
 4694                   
 4695                   ;END
 4696                   
 0 Error(s) Detected.
 14649 Absolute Bytes. 612 Symbols Detected.
