Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   1
VF      Z80

    1                   ;  THIS IS A PROGRAM TO EXAMINE & FORMAT CPM DISKS USEING A VERSAFLOPPY II DISK 
    2                   ;  CONTROLLER. NOTE IT IS SELF A CONTAINED PROGRAM (EXCEPT FOR CONSOLE I/O)
    3                   ;
    4                   ; It is a completely new Diagnostic program and utilizes a new set of core BIOS
    5                   ; like functions that can easily be adapted for CPM+ etc. It does not utilze
    6                   ; any of the old SD_Systems BIOS/Diagnostic code (which I found to be convoluted, difficult 
    7                   ; to modify and specific for a few disk formats). This program utilizes a disk parameter
    8                   ; table driven approach for many common 8" & 5" formats. Others can be easily added.
    9                   ; It works with both the 1791 & 1795 chips (Set the EQU's below). 
   10                   ;
   11                   ; The program requires a Z80 CPU and utilizes the marvelous Z80 assembler (ZASMB) written 
   12                   ; by P.F Ridler in 1984. See (http://retrotechnology.com/herbs_stuff/s_sd.html#other) 
   13                   ; on Herbs site. The assembler here was setup to take long label names (see the docs). 
   14                   ; However most common Z80 assemblers should work, with minor changes to a few lines of code.
   15                   ; ZASMB allows the use uses a few more logical OP codes that Zilog left out 
   16                   ; (eg CP A,20H rather than CP 20H). This assembler is extremely fast and generates 
   17                   ; direct .com code. It does however have limited ifdef etc options.
   18                   ;
   19                   ;
   20                   ;	JOHN MONAHAN	(monahan@vitasoft.org)	27/4/2009	VERSION	1.0
   21                   ;
   22                   ;	V0.1	Basic Sector ID field working
   23                   ;	V0.2	Seek test jumpy
   24                   ;	V0.3	Seek done, before read sector core stuff
   25                   ;	V0.5	Sector read OK for 8" SD
   26                   ;	V0.7	Sector Read blanked out menu, itself OK. Seek redone.
   27                   ;	V0.8	Reading 128 byte sectors with my READ_SECTOR routine OK
   28                   ;	V0.9	Block read for sectors
   29                   ;	V0.10	Start of Formatting OK
   30                   ;	V0.11	Filled in comments of formatting
   31                   ;	V0.12	Start of sector track write image display
   32                   ;	V0.14	Fixed abort etc. Sec formatting display working, ESC to stop display 
   33                   ;	V0.15	Sec ID errors on display. general cleanup of abort stuff
   34                   ;	V0.16	Variable sec size display. Second side not working
   35                   ;	V0.17	Second side working before splitting UNIT into two sections (Hardware & Software)
   36                   ;	V0.18	New format using IO_BYTE and IX pointer to tables for disk/drive info.
   37                   ;	V0.19	Before simplifying moving IO_BYTE data to Disk paramater table
   38                   ;	V0.20	Start of HW_BYTE in disk paramater table. No format yet.
   39                   ;	V0.21	8" format done with new layout.
   40                   ;	V0.22	Before New Format Routine & Tables
   41                   ;	V0.24	Before switching to my memory track build routines
   42                   ;	V0.25	My track image not working yet
   43                   ;	V0.27	Software SD Track (no sides) working. No hardware yet
   44                   ;	V0.28	8" format (CPM cannot read it). Cannot access 5" drives
   45                   ;	V0.29	Straightened our 5". (DW in table). Still CPM read problem
   46                   ;	V0.30	Start of track dump SD 8" Format now working
   47                   ;	V0.31	Cleaned up seek no verify functions to one general function
   48                   ;	V0.33	Seems to be working now
   49                   ;	V0.34	Random sector read test working (write not done yet)
   50                   ;	V0.35	Start or read sec & seek error returns. Have seperate flag on CMD's 
   51                   ;	V0.37	New error routines Seek done. Modeled after VF1 Bios
   52                   ;	V0.38	New error routines, centralized Home, Seek etc started. 
   53                   ;	V0.39	New format for sec read with seek_V done
   54                   ;	V0.40	New side selection and redo of odds and ends
   55                   ;	V0.41	Split menu's for 5" & 8" drives. All OK on Sec reads
   56                   ;	V0.42	Dump track working again.
   57                   ;	V0.43	Format not working
   58                   ;	V0.44	Re-did disk format menues and selection. Started on Format stuff 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   2
VF      Z80

   59                   ;	V0.45	Combine IY & IX reg flags into a single IX+HW_BYTE flag
   60                   ;	V0.46	Put track size info in tables and use it for track dumps.
   61                   ;	V0.48	Cleaned up things. END_ROUTINE put in.
   62                   ;	V0.50	Sector Read/write done (track format broken)
   63                   ;	V0.51	Format not working.
   64                   ;	V0.52	Format SSSD 8" seems to be OK now. Need READ_ID at start
   65                   ;	V0.53	Format was still not working. Changed chip and used Restore with V flag on.
   66                   ;	V0.54	SOLID FORMATTING of 8'. Moved all 1791/5 CMD's to drive tables. (Need to up 5")
   67                   ;	V0.55	Formating of al 8" SS disks working
   68                   ;	V0.56	Combined all sec R/W tests into one core routine
   69                   ;	V0.58	Working on side selection, fixed some formatting issues including CPM86 disks
   70                   ;	V0.59	Fixed side_sel to actully select the proper side (Note debug display present)
   71                   ;	V0.60	Formatting 5' DDDS disk now working and compatable with CPM3
   72                   ;	V0.61	Many formats added for 5" disks
   73                   ;	V0.62	Before skew tables for formatting (Removed HP & KAYPRO)
   74                   ;	V0.63	Skew table for formatting done DD & SD
   75                   ;	V0.64	All formats done and working. Corrected (DRIVE)->IY problem
   76                   ;	V0.65	Load CMD done
   77                   ;	V0.66	Both sector dump and load working. repaired disk selection again.
   78                   ;	V0.67	Split out all the sector R/W functions again into seperate routines - easier to mentain.
   79                   ;	V0.68	Moved 179x CMDS to start. Take care of 1795 side bits. Rearranged main menu
   80                   ;	V0.69	Solve status port hang-up in invalid hardware.
   81                   ;	V0.70	Started Disk copy
   82                   ;	V0.71	Disk copying of 8" done. Slow with no sector skews
   83                   ;	V0.72	Skew for disk copying inserted - still slow
   84                   ;	V0.73	Went to multi-sec R/W but errors so far
   85                   ;	V0.74	Installed Verify cmd as well. Copy now working for 128 byte sectors
   86                   ;	V0.75	Improvements to M_SEC_RD/WR
   87                   ;	V0.76	Multi sector R/W working. 
   88                   ;	V0.77	Step-in CMD implemented but copy still requires HOME on A:
   89                   ;	V0.78	System copy done but needs work. Need to have global COPY,COMPARE  etc.
   90                   ;	V0.79	Copy disk generealized/global now working on DS disks
   91                   ;	V0.80	Verify command now generalized and working 
   92                   ;	V0.81	Sys copy done, 1795/91 mods added
   93                   ;	V0.82	Problems with 1795 seek & drive select.
   94                   ;	V0.83	Complete rearrangement of hardware selection. Seek working up to before Format
   95                   ;	V0.84	All cleaned up for 1791 chip
   96                   ;	V0.85	Had to flip A & B side hardware I/O selections for 1795 chip
   97                   ;	V0.86	Hardware side select finally straightened out. Before IY usage
   98                   ;	V0.87	Initial IY usage - untested
   99                   ;	V0.88	IY working throughout. Seems solid for 1791 & 1795 chips.
  100                   ;	V1.01	Set 1 track for 1K sector  8" CPM system tracks instead of 2
  101                   ;
  102                   ;	To Do:-
  103                   ;;	Add 5" dos sectors format initilization
  104                   ;
  105                   ;
  106                   ;
  107                   ;	
  108         0000      FALSE	EQU	0
  109         0001      TRUE	EQU	1
  110                   ;
  111         0001      CHIP_1795 EQU	TRUE		;<---- RD & WR sector cmd's bit patterns are different for these chips!
  112         0000      CHIP_1791 EQU	FALSE
  113                   
  114         0080      NBYTES	EQU	128		;BYTES PER SECTOR UNIT (eg, *2 FOR 256 BYTE SECTORS)
  115         000A      LF	EQU	0AH
  116         000D      CR	EQU	0DH
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   3
VF      Z80

  117         0007      BELL	EQU	07H
  118         001A      CLEAR	EQU	1AH		;SD Systems Video Board Clear Screen
  119         0009      TAB	EQU	09H
  120         001B      ESC	EQU	1BH
  121         001C      EOL	EQU	1CH		;SD Systems Video Board Clear to end of line
  122         0010      PAGE_SIZE EQU	16		;Number of lines at a time to display memory contents on CRT
  123         0005      STATUS_DELAY EQU 5		;Time-out for waiting for status port to ho not busy. (~5 seconds @ 4MHz)
  124                   ;
  125         0001      RO_FLAG	EQU	01		;Flag for sequental sectors R test (Read sectors)
  126         0002      WO_FLAG	EQU	02		;Flag for sequental sectors W test (Write to sectors)
  127         0003      RW_FLAG	EQU	03		;Flag for sequental sectors R/W test (Both)
  128         0004      RRW_FLAG EQU	04		;Flag for random track and sector R/W test
  129         0005      TRK_RO_FLAG EQU	05		;Flag for reading sectors from just one track continously
  130         0001      CPM86_FLAG  EQU	01		;Flag to indicate after 5" disk formating CPM86 first sector
  131                   				;needs to be modified
  132         0001      TEST_FILL EQU	01		;Character to write for sector write test.
  133                   ;
  134         0000      SIMPLE	EQU	00h		;Output information detail to CRT
  135         00FF      COMPLEX	EQU	0FFH	
  136                   ;
  137                   				;Will place these values here for easy RAM analysis if a crash
  138                   				;The rest go to the end of the program
  139         0040      TADDR	EQU	40H		;STORE FOR DMA ADDRESS
  140         0043      @TRK	EQU	43H		;NEW TRACK <---- DO not change the order of these locations 
  141         0044      @SIDE	EQU	44H		;NEW SIDE        the IY register will ALWAYS point to TRK
  142         0045      @SCTR	EQU	45H		;NEW SECTOR
  143         0046      DRIVE_1	EQU	46H		;CURRENT DRIVE SELECT BITS
  144         0047      DRIVE_2	EQU	47H		;SECOND DRIVE SELECT BITS (For copy, verify, sysgen etc)
  145         0048      IOBYTE	EQU	48H		;Combined drive selection, density, side and size bits for hardware
  146                   ;				;is inverted and sent to the VFII "SELECT" port
  147                   ;
  148                   ;	PORTS & COMMANDS FOR FOR 1791 or 1795
  149                   ;
  150         0060      RSET	EQU	60H		;<----- VERSAFLOPPY BASE PORT ADDRESS (I use Port 50H, SD-Systems uses 60H)
  151         0063      SELECT	EQU	63H		;DRIVE SELECT PORT
  152         0064      STATUS	EQU	64H		;STATUS PORT
  153         0065      TRACK	EQU	65H		;TRACK PORT
  154         0066      SECTOR	EQU	66H		;SECTOR PORT
  155         0067      DATA	EQU	67H		;DATA PORT
  156         0064      CMD	EQU	64H		;COMMAND PORT
  157         0005      DEBUG	EQU 05H
  158                   ;
  159                   ;Note: the 1791/5 chip for most commands used bits 0&1 to set the head
  160                   ;motor stepping rate. 00 being 3ms (@2MH clock),11 being 15 ms. My
  161                   ;Tandon 8" drives take the fastest rate. Older drives may not.
  162                   ;
  163         000C      RSCMD	EQU	00001100B	;(0CH),RESTORE CMD	<------ (Some drives require 
  164         0018      SKNCMD	EQU	00011000B	;(18H),SEEK NO VERIFY CMD <--  (a slower stepping rate r1,r0)
  165         001C      SKCMD	EQU	00011100B	;(1CH),SEEK WITH VERIFY CMD <---
  166         00C4      RDACMD	EQU	11000100B	;(C0H),READ TRACK/SECTOR ID CMD	
  167         005C      STEPIN	EQU	01011100B	; Step-in verify on dstination track
  168                   	
  169         0080      RDCMD91	EQU	10000000B	;(80H),READ SECTOR CMD	1791 chip
  170         00A0      WRCMD91	EQU	10100000B	;(A0H),WRITE SECTOR CMD 
  171                   
  172         0088      RDCMD95	EQU	10001000B	;(88H),READ SECTOR CMD	1795 chip
  173         00A8      WRCMD95	EQU	10101000B	;(A8H),WRITE SECTOR CMD
  174                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   4
VF      Z80

  175         00F4      WRTCMD	EQU	11110100B	;(F4H),Write a whole track command
  176         00E4      RDTCMD	EQU	11100100B	;(E4H),Read a whole track command
  177                   ;
  178                   ;
  179         0004      SEC_RETRY_MAX	EQU	4	;Number of times to try R/W a sector before returning an error
  180         0002      SEEK_RETRY_MAX	EQU	2	;Number of times to try R/W a sector before returning an error
  181         0080      HOME_ERR_MASK   EQU	80H	;Error mask for Type I Home CMD
  182         0090      SIN_ERR_MASK	EQU	90H	;Step head in one track command error bits
  183         0090      SK_ERR_MASK     EQU	90H	;Track Seek error bits 
  184         009F      ID_ERR_MASK     EQU	9FH	;Sector ID read error mask
  185         00BF      RS_ERR_MASK     EQU	0BFH	;Read sector data error mask
  186         00AF      MRS_ERR_MASK    EQU	0AFH	;Multi-sector Read data error mask
  187         00EF      WS_ERR_MASK	EQU	0EFh	;Write sector data error mask
  188         00EF      MWS_ERR_MASK	EQU	0EFh	;Multi-sector Write data error mask
  189         0080      RT_ERR_MASK     EQU	80H	;Read Track error mask
  190         00E0      WT_ERR_MASK     EQU	0E0H	;Write Track error mask
  191                   ;
  192                   ;
  193         5000      FBUFFER	EQU    5000H		;Buffer to build track image OR display sectors reads
  194         6000      FBUFFER2 EQU   6000H		;2nd buffer here for sector R/W test	
  195                   ;
  196                   ;The Index register IX is used throughout the program to point to the disk paramater
  197                   ;table of the currently selected drive/disk format
  198                   ;(IOBYTE) will point to (DRIVE) and will contain the current DRIVE 
  199                   ;hardware selection bits. Drive select 0,1,2,3 and side A or side B bits as well as
  200                   ;other flags (see below) 
  201                   ;Remember the bits for disk selection, density and side selection are inverted on 
  202                   ;the actual Versafloppy II board hardware
  203                   ;Register IX is not used for anything else in this program.
  204                   ;
  205                   ;The Index register IY is used throughout the program to point to the current/requested
  206                   ;Track, Side & Sector being worked on. Thet are at memory locations @TRK... IY will
  207                   ;always point to @TRK and assumes the others follow. Do not relocate or change the order.
  208                   ;
  209                   ; 
  210                   
  211                   ; EQUATES FOR [IX] REGISTAR INTO DISK PARAMATER TABLE
  212                   ;
  213         0000      NSCTRS	EQU	0	;Sectors/Track for disk
  214         0001      NTRKS	EQU	1	;Tracks/Side
  215         0002      HW_BYTE	EQU	2	;Will contain bit flags for:-
  216                   					;Bits 0,1 are used for drive selection
  217                   					;Bits 2 & 3 are currently unused
  218                   					;Bit 4=0 For SS disk hardware, 1= DS disk
  219                   					;Bit 5=0 8" disk, 1= 5" disk
  220                   					;Bit 6=0 Single density, 1= Double density
  221                   					;Bit 7=0 if CURRENT selected side is A
  222                   					;      1 if CURRENT selected side is B
  223                   					;Note: handle this byte with care it is
  224                   					;central to many functions within the 
  225                   					;program.
  226         0003      HEADR	EQU	3	;For Formatting
  227         0004      GAP1	EQU	4	;	"
  228         0005      GAP2	EQU	5	;	"
  229         0006      GAP3	EQU	6	;	"
  230         0007      GAP4	EQU	7	;	"
  231         0008      GAP4R	EQU	8	;	"
  232         0009      SIZE	EQU	9	;1=128 Byte sectors.....4=1024 Byte sectors
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   5
VF      Z80

  233         000A      GAP_FILL_CHAR  EQU 10	;Byte used in disk formating
  234         000B      DATA_FILL_CHAR EQU 11	;     "       "       "
  235         000C      TRK_SIZE       EQU 12	;TWO bytes containing the track size of that disks format
  236         000E      SPECIAL_FLAG   EQU 14	;flag byte for cases where after formatting disk need to be initilized
  237                   			;normally 0, CPM86_FLAG = 1
  238         000F      SKEW	       EQU 15	;Low address of sector skew table
  239         0010      SKEW1          EQU 16	;High address of sector skew table
  240         0011      FORMAT_NUM     EQU 17	;Each format will have a unique number. 
  241         0012      SYS_TRKS       EQU 18	;How many tracks for system usually 2 for 8-inch disks
  242         0013      TITLE	       EQU 19	;Text string describing the disk format
  243                   ;
  244                   ;
  245                   ; EQUATES FOR [IY] REGISTAR FOR TRACK, SIDE, SECTOR locations
  246                   ;
  247         0000      TRK	EQU	0
  248         0001      SIDE	EQU	1
  249         0002      SCTR	EQU	2
  250                   ;
  251                   ;------------------------------------------------------------------------------
  252         0100      	ORG	100H
  253                   ;
  254 0100  ED 73 3932  	LD	(SP_SAVE),SP
  255 0104  31 3A4D     	LD	SP,STACK
  256 0107  C3 0125     	JP	START
  257                   ;------------------------------------------------------------------------
  258                   ;		HARDWARE DEPENDENT STUFF
  259                   ; The only other hardware links are through the Versafloppy II board. 
  260                   ; Remember to make sure it is set to the correct 1791/5 & base port mentioned above.
  261                   ;
  262                   ; 
  263 010A  DB 00       CONST:	IN	A,(0)		;console status for SD Systems 8024 Video board
  264 010C  E6 02       	AND	A,02H		;anything there
  265 010E  C8          	RET	Z		;return 0 if nothing
  266 010F  AF          	XOR	A,A
  267 0110  3D          	DEC	A		;return NZ, & 0FFH in A if something there
  268 0111  C9          	RET
  269                   ;
  270 0112  DB 00       CI:	IN	A,(0)		;console input
  271 0114  E6 02       	AND	A,02H
  272 0116  28 FA       	JR	Z,CI
  273 0118  DB 01       	IN	A,(1)		;return with character in A
  274 011A  C9          	RET
  275                   ;		
  276 011B  DB 00       CO:	IN	A,(0)		;console output (arrive with character in C)
  277 011D  E6 04       	AND	A,04H		;Note character is in C and A on return.
  278 011F  28 FA       	JR	Z,CO
  279 0121  79          	LD	A,C
  280 0122  D3 01       	OUT	(1),A
  281 0124  C9          	RET
  282                   ;-------------------------------------------------------------------------
  283 0125  3E 00       START:	LD	A,SIMPLE
  284 0127  32 3927     	LD	(CRTDISP),A	;Start off with simple diagnostic display
  285 012A  21 1A24     OVER:	LD	HL,SIGNON
  286 012D  CD 192B     	CALL	PMSG
  287 0130  FD 21 0043  	LD	IY,@TRK		;Always points here
  288 0134  AF          	XOR	A,A		;set everything to zero
  289 0135  FD 77 00    	LD	(IY+TRK),A
  290 0138  FD 77 01    	LD	(IY+SIDE),A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   6
VF      Z80

  291 013B  3C          	INC	A
  292 013C  FD 77 02    	LD	(IY+SCTR),A	;Track 0, side A, sector 1
  293                   
  294 013F  CD 15BE     	CALL	SELECT_DR_1	;Put current drive hardware selection in (DRIVE_1)
  295 0142  28 0E       	JR	Z,GET_DR_TABLE	;Get the current disk format from user, point IX to table
  296 0144  FE FF       	CP	A,0FFH		
  297 0146  28 E2       	JR	Z,OVER		;Invalid drive, start over
  298 0148  CD 1948     	CALL	ZCRLF		;Must be an abort ESC
  299 014B  ED 7B 3932  	LD	SP,(SP_SAVE)
  300 014F  C3 0000     	JP	0H		;Reboot CP/M if ESC
  301                   
  302 0152              GET_DR_TABLE:
  303 0152  CD 1628     	CALL	SELECT_IX	;Set IX to point to the current drive table
  304 0155  28 0E       	JR	Z,LOOP		
  305 0157  FE FF       	CP	A,0FFH		
  306 0159  28 CF       	JR	Z,OVER		;Invalid drive, start over
  307 015B  CD 1948     	CALL	ZCRLF		;Must be an abort ESC
  308 015E  ED 7B 3932  	LD	SP,(SP_SAVE)
  309 0162  C3 0000     	JP	0H		;Reboot CP/M if ESC
  310                   ;
  311 0165  3A 3927     LOOP:	LD	A,(CRTDISP)	;Check if detailed display flag is on
  312 0168  B7          	OR	A,A
  313 0169  20 05       	JR	NZ,MENU1
  314 016B  21 207F     	LD	HL,MAIN_MENU0	;Main Menu loop (Detailed Diaplay OFF)
  315 016E  18 03       	JR	LOOP1
  316 0170  21 20C6     MENU1:	LD	HL,MAIN_MENU1	;Main Menu loop	(Detailed Display ON)
  317 0173  CD 192B     LOOP1:	CALL	PMSG
  318 0176  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware 
  319                   
  320 0179  CD 16F8     	CALL	SHOW_HW_TITLE	;Describe the currently selected drive
  321 017C  CD 1709     	CALL	SHOW_HW_BYTE	;Print out HW_BYTE info
  322                   	
  323 017F  21 5000     	LD	HL,FBUFFER	;The DMA RAM address will be here for sector R/W's
  324 0182  22 0040     	LD	(TADDR),HL
  325                   				
  326 0185  CD 0E2D     	CALL	HOME		;Move head to track 0 with a RESTORE CMD
  327 0188  C4 12C8     	CALL	NZ,SHOW_ERRORS	;If an error in restoring head to TRK 0 say so.
  328                   	
  329 018B  CB 47       	BIT	0,A		;If NZ, then timeout on Status port, bad hardware
  330 018D  20 13       	JR	NZ,TO_MENU	;Try another drive or format disk
  331                   
  332 018F  CD 1776     	CALL	SHOW_IX_TABLE	;Show info about current disk parameters
  333                   
  334 0192  CD 0EB8     	CALL	READ_ID		;Get Actual track ID
  335 0195  28 05       	JR	Z,ID_FINE	;Was there errors
  336 0197  CD 12C8     	CALL	SHOW_ERRORS	;If an error show bit flags
  337 019A  18 06       	JR	TO_MENU
  338                   
  339 019C  CD 1948     ID_FINE:CALL	ZCRLF
  340 019F  CD 17B5     	CALL	SHOW_ID		;Show a typical Track ID field on track 0
  341                   				
  342 01A2              TO_MENU:
  343 01A2  21 2246     	LD	HL,MENU_OPTIONS
  344 01A5  CD 192B     	CALL	PMSG
  345 01A8  3A 3927     	LD	A,(CRTDISP)	;Two menu lists (Set using menu #D)
  346 01AB  B7          	OR	A,A		;A detailed display or a simple one.
  347 01AC  20 05       	JR	NZ,MENUA
  348 01AE  21 245C     	LD	HL,MENU1_MSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   7
VF      Z80

  349 01B1  18 03       	JR	MENUB
  350 01B3  21 24AF     MENUA:	LD	HL,MENU2_MSG
  351 01B6  CD 192B     MENUB:	CALL	PMSG
  352                   				;-----MAIN MENU----
  353 01B9  CD 1936     	CALL	GETCMD		;Find out Menu Option in A
  354 01BC  32 392E     	LD	(CMD_STORE),A
  355 01BF  FE 1B       	CP	A,ESC		;Abort if ESC character
  356 01C1  28 53       	JR	Z,FIN
  357 01C3  FE 30       	CP	A,'0'		;Get a new current disk
  358 01C5  CA 012A     	JP	Z,OVER
  359 01C8  FE 31       	CP	A,'1'
  360 01CA  CC 022B     	CALL	Z,SEEK_TEST	;Seek test
  361 01CD  FE 32       	CP	A,'2'
  362 01CF  CC 0281     	CALL	Z,SEC_READ_TEST	;Sequental Read sectors test. 
  363 01D2  FE 33       	CP	A,'3'
  364 01D4  CC 02ED     	CALL	Z,SEC_WRITE_TEST;Sequental Write sectors test. 
  365 01D7  FE 34       	CP	A,'4'
  366 01D9  CC 036A     	CALL	Z,SEC_RW_TEST	;Sequental sec R/W test
  367 01DC  FE 35       	CP	A,'5'		
  368 01DE  CC 03FC     	CALL	Z,RAND_SEC_TEST	;Random Track/Sector read/write test
  369 01E1  FE 36       	CP	A,'6'
  370 01E3  CC 04A1     	CALL	Z,TRACK_TEST	;Read continously sectors from a specific track
  371 01E6  FE 37       	CP	A,'7'
  372 01E8  CC 054A     	CALL	Z,TRACK_DUMP	;Load one whole track to RAM (at location 5000H)
  373 01EB  FE 38       	CP	A,'8'
  374 01ED  CC 0644     	CALL	Z,LOAD_SECTORS	;Load sectors into RAM
  375 01F0  FE 39       	CP	A,'9'
  376 01F2  CC 078A     	CALL	Z,DUMP_SECTORS	;Write sectors to disk
  377 01F5  FE 46       	CP	A,'F'
  378 01F7  CC 08D6     	CALL	Z,FORMAT_DISK	;Go to disk formatting section
  379 01FA  FE 43       	CP	A,'C'
  380 01FC  CC 0B22     	CALL	Z,COPY_DISK	;Copy disk A: to B:
  381 01FF  FE 56       	CP	A,'V'
  382 0201  CC 0C2C     	CALL	Z,VERIFY_DISK	;Verify disk A:=B:
  383 0204  FE 44       	CP	A,'D'
  384 0206  CC 0220     	CALL	Z,TOGGLE_CRT	;Switch on/off detail info display option
  385 0209  FE 53       	CP	A,'S'
  386 020B  CC 0D40     	CALL	Z,COPY_CPM3_SYS	;Copy CPM system tracks to another disk.
  387 020E  FE 49       	CP	A,'I'
  388 0210  CC 09DE     	CALL	Z,IBMFORM_DISK	;Quick format of blank 8" disk in B:
  389 0213  C3 0165     	JP	LOOP
  390 0216  CD 1948     FIN:	CALL	ZCRLF
  391 0219  ED 7B 3932  	LD	SP,(SP_SAVE)
  392 021D  CA 0000     	JP	Z,0H		;Return to CPM
  393                   
  394                   ;
  395                   ;
  396                   ;-------- TOGGLE ON/OFF DETAILED INFORMATION DISPLAY ON CRT/LCD FOR SOME COMMANDS
  397 0220              TOGGLE_CRT:
  398 0220  3A 3927     	LD	A,(CRTDISP)
  399 0223  2F          	CPL
  400 0224  32 3927     	LD	(CRTDISP),A
  401 0227  3A 392E     	LD	A,(CMD_STORE)	;So we dont pick up other menu items
  402 022A  C9          	RET			;Back to main menu
  403                   ;
  404                   ;
  405                   ;------------------ SEEK DIAGNOSTIC TEST --------------------
  406                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   8
VF      Z80

  407                   ;Simply tests head movement control
  408 022B              SEEK_TEST:
  409 022B  21 2502     	LD	HL,SEKMSG
  410 022E  CD 192B     	CALL	PMSG
  411 0231  AF          	XOR	A,A		;Setup for the BIOS below
  412 0232  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  413 0235  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  414 0238  3C          	INC	A
  415 0239  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  416 023C  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  417 023F  CD 0E2D     	CALL	HOME		;Restore head to track 0
  418 0242  C4 12C8     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  419                   
  420 0245  CD 1948     SEKT:	CALL	ZCRLF
  421 0248  CD 0E70     	CALL	SEEK_TRACK_V	;Test SEEK ability/timing of chip
  422                   ;	CALL	STEP_IN_CMD	;Can also test Step in head one track & verify	
  423 024B  C4 12C8     	CALL	NZ,SHOW_ERRORS	;If Error show error flags
  424                   
  425 024E  CD 12A5     	CALL	SHOW_T_LOC	;Print out current track #
  426 0251  CD 0EB8     	CALL	READ_ID		;Get current track ID
  427 0254  C4 12C8     	CALL	NZ,SHOW_ERRORS	;print out the track ID errors
  428 0257  CD 17B5     	CALL	SHOW_ID		;Show track ID
  429                   
  430 025A  CD 19E4     	CALL	CHECKABORT	;SP will halt, ESC will abort
  431 025D  20 14       	JR	NZ,END_CMD	;Return back to main menu
  432                   
  433 025F  FD 34 00    	INC	(IY+TRK)	;Need to bump track up one
  434 0262  FD 7E 00    	LD	A,(IY+TRK)	;Store here
  435 0265  DD BE 01    	CP	A,(IX+NTRKS)	;Are we at the end yet
  436 0268  20 DB       	JR	NZ,SEKT
  437 026A  FD 36 00 00 	LD	(IY+TRK),0
  438 026E  CD 1948     	CALL	ZCRLF		;Extra CR/LF fro another loop
  439 0271  28 D2       	JR	Z,SEKT		;start again
  440                   ;
  441 0273              END_CMD:
  442 0273  AF          	XOR	A,A
  443 0274  FD 77 00    	LD	(IY+TRK),A	;Always back to Track 0, Side A
  444 0277  FD 77 01    	LD	(IY+SIDE),A
  445 027A  CD 0E2D     	CALL	HOME		;Move head back to Track 0
  446 027D  3A 392E     	LD	A,(CMD_STORE)	;So we dont pick up other menu items IF we return from here
  447 0280  C9          	RET
  448                   
  449                   ; ------------------- READ SECTORS TEST -------------
  450                   ; This routine will sequentially read all sectors on a disk. Both sides
  451                   ; if a 2 sided disk.
  452                   ;
  453 0281              SEC_READ_TEST:
  454 0281  21 293B     	LD	HL,RDTST_MSG		;Say read test
  455 0284  CD 192B     	CALL	PMSG
  456 0287  CD 1948     	CALL	ZCRLF
  457 028A  AF          	XOR	A,A			;Setup for the BIOS below
  458 028B  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  459 028E  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  460 0291  3C          	INC	A
  461 0292  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  462                   
  463 0295  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  464 0298  CD 0E2D     	CALL	HOME		
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page   9
VF      Z80

  465 029B  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  466                   
  467 029E              READ_LOOP1:
  468 029E  CD 1948     	CALL	ZCRLF
  469 02A1  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  470 02A4  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  471                   
  472 02A7  21 5000     	LD	HL,FBUFFER		;Place sector data here
  473 02AA  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  474                   
  475 02AD  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  476 02B0  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  477                   	
  478 02B3  CD 126A     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  479 02B6  CD 17FC     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  480                   
  481 02B9  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  482 02BC  FD 7E 02    	LD	A,(IY+SCTR)		;Store new sec # in A
  483 02BF  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  484 02C0  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  485 02C3  20 16       	JR	NZ,SECTRK_DONE1
  486                   
  487 02C5  CD 1208     	CALL	SWAP_SIDES		;Sides swap check
  488 02C8  3E 01       	LD	A,1			;Back to sector 1 no matter what
  489 02CA  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  490 02CD  20 0C       	JR	NZ,SECTRK_DONE1		;If B side (NZ), same track, back to sec 1
  491                   
  492 02CF  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  493 02D2  FD 7E 00    	LD	A,(IY+TRK)		;Store here
  494 02D5  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
  495 02D8  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  496                   ;	
  497 02DB              SECTRK_DONE1:
  498 02DB  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
  499 02DE  28 BE       	JR	Z,READ_LOOP1		;Loop until abort or all tracks done
  500 02E0  3A 3927     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  501 02E3  B7          	OR	A,A			;will switch it off
  502 02E4  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  503 02E7  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  504 02E8  32 3927     	LD	(CRTDISP),A
  505 02EB  18 B1       	JR	READ_LOOP1
  506                   ;
  507                   ;
  508                   ; ------------------- WRITE SECTORS TEST -------------
  509                   ; This routine will sequentially write to all sectors on a disk. Both sides
  510                   ; if a 2 sided disk. It will write the character TEST_FILL in each sector
  511                   ;
  512 02ED              SEC_WRITE_TEST:
  513 02ED  21 2959     	LD	HL,WRTST_MSG		;Say write test
  514 02F0  CD 192B     	CALL	PMSG
  515 02F3  CD 1948     	CALL	ZCRLF			;CR,LF at start. 
  516 02F6  AF          	XOR	A,A			;Setup for the BIOS below
  517 02F7  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  518 02FA  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  519 02FD  3C          	INC	A
  520 02FE  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  521 0301  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  522 0304  CD 0E2D     	CALL	HOME	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  10
VF      Z80

  523 0307  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  524                   
  525 030A  21 5000     	LD	HL,FBUFFER		;Sector data to be written is here
  526 030D  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  527                   
  528 0310  0E 01       	LD	C,TEST_FILL		;Data fill character (01H)
  529 0312  CD 1384     	CALL	FILL_BUFFER		;Fill buffer with character to be written
  530                   
  531 0315  CD 17EE     	CALL	CHECK_WP		;See if disk is write protected
  532 0318  C2 0273     	JP	NZ,END_CMD		;Abort
  533                   ;
  534 031B              WRITE_LOOP1:
  535 031B  CD 1948     	CALL	ZCRLF
  536 031E  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  537 0321  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  538                   	
  539 0324  21 5000     	LD	HL,FBUFFER		;Place sector data here
  540 0327  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  541                   
  542 032A  CD 103C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  543 032D  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  544                   	
  545 0330  CD 126A     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  546 0333  CD 17FC     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  547                   
  548 0336  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  549 0339  FD 7E 02    	LD	A,(IY+SCTR)		;Store new sec # in A
  550 033C  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  551 033D  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  552 0340  20 16       	JR	NZ,SECTRK_DONE2
  553                   
  554 0342  CD 1208     	CALL	SWAP_SIDES		;Sides swap check
  555 0345  3E 01       	LD	A,1			;Back to sector 1 no matter what
  556 0347  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  557 034A  20 0C       	JR	NZ,SECTRK_DONE2		;If B side (NZ), same track, back to sec 1
  558                   
  559 034C  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  560 034F  FD 7E 00    	LD	A,(IY+TRK)		;Next track
  561 0352  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
  562 0355  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  563                   ;	
  564 0358              SECTRK_DONE2:
  565 0358  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
  566 035B  28 BE       	JR	Z,WRITE_LOOP1		;Loop until abort or all tracks done
  567 035D  3A 3927     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  568 0360  B7          	OR	A,A			;will switch it off
  569 0361  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  570 0364  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  571 0365  32 3927     	LD	(CRTDISP),A
  572 0368  18 B1       	JR	WRITE_LOOP1
  573                   ;
  574                   ;
  575                   ; ------------------- SEQUENTAL READ/WRITE SECTORS TEST -------------
  576                   ; This routine will read and write back to randomly selected tracks and 
  577                   ; sectors on a disk. Both sides, if a 2 sided disk.
  578                   ;
  579 036A              SEC_RW_TEST:
  580 036A  21 2978     	LD	HL,RDWRTST_MSG		;Say R/W test
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  11
VF      Z80

  581 036D  CD 192B     	CALL	PMSG
  582 0370  CD 1948     	CALL	ZCRLF			;CR,LF at start. 
  583 0373  AF          	XOR	A,A			;Setup for the BIOS below
  584 0374  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  585 0377  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  586 037A  3C          	INC	A
  587 037B  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  588 037E  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  589 0381  CD 0E2D     	CALL	HOME	
  590 0384  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  591                   
  592 0387  CD 17EE     	CALL	CHECK_WP		;See if disk is write protected
  593 038A  C2 0273     	JP	NZ,END_CMD		;Abort
  594                   ;
  595 038D              RW_LOOP1:
  596 038D  CD 1948     	CALL	ZCRLF
  597 0390  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  598 0393  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  599                   	
  600 0396  21 5000     	LD	HL,FBUFFER		;Place sector data here
  601 0399  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  602                   
  603 039C  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  604 039F  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  605                   	
  606 03A2  CD 126A     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  607 03A5  CD 17FC     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  608                   
  609 03A8  CD 103C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  610 03AB  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  611                   
  612 03AE  21 6000     	LD	HL,FBUFFER2		;Place new sector data here
  613 03B1  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  614                   
  615 03B4  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  616 03B7  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  617                   
  618 03BA  CD 134E     	CALL	CMP_BUFFERS		;Check for errors
  619 03BD  28 09       	JR	Z,COMPARE_OK
  620 03BF  21 2918     	LD	HL,SEC_V_ERROR		;R/W Error found 
  621 03C2  CD 192B     	CALL	PMSG
  622 03C5  CD 126A     	CALL	SHOW_TSS_LOC		;trk,sec,head
  623                   
  624 03C8              COMPARE_OK:
  625 03C8  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  626 03CB  FD 7E 02    	LD	A,(IY+SCTR)
  627 03CE  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  628 03CF  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  629 03D2  20 16       	JR	NZ,SECTRK_DONE3
  630                   
  631 03D4  CD 1208     	CALL	SWAP_SIDES		;Sides swap check
  632 03D7  3E 01       	LD	A,1			;Back to sector 1 no matter what
  633 03D9  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
  634 03DC  20 0C       	JR	NZ,SECTRK_DONE3		;If B side (NZ), same track, back to sec 1
  635                   
  636 03DE  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
  637 03E1  FD 7E 00    	LD	A,(IY+TRK)		;Next track
  638 03E4  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  12
VF      Z80

  639 03E7  CA 0273     	JP	Z,END_CMD		;Yes we are done yet
  640                   ;	
  641 03EA              SECTRK_DONE3:
  642 03EA  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
  643 03ED  28 9E       	JR	Z,RW_LOOP1		;Loop until abort or all tracks done
  644 03EF  3A 3927     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  645 03F2  B7          	OR	A,A			;Will switch it off
  646 03F3  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  647 03F6  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  648 03F7  32 3927     	LD	(CRTDISP),A
  649 03FA  18 91       	JR	RW_LOOP1		;try again
  650                   ;
  651                   ;
  652                   ; ------------------- RANDOM TRK/SEC READ/WRITE SECTORS TEST -------------
  653                   ; This routine will read and write back to randomly selected tracks and 
  654                   ; sectors on a disk. Both sides, if a 2 sided disk.
  655                   ;
  656 03FC              RAND_SEC_TEST:
  657 03FC  21 2995     	LD	HL,RAND_TST_MSG		;Say R/W test
  658 03FF  CD 192B     	CALL	PMSG
  659 0402  CD 1948     	CALL	ZCRLF			;CR,LF at start. 
  660 0405  AF          	XOR	A,A			;Setup for the BIOS below
  661 0406  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
  662 0409  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
  663 040C  3C          	INC	A
  664 040D  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
  665 0410  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
  666 0413  CD 0E2D     	CALL	HOME		
  667 0416  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
  668                   
  669 0419  CD 17EE     	CALL	CHECK_WP		;See if disk is write protected
  670 041C  C2 0273     	JP	NZ,END_CMD		;Abort
  671                   ;
  672 041F              RAND_LOOP1:
  673 041F  CD 1948     	CALL	ZCRLF
  674 0422  CD 0E70     	CALL	SEEK_TRACK_V		;Seek with verify command to 1791/5
  675 0425  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  676                   
  677 0428  21 5000     	LD	HL,FBUFFER		;Place sector data here
  678 042B  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  679                   
  680 042E  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  681 0431  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  682                   	
  683 0434  CD 126A     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
  684 0437  CD 17FC     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  685                   
  686 043A  CD 103C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
  687 043D  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  688                   
  689 0440  21 6000     	LD	HL,FBUFFER2		;Place new sector data here
  690 0443  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  691                   
  692 0446  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  693 0449  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  694                   
  695 044C  CD 134E     	CALL	CMP_BUFFERS		;Check for errors
  696 044F  28 09       	JR	Z,RAND_OK
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  13
VF      Z80

  697 0451  21 2918     	LD	HL,SEC_V_ERROR		;R/W Error found 
  698 0454  CD 192B     	CALL	PMSG
  699 0457  CD 126A     	CALL	SHOW_TSS_LOC		;At trk,sec,head
  700                   
  701 045A              RAND_OK:
  702 045A  CD 0496     	CALL	RANDOM			;Get a random sector#
  703 045D  DD 46 00    	LD	B,(IX+NSCTRS)
  704 0460  A0          	AND	A,B			;strip off extra bits
  705 0461  B7          	OR	A,A			;No sector 0
  706 0462  20 01       	JR	NZ,RAND_SEC_OK
  707 0464  3C          	INC	A
  708 0465              RAND_SEC_OK:	
  709 0465  FD 77 02    	LD	(IY+SCTR),A		;Store for SEC display and sector read routine
  710                   
  711 0468  CD 0496     	CALL	RANDOM			;Get a random track #
  712 046B  DD 46 01    	LD	B,(IX+NTRKS)
  713 046E  05          	DEC	B			;Tracks numbered 0,1,2...NTRKS-1
  714 046F  A0          	AND	A,B			;strip off extra bits
  715 0470  FD 77 00    	LD	(IY+TRK),A		;Store for SEC display and sector read routine
  716                   
  717 0473  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
  718 0477  28 0B       	JR	Z,SECTRK_DONE4		;If 1 sided then skip sides swap
  719                   
  720 0479  CD 0496     	CALL	RANDOM			;Get a random SIDE 
  721 047C  E6 02       	AND	02H			;Isolate the SIDE bit
  722 047E  FD 77 01    	LD	(IY+SIDE),A		;Will be either 0 or 02H
  723 0481  CD 1227     	CALL	SET_SIDE
  724                   
  725 0484              SECTRK_DONE4:
  726 0484  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
  727 0487  28 96       	JR	Z,RAND_LOOP1		;Loop until abort 
  728 0489  3A 3927     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  729 048C  B7          	OR	A,A			;will switch it off
  730 048D  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  731 0490  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  732 0491  32 3927     	LD	(CRTDISP),A
  733 0494  18 89       	JR	RAND_LOOP1		;try again
  734                   ;
  735                   ; Simple random number generator
  736 0496  ED 5F       RANDOM:	LD	A,R			;Seed will be differentd each time
  737 0498  47          	LD	B,A		
  738 0499  87          	ADD	A,A
  739 049A  87          	ADD	A,A
  740 049B  80          	ADD	A,B
  741 049C  CB 1F       	RR	A
  742 049E  C6 07       	ADD	A,7
  743 04A0  C9          	RET
  744                   ;
  745                   ;
  746                   ; ------------------- CONTINOUSLY READ SECTORS FROM ONE TRACK TEST -------------
  747                   ; This routine will read sectors continously from one track. Both sides, if a 
  748                   ; a 2 sided disk. Can be used with a scope to do a 'CATS EYES' hardware test.
  749                   ;
  750 04A1              TRACK_TEST:
  751 04A1  21 293B     	LD	HL,RDTST_MSG	;Say read test
  752 04A4  CD 192B     	CALL	PMSG
  753 04A7  AF          	XOR	A,A		;Setup for the BIOS below
  754 04A8  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  14
VF      Z80

  755 04AB  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  756 04AE  3C          	INC	A
  757 04AF  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  758 04B2  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  759 04B5  CD 0E2D     	CALL	HOME		
  760 04B8  C4 12C8     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  761                   
  762 04BB  CD 1948     	CALL	ZCRLF
  763 04BE  21 26D2     	LD	HL,GET_TRACK_MSG ;get the required track
  764 04C1  CD 192B     	CALL	PMSG
  765 04C4  CD 1960     	CALL	GET_HEX		;get 2 digits
  766 04C7  DA 0273     	JP	C,END_CMD	;Abort if C returned
  767                   	
  768 04CA  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  769 04CD  B8          	CP	A,B
  770 04CE  38 08       	JR	C,GET_TSIDES	;Yes we are 
  771 04D0  21 2870     	LD	HL,TRACK_ERROR
  772 04D3  CD 192B     	CALL	PMSG
  773 04D6  18 C9       	JR	TRACK_TEST	;Try again
  774                   
  775 04D8              GET_TSIDES:
  776 04D8  FD 77 00    	LD	(IY+TRK),A	;Store requested track
  777                   
  778 04DB  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
  779 04DF  28 25       	JR	Z,TRACK_TEST2	;If 1 sided then skip side question
  780                   
  781 04E1  21 2706     	LD	HL,GET_SIDE_MSG ;get required track
  782 04E4  CD 192B     	CALL	PMSG
  783 04E7  CD 1936     	CALL	GETCMD		;get the input option
  784 04EA  FE 1B       	CP	A,ESC		;Abort if ESC character
  785 04EC  CA 0273     	JP	Z,END_CMD
  786 04EF  FE 42       	CP	A,'B'
  787 04F1  20 07       	JR	NZ,MUST_BE_TA
  788 04F3  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
  789 04F5  FD 77 01    	LD	(IY+SIDE),A
  790 04F8  18 0C       	JR	TRACK_TEST2
  791 04FA              MUST_BE_TA:
  792 04FA  FE 41       	CP	A,'A'
  793 04FC  28 08       	JR	Z,TRACK_TEST2	;Already on A
  794 04FE  21 272F     	LD	HL,SIDE_ERROR	;Not 'A' or 'B' must be error
  795 0501  CD 192B     	CALL	PMSG
  796 0504  18 9B       	JR	TRACK_TEST	;Try again
  797                   
  798 0506              TRACK_TEST2:
  799 0506  CD 1948     	CALL	ZCRLF
  800 0509  CD 1227     	CALL	SET_SIDE		;Update the side hardware (if required)	
  801 050C  CD 0E70     	CALL	SEEK_TRACK_V		;seek to the new track position	
  802 050F  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any show error flags
  803                   ;	
  804 0512              READ_LOOP2:
  805 0512  CD 1948     	CALL	ZCRLF
  806 0515  21 5000     	LD	HL,FBUFFER		;Place sector data here
  807 0518  22 0040     	LD	(TADDR),HL		;Setup DMA address for BIOS
  808                   
  809 051B  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
  810 051E  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
  811                   	
  812 0521  CD 126A     	CALL	SHOW_TSS_LOC		;Announce current Track, Sec, (head if 2 sided)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  15
VF      Z80

  813 0524  CD 17FC     	CALL	SEC_DISPLAY		;See if detail list the sector contents is req
  814                   
  815 0527  FD 34 02    	INC	(IY+SCTR)		;Get next sector
  816 052A  FD 7E 02    	LD	A,(IY+SCTR)
  817 052D  3D          	DEC	A			;Because sectors are numbered 1,2,3...
  818 052E  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
  819 0531  20 05       	JR	NZ,SEC_DONE4
  820 0533  3E 01       	LD	A,1			;Cycle back to sector 1
  821 0535  FD 77 02    	LD	(IY+SCTR),A
  822                   
  823 0538              SEC_DONE4:
  824 0538  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
  825 053B  28 D5       	JR	Z,READ_LOOP2		;Loop until abort or all tracks done
  826 053D  3A 3927     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
  827 0540  B7          	OR	A,A			;will switch it off
  828 0541  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
  829 0544  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
  830 0545  32 3927     	LD	(CRTDISP),A
  831 0548  18 C8       	JR	READ_LOOP2
  832                   ;
  833                   ;
  834                   ;
  835                   ;------------------------------------------------------------------------------
  836                   ;Read one whole track to RAM (5000H). This is used to see what the Format routine actully
  837                   ;placed on the disk and/or to see what track formats other computers used.
  838                   ;
  839                   ;
  840 054A              TRACK_DUMP:
  841 054A  21 2B59     	LD	HL,TRK_DUMP_MSG ;Say track dump msg
  842 054D  CD 192B     	CALL	PMSG
  843 0550  AF          	XOR	A,A		;Setup for the BIOS below
  844 0551  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  845 0554  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  846 0557  3C          	INC	A
  847 0558  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  848 055B  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  849 055E  CD 0E2D     	CALL	HOME		
  850 0561  C4 12C8     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  851                   
  852 0564  CD 1948     	CALL	ZCRLF
  853 0567  21 26D2     	LD	HL,GET_TRACK_MSG ;get required track
  854 056A  CD 192B     	CALL	PMSG
  855 056D  CD 1960     	CALL	GET_HEX		;get 2 digits in [A]
  856 0570  DA 0273     	JP	C,END_CMD
  857 0573  CD 1948     	CALL	ZCRLF
  858                   	
  859 0576  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  860 0579  B8          	CP	A,B
  861 057A  38 08       	JR	C,GET_SIDES	;Yes we are 
  862 057C  21 2870     	LD	HL,TRACK_ERROR
  863 057F  CD 192B     	CALL	PMSG
  864 0582  18 C6       	JR	TRACK_DUMP	;Try again
  865 0584              GET_SIDES:
  866 0584  FD 77 00    	LD	(IY+TRK),A	;Store requested track
  867                   
  868 0587  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
  869 058B  28 25       	JR	Z,GET_TRK	;If 1 sided then skip side question
  870                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  16
VF      Z80

  871 058D  21 2706     	LD	HL,GET_SIDE_MSG ;get required track
  872 0590  CD 192B     	CALL	PMSG
  873 0593  CD 1936     	CALL	GETCMD		;get the input option
  874 0596  FE 1B       	CP	A,ESC		;Abort if ESC character
  875 0598  CA 0273     	JP	Z,END_CMD
  876 059B  FE 42       	CP	A,'B'
  877 059D  20 07       	JR	NZ,MUST_BE_A
  878 059F  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
  879 05A1  FD 77 01    	LD	(IY+SIDE),A
  880 05A4  18 0C       	JR	GET_TRK
  881 05A6              MUST_BE_A:
  882 05A6  FE 41       	CP	A,'A'
  883 05A8  28 08       	JR	Z,GET_TRK	;Already on A
  884 05AA  21 272F     	LD	HL,SIDE_ERROR
  885 05AD  CD 192B     	CALL	PMSG
  886 05B0  18 98       	JR	TRACK_DUMP	;Try again
  887                   
  888 05B2              GET_TRK:
  889 05B2  CD 1948     	CALL	ZCRLF
  890 05B5  CD 1227     	CALL	SET_SIDE	;Update the side hardware (if required)	
  891                   
  892 05B8  CD 0E70     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
  893 05BB  C4 12C8     	CALL	NZ,SHOW_ERRORS	;If any show error flags
  894                   ;
  895 05BE  21 5000     	LD	HL,FBUFFER	;Will build the complete sector image here (5000H)
  896 05C1  22 0040     	LD	(TADDR),HL	;Store the pointer here.
  897 05C4  DD 56 0D    	LD	D,(IX+TRK_SIZE+1) ;Need to find out how large the track is
  898 05C7  DD 5E 0C    	LD	E,(IX+TRK_SIZE)	;Number of bytes per track for this disk into [DE]
  899 05CA  7A          	LD	A,D		;check that it is not 0 (ie. data not filled in table)
  900 05CB  B7          	OR	A,A
  901 05CC  20 09       	JR	NZ,SIZE_OK
  902 05CE  21 2A1E     	LD	HL,TRK_SIZE_ERR
  903 05D1  CD 192B     	CALL	PMSG
  904 05D4  C3 0273     	JP	END_CMD
  905 05D7              SIZE_OK:
  906 05D7  ED 53 3937  	LD	(TRACK_SIZE),DE ;Store for below also
  907                   
  908 05DB  06 00       	LD	B,0
  909 05DD  70          Z_LOOP:	LD	(HL),B		;Fill RAM with 0's before starting
  910 05DE  23          	INC	HL
  911 05DF  1B          	DEC	DE
  912 05E0  7B          	LD	A,E
  913 05E1  B7          	OR	A,A
  914 05E2  20 F9       	JR	NZ,Z_LOOP
  915 05E4  B2          	OR	A,D
  916 05E5  20 F6       	JR	NZ,Z_LOOP	;Have we done DE bytes yet
  917                   	
  918 05E7  21 5000     	LD	HL,FBUFFER	;Start again
  919 05EA  22 0040     	LD	(TADDR),HL
  920 05ED  ED 5B 3937  	LD	DE,(TRACK_SIZE)	;Number of bytes per track 
  921                   				
  922 05F1  CD 1009     	CALL	READ_TRACK	;<<<<<< Read one whole track
  923 05F4  C4 12C8     	CALL	NZ,SHOW_ERRORS	;If any, show error flags
  924                   	
  925 05F7  CD 12B9     	CALL	SHOW_TS_LOC
  926                   	
  927 05FA  21 277E     	LD	HL,TRACK_CONTENTS
  928 05FD  CD 192B     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  17
VF      Z80

  929 0600  2E 10       	LD	L,PAGE_SIZE	;20 lines per page
  930 0602  ED 5B 3937  	LD	DE,(TRACK_SIZE)	;to count down 
  931 0606  01 0000     	LD	BC,0		;to count up
  932 0609  D9          	EXX
  933 060A  21 5000     	LD	HL,FBUFFER	;will use alt reg HL' for data pointer
  934 060D  D9          	EXX
  935 060E  D9          RAMDUMP:EXX
  936 060F  7E          	LD	A,(HL)
  937 0610  CD 19B1     	CALL	PACC
  938 0613  23          	INC	HL
  939 0614  D9          	EXX
  940 0615  03          	INC	BC
  941 0616  79          	LD	A,C
  942 0617  E6 1F       	AND	A,00011111B	;32 characters /line
  943 0619  20 1A       	JR	NZ,NOCRX
  944 061B  CD 1948     	CALL	ZCRLF
  945 061E  2D          	DEC	L
  946 061F  20 14       	JR	NZ,NOCRX
  947 0621  E5          	PUSH	HL
  948 0622  21 2793     	LD	HL,MORE_MSG
  949 0625  CD 192B     	CALL	PMSG
  950 0628  CD 1936     	CALL	GETCMD		;Ask if we wish to continue
  951 062B  E1          	POP	HL
  952 062C  FE 59       	CP	A,'Y'
  953 062E  20 0D       	JR	NZ,DONECR
  954 0630  CD 1948     	CALL	ZCRLF
  955 0633  2E 10       	LD	L,PAGE_SIZE
  956 0635  1B          NOCRX:	DEC	DE
  957 0636  7B          	LD	A,E
  958 0637  B7          	OR	A,A
  959 0638  20 D4       	JR	NZ,RAMDUMP
  960 063A  B2          	OR	A,D
  961 063B  20 D1       	JR	NZ,RAMDUMP	;Have we sent DE bytes yet
  962 063D  D9          DONECR:	EXX			;We are done
  963 063E  CD 125E     	CALL	FRCINT		;Need to clear the 1791/5 because we may have 
  964                   ;				;overrun reading the track
  965 0641  C3 0273     	JP	END_CMD		;All done back to main menu
  966                   ;
  967                   ;
  968                   ;
  969                   ;**************** LOAD SECTORS FROM DISK TO RAM ROUTINE ********
  970                   ;Note sectors from only one side.
  971                   
  972 0644              LOAD_SECTORS:
  973 0644  21 2B8C     	LD	HL,LOAD_MSG	;Load msg
  974 0647  CD 192B     	CALl	PMSG
  975 064A  AF          	XOR	A,A		;Setup for the BIOS below
  976 064B  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
  977 064E  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
  978 0651  3C          	INC	A
  979 0652  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
  980 0655  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
  981 0658  CD 0E2D     	CALL	HOME		
  982 065B  C4 12C8     	CALL	NZ,SHOW_ERRORS	;print out errors if any
  983                   
  984 065E  CD 1948     	CALL	ZCRLF
  985 0661  21 26D2     	LD	HL,GET_TRACK_MSG ;get required track
  986 0664  CD 192B     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  18
VF      Z80

  987 0667  CD 1960     	CALL	GET_HEX		;get 2 digits
  988 066A  DA 0273     	JP	C,END_CMD
  989                   
  990 066D  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
  991 0670  B8          	CP	A,B
  992 0671  38 09       	JR	C,LGET_SIDES	;Yes we are 
  993 0673  21 2870     	LD	HL,TRACK_ERROR
  994 0676  CD 192B     	CALL	PMSG
  995 0679  C3 0644     	JP	LOAD_SECTORS	;Try again
  996 067C              LGET_SIDES:
  997 067C  FD 77 00    	LD	(IY+TRK),A	;Store requested track for below
  998                   
  999 067F  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 1000 0683  28 29       	JR	Z,GET_START_SEC	;If 1 sided then skip side question
 1001                   
 1002 0685  CD 1948     	CALL	ZCRLF
 1003 0688  21 2706     	LD	HL,GET_SIDE_MSG ;get required track
 1004 068B  CD 192B     	CALL	PMSG
 1005 068E  CD 1936     	CALL	GETCMD		;get the input option
 1006 0691  FE 1B       	CP	A,ESC		;Abort if ESC character
 1007 0693  CA 0273     	JP	Z,END_CMD
 1008 0696  FE 42       	CP	A,'B'
 1009 0698  20 07       	JR	NZ,LMUST_BE_A
 1010 069A  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
 1011 069C  FD 77 01    	LD	(IY+SIDE),A
 1012 069F  18 0D       	JR	GET_START_SEC
 1013                   
 1014 06A1              LMUST_BE_A:
 1015 06A1  FE 41       	CP	A,'A'
 1016 06A3  28 09       	JR	Z,GET_START_SEC	;Already on A
 1017 06A5  21 272F     	LD	HL,SIDE_ERROR
 1018 06A8  CD 192B     	CALL	PMSG
 1019 06AB  C3 0644     	JP	LOAD_SECTORS	;Try again
 1020                   
 1021 06AE              GET_START_SEC:
 1022 06AE  21 2749     	LD	HL,GET_SEC_MSG	;Get starting sector
 1023 06B1  CD 192B     	CALL	PMSG
 1024 06B4  CD 1960     	CALL	GET_HEX		;get 2 digits
 1025 06B7  DA 0273     	JP	C,END_CMD
 1026 06BA  CD 1948     	CALL	ZCRLF
 1027 06BD  DD 46 00    	LD	B,(IX+NSCTRS)	;Are we within disk range
 1028 06C0  B8          	CP	A,B
 1029 06C1  38 09       	JR	C,GSTART1	;Yes we are 
 1030 06C3  21 27B5     GSTART0:LD	HL,SEC_ERROR
 1031 06C6  CD 192B     	CALL	PMSG
 1032 06C9  C3 0644     	JP	LOAD_SECTORS	;Try again
 1033 06CC  B7          GSTART1:OR	A,A		;Sectors numbered 1,2,3... 
 1034 06CD  28 F4       	JR	Z,GSTART0
 1035                   
 1036 06CF  FD 77 02    	LD	(IY+SCTR),A	;Store start sector
 1037                   
 1038 06D2  21 2A61     	LD	HL,SEC_COUNT_MSG   ;Get no. of sectors to load
 1039 06D5  CD 192B     	CALL	PMSG
 1040 06D8  CD 1960     	CALL	GET_HEX		;get 2 digits
 1041 06DB  D2 06E7     	JP	NC,GSTART2
 1042 06DE              GSTART3:
 1043 06DE  21 204D     	LD	HL,SEC_COUNT_ERR
 1044 06E1  CD 192B     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  19
VF      Z80

 1045 06E4  C3 0273     	JP	END_CMD
 1046 06E7  B7          GSTART2:OR	A,A		;cannot have 0 sectors
 1047 06E8  28 F4       	JR	Z,GSTART3
 1048                   	
 1049 06EA  32 3939     	LD	(SEC_COUNT),A	;store count of sectors
 1050                   	
 1051 06ED  21 2A8C     	LD	HL,GET_DMA_MSG  ;Get DMA Aaddress
 1052 06F0  CD 192B     	CALL	PMSG
 1053 06F3  CD 1997     	CALL	GET_HEX4	;get 4 digits
 1054 06F6  D2 0702     	JP	NC,GSTART4
 1055 06F9  21 2062     	LD	HL,RAM_ERROR
 1056 06FC  CD 192B     	CALL	PMSG
 1057 06FF  C3 0273     	JP	END_CMD
 1058 0702              GSTART4:
 1059 0702  22 0040     	LD	(TADDR),HL	;Store the DMA address
 1060 0705  CD 1227     	CALL	SET_SIDE	;Update the side hardware (if required)	
 1061 0708  CD 1948     	CALL	ZCRLF
 1062                   
 1063 070B              MORE_LOAD:
 1064 070B  CD 0E70     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
 1065 070E  C4 12C8     	CALL	NZ,SHOW_ERRORS	;If any show error flags
 1066                   ;	
 1067 0711  21 2B09     	LD	HL,LOADING_MSG
 1068 0714  CD 192B     	CALL	PMSG
 1069 0717  CD 126A     	CALL	SHOW_TSS_LOC
 1070 071A  21 2B19     	LD	HL,LOADING1_MSG
 1071 071D  CD 192B     	CALL	PMSG
 1072 0720  2A 0040     	LD	HL,(TADDR)
 1073 0723  7C          	LD	A,H
 1074 0724  CD 19B1     	CALL	PACC
 1075 0727  7D          	LD	A,L
 1076 0728  CD 19B1     	CALL	PACC
 1077 072B  21 253D     	LD	HL,H_MSG		;H. at end of message
 1078 072E  CD 192B     	CALL	PMSG
 1079                   
 1080 0731  CD 0EEF     	CALL	READ_SECTOR		;<<<<<<<< READ 1 SECTOR >>>>>>
 1081 0734  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1082                   ;
 1083 0737  2A 393A     	LD	HL,(DMA_NEXT)		;Update the next RAM location
 1084 073A  22 0040     	LD	(TADDR),HL
 1085                   
 1086 073D  3A 3939     	LD	A,(SEC_COUNT)
 1087 0740  3D          	DEC	A
 1088 0741  28 35       	JR	Z,DONE_LOAD_OK
 1089 0743  32 3939     	LD	(SEC_COUNT),A		;Store for next time
 1090                   
 1091 0746  FD 34 02    	INC	(IY+SCTR)
 1092 0749  FD 7E 02    	LD	A,(IY+SCTR)
 1093 074C  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1094 074D  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1095 0750  20 10       	JR	NZ,LSECTRK_OK
 1096                   
 1097 0752  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1098 0754  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1099                   
 1100 0757  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
 1101 075A  FD 7E 00    	LD	A,(IY+TRK)
 1102 075D  DD BE 01    	CP	A,(IX+NTRKS)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  20
VF      Z80

 1103 0760  28 1F       	JR	Z,ERROR_LOAD		;Ran out of tracks
 1104                   ;
 1105 0762              LSECTRK_OK:
 1106 0762  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1107 0765  20 03       	JR	NZ,DONE_LR
 1108 0767  C3 070B     	JP	MORE_LOAD		;Loop until abort or all sectors are done
 1109 076A  3A 3927     DONE_LR:LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1110 076D  B7          	OR	A,A			;will switch it off
 1111 076E  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
 1112 0771  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1113 0772  32 3927     	LD	(CRTDISP),A
 1114 0775  C3 070B     	JP	MORE_LOAD
 1115                   ;
 1116 0778              DONE_LOAD_OK:
 1117 0778  21 2B42     	LD	HL,LOAD_DONE_MSG
 1118 077B  CD 192B     	CALL	PMSG			
 1119 077E  C3 0273     	JP	END_CMD
 1120                   ;
 1121 0781              ERROR_LOAD:
 1122 0781  21 2B25     	LD	HL,ERR_TK_MSG
 1123 0784  CD 192B     	CALL	PMSG
 1124 0787  C3 0273     	JP	END_CMD
 1125                   ;
 1126                   ;
 1127                   ;
 1128                   ;;**************** DUMP SECTORS FROM RAM TO DISK ROUTINE ********
 1129                   ;
 1130 078A              DUMP_SECTORS:
 1131 078A  21 2BAE     	LD	HL,DUMP_MSG	;Load msg
 1132 078D  CD 192B     	CALl	PMSG
 1133 0790  AF          	XOR	A,A		;Setup for the BIOS below
 1134 0791  FD 77 00    	LD	(IY+TRK),A	;Start with track 0 
 1135 0794  FD 77 01    	LD	(IY+SIDE),A	;Start on Side A 
 1136 0797  3C          	INC	A
 1137 0798  FD 77 02    	LD	(IY+SCTR),A	;Start at sector 1 
 1138 079B  CD 11D6     	CALL	START_DRIVE_1	;Select for "the current drive" in hardware, Side A
 1139 079E  CD 0E2D     	CALL	HOME		
 1140 07A1  C4 12C8     	CALL	NZ,SHOW_ERRORS	;print out errors if any
 1141                   
 1142 07A4  CD 17EE     	CALL	CHECK_WP	;See if disk is write protected
 1143 07A7  C2 0273     	JP	NZ,END_CMD	
 1144                   
 1145 07AA              WR_T_OK:
 1146 07AA  CD 1948     	CALL	ZCRLF
 1147 07AD  21 26D2     	LD	HL,GET_TRACK_MSG ;get required track
 1148 07B0  CD 192B     	CALL	PMSG
 1149 07B3  CD 1960     	CALL	GET_HEX		;get 2 digits
 1150 07B6  DA 0273     	JP	C,END_CMD
 1151 07B9  CD 1948     	CALL	ZCRLF
 1152 07BC  DD 46 01    	LD	B,(IX+NTRKS)	;Are we within disk range
 1153 07BF  B8          	CP	A,B
 1154 07C0  38 09       	JR	C,DGET_SIDES	;Yes we are 
 1155 07C2  21 2870     	LD	HL,TRACK_ERROR
 1156 07C5  CD 192B     	CALL	PMSG
 1157 07C8  C3 078A     	JP	DUMP_SECTORS	;Try again
 1158 07CB              DGET_SIDES:
 1159 07CB  FD 77 00    	LD	(IY+TRK),A	;Store requested track for below
 1160                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  21
VF      Z80

 1161 07CE  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
 1162 07D2  28 29       	JR	Z,GET_START_DSEC	;If 1 sided then skip side question
 1163 07D4  CD 1948     	CALL	ZCRLF
 1164                   
 1165 07D7  21 2706     	LD	HL,GET_SIDE_MSG ;get required track
 1166 07DA  CD 192B     	CALL	PMSG
 1167 07DD  CD 1936     	CALL	GETCMD		;get the input option
 1168 07E0  FE 1B       	CP	A,ESC		;Abort if ESC character
 1169 07E2  CA 0273     	JP	Z,END_CMD
 1170 07E5  FE 42       	CP	A,'B'
 1171 07E7  20 07       	JR	NZ,DMUST_BE_A
 1172 07E9  3E 02       	LD	A,02H		;Set to side B Flag (Started off with 0=A)
 1173 07EB  FD 77 01    	LD	(IY+SIDE),A
 1174 07EE  18 0D       	JR	GET_START_DSEC
 1175 07F0              DMUST_BE_A:
 1176 07F0  FE 41       	CP	A,'A'
 1177 07F2  28 09       	JR	Z,GET_START_DSEC	;Already on A
 1178 07F4  21 272F     	LD	HL,SIDE_ERROR
 1179 07F7  CD 192B     	CALL	PMSG
 1180 07FA  C3 078A     	JP	DUMP_SECTORS		;Try again
 1181                   
 1182 07FD              GET_START_DSEC:
 1183 07FD  21 2749     	LD	HL,GET_SEC_MSG	;Get starting sector
 1184 0800  CD 192B     	CALL	PMSG
 1185 0803  CD 1960     	CALL	GET_HEX		;get 2 digits
 1186 0806  DA 0273     	JP	C,END_CMD
 1187 0809  CD 1948     	CALL	ZCRLF
 1188 080C  DD 46 00    	LD	B,(IX+NSCTRS)	;Are we within disk range
 1189 080F  B8          	CP	A,B
 1190 0810  38 09       	JR	C,DSTART1	;Yes we are 
 1191 0812  21 27B5     DSTART0:LD	HL,SEC_ERROR
 1192 0815  CD 192B     	CALL	PMSG
 1193 0818  C3 078A     	JP	DUMP_SECTORS	;Try again
 1194 081B  B7          DSTART1:OR	A,A		;Sectors numbered 1,2,3... 
 1195 081C  28 F4       	JR	Z,DSTART0
 1196                   
 1197 081E  FD 77 02    	LD	(IY+SCTR),A	;Store start sector
 1198                   
 1199 0821  21 2A61     	LD	HL,SEC_COUNT_MSG   ;Get no. of sectors to write
 1200 0824  CD 192B     	CALL	PMSG
 1201 0827  CD 1960     	CALL	GET_HEX		;get 2 digits
 1202 082A  D2 0836     	JP	NC,DSTART2
 1203 082D              DSTART3:
 1204 082D  21 204D     	LD	HL,SEC_COUNT_ERR
 1205 0830  CD 192B     	CALL	PMSG
 1206 0833  C3 0273     	JP	END_CMD
 1207 0836  B7          DSTART2:OR	A,A		;cannot have 0 sectors
 1208 0837  28 F4       	JR	Z,DSTART3
 1209                   	
 1210 0839  32 3939     	LD	(SEC_COUNT),A	;store count of sectors
 1211                   	
 1212 083C  21 2ACC     	LD	HL,GET_DMAD_MSG  ;Get DMA Aaddress
 1213 083F  CD 192B     	CALL	PMSG
 1214 0842  CD 1997     	CALL	GET_HEX4	;get 4 digits
 1215 0845  D2 0851     	JP	NC,DSTART4
 1216 0848  21 2062     	LD	HL,RAM_ERROR
 1217 084B  CD 192B     	CALL	PMSG
 1218 084E  C3 0273     	JP	END_CMD
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  22
VF      Z80

 1219 0851              DSTART4:
 1220 0851  22 0040     	LD	(TADDR),HL	;Store the DMA address
 1221 0854  CD 1227     	CALL	SET_SIDE	;Update the side hardware (if required)	
 1222 0857              MORE_DUMP:
 1223 0857  CD 0E70     	CALL	SEEK_TRACK_V	;seek to the new track position	(verify)
 1224 085A  C4 12C8     	CALL	NZ,SHOW_ERRORS	;If any show error flags
 1225                   ;	
 1226 085D  21 2BE5     	LD	HL,DUMPING_MSG
 1227 0860  CD 192B     	CALL	PMSG
 1228 0863  CD 126A     	CALL	SHOW_TSS_LOC
 1229 0866  21 2BF5     	LD	HL,DUMPING1_MSG
 1230 0869  CD 192B     	CALL	PMSG
 1231 086C  2A 0040     	LD	HL,(TADDR)
 1232 086F  7C          	LD	A,H
 1233 0870  CD 19B1     	CALL	PACC
 1234 0873  7D          	LD	A,L
 1235 0874  CD 19B1     	CALL	PACC
 1236 0877  21 253D     	LD	HL,H_MSG		;H. at end of message
 1237 087A  CD 192B     	CALL	PMSG
 1238                   
 1239 087D  CD 103C     	CALL	WRITE_SECTOR		;<<<<<<<< WRITE 1 SECTOR >>>>>>
 1240 0880  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1241                   ;
 1242 0883  2A 393A     	LD	HL,(DMA_NEXT)		;Update the next RAM location
 1243 0886  22 0040     	LD	(TADDR),HL
 1244                   
 1245 0889  3A 3939     	LD	A,(SEC_COUNT)
 1246 088C  3D          	DEC	A
 1247 088D  28 35       	JR	Z,DONE_DUMP_OK
 1248 088F  32 3939     	LD	(SEC_COUNT),A		;Store for next time
 1249                   
 1250 0892  FD 34 02    	INC	(IY+SCTR)		;Get next sector
 1251 0895  FD 7E 02    	LD	A,(IY+SCTR)
 1252 0898  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1253 0899  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1254 089C  20 10       	JR	NZ,DSECTRK_OK
 1255                   
 1256 089E  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1257 08A0  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1258                   
 1259 08A3  FD 34 00    	INC	(IY+TRK)		;Need to bump track up one
 1260 08A6  FD 7E 00    	LD	A,(IY+TRK)			
 1261 08A9  DD BE 01    	CP	A,(IX+NTRKS)		;Are we at the end yet
 1262 08AC  28 1F       	JR	Z,ERROR_DUMP		;Ran out of tracks
 1263                   ;	
 1264 08AE              DSECTRK_OK:
 1265 08AE  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1266 08B1  20 03       	JR	NZ,DONE_LX
 1267 08B3  C3 0857     	JP	MORE_DUMP		;Loop until abort or all sectors are done
 1268 08B6  3A 3927     DONE_LX:LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1269 08B9  B7          	OR	A,A			;will switch it off
 1270 08BA  CA 0273     	JP	Z,END_CMD		;If Z do not list the sector contents.
 1271 08BD  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1272 08BE  32 3927     	LD	(CRTDISP),A
 1273 08C1  C3 0857     	JP	MORE_DUMP
 1274                   ;
 1275 08C4              DONE_DUMP_OK:
 1276 08C4  21 2C03     	LD	HL,DUMP_DONE_MSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  23
VF      Z80

 1277 08C7  CD 192B     	CALL	PMSG			
 1278 08CA  C3 0273     	JP	END_CMD
 1279                   ;
 1280 08CD              ERROR_DUMP:
 1281 08CD  21 2B25     	LD	HL,ERR_TK_MSG
 1282 08D0  CD 192B     	CALL	PMSG
 1283 08D3  C3 0273     	JP	END_CMD
 1284                   ;
 1285                   ;
 1286                   ;**************** CURRENT DISK, FORMAT ROUTINE ***************************
 1287                   ;
 1288 08D6              FORMAT_DISK:
 1289 08D6  DD 22 3924  	LD	(IX_OLD_STORE),IX	;Save current IX in case of an abort
 1290                   
 1291 08DA  DD CB 02 6E 	BIT	5,(IX+HW_BYTE)		;See if current selected disk is 5" or 8"
 1292 08DE  20 0D       	JR	NZ,FORM_TABLE5
 1293 08E0  CD 164A     	CALL	GET_TABLE_8		;Setup IX to (new) table parameters for 8"
 1294 08E3  28 15       	JR	Z,TABLE_OK
 1295 08E5  21 2582     	LD	HL,BADCMD
 1296 08E8  CD 192B     	CALL	PMSG
 1297 08EB  18 30       	JR	FABORT
 1298 08ED              FORM_TABLE5:
 1299 08ED  CD 1685     	CALL	GET_TABLE_5		;Setup IX to (new) table parameters for 5"
 1300 08F0  28 08       	JR	Z,TABLE_OK
 1301 08F2  21 2582     	LD	HL,BADCMD
 1302 08F5  CD 192B     	CALL	PMSG
 1303 08F8  18 23       	JR	FABORT
 1304 08FA              TABLE_OK:	
 1305 08FA  21 2566     	LD	HL,FORMATTING_MSG
 1306 08FD  CD 192B     	CALL	PMSG
 1307 0900  DD E5       	PUSH	IX			;IX->HL
 1308 0902  E1          	POP	HL
 1309 0903  11 0013     	LD	DE,TITLE		;add in offset
 1310 0906  19          	ADD	HL,DE			;HL now points to the title entry of the selected disk
 1311 0907  CD 192B     	CALL	PMSG
 1312                   
 1313 090A  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1314 090D  CD 0E2D     	CALL	HOME			;Restore disk head
 1315 0910  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1316                   	
 1317 0913  CD 17EE     	CALL	CHECK_WP		;See if disk is write protected
 1318 0916  CA 0924     	JP	Z,FORMWP_OK		;Go to the core test routine
 1319 0919  DD 2A 3924  	LD	IX,(IX_OLD_STORE)	;Nothing altered go back to main menu
 1320 091D  CD 11D6     FABORT:	CALL	START_DRIVE_1		;RE-select to old drive disk format, Side A
 1321 0920  3A 392E     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1322 0923  C9          	RET				;return back to MENU
 1323                   	
 1324 0924              FORMWP_OK:
 1325 0924  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here
 1326 0927  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1327                   
 1328 092A  3E 01       	LD	A,1
 1329 092C  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1330 092F  AF          	XOR	A,A			;Setup for the BIOS below
 1331 0930  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1332 0933  CD 1227     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1333 0936  AF          	XOR	A,A
 1334                   					;Fall through with 0 in [A] for trk 0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  24
VF      Z80

 1335 0937              NEXT_TRK:			
 1336 0937  FD 77 00    	LD	(IY+TRK),A		;store track info for eack loop
 1337                   	
 1338 093A  CD 13AB     	CALL	BUILD_TRACK		;Build a complete track image in RAM
 1339                   
 1340 093D  CD 1852     	CALL	FORMAT_INFO		;Display the track if detailed info is on
 1341                   	
 1342 0940  FD 7E 01    	LD	A,(IY+SIDE)	
 1343 0943  FE 02       	CP	A,02H			;If B side no seek necessary
 1344 0945  28 09       	JR	Z,SKIP_SEEK
 1345                   
 1346 0947  FD 7E 00    	LD	A,(IY+TRK)		;Get new track#
 1347 094A  CD 0E81     	CALL	SEEK_TRACK_NV		;Seek with verify command to 1791/5
 1348 094D  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1349                   
 1350 0950              SKIP_SEEK:
 1351 0950  11 5000     	LD	DE,FBUFFER		;Move Start of track image into DE
 1352 0953  D5          	PUSH	DE			;save it
 1353 0954  2A 394B     	LD	HL,(E_GAP4_MARK)	;End+1 of track header
 1354 0957  2B          	DEC	HL
 1355 0958  ED 52       	SBC	HL,DE
 1356 095A  EB          	EX	DE,HL			;Count now in DE
 1357                   
 1358 095B  21 3937     	LD	HL,TRACK_SIZE		;Side step, need to store track byte count
 1359 095E  72          	LD	(HL),D			;for display at end of format etc.
 1360 095F  23          	INC	HL
 1361 0960  73          	LD	(HL),E
 1362 0961  E1          	POP	HL			;DE on stack to --> HL
 1363                   
 1364 0962  CD 1156     	CALL	WRITE_TRACK		;<<<< Write track with hardware >>>>>
 1365 0965  C4 12C8     	CALL	NZ,SHOW_ERRORS
 1366                   
 1367 0968  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1368 096B  20 58       	JR	NZ,CHECK_ABORT
 1369 096D              AGAIN1:
 1370 096D  DD 7E 02    	LD	A,(IX+HW_BYTE)		;Check if side B is req
 1371 0970  CB 67       	BIT	4,A
 1372 0972  28 1C       	JR	Z,AGAIN			;SS drive go to next track
 1373                   
 1374 0974  FD 7E 01    	LD	A,(IY+SIDE)
 1375 0977  B7          	OR	A,A			;If 0 we have done A side, now do B
 1376 0978  28 09       	JR	Z,FORM_B_SIDE		;switch over to B side
 1377 097A  AF          	XOR	A,A
 1378 097B  FD 77 01    	LD	(IY+SIDE),A
 1379 097E  CD 1227     	CALL	SET_SIDE		;update the hardware
 1380 0981  18 0D       	JR	AGAIN			;Need track increase now we are back on side A
 1381 0983              FORM_B_SIDE:
 1382 0983  3E 02       	LD	A,02H			;Flag for B side
 1383 0985  FD 77 01    	LD	(IY+SIDE),A	
 1384 0988  CD 1227     	CALL	SET_SIDE		;Update the hardware
 1385 098B  FD 7E 00    	LD	A,(IY+TRK)	
 1386 098E  18 A7       	JR	NEXT_TRK		;Do everything again with this track on B side
 1387                   
 1388 0990  FD 34 00    AGAIN:	INC	(IY+TRK)		;What was the last track number just done
 1389 0993  FD 7E 00    	LD	A,(IY+TRK)
 1390 0996  DD BE 01    	CP	A,(IX+NTRKS)		;Check if we are on the last tarck
 1391 0999  20 9C       	JR	NZ,NEXT_TRK		;If not then back to updating tracks and doing it again.
 1392                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  25
VF      Z80

 1393 099B  21 25CA     	LD	HL,END_FORM_MSG
 1394 099E  CD 192B     	CALL	PMSG
 1395 09A1  21 3937     	LD	HL,TRACK_SIZE
 1396 09A4  7E          	LD	A,(HL)			;Fill in total byte count of a track
 1397 09A5  CD 19B1     	CALL	PACC			;Is useful for building tables and track disply
 1398 09A8  23          	INC	HL			;was obtained from WRITE_1_TRACK below
 1399 09A9  7E          	LD	A,(HL)
 1400 09AA  CD 19B1     	CALL	PACC
 1401 09AD  21 25FE     	LD	HL,END_FORM1_MSG	;end of formatting
 1402 09B0  CD 192B     	CALL	PMSG
 1403                   
 1404 09B3  DD 7E 0E    	LD	A,(IX+SPECIAL_FLAG)	;Is any post formatting mods required?
 1405 09B6  B7          	OR	A,A
 1406 09B7  28 05       	JR	Z,NO_MODS
 1407 09B9  FE 01       	CP	A,CPM86_FLAG
 1408 09BB  CC 158A     	CALL	Z,INIT_CPM86		;Must modify first 5" disk sector for CPM86
 1409 09BE              NO_MODS:
 1410 09BE  CD 11D6     	CALL	START_DRIVE_1		;Select disk with new IX table format, Side A
 1411 09C1  3A 392E     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1412 09C4  C9          	RET				;return back to MENU
 1413                   ;
 1414 09C5              CHECK_ABORT:
 1415 09C5  3A 3927     	LD	A,(CRTDISP)		;If detailed CRT display is on then one ESC 
 1416 09C8  B7          	OR	A,A			;will switch it off
 1417 09C9  CA 09D2     	JP	Z,FORM_ABORT		;If Z do not list the sector contents.
 1418 09CC  AF          	XOR	A,A			;Just turn it off. Next time a real abort.
 1419 09CD  32 3927     	LD	(CRTDISP),A
 1420 09D0  18 9B       	JR	AGAIN1
 1421                   ;
 1422 09D2              FORM_ABORT:
 1423 09D2  21 259F     	LD	HL,FORM_ERRMSG		;Say error formatting disk
 1424 09D5  CD 192B     	CALL	PMSG	
 1425 09D8  31 3A4D     	LD	SP,STACK
 1426 09DB  C3 0125     	JP	START			;Must abort everything because disk status is unknown
 1427                   ;
 1428                   ;
 1429                   ;
 1430                   ; QUICK 8" IBM SSSD FORMAT of a blank disk in B: drive
 1431                   ; This is for quickly making CPM 8" disks. Not really a disgnostic
 1432                   ; This assumes an 8" disk is in B: drive.
 1433                   ;
 1434 09DE              IBMFORM_DISK:
 1435 09DE  AF          	XOR	A,A
 1436 09DF  32 3926     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1437                   
 1438 09E2  DD 22 3924  	LD	(IX_OLD_STORE),IX	;Store current disk paramater table
 1439 09E6  3A 0046     	LD	A,(DRIVE_1)		;Because we may not already be on B:
 1440 09E9  32 393E     	LD	(DRIVE_STORE),A
 1441                   
 1442 09EC  21 2ED5     	LD	HL,IBM_FORMAT
 1443 09EF  CD 192B     	CALL	PMSG
 1444                   
 1445 09F2  DD 21 32F4  	LD	IX,STDSDT		;Force current drive to 8" IBM SSSD
 1446 09F6  3E 02       	LD	A,2
 1447 09F8  32 0046     	LD	(DRIVE_1),A		;Force B: drive hardware selection
 1448 09FB  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1449 09FE  CD 0E2D     	CALL	HOME			;Restore disk head
 1450 0A01  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  26
VF      Z80

 1451                   	
 1452 0A04  CD 17EE     	CALL	CHECK_WP		;See if disk is write protected
 1453 0A07  CA 0A1B     	JP	Z,IBMFORM_OK1		;Go to the core routine
 1454                   
 1455 0A0A  DD 2A 3924  	LD	IX,(IX_OLD_STORE)	;Nothing altered go back to main menu
 1456 0A0E  3A 393E     	LD	A,(DRIVE_STORE)
 1457 0A11  32 0046     	LD	(DRIVE_1),A		;Get back origional drive
 1458 0A14  CD 11D6     	CALL	START_DRIVE_1		;RE-select to old drive disk format, Side A
 1459 0A17  3A 392E     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1460 0A1A  C9          	RET				;return back to MENU
 1461                   
 1462 0A1B              IBMFORM_OK1:
 1463 0A1B  21 2F19     	LD	HL,IBM_FORMAT1		;Formatting started
 1464 0A1E  CD 192B     	CALL	PMSG
 1465 0A21              IBMFORM_OK:
 1466 0A21  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here
 1467 0A24  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1468                   
 1469 0A27  3E 01       	LD	A,1
 1470 0A29  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1471 0A2C  AF          	XOR	A,A			;Setup for the BIOS below
 1472 0A2D  FD 77 01    	LD	(IY+SIDE),A		;Side A 
 1473 0A30  CD 1227     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1474 0A33  AF          	XOR	A,A
 1475                   					;Fall through with 0 in [A] for trk 0
 1476 0A34              IBM_NEXT_TRK:			
 1477 0A34  FD 77 00    	LD	(IY+TRK),A		;store track info for eack loop
 1478 0A37  CD 13AB     	CALL	BUILD_TRACK		;Build a complete track image in RAM
 1479                   
 1480 0A3A  CD 0E81     	CALL	SEEK_TRACK_NV		;Seek with verify command to 1791/5
 1481 0A3D  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1482                   
 1483 0A40  21 3087     	LD	HL,FORM_TRK_MSG		;At track xx
 1484 0A43  CD 192B     	CALL	PMSG
 1485 0A46  FD 7E 00    	LD	A,(IY+TRK)
 1486 0A49  CD 19B1     	CALL	PACC
 1487                   
 1488 0A4C  11 5000     	LD	DE,FBUFFER		;Move Start of track image into DE
 1489 0A4F  D5          	PUSH	DE			;save it
 1490 0A50  2A 394B     	LD	HL,(E_GAP4_MARK)	;End+1 of track header
 1491 0A53  2B          	DEC	HL
 1492 0A54  ED 52       	SBC	HL,DE
 1493 0A56  EB          	EX	DE,HL			;Count now in DE
 1494 0A57  E1          	POP	HL			;DE on stack to --> HL
 1495                   	
 1496 0A58  CD 1156     	CALL	WRITE_TRACK		;<<<< Write track with hardware >>>>>
 1497 0A5B  C4 12C8     	CALL	NZ,SHOW_ERRORS
 1498                   
 1499 0A5E  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1500 0A61  C2 0B16     	JP	NZ,IBMF_ABORT
 1501                   
 1502 0A64  FD 34 00    	INC	(IY+TRK)		;what was the last track number just done
 1503 0A67  FD 7E 00    	LD	A,(IY+TRK)
 1504 0A6A  DD BE 01    	CP	A,(IX+NTRKS)		;Check if we are on the last tarck
 1505 0A6D  20 C5       	JR	NZ,IBM_NEXT_TRK		;If not then back to updating tracks and doing it again.
 1506                   ;
 1507 0A6F  21 2F9F     	LD	HL,COPY_SYSTRKS		;Do you wish to copy CPM from the system tracks of drive A:
 1508 0A72  CD 192B     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  27
VF      Z80

 1509 0A75  CD 1936     	CALL	GETCMD			;Ask if we wish to continue
 1510 0A78  FE 59       	CP	A,'Y'
 1511 0A7A  C2 0B06     	JP	NZ,IBMF_DONE1		;If not return
 1512 0A7D  21 3013     	LD	HL,COPYING_CPM
 1513 0A80  CD 192B     	CALL	PMSG
 1514 0A83  DD 7E 12    	LD	A,(IX+SYS_TRKS)
 1515 0A86  32 393C     	LD	(COPY_TRK_COUNT),A	;Count down 2 tracks
 1516                   
 1517 0A89  3E 01       	LD	A,1			;Second drive on A: set (DRIVE_2) to it
 1518 0A8B  32 0047     	LD	(DRIVE_2),A
 1519                   ;
 1520 0A8E              IBM_CPM_LOOP				;Now copy CPM from A: Drive to B: drive. IX is already 8" IBM
 1521 0A8E  CD 11DB     	CALL	START_DRIVE_2		;Select for A: drive in hardware, Side A
 1522 0A91  CD 0E2D     	CALL	HOME		
 1523 0A94  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1524                   
 1525 0A97  3A 393D     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1526 0A9A  FD 77 00    	LD	(IY+TRK),A
 1527                   
 1528 0A9D  CD 0E70     	CALL	SEEK_TRACK_V
 1529 0AA0  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1530                   
 1531 0AA3  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1532 0AA6  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1533 0AA9  1E 01       	LD	E,1			;Start with 1st sector 
 1534 0AAB  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1535                   ;
 1536 0AAE  CD 0F87     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1537 0AB1  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1538                   ;
 1539                   ;---					
 1540                   ;					;<<<<< WRITE TO Destination drive
 1541 0AB4  CD 11D6     	CALL	START_DRIVE_1		;Select for B: drive in hardware, Side A
 1542 0AB7  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1543 0ABA  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1544                   
 1545 0ABD  3A 393D     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1546 0AC0  FD 77 00    	LD	(IY+TRK),A
 1547                   
 1548 0AC3  CD 0E70     	CALL	SEEK_TRACK_V
 1549 0AC6  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1550                   
 1551 0AC9  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1552 0ACC  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1553 0ACF  1E 01       	LD	E,1			;Start with 1st sector 
 1554 0AD1  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1555                   ;
 1556 0AD4  CD 10D4     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1557 0AD7  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1558                   ;
 1559 0ADA  3A 393D     	LD	A,(COPY_TRK)		;bump up a track
 1560 0ADD  3C          	INC	A
 1561 0ADE  32 393D     	LD	(COPY_TRK),A
 1562 0AE1  3A 393C     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1563 0AE4  3D          	DEC	A
 1564 0AE5  32 393C     	LD	(COPY_TRK_COUNT),A	
 1565 0AE8  CA 0AF3     	JP	Z,IBMF_DONE2
 1566                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  28
VF      Z80

 1567 0AEB  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1568 0AEE  20 16       	JR	NZ,IBMF_DONE1		;Loop until abort or all tracks done
 1569 0AF0  C3 0A8E     	JP	IBM_CPM_LOOP
 1570                   ;
 1571 0AF3              IBMF_DONE2
 1572 0AF3  3A 3926     	LD	A,(ERRORS_FLAG)		;Were there errors
 1573 0AF6  B7          	OR	A,A
 1574 0AF7  20 1D       	JR	NZ,IBMF_ABORT
 1575 0AF9  21 3040     	LD	HL,END_FORM_MSG2
 1576 0AFC  CD 192B     	CALL	PMSG
 1577 0AFF  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1578 0B02  3A 392E     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1579 0B05  C9          	RET				;return back to MENU
 1580                   ;
 1581 0B06              IBMF_DONE1:
 1582 0B06  3A 3926     	LD	A,(ERRORS_FLAG)		;Were there errors
 1583 0B09  B7          	OR	A,A
 1584 0B0A  20 0A       	JR	NZ,IBMF_ABORT
 1585 0B0C  21 2F34     	LD	HL,END_FORM_MSG1
 1586 0B0F  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1587 0B12  3A 392E     	LD	A,(CMD_STORE)		;So we dont pick up other menu menu items on
 1588 0B15  C9          	RET				;return back to MENU
 1589                   ;
 1590 0B16              IBMF_ABORT:
 1591 0B16  21 259F     	LD	HL,FORM_ERRMSG		;Say error formatting disk
 1592 0B19  CD 192B     	CALL	PMSG	
 1593 0B1C  31 3A4D     	LD	SP,STACK
 1594 0B1F  C3 0125     	JP	START			;Must abort everything because disk status is unknown
 1595                   ;
 1596                   ;
 1597                   ;
 1598                   ;
 1599                   ;***************** DISK TO DISK COPY *********************************
 1600                   ; Unlike much of this program, this module is somewhat hardware specific in that it assumes 
 1601                   ; the source and destination disks are identical and are using the SAME disk formats. 
 1602                   ; Normall they are 8" drives but it should be OK with two 5" drives as well. (5" was not tested)
 1603                   ; I decided not to use whole track R/W's because there is no CRC error checking of the data. 
 1604                   ; Uses the 1791/5 multi sector read command. Will do both sides if DS disk
 1605                   ; 
 1606 0B22              COPY_DISK:
 1607 0B22  AF          	XOR	A,A
 1608 0B23  32 3926     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1609                   
 1610 0B26  21 2C9A     	LD	HL,COPY_MSG		;Announce the disk copy msg
 1611 0B29  CD 192B     	CALL	PMSG
 1612 0B2C  AF          	XOR	A,A			;Setup for the BIOS below
 1613 0B2D  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1614 0B30  32 393D     	LD	(COPY_TRK),A
 1615 0B33  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1616 0B36  CD 11D6     	CALL	START_DRIVE_1		;Start "the current drive" hardware, Side A
 1617 0B39  CD 0E2D     	CALL	HOME		
 1618 0B3C  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1619 0B3F  C2 0C1E     	JP	NZ,DONE_COPY
 1620                   ;
 1621 0B42              GET_CDEST:				;<<< DESTINATION DRIVE
 1622 0B42  21 2CE1     	LD	HL,COPY2_MSG		;Destination disk 
 1623 0B45  CD 192B     	CALL	PMSG
 1624 0B48  CD 15F7     	CALL	SELECT_DR_2		;Get second drive, put it in (DRIVE_2)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  29
VF      Z80

 1625 0B4B  FE FF       	CP	A,0FFH		
 1626 0B4D  28 F3       	JR	Z,GET_CDEST		;Invalid drive, start over
 1627 0B4F  FE 1B       	CP	A,ESC
 1628 0B51  CA 0C1E     	JP	Z,DONE_COPY
 1629                   ;
 1630 0B54              FORMATS_OK:
 1631 0B54  CD 11DB     	CALL	START_DRIVE_2		;Select for second drive in hardware, Side A
 1632 0B57  CD 0E2D     	CALL	HOME		
 1633 0B5A  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1634 0B5D  C2 0C1E     	JP	NZ,DONE_COPY		;If errors abort
 1635                   	
 1636 0B60  CD 17EE     	CALL	CHECK_WP		;See if disk is write protected
 1637 0B63  C2 0C1E     	JP	NZ,DONE_COPY		;Abort if second drive is write protected
 1638                   ;
 1639 0B66              COPYWP_OK:
 1640 0B66  21 2CFE     	LD	HL,HOW_MANY_TRKS
 1641 0B69  CD 192B     	CALL	PMSG
 1642 0B6C  CD 1936     	CALL	GETCMD
 1643 0B6F  FE 1B       	CP	A,ESC			;Abort if ESC character
 1644 0B71  CA 0C1E     	JP	Z,DONE_COPY
 1645 0B74  FE 53       	CP	A,'S'
 1646 0B76  20 04       	JR	NZ,NOT_S
 1647 0B78  3E 02       	LD	A,2
 1648 0B7A  18 11       	JR	GOT_TRK_CNT
 1649 0B7C  FE 41       NOT_S:	CP	A,'A'
 1650 0B7E  20 05       	JR	NZ,NOT_ALL
 1651 0B80  DD 7E 01    	LD	A,(IX+NTRKS)
 1652 0B83  18 08       	JR	GOT_TRK_CNT
 1653 0B85  21 2D37     NOT_ALL:LD	HL,INVALID_TRK_CT	;Must be S or All
 1654 0B88  CD 192B     	CALL	PMSG
 1655 0B8B  18 D9       	JR	COPYWP_OK
 1656                   ;
 1657 0B8D              GOT_TRK_CNT:
 1658 0B8D  32 393C     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1659                   	
 1660 0B90              COPY_R_LOOP:				; <<<< READ FROM Source drive
 1661 0B90  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1662 0B93  CD 1227     	CALL	SET_SIDE		;Make sure drive is set for correct side
 1663 0B96  CD 0E2D     	CALL	HOME		
 1664 0B99  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1665                   
 1666 0B9C  3A 393D     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1667 0B9F  FD 77 00    	LD	(IY+TRK),A
 1668                   
 1669 0BA2  CD 0E70     	CALL	SEEK_TRACK_V		;Get appropiate track
 1670 0BA5  C4 12C8     	CALL	NZ,SHOW_ERRORS		;not clear why this is so. 
 1671                   	
 1672 0BA8  21 2D65     	LD	HL,COPY_AT_TRK
 1673 0BAB  CD 192B     	CALL	PMSG
 1674 0BAE  CD 12B9     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1675                   
 1676 0BB1  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1677 0BB4  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1678 0BB7  1E 01       	LD	E,1			;Start with 1st sector 
 1679 0BB9  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1680                   ;
 1681 0BBC  CD 0F87     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1682 0BBF  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  30
VF      Z80

 1683                   ;
 1684                   ;---					
 1685                   ;					;<<<<< WRITE TO Destination drive
 1686 0BC2  CD 11DB     	CALL	START_DRIVE_2		;Start "the second drive" in hardware, Side A
 1687 0BC5  CD 1227     	CALL	SET_SIDE		;Update the side hardware 
 1688 0BC8  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1689 0BCB  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1690                   
 1691 0BCE  3A 393D     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1692 0BD1  FD 77 00    	LD	(IY+TRK),A
 1693                   
 1694 0BD4  CD 0E70     	CALL	SEEK_TRACK_V		;Get appropiate track
 1695 0BD7  C4 12C8     	CALL	NZ,SHOW_ERRORS		;not clear why this is so. 
 1696                   
 1697 0BDA  21 2D7A     	LD	HL,WRITE_AT_TRK
 1698 0BDD  CD 192B     	CALL	PMSG
 1699 0BE0  CD 12B9     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1700                   
 1701 0BE3  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1702 0BE6  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1703 0BE9  1E 01       	LD	E,1			;Start with 1st sector 
 1704 0BEB  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1705                   ;
 1706 0BEE  CD 10D4     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1707 0BF1  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1708                   ;
 1709 0BF4  CD 1208     	CALL	SWAP_SIDES		;Sides swap check
 1710 0BF7  20 11       	JR	NZ,R_TRK_OK		;If B side (NZ), same track
 1711                   ;					;Else see if more tracks are required
 1712 0BF9  3A 393D     	LD	A,(COPY_TRK)		;bump up a track
 1713 0BFC  3C          	INC	A
 1714 0BFD  32 393D     	LD	(COPY_TRK),A
 1715 0C00  3A 393C     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1716 0C03  3D          	DEC	A
 1717 0C04  32 393C     	LD	(COPY_TRK_COUNT),A	
 1718 0C07  CA 0C12     	JP	Z,DONE_COPY2
 1719                   ;
 1720 0C0A              R_TRK_OK:
 1721 0C0A  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1722 0C0D  20 0F       	JR	NZ,DONE_COPY		;Loop until abort or all tracks done
 1723 0C0F  C3 0B90     	JP	COPY_R_LOOP
 1724                   ;
 1725 0C12              DONE_COPY2:				;We are done restore both drives
 1726 0C12  3A 3926     	LD	A,(ERRORS_FLAG)		;Were there errors
 1727 0C15  B7          	OR	A,A
 1728 0C16  20 0C       	JR	NZ,BAD_COPY
 1729 0C18  21 2D50     	LD	HL,COPYING_DONE		;Announce we are finished
 1730 0C1B  CD 192B     	CALL	PMSG
 1731 0C1E              DONE_COPY:
 1732 0C1E  CD 11D6     	CALL	START_DRIVE_1		;Select for "the current drive" in hardware, Side A
 1733 0C21  C3 0273     	JP	END_CMD
 1734                   ;
 1735 0C24  21 3092     BAD_COPY:LD	HL,BAD_COPY_MSG		;errors seen so say bad copy
 1736 0C27  CD 192B     	CALL	PMSG
 1737 0C2A  18 F2       	JR	DONE_COPY
 1738                   ;
 1739                   ;***************** VERIFY TWO DISKS ARE THE SAME SECTOR BY SECTOR******************************
 1740                   ; This module assumes the disks sizes are identical and are using the same disk formats. 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  31
VF      Z80

 1741                   ; Normall they are 8" drives but it should be OK with two 5" drives as well. (5" was not tested)
 1742                   ;
 1743 0C2C              VERIFY_DISK:
 1744 0C2C  21 2DB6     	LD	HL,VERIFY_MSG		;Announce the disk copy msg
 1745 0C2F  CD 192B     	CALl	PMSG
 1746 0C32  AF          	XOR	A,A			;Setup for the BIOS below
 1747 0C33  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1748 0C36  32 393D     	LD	(COPY_TRK),A
 1749 0C39  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A of A:
 1750 0C3C  3C          	INC	A
 1751 0C3D  FD 77 02    	LD	(IY+SCTR),A		;Start at sector 1 
 1752 0C40  CD 11D6     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1753 0C43  CD 0E2D     	CALL	HOME		
 1754 0C46  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1755 0C49  C2 0273     	JP	NZ,END_CMD
 1756                   ;
 1757 0C4C              GET_VDEST:				;<<< DESTINATION DRIVE
 1758 0C4C  21 2DE0     	LD	HL,VERIFY2_MSG		;Destination disk 
 1759 0C4F  CD 192B     	CALL	PMSG
 1760 0C52  CD 15F7     	CALL	SELECT_DR_2		;Ask user which drive for second drive
 1761 0C55  FE FF       	CP	A,0FFH			;Note IX will be the same for both disks
 1762 0C57  28 F3       	JR	Z,GET_VDEST		;Invalid drive, start over
 1763 0C59  FE 1B       	CP	A,ESC
 1764 0C5B  CA 0273     	JP	Z,END_CMD
 1765                   ;
 1766 0C5E              HOW_MANY:
 1767 0C5E  21 2CFE     	LD	HL,HOW_MANY_TRKS
 1768 0C61  CD 192B     	CALL	PMSG
 1769 0C64  CD 1936     	CALL	GETCMD
 1770 0C67  FE 1B       	CP	A,ESC			;Abort if ESC character
 1771 0C69  CA 0273     	JP	Z,END_CMD
 1772 0C6C  FE 53       	CP	A,'S'
 1773 0C6E  20 04       	JR	NZ,NOT_VS
 1774 0C70  3E 02       	LD	A,2
 1775 0C72  18 11       	JR	VGOT_TRK_CNT
 1776 0C74  FE 41       NOT_VS:	CP	A,'A'
 1777 0C76  20 05       	JR	NZ,NOT_VALL
 1778 0C78  DD 7E 01    	LD	A,(IX+NTRKS)
 1779 0C7B  18 08       	JR	VGOT_TRK_CNT
 1780 0C7D              NOT_VALL:
 1781 0C7D  21 2D37     	LD	HL,INVALID_TRK_CT	;Must be S or All
 1782 0C80  CD 192B     	CALL	PMSG
 1783 0C83  18 D9       	JR	HOW_MANY
 1784                   ;
 1785 0C85              VGOT_TRK_CNT:
 1786 0C85  32 393C     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1787                   ;	
 1788 0C88              VERIFY_R_LOOP:
 1789 0C88  CD 11D6     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1790 0C8B  CD 1227     	CALL	SET_SIDE		;Update the side hardware 
 1791 0C8E  FD 7E 02    	LD	A,(IY+SCTR)		;Is it a new track
 1792 0C91  FE 01       	CP	A,1
 1793 0C93  20 12       	JR	NZ,VR_1
 1794 0C95  CD 0E2D     	CALL	HOME			;If a new track need to seek
 1795 0C98  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1796 0C9B  3A 393D     	LD	A,(COPY_TRK)
 1797 0C9E  FD 77 00    	LD	(IY+TRK),A
 1798                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  32
VF      Z80

 1799 0CA1  CD 0E70     	CALL	SEEK_TRACK_V		;seek to the new track position	
 1800 0CA4  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1801 0CA7              VR_1:	
 1802 0CA7  21 2D8C     	LD	HL,READ_AT_TRK
 1803 0CAA  CD 192B     	CALL	PMSG
 1804 0CAD  CD 126A     	CALL	SHOW_TSS_LOC		;Announce current Track/Sec 
 1805                   
 1806 0CB0  21 5000     	LD	HL,FBUFFER		;Will place the complete sector image here (5000H)
 1807 0CB3  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1808                   ;
 1809 0CB6  CD 0EEF     	CALL	READ_SECTOR		;<<<<<< Read sector of A: Drive>>>>>>>
 1810 0CB9  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1811                   ;
 1812 0CBC  CD 11DB     	CALL	START_DRIVE_2		;Start the drive hardware (A side)
 1813 0CBF  CD 1227     	CALL	SET_SIDE		;Update the side hardware -- assume side A only
 1814 0CC2  FD 7E 02    	LD	A,(IY+SCTR)		;Is it a new track
 1815 0CC5  FE 01       	CP	A,1
 1816 0CC7  20 12       	JR	NZ,VR_2
 1817 0CC9  CD 0E2D     	CALL	HOME			;Not clear why but get a seek error without this!
 1818 0CCC  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1819 0CCF  3A 393D     	LD	A,(COPY_TRK)
 1820 0CD2  FD 77 00    	LD	(IY+TRK),A
 1821                   
 1822 0CD5  CD 0E70     	CALL	SEEK_TRACK_V		;seek to the new track position
 1823 0CD8  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any show error flags
 1824 0CDB              VR_2:	
 1825 0CDB  21 2D97     	LD	HL,VERIFY_AT_TRK
 1826 0CDE  CD 192B     	CALL	PMSG
 1827 0CE1  CD 126A     	CALL	SHOW_TSS_LOC		;Announce current Track 
 1828                   
 1829 0CE4  21 6000     	LD	HL,FBUFFER2		;Will place  the complete sector image here (5000H)
 1830 0CE7  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1831                   
 1832 0CEA  CD 0EEF     	CALL	READ_SECTOR		;<<<<<< Read sector on B: Drive
 1833 0CED  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1834                   ;
 1835 0CF0  CD 134E     	CALL	CMP_BUFFERS		;Check for errors
 1836 0CF3  28 09       	JR	Z,VCOMPARE_OK
 1837 0CF5  21 2918     	LD	HL,SEC_V_ERROR		;R/W Error found 
 1838 0CF8  CD 192B     	CALL	PMSG
 1839 0CFB  CD 126A     	CALL	SHOW_TSS_LOC		;trk,sec,head
 1840                   
 1841 0CFE              VCOMPARE_OK:
 1842 0CFE  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1843 0D01  C2 0D33     	JP	NZ,DONE_VERIFY1		;Abort if requested
 1844                   
 1845 0D04  FD 34 02    	INC	(IY+SCTR)		;Get next sector
 1846 0D07  FD 7E 02    	LD	A,(IY+SCTR)
 1847 0D0A  3D          	DEC	A			;Because sectors are numbered 1,2,3...
 1848 0D0B  DD BE 00    	CP	A,(IX+NSCTRS)		;Have we done a complete track yet
 1849 0D0E  C2 0C88     	JP	NZ,VERIFY_R_LOOP
 1850                   
 1851 0D11  CD 1208     	CALL	SWAP_SIDES		;Sides swap check
 1852 0D14  3E 01       	LD	A,1			;Back to sector 1 no matter what
 1853 0D16  FD 77 02    	LD	(IY+SCTR),A		;Store for loop test
 1854 0D19  C2 0C88     	JP	NZ,VERIFY_R_LOOP	;If B side (NZ), same track, back to sec 1
 1855                   
 1856 0D1C  3A 393D     	LD	A,(COPY_TRK)		;bump up a track
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  33
VF      Z80

 1857 0D1F  3C          	INC	A
 1858 0D20  32 393D     	LD	(COPY_TRK),A
 1859 0D23  3A 393C     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1860 0D26  3D          	DEC	A
 1861 0D27  32 393C     	LD	(COPY_TRK_COUNT),A	
 1862 0D2A  C2 0C88     	JP	NZ,VERIFY_R_LOOP
 1863                   ;
 1864 0D2D              END_VERIFY:				;We are done restore both drives
 1865 0D2D  21 2DA0     	LD	HL,VERIFY_DONE
 1866 0D30  CD 192B     	CALL	PMSG
 1867                   ;
 1868 0D33              DONE_VERIFY1:
 1869 0D33  CD 11D6     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1870 0D36  CD 0E2D     	CALL	HOME			;Will set TRK to 0
 1871 0D39  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1872 0D3C  3A 392E     	LD	A,(CMD_STORE)		;So we dont pick up other menu items
 1873 0D3F  C9          	RET				;Back to main menu	
 1874                   ;
 1875                   ;
 1876                   ;
 1877                   ; This routine will copy the CPM system tracks FROM another current disk and writes it TO 
 1878                   ; the current disk. Its just a modification of COPY_DISK where the number of tracks set aside
 1879                   ; is picked off from the Disk paramater table
 1880                   ; It should be OK with any disk format but so far has just been checked out on 
 1881                   ; standard 8" SSSD IBM 3740 disks. Both disks must use the same format. (untested for 5" disks)
 1882                   ;
 1883 0D40              COPY_CPM3_SYS:
 1884 0D40  AF          	XOR	A,A
 1885 0D41  32 3926     	LD	(ERRORS_FLAG),A		;Will keep tab on errors during this routine
 1886                   
 1887 0D44  21 2E1B     	LD	HL,SYS_COPY_MSG
 1888 0D47  CD 192B     	CALL	PMSG
 1889 0D4A  AF          	XOR	A,A			;Setup for the BIOS below
 1890 0D4B  FD 77 00    	LD	(IY+TRK),A		;Start with track 0 
 1891 0D4E  32 393D     	LD	(COPY_TRK),A
 1892 0D51  FD 77 01    	LD	(IY+SIDE),A		;Start on Side A 
 1893                   
 1894 0D54  CD 11D6     	CALL	START_DRIVE_1		;Start the drive hardware (A side)
 1895 0D57  CD 0E2D     	CALL	HOME		
 1896 0D5A  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1897 0D5D  C2 0273     	JP	NZ,END_CMD
 1898                   
 1899 0D60  CD 17EE     	CALL	CHECK_WP		;See if disk is write protected
 1900 0D63  C2 0273     	JP	NZ,END_CMD
 1901                   
 1902 0D66              GET_SDEST:				;<<<  SOURCE DRIVE
 1903 0D66  21 2E6C     	LD	HL,SYS_COPY_MSG1	;Source disk of CPM 
 1904 0D69  CD 192B     	CALL	PMSG
 1905 0D6C  CD 15F7     	CALL	SELECT_DR_2		;Ask user which drive to get the CPM system tracks from
 1906 0D6F  FE FF       	CP	A,0FFH			;Note IX will be the same for both disks
 1907 0D71  28 F3       	JR	Z,GET_SDEST		;Invalid drive, start over
 1908 0D73  FE 1B       	CP	A,ESC
 1909 0D75  CA 0273     	JP	Z,END_CMD
 1910                   
 1911 0D78  CD 11DB     	CALL	START_DRIVE_2		;Start the drive hardware (A side)
 1912 0D7B  CD 0E2D     	CALL	HOME
 1913 0D7E  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1914 0D81  C2 0273     	JP	NZ,END_CMD
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  34
VF      Z80

 1915                   	
 1916 0D84              COPYWP_SOK:
 1917 0D84  DD 7E 12    	LD	A,(IX+SYS_TRKS)		;How many tracks for CPM system on this disk	
 1918 0D87  32 393C     	LD	(COPY_TRK_COUNT),A	;Store number or tracks to copy
 1919                   	
 1920 0D8A              SYS_R_LOOP:				; <<<< READ FROM Source drive
 1921 0D8A  CD 11DB     	CALL	START_DRIVE_2		;Start the source drive hardware (A side)
 1922 0D8D  CD 1227     	CALL	SET_SIDE		;Make sure IX+HW_BYTE is set for correct side
 1923 0D90  CD 0E2D     	CALL	HOME		
 1924 0D93  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1925                   
 1926 0D96  3A 393D     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1927 0D99  FD 77 00    	LD	(IY+TRK),A
 1928 0D9C  CD 0E70     	CALL	SEEK_TRACK_V
 1929 0D9F  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1930                   
 1931 0DA2  21 2E91     	LD	HL,COPY_SYS_TRK
 1932 0DA5  CD 192B     	CALL	PMSG
 1933 0DA8  CD 12B9     	CALL	SHOW_TS_LOC		;Announce current Track. Shows current (TRK)
 1934                   
 1935 0DAB  21 5000     	LD	HL,FBUFFER		;Will build the complete sector image here (5000H)
 1936 0DAE  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1937 0DB1  1E 01       	LD	E,1			;Start with 1st sector 
 1938 0DB3  DD 56 00    	LD	D,(IX+NSCTRS)		;[D] contains the number of sectors to read
 1939                   ;
 1940 0DB6  CD 0F87     	CALL	MULTI_SEC_RD		;<<<<<< Read multiple sectors
 1941 0DB9  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1942                   ;
 1943                   ;---					
 1944                   ;					;<<<<< WRITE TO Destination drive
 1945 0DBC  CD 11D6     	CALL	START_DRIVE_1		;Start the destination drive hardware (A side)
 1946 0DBF  CD 1227     	CALL	SET_SIDE		;Update the side hardware (A)
 1947 0DC2  CD 0E2D     	CALL	HOME			;Not clear why this is needed. Get seek errors without it
 1948 0DC5  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1949                   
 1950 0DC8  3A 393D     	LD	A,(COPY_TRK)		;Because home sets TRK to 0
 1951 0DCB  FD 77 00    	LD	(IY+TRK),A
 1952 0DCE  CD 0E70     	CALL	SEEK_TRACK_V
 1953 0DD1  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1954                   
 1955 0DD4  21 2EA5     	LD	HL,WRITE_SYS_TRK
 1956 0DD7  CD 192B     	CALL	PMSG
 1957 0DDA  CD 12B9     	CALL	SHOW_TS_LOC		;Shows current (TRK,SIDE)
 1958                   
 1959 0DDD  21 5000     	LD	HL,FBUFFER		;Will obtain the complete sector image from here
 1960 0DE0  22 0040     	LD	(TADDR),HL		;Store the pointer here.
 1961 0DE3  1E 01       	LD	E,1			;Start with 1st sector 
 1962 0DE5  DD 56 00    	LD	D,(IX+NSCTRS)		;Count of sectors to read
 1963                   ;
 1964 0DE8  CD 10D4     	CALL	MULTI_SEC_WR		;<<<<<< Write multiple sectors
 1965 0DEB  C4 12C8     	CALL	NZ,SHOW_ERRORS		;If any, show error flags
 1966                   ;
 1967 0DEE  CD 1208     	CALL	SWAP_SIDES		;Sides swap check
 1968 0DF1  20 11       	JR	NZ,R_TRK_SOK		;If B side (NZ), same track
 1969                   ;					;Else see if more tracks are required
 1970 0DF3  3A 393D     	LD	A,(COPY_TRK)		;bump up a track
 1971 0DF6  3C          	INC	A
 1972 0DF7  32 393D     	LD	(COPY_TRK),A
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  35
VF      Z80

 1973 0DFA  3A 393C     	LD	A,(COPY_TRK_COUNT)	;Have we more tracks to do
 1974 0DFD  3D          	DEC	A
 1975 0DFE  32 393C     	LD	(COPY_TRK_COUNT),A	
 1976 0E01  CA 0E0C     	JP	Z,DONE_SYS2
 1977                   ;
 1978 0E04              R_TRK_SOK:
 1979 0E04  CD 19E4     	CALL	CHECKABORT		;SP will halt, ESC will abort
 1980 0E07  20 0F       	JR	NZ,DONE_SYS1		;Loop until abort or all tracks done
 1981 0E09  C3 0D8A     	JP	SYS_R_LOOP
 1982                   ;
 1983 0E0C              DONE_SYS2:				;We are done restore both drives
 1984 0E0C  3A 3926     	LD	A,(ERRORS_FLAG)		;Were there errors
 1985 0E0F  B7          	OR	A,A
 1986 0E10  20 13       	JR	NZ,ERROR_SYS3
 1987 0E12  21 2EB6     	LD	HL,DONE_SYS_MSG		;Announce we are finished
 1988 0E15  CD 192B     	CALL	PMSG
 1989 0E18              DONE_SYS1:
 1990 0E18  CD 11D6     	CALL	START_DRIVE_1		;Start the source drive hardware (A side)
 1991 0E1B  CD 0E2D     	CALL	HOME			;Will set TRK to 0
 1992 0E1E  C4 12C8     	CALL	NZ,SHOW_ERRORS		;print out errors if any
 1993 0E21  3A 392E     	LD	A,(CMD_STORE)		;So we dont pick up other menu items
 1994 0E24  C9          	RET				;Back to main menu	
 1995                   ;
 1996 0E25              ERROR_SYS3:
 1997 0E25  21 2F73     	LD	HL,ERRORS_SEEN		;errors encountered
 1998 0E28  CD 192B     	CALL	PMSG
 1999 0E2B  18 EB       	JR	DONE_SYS1
 2000                   
 2001                   ;
 2002                   ;
 2003                   ;
 2004                   ;==============================================================================
 2005                   ;================== 1791/5 COMMAND ROUTINES ===================================
 2006                   ;==============================================================================
 2007                   ;
 2008                   ; SEND A RESTORE COMMAND FOR THE CURRENT DISK. 
 2009                   ; On return: Z if no errors. NZ if errors with errors in (ERSTAT)and [A]
 2010                   ; Note (TRK) IS set to 0, (IX+HW_BYTE) SIDE_BIT (7) is not changed
 2011                   ;
 2012 0E2D  3E 80       HOME:	LD	A,HOME_ERR_MASK		;Error mask for Type I RESTORE CMD
 2013 0E2F  32 392F     	LD	(ERMASK),A		;Save error mask for end/error routine
 2014 0E32  AF          	XOR	A,A
 2015 0E33  FD 77 00    	LD	(IY+TRK),A	
 2016 0E36  DB 64       HOME2:	IN	A,(STATUS)
 2017 0E38  E6 01       	AND	A,1
 2018 0E3A  20 FA       	JR	NZ,HOME2		;Wait until 1791/5 is ready
 2019 0E3C  CD 1250     	CALL	WAIT_OFF		;Disable Wait State Hardware (just in case it is on)
 2020 0E3F  3E 88       	LD A, 088H
 2021 0E41  D3 05       	OUT (DEBUG),A
 2022 0E43  3E 0C       	LD	A,RSCMD
 2023 0E45  32 3931     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2024 0E48  D3 64       	OUT	(CMD),A
 2025 0E4A  3E 99       	LD A, 099H
 2026 0E4C  D3 05       	OUT (DEBUG),A
 2027 0E4E  CD 1185     	CALL	END_ROUTINE		;Wait, check status and return
 2028 0E51  C9          	RET
 2029                   ;
 2030                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  36
VF      Z80

 2031                   ; SEND A HEAD STEP-IN COMMAND TO THE CURRENT DRIVE 
 2032                   ; On return: Z if no errors. NZ if errors with errors in (ERSTAT)and [A]
 2033                   ; Note (TRK) is NOT updated to new track position, (IX+HW_BYTE) SIDE_BIT (7) is unchanged
 2034                   ;
 2035 0E52              STEP_IN_CMD:
 2036 0E52  3E 90       	LD	A,SIN_ERR_MASK		;Error mask for Type I CMD
 2037 0E54  32 392F     	LD	(ERMASK),A		;Save error mask for end/error routine
 2038 0E57  3E 5C       	LD	A,STEPIN		;Send Step-in (with verify) CMD
 2039 0E59  32 3931     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2040 0E5C              STEP_IN2:
 2041 0E5C  DB 64       	IN	A,(STATUS)
 2042 0E5E  E6 01       	AND	A,1
 2043 0E60  20 FA       	JR	NZ,STEP_IN2		;Wait until 1791/5 is ready
 2044 0E62  CD 1250     	CALL	WAIT_OFF		;Disable Wait State Hardware (just in case it is on)
 2045 0E65  3E 5C       	LD	A,STEPIN
 2046 0E67  32 3931     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2047 0E6A  D3 64       	OUT	(CMD),A
 2048 0E6C  CD 1185     	CALL	END_ROUTINE		;Wait, check status and return
 2049 0E6F  C9          	RET
 2050                   ;
 2051                   ; Seek with track WITH verify. Assumes valid track in (TRK)
 2052                   ; On return: Z if no errors. NZ if errors, (ERSTAT)and [A] has errors 
 2053                   ; Note (TRK) is NOT updated to new track position
 2054                   ;
 2055 0E70              SEEK_TRACK_V:
 2056 0E70  3E 90       	LD	A,SK_ERR_MASK		;Error mask for Type I Seek CMD
 2057 0E72  32 392F     	LD	(ERMASK),A		;Save error mask for end/error routine
 2058 0E75  3E 1C       	LD	A,SKCMD			;Send seek (with verify) CMD
 2059 0E77  32 3931     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2060 0E7A  3E 02       	LD	A,SEEK_RETRY_MAX	;In case of errors will retry seeking
 2061 0E7C  32 3935     	LD	(SEEK_RT_COUNT),A	;a few times
 2062 0E7F  18 0F       	JR	SEEK_TRK
 2063                   
 2064                   ;
 2065                   ;
 2066                   ; Seek track with NO verify. Assumes valid track in (TRK)
 2067                   ; On return: Z if no errors. NZ if errors, (ERSTAT)and [A] has errors 
 2068                   ; Note (TRK) is NOT updated to new track position
 2069                   ;
 2070 0E81              SEEK_TRACK_NV:	
 2071 0E81  3E 90       	LD	A,SK_ERR_MASK		;Error mask for Type I Seek CMD
 2072 0E83  32 392F     	LD	(ERMASK),A		;Save error mask for end/error routine
 2073 0E86  3E 18       	LD	A,SKNCMD		;Send seek CMD ((with NO verify)
 2074 0E88  32 3931     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2075 0E8B  3E 02       	LD	A,SEEK_RETRY_MAX	;In case of errors will retry seeking
 2076 0E8D  32 3935     	LD	(SEEK_RT_COUNT),A	;a few times
 2077 0E90              SEEK_TRK:
 2078 0E90  DB 64       	IN	A,(STATUS)
 2079 0E92  E6 01       	AND	A,1
 2080 0E94  20 FA       	JR	NZ,SEEK_TRK		;wait until 1791/5 is ready
 2081 0E96  CD 1250     	CALL	WAIT_OFF		;Disable Wait State Hardware (in case it was on)
 2082 0E99  FD 7E 00    	LD	A,(IY+TRK)		;Send required track to 1791/5
 2083 0E9C  D3 67       	OUT	(DATA),A
 2084 0E9E  3A 3931     	LD	A,(CHIP_CMDSV)		;Was it a seek or seek_nv
 2085 0EA1  D3 64       	OUT	(CMD),A			;Send seek cmd		
 2086 0EA3  CD 1185     	CALL	END_ROUTINE		;Wait, check status and return
 2087 0EA6  C8          	RET	Z			;Return if no errors
 2088                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  37
VF      Z80

 2089 0EA7  3A 3935     	LD	A,(SEEK_RT_COUNT)
 2090 0EAA  3D          	DEC	A			;Retrys 2,1... Will reseek
 2091 0EAB  32 3935     	LD	(SEEK_RT_COUNT),A
 2092 0EAE  28 02       	JR	Z,BAD_SEEK
 2093 0EB0  18 DE       	JR	SEEK_TRK		;Try re-reading the sector
 2094 0EB2              BAD_SEEK:
 2095 0EB2  AF          	XOR	A,A
 2096 0EB3  3D          	DEC	A			;Set to NZ
 2097 0EB4  3A 3930     	LD	A,(ERSTAT)
 2098 0EB7  C9          	RET	
 2099                   ;
 2100                   ;
 2101                   ;
 2102                   ;
 2103                   ; Read an ID from the track. Assumes valid track in (TRK) 
 2104                   ; Note any Sector ID from the track will be obtained depending where the head falls
 2105                   ; The currently selected side at (SIDE) is read
 2106                   ;
 2107 0EB8  3E 9F       READ_ID:LD	A,ID_ERR_MASK
 2108 0EBA  32 392F     	LD	(ERMASK),A		;Store for error display
 2109 0EBD  3E AA       RDSC_1: LD A, 0AAH	
 2110 0EBF  D3 05       	OUT (DEBUG), A
 2111 0EC1  DB 64       	IN	A,(STATUS)
 2112 0EC3  E6 01       	AND	A,1
 2113 0EC5  20 F6       	JR	NZ,RDSC_1		;wait until 1791/5 is ready
 2114 0EC7  3E BB       	LD A, 0BBH	
 2115 0EC9  D3 05       	OUT (DEBUG), A
 2116 0ECB  21 3928     	LD	HL,IDSV			;Will store the 6 bytes here
 2117 0ECE  01 0667     	LD	BC,600H+DATA		;6 bytes in B, Data port in C below
 2118 0ED1  CD 1257     	CALL	WAIT_ON			;Enable hardware wait states
 2119 0ED4  3E C4       	LD	A,RDACMD		;Send the Read Track ID CMD
 2120 0ED6  32 3931     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2121 0ED9  F3          	DI				;Just in case
 2122 0EDA  D3 64       	OUT	(CMD),A
 2123 0EDC  3E CC       	LD A, 0CCH	
 2124 0EDE  D3 05       	OUT (DEBUG), A
 2125 0EE0  18 00       	JR	MM2			;Slight delay
 2126 0EE2  18 00       MM2:	JR	MM3
 2127 0EE4  ED B2       MM3:	INIR				;Block input 6 bytes
 2128 0EE6  FB          	EI
 2129 0EE7  CD 1185     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status 
 2130 0EEA  D3 64       	OUT	(CMD),A
 2131 0EEC  3E DD       	LD A, 0DDH	
 2132 0EEE  C9          	RET				;and return
 2133                   ;	
 2134                   ;
 2135                   ;
 2136                   ; <<< CORE SECTOR READ ROUTINE>>>. Assumes valid track in (TRK)&(SEC) 
 2137                   ; Address in (TADDR). The currently selected side at (SIDE) is setup
 2138                   ; Note: (TADDR) is unaltered, (DMA_NEXT) is updated for repetative calls to this routine
 2139                   ;
 2140 0EEF              READ_SECTOR:
 2141 0EEF  3E BF       	LD	A,RS_ERR_MASK	;Error mask from 1791/5 after read is done
 2142 0EF1  32 392F     	LD	(ERMASK),A
 2143 0EF4  3E 04       	LD	A,SEC_RETRY_MAX		;In case of errors will retry reading sector 
 2144 0EF6  32 3934     	LD	(SEC_RT_COUNT),A	;a few times
 2145 0EF9              AGAIN_RD:
 2146 0EF9  2A 0040     	LD	HL,(TADDR)	;Deposit sector info here
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  38
VF      Z80

 2147 0EFC  FD 7E 02    	LD	A,(IY+SCTR)
 2148 0EFF  D3 66       	OUT	(SECTOR),A
 2149 0F01  0E 67       	LD	C,DATA		;C = DATA port for INIR below
 2150 0F03  CD 1257     	CALL	WAIT_ON
 2151                   
 2152         0000           if	CHIP_1791
 2155                        endif
 2156                   
 2157         0001           if	CHIP_1795
 2158 0F06  3E 88       	LD	A,RDCMD95	;Read sector command to 1795
 2159 0F08  32 3931     	LD	(CHIP_CMDSV),A	;store cmd here for Error display (if any)
 2160 0F0B  FD B6 01    	OR	A,(IY+SIDE)	;If B side, need to OR in bit 1 (02H).
 2161                        endif
 2162                   	
 2163 0F0E  F3          	DI
 2164 0F0F  D3 64       	OUT	(CMD),A
 2165 0F11  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2166 0F14  06 80       	LD	B,NBYTES
 2167 0F16  B7          	OR	A,A		;Block input [B] Bytes->[HL] from port [C]
 2168 0F17  28 10       	JR	Z,R128256	;Do 128 byte read
 2169 0F19  06 00       	LD	B,0
 2170 0F1B  FE 01       	CP	A,1
 2171 0F1D  28 0A       	JR	Z,R128256	;Do 256 byte read
 2172 0F1F  FE 02       	CP	A,2
 2173 0F21  28 04       	JR	Z,R512		;Do 512 byte read
 2174 0F23  ED B2       	INIR			;Must be 1024 byte sectors so 4X256		
 2175 0F25  ED B2       	INIR
 2176 0F27  ED B2       R512:	INIR			;256X2 bytes
 2177 0F29  ED B2       R128256:INIR			;128 or 256 bytes (B=128 or 0)
 2178 0F2B  FB          	EI
 2179 0F2C  22 393A     	LD	(DMA_NEXT),HL	;Store next byte of DMA
 2180 0F2F  CD 1185     	CALL	END_ROUTINE	;Wait, turn off wait hware, check status and return
 2181 0F32  C8          	RET	Z		;RET Z if all is OK
 2182                   				;Read failed. Do we retry again
 2183 0F33  3A 3927     	LD	A,(CRTDISP)	;Check if detailed display flag is on
 2184 0F36  B7          	OR	A,A
 2185 0F37  28 12       	JR	Z,MM6
 2186 0F39  21 289C     	LD	HL,SEC_READ_RETRY     ;'Re-reading SECTOR XXH.'
 2187 0F3C  CD 192B     	CALL	PMSG
 2188 0F3F  FD 7E 02    	LD	A,(IY+SCTR)
 2189 0F42  CD 19B1     	CALL	PACC
 2190 0F45  21 253D     	LD	HL,H_MSG
 2191 0F48  CD 192B     	CALL	PMSG
 2192 0F4B  3A 3934     MM6:	LD	A,(SEC_RT_COUNT)
 2193 0F4E  3D          	DEC	A			;Retrys 4,3 2,1... Will reseek on 3rd re-read try
 2194 0F4F  32 3934     	LD	(SEC_RT_COUNT),A
 2195 0F52  28 2D       	JR	Z,BAD_RD
 2196 0F54  FE 02       	CP	A,2
 2197 0F56  20 A1       	JR	NZ,AGAIN_RD		;Try re-reading the sector
 2198 0F58  3A 3927     	LD	A,(CRTDISP)		;Check if detailed display flag is on
 2199 0F5B  B7          	OR	A,A
 2200 0F5C  28 12       	JR	Z,MM7B
 2201 0F5E  21 28C6     	LD	HL,SEC_RH_RETRY		;'Re-Seeking head for re-reading SECTOR XXH.'
 2202 0F61  CD 192B     	CALL	PMSG
 2203 0F64  FD 7E 02    	LD	A,(IY+SCTR)
 2204 0F67  CD 19B1     	CALL	PACC
 2205 0F6A  21 253D     	LD	HL,H_MSG
 2206 0F6D  CD 192B     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  39
VF      Z80

 2207 0F70              MM7B:
 2208 0F70  FD 7E 00    	LD	A,(IY+TRK)	;If it failed a second time, home, reseek and try again
 2209 0F73  F5          	PUSH	AF		;Save TRK because HOME sets it to 0
 2210 0F74  CD 0E2D     	CALL	HOME		;Restore to track 0 (Note assumes TRK is unchanged in HOME)
 2211 0F77  F1          	POP	AF
 2212 0F78  FD 77 00    	LD	(IY+TRK),A
 2213 0F7B  CD 0E70     	CALL	SEEK_TRACK_V	;Re-seek to track
 2214 0F7E  C3 0EF9     	JP	AGAIN_RD
 2215 0F81  AF          BAD_RD	XOR	A,A
 2216 0F82  3D          	DEC	A		;Set to NZ
 2217 0F83  3A 3930     	LD	A,(ERSTAT)
 2218 0F86  C9          	RET	
 2219                   ;
 2220                   ;
 2221                   ; Multi_sector Read of ALL sectors on a TRACK. Assumes head is over relevent track in (TRK)
 2222                   ; Will place data at (TADDR). The currently selected side at (SIDE) is read.
 2223                   ; (DMA_NEXT) is updated for repetative calls to this routine
 2224                   ; [D] = the number of sectors (Max IX+NSCTRS), [E] = the starting sector number.
 2225                   ; Note this can be easily modified for CPM3 to multi sector write by adjusting [D] & [E]. 
 2226                   ; Also note, actual timing for data I/O is quite tight for slow CPU's. Thus the strange layout.
 2227                   ;
 2228 0F87              MULTI_SEC_RD:
 2229 0F87  3E AF       	LD	A,MRS_ERR_MASK		;Setup for error checking
 2230 0F89  32 392F     	LD	(ERMASK),A
 2231 0F8C  2A 0040     	LD	HL,(TADDR)
 2232 0F8F  FD 7E 00    	LD	A,(IY+TRK)
 2233 0F92  D3 65       	OUT	(TRACK),A
 2234 0F94  7B          	LD	A,E			;first sector (usually 1)
 2235 0F95  FD 77 02    	LD	(IY+SCTR),A		;For error dump (Actully error could be any sector on the track)
 2236 0F98  D3 66       	OUT	(SECTOR),A
 2237 0F9A  0E 67       	LD	C,DATA			;C = DATA port for INIR below
 2238                   
 2239 0F9C  CD 1257     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2240                   
 2241         0000          if	CHIP_1791
 2244                       endif
 2245                   
 2246         0001          if	CHIP_1795
 2247 0F9F  3E 88       	LD	A,RDCMD95		;Read sector command to 1795
 2248 0FA1  32 3931     	LD	(CHIP_CMDSV),A		;store cmd here for Error display (if any)
 2249 0FA4  FD B6 01    	OR	A,(IY+SIDE)		;If B side, need to OR in bit 1 (02H).
 2250                        endif
 2251                   
 2252 0FA7  CB E7       	SET	4,A			;Set "Multi sec bit"
 2253 0FA9  F5          	PUSH	AF			;Store until we get sec size info
 2254 0FAA  F3          	DI				;Disable Interrupts
 2255                   ;
 2256 0FAB  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2 or 1024=3 byte sector size
 2257 0FAE  B7          	OR	A,A			;Block input [B] Bytes->[HL] from port [C]
 2258 0FAF  28 0A       	JR	Z,MR128			;Do 128 byte read
 2259 0FB1  FE 01       	CP	A,1
 2260 0FB3  28 14       	JR	Z,MR256			;Do 256 byte read
 2261 0FB5  FE 02       	CP	A,2
 2262 0FB7  28 1E       	JR	Z,MR512			;Do 512 byte read
 2263 0FB9  18 2C       	JR	MR1K			;Must be 1K sectors
 2264                   
 2265 0FBB  06 80       MR128:	LD	B,128
 2266 0FBD  F1          	POP	AF
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  40
VF      Z80

 2267 0FBE  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2268 0FC0  ED B2       MR128A:	INIR				;128 bytes (B=128)
 2269 0FC2  06 80       	LD	B,128
 2270 0FC4  15          	DEC	D
 2271 0FC5  20 F9       	JR	NZ,MR128A
 2272 0FC7  18 32       	JR	DONE_MR
 2273                   
 2274 0FC9  06 00       MR256:	LD	B,0
 2275 0FCB  F1          	POP	AF
 2276 0FCC  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2277 0FCE  ED B2       MR256A:	INIR				;256 bytes 
 2278 0FD0  06 00       	LD	B,0
 2279 0FD2  15          	DEC	D
 2280 0FD3  20 F9       	JR	NZ,MR256A
 2281 0FD5  18 24       	JR	DONE_MR
 2282                   
 2283 0FD7  06 00       MR512:	LD	B,0
 2284 0FD9  F1          	POP	AF
 2285 0FDA  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2286 0FDC  ED B2       MR512A:	INIR				;512 = 256x2
 2287 0FDE  ED B2       	INIR
 2288 0FE0  06 00       	LD	B,0
 2289 0FE2  15          	DEC	D
 2290 0FE3  20 F7       	JR	NZ,MR512A
 2291 0FE5  18 14       	JR	DONE_MR
 2292                   
 2293 0FE7  06 00       MR1K:	LD	B,0
 2294 0FE9  F1          	POP	AF
 2295 0FEA  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2296 0FEC  ED B2       MR1KA:	INIR				;1K = 256x4
 2297 0FEE  ED B2       	INIR
 2298 0FF0  ED B2       	INIR
 2299 0FF2  ED B2       	INIR
 2300 0FF4  06 00       	LD	B,0
 2301 0FF6  15          	DEC	D
 2302 0FF7  20 F3       	JR	NZ,MR1KA
 2303 0FF9  18 00       	JR	DONE_MR
 2304                   
 2305 0FFB              DONE_MR:
 2306 0FFB  FB          	EI
 2307 0FFC  22 393A     	LD	(DMA_NEXT),HL		;Store "next location". Used by other routines
 2308 0FFF  CD 1185     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2309 1002  C8          	RET	Z			;RET Z if all is OK
 2310 1003  AF          	XOR	A,A
 2311 1004  3D          	DEC	A			;Set to NZ
 2312 1005  3A 3930     	LD	A,(ERSTAT)		;Return with error bits
 2313 1008  C9          	RET	
 2314                   ;
 2315                   ;
 2316                   ; Read Track. Assumes head is over relevent track in (TRK)
 2317                   ; Will place data at (TADDR)
 2318                   ; The currently selected side at (SIDE) is read
 2319                   ; The total size of a  track in bytes is in [DE]
 2320                   
 2321 1009              READ_TRACK:
 2322 1009  3E 80       	LD	A,RT_ERR_MASK		;Setup for error checking
 2323 100B  32 392F     	LD	(ERMASK),A
 2324 100E  2A 0040     	LD	HL,(TADDR)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  41
VF      Z80

 2325 1011  FD 7E 00    	LD	A,(IY+TRK)
 2326 1014  D3 65       	OUT	(TRACK),A
 2327 1016  CD 1257     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2328 1019  3E E4       	LD	A,RDTCMD		;setup for 179x read track command
 2329 101B  32 3931     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2330 101E  F3          	DI				;Disable Interrupts
 2331 101F  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port
 2332 1021  18 00       	JR	MM7			;Slight delay
 2333 1023  18 00       MM7:	JR	R_LOOP
 2334                   
 2335 1025  DB 67       R_LOOP:	IN	A,(DATA)		;Get all track bytes
 2336 1027  77          	LD	(HL),A
 2337 1028  23          	INC	HL
 2338 1029  1B          	DEC	DE			;Track size is in DE
 2339 102A  7B          	LD	A,E
 2340 102B  B7          	OR	A,A
 2341 102C  20 F7       	JR	NZ,R_LOOP
 2342 102E  B2          	OR	A,D
 2343 102F  20 F4       	JR	NZ,R_LOOP		;Have we sent DE bytes yet
 2344 1031  FB          	EI
 2345 1032  CD 1185     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2346 1035  C8          	RET	Z			;RET Z if all is OK
 2347 1036  AF          	XOR	A,A
 2348 1037  3D          	DEC	A			;Set to NZ
 2349 1038  3A 3930     	LD	A,(ERSTAT)		;Return with error bits
 2350 103B  C9          	RET	
 2351                   ;
 2352                   ;
 2353                   ; <<< CORE SECTOR WRITE ROUTINE >>> . Assumes valid track in (TRK) & (SEC) 
 2354                   ; Address in (TADDR). The currently selected side at (SIDE) is setup
 2355                   ; Note: (TADDR) is unaltered, (DMA_NEXT) is updated for repetative calls to this routine
 2356                   ;
 2357 103C              WRITE_SECTOR:
 2358 103C  3E EF       	LD	A,WS_ERR_MASK	;Error mask from 1791/5 after read is done
 2359 103E  32 392F     	LD	(ERMASK),A
 2360 1041  3E 04       	LD	A,SEC_RETRY_MAX	;In case of errors will retry reading sector 
 2361 1043  32 3934     	LD	(SEC_RT_COUNT),A	;a few times
 2362 1046              AGAIN_WR:
 2363 1046  2A 0040     	LD	HL,(TADDR)	;Deposit sector info here
 2364 1049  FD 7E 02    	LD	A,(IY+SCTR)
 2365 104C  D3 66       	OUT	(SECTOR),A
 2366 104E  0E 67       	LD	C,DATA		;C = DATA port for OTIR below
 2367 1050  CD 1257     	CALL	WAIT_ON
 2368                   
 2369         0000           if	CHIP_1791
 2372                        endif
 2373                   
 2374         0001           if	CHIP_1795
 2375 1053  3E A8       	LD	A,WRCMD95	;Read sector command to 1795
 2376 1055  32 3931     	LD	(CHIP_CMDSV),A	;store cmd here for Error display (if any)
 2377 1058  FD B6 01    	OR	A,(IY+SIDE)	;If B side, need to OR in bit 1 (02H).
 2378                         endif
 2379                   
 2380 105B  F3          	DI
 2381 105C  D3 64       	OUT	(CMD),A
 2382 105E  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2383 1061  06 80       	LD	B,NBYTES
 2384 1063  B7          	OR	A,A		;Block input [B] Bytes->[HL] from port [C]
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  42
VF      Z80

 2385 1064  28 10       	JR	Z,W128256	;Do 128 byte read
 2386 1066  06 00       	LD	B,0
 2387 1068  FE 01       	CP	A,1
 2388 106A  28 0A       	JR	Z,W128256	;Do 256 byte read
 2389 106C  FE 02       	CP	A,2
 2390 106E  28 04       	JR	Z,W512		;Do 512 byte read
 2391 1070  ED B3       	OTIR			;Must be 1024 byte sectors so 4X256		
 2392 1072  ED B3       	OTIR
 2393 1074  ED B3       W512:	OTIR			;256X2 bytes
 2394 1076  ED B3       W128256:OTIR			;128 or 256 bytes (B=128 or 0)
 2395 1078  FB          	EI
 2396 1079  22 393A     	LD	(DMA_NEXT),HL	;Store next byte of DMA (for multiple sec R/W's)
 2397 107C  CD 1185     	CALL	END_ROUTINE	;Wait, turn off wait hware, check status and return
 2398 107F  C8          	RET	Z		;RET Z if all is OK
 2399                   				;Read failed. Do we retry again
 2400 1080  3A 3927     	LD	A,(CRTDISP)	;Check if detailed display flag is on
 2401 1083  B7          	OR	A,A
 2402 1084  28 12       	JR	Z,MM6W
 2403 1086  21 28B1     	LD	HL,SEC_WR_RETRY  ;'Re-writing SECTOR XXH.'
 2404 1089  CD 192B     	CALL	PMSG
 2405 108C  FD 7E 02    	LD	A,(IY+SCTR)
 2406 108F  CD 19B1     	CALL	PACC
 2407 1092  21 253D     	LD	HL,H_MSG
 2408 1095  CD 192B     	CALL	PMSG
 2409 1098  3A 3934     MM6W:	LD	A,(SEC_RT_COUNT)
 2410 109B  3D          	DEC	A			;Retrys 4,3 2,1... Will reseek on 3rd re-read try
 2411 109C  32 3934     	LD	(SEC_RT_COUNT),A
 2412 109F  28 2D       	JR	Z,BAD_WR
 2413 10A1  FE 02       	CP	A,2
 2414 10A3  20 A1       	JR	NZ,AGAIN_WR		;Try re-reading the sector
 2415 10A5  3A 3927     	LD	A,(CRTDISP)		;Check if detailed display flag is on
 2416 10A8  B7          	OR	A,A
 2417 10A9  28 12       	JR	Z,MM7W
 2418 10AB  21 28EF     	LD	HL,SEC_WH_RETRY		;'Re-Seeking head for re-reading SECTOR XXH.'
 2419 10AE  CD 192B     	CALL	PMSG
 2420 10B1  FD 7E 02    	LD	A,(IY+SCTR)
 2421 10B4  CD 19B1     	CALL	PACC
 2422 10B7  21 253D     	LD	HL,H_MSG
 2423 10BA  CD 192B     	CALL	PMSG
 2424 10BD              MM7W:
 2425 10BD  FD 7E 00    	LD	A,(IY+TRK)	;If it failed a second time, home, reseek and try again
 2426 10C0  F5          	PUSH	AF
 2427 10C1  CD 0E2D     	CALL	HOME		;Restore to track 0 
 2428 10C4  F1          	POP	AF
 2429 10C5  FD 77 00    	LD	(IY+TRK),A
 2430 10C8  CD 0E70     	CALL	SEEK_TRACK_V	;Re-seek to track
 2431 10CB  C3 0EF9     	JP	AGAIN_RD
 2432 10CE  AF          BAD_WR	XOR	A,A
 2433 10CF  3D          	DEC	A		;Set to NZ
 2434 10D0  3A 3930     	LD	A,(ERSTAT)	;Return with error bits
 2435 10D3  C9          	RET	
 2436                   ;
 2437                   ; Multi_sector Write of multiple sectors on a TARCK. Assumes head is over relevent track in (TRK)
 2438                   ; Will place data at (TADDR) The currently selected side at (SIDE) is read
 2439                   ; (DMA_NEXT) is updated for repetative calls to this routine.
 2440                   ; [D] contains the number of sectors (Max IX+NSCTRS), [E] the starting sector number.
 2441                   ; Note this can be easily modified for CPM3 to multi sector write by adjusting [D] & [E]. 
 2442                   ; Also note, actual timing for data I/O is quite tight for slow CPU's. Thus the strange layout.
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  43
VF      Z80

 2443                   ;
 2444 10D4              MULTI_SEC_WR:
 2445 10D4  3E EF       	LD	A,WS_ERR_MASK		;Setup for error checking
 2446 10D6  32 392F     	LD	(ERMASK),A
 2447 10D9  2A 0040     	LD	HL,(TADDR)
 2448 10DC  FD 7E 00    	LD	A,(IY+TRK)
 2449 10DF  D3 65       	OUT	(TRACK),A
 2450 10E1  7B          	LD	A,E			;first sector (usually 1)
 2451 10E2  FD 77 02    	LD	(IY+SCTR),A		;For error dump (Actully error could be any sector on the track)
 2452 10E5  D3 66       	OUT	(SECTOR),A
 2453 10E7  0E 67       	LD	C,DATA			;C = DATA port for INIR below
 2454                   
 2455 10E9  CD 1257     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2456                   
 2457         0000          if	CHIP_1791
 2460                        endif
 2461                   
 2462         0001           if	CHIP_1795
 2463 10EC  3E A8       	LD	A,WRCMD95		;Read sector command to 1795
 2464 10EE  32 3931     	LD	(CHIP_CMDSV),A		;store cmd here for Error display (if any)
 2465 10F1  FD B6 01    	OR	A,(IY+SIDE)		;If B side need to OR in bit 1 (02H).
 2466                        endif
 2467                   
 2468 10F4  CB E7       	SET	4,A			;Multi sec bit
 2469 10F6  F5          	PUSH	AF			;Store for now
 2470 10F7  F3          	DI				;Disable Interrupts
 2471                   
 2472 10F8  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2 or 1024=3 byte sector size
 2473 10FB  B7          	OR	A,A			;Block input [B] Bytes->[HL] from port [C]
 2474 10FC  28 0A       	JR	Z,MW128			;Do 128 byte read
 2475 10FE  FE 01       	CP	A,1
 2476 1100  28 14       	JR	Z,MW256			;Do 256 byte read
 2477 1102  FE 02       	CP	A,2
 2478 1104  28 1E       	JR	Z,MW512			;Do 512 byte read
 2479 1106  18 2C       	JR	MW1K			;Must be 1K sectors
 2480                   
 2481 1108  06 80       MW128:	LD	B,128			;Note the code is spread out like this with
 2482 110A  F1          	POP	AF			;each sector having its own module because of timing
 2483 110B  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2484 110D  ED B3       MW128A:	OTIR				;128 bytes (B=128)
 2485 110F  06 80       	LD	B,128
 2486 1111  15          	DEC	D
 2487 1112  20 F9       	JR	NZ,MW128A
 2488 1114  18 32       	JR	DONE_MW
 2489                   
 2490 1116  06 00       MW256:	LD	B,0
 2491 1118  F1          	POP	AF
 2492 1119  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2493 111B  ED B3       MW256A:	OTIR				;256 bytes 
 2494 111D  06 00       	LD	B,0
 2495 111F  15          	DEC	D
 2496 1120  20 F9       	JR	NZ,MW256A
 2497 1122  18 24       	JR	DONE_MW
 2498                   
 2499 1124  06 00       MW512:	LD	B,0
 2500 1126  F1          	POP	AF
 2501 1127  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2502 1129  ED B3       MW512A:	OTIR				;512 = 256x2
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  44
VF      Z80

 2503 112B  ED B3       	OTIR
 2504 112D  06 00       	LD	B,0
 2505 112F  15          	DEC	D
 2506 1130  20 F7       	JR	NZ,MW512A
 2507 1132  18 14       	JR	DONE_MW
 2508                   
 2509 1134  06 00       MW1K:	LD	B,0
 2510 1136  F1          	POP	AF
 2511 1137  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port immediatly
 2512 1139  ED B3       MW1KA:	OTIR				;1K = 256x4
 2513 113B  ED B3       	OTIR
 2514 113D  ED B3       	OTIR
 2515 113F  ED B3       	OTIR
 2516 1141  06 00       	LD	B,0
 2517 1143  15          	DEC	D
 2518 1144  20 F3       	JR	NZ,MW1KA
 2519 1146  18 00       	JR	DONE_MW
 2520                   
 2521 1148              DONE_MW:
 2522 1148  FB          	EI
 2523 1149  22 393A     	LD	(DMA_NEXT),HL		;Store "next" location. Used by other routines
 2524 114C  CD 1185     	CALL	END_ROUTINE		;Wait, turn off wait hware, check status and return
 2525 114F  C8          	RET	Z			;RET Z if all is OK
 2526 1150  AF          	XOR	A,A
 2527 1151  3D          	DEC	A			;Set to NZ
 2528 1152  3A 3930     	LD	A,(ERSTAT)		;Return with error bits
 2529 1155  C9          	RET	
 2530                   ;
 2531                   ;
 2532                   ;	
 2533                   ; Write Track. Assumes head is over relevent track in (TRK)
 2534                   ; Track data at (TADDR)
 2535                   ; The currently selected side at (SIDE) is written to
 2536                   ; The total size of a track in bytes is in [DE]
 2537                   ;
 2538 1156              WRITE_TRACK:
 2539 1156  3E E0       	LD	A,WT_ERR_MASK		;Setup for error checking
 2540 1158  32 392F     	LD	(ERMASK),A
 2541 115B  2A 0040     	LD	HL,(TADDR)
 2542 115E  FD 7E 00    	LD	A,(IY+TRK)
 2543 1161  D3 65       	OUT	(TRACK),A
 2544 1163  CD 1257     	CALL	WAIT_ON			;Turn on VII board wait state hardware
 2545 1166  3E F4       	LD	A,WRTCMD		;setup for 179x WRITE track command
 2546 1168  32 3931     	LD	(CHIP_CMDSV),A		;Store it in case error flags are to be shown
 2547 116B  F3          	DI				;Disable Interrupts
 2548 116C  D3 64       	OUT	(CMD),A			;send it to the 179x CMD port
 2549 116E  7E          W_LOOP:	LD	A,(HL)
 2550 116F  D3 67       	OUT	(DATA),A		;Send all track bytes
 2551 1171  23          	INC	HL
 2552 1172  1B          	DEC	DE
 2553 1173  7B          	LD	A,E
 2554 1174  B7          	OR	A,A
 2555 1175  20 F7       	JR	NZ,W_LOOP
 2556 1177  B2          	OR	A,D
 2557 1178  20 F4       	JR	NZ,W_LOOP	;Have we sent DE bytes yet
 2558 117A  FB          	EI
 2559 117B  CD 1185     	CALL	END_ROUTINE	;Wait,  turn off wait hware, check status and return
 2560 117E  C8          	RET	Z		;RET Z if all is OK
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  45
VF      Z80

 2561 117F  AF          	XOR	A,A
 2562 1180  3D          	DEC	A		;Set to NZ
 2563 1181  3A 3930     	LD	A,(ERSTAT)
 2564 1184  C9          	RET	
 2565                   ;
 2566                   ;
 2567                   ; END Routine comes after each Type I command is completed. It waits for the 1791/5 
 2568                   ; chip to time out then switches off the wait state generator and checks for errors. 
 2569                   ; Returns Z if no errors, otherewise NZ with error in (ERSTAT). If chip gets hung waiting
 2570                   ; for status it forces a 1791/5 Interrupt CMD after ~ 5 seconds.  This is usually due to
 2571                   ; a hardware problem.
 2572                   ;
 2573 1185              END_ROUTINE:
 2574 1185  CD 11F6     	CALL	DELAY		;Delay for hardware
 2575 1188  C5          	PUSH	BC		;Setup a loop count
 2576 1189  D5          	PUSH	DE
 2577 118A  E5          	PUSH	HL
 2578 118B  01 0000     	LD	BC,0
 2579 118E  1E 05       	LD	E,STATUS_DELAY	;time out about 5 seconds
 2580 1190  3E EE       	LD A, 0EEH	
 2581 1192  D3 05       	OUT (DEBUG), A
 2582 1194  DB 64       ENDR2:	IN	A,(STATUS)	;Wait until chip is not busy
 2583 1196  E6 01       	AND	A,1
 2584 1198  28 25       	JR	Z,ENDR2_OK
 2585 119A  10 F8       	DJNZ	ENDR2		;Try for ~5 seconds
 2586 119C  05          	DEC	B
 2587 119D  0D          	DEC	C
 2588 119E  20 F4       	JR	NZ,ENDR2
 2589 11A0  05          	DEC	B
 2590 11A1  0D          	DEC	C
 2591 11A2  1D          	DEC	E
 2592 11A3  20 EF       	JR	NZ,ENDR2
 2593 11A5  CD 1250     	CALL	WAIT_OFF	;Disable Hardware wait states
 2594 11A8  21 2C1D     	LD	HL,TIMEOUT_ERR
 2595 11AB  CD 192B     	CALL	PMSG
 2596 11AE  CD 17E2     	CALL	SHOW_STAT_BITS
 2597 11B1  32 3930     	LD	(ERSTAT),A	
 2598 11B4  CD 1948     	CALL	ZCRLF
 2599 11B7  CD 125E     	CALL	FRCINT
 2600 11BA  E1          	POP	HL
 2601 11BB  D1          	POP	DE
 2602 11BC  C1          	POP	BC
 2603 11BD  18 11       	JR	ENDR3
 2604 11BF              ENDR2_OK:
 2605 11BF  E1          	POP	HL
 2606 11C0  D1          	POP	DE
 2607 11C1  C1          	POP	BC
 2608 11C2  CD 1250     	CALL	WAIT_OFF	;Disable Hardware wait states
 2609 11C5  DB 64       	IN	A,(STATUS)	;(May already be off anyway for Seeks etc)
 2610 11C7  57          	LD	D,A
 2611 11C8  3A 392F     	LD	A,(ERMASK)	;Error mask was stored here
 2612 11CB  A2          	AND	A,D
 2613 11CC  32 3930     	LD	(ERSTAT),A	;Save error status for error routine
 2614 11CF  C8          	RET	Z		;RET Z if all is OK
 2615 11D0  AF          ENDR3:	XOR	A,A
 2616 11D1  3D          	DEC	A		;Set to NZ
 2617 11D2  3A 3930     	LD	A,(ERSTAT)
 2618 11D5  C9          	RET	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  46
VF      Z80

 2619                   ;
 2620                   ;
 2621                   ;
 2622                   ;
 2623                   ; SELECT DRIVE IN HARDWARE, WILL BE THE NEW CURRENT DRIVE 
 2624                   ; (IX+HW_BYTE) points to relevent drive selection, density and 
 2625                   ; side(s) info for the current disk. Note: Sets head to Side A - ALWAYS
 2626                   ;
 2627 11D6              START_DRIVE_1:
 2628 11D6  3A 0046     	LD	A,(DRIVE_1)	;Get the drive selection bit
 2629 11D9  18 03       	JR	START_DR
 2630                   
 2631 11DB              START_DRIVE_2:
 2632 11DB  3A 0047     	LD	A,(DRIVE_2)	;Get the drive selection bit
 2633 11DE              START_DR:
 2634 11DE  DD B6 02    	OR	A,(IX+HW_BYTE)	;OR in the density,side and size bits
 2635 11E1  32 0048     	LD	(IOBYTE),A	;For diagnostic display	
 2636 11E4  E6 7F       	AND	A,7FH		;Strip off the current side bit flag of (IOBYTE)
 2637 11E6  2F          	CPL			;Hardware is inverted
 2638 11E7  CB E7       	SET	4,A		;Force to side A
 2639 11E9  D3 63       	OUT	(SELECT),A
 2640 11EB  CD 11F6     	CALL	DELAY
 2641 11EE  DB 64       RDYCK:	IN	A,(STATUS)	;Drive select delay
 2642 11F0  E6 80       	AND	80H
 2643 11F2  C2 11EE     	JP	NZ,RDYCK	;Return when ready
 2644 11F5  C9          	RET
 2645                   ;
 2646                   ; Delay for drive select hardware. Different for 8" and 5" drives
 2647                   ;
 2648 11F6  DD CB 02 6E DELAY:	BIT	5,(IX+HW_BYTE)	;8" or 5"
 2649 11FA  3E 27       	LD	A,39
 2650 11FC  28 02       	JR	Z,DELAY1  
 2651 11FE  3E 3C       	LD	A,60
 2652 1200  06 00       DELAY1:	LD	B,0
 2653 1202  10 FE       M0:	DJNZ	M0
 2654 1204  3D          	DEC	A
 2655 1205  20 F9       	JR	NZ,DELAY1  
 2656 1207  C9          	RET
 2657                   ;	
 2658                   ; This routine switches the active side of the current disk.
 2659                   ; Returns Z if no sides OR new side is A, NZ if new side is B. 
 2660                   ;
 2661 1208              SWAP_SIDES:
 2662 1208  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Is it a 1 or 2 sided disk
 2663 120C  C8          	RET	Z			;If 1 sided then return Z
 2664                   
 2665 120D  FD 7E 01    	LD	A,(IY+SIDE)
 2666 1210  B7          	OR	A,A			;If 0 we have done A side now do B
 2667 1211  28 09       	JR	Z,GOTO_B_SIDE1		;switch over to B side
 2668 1213  AF          	XOR	A,A
 2669 1214  FD 77 01    	LD	(IY+SIDE),A
 2670 1217  CD 1227     	CALL	SET_SIDE		;update the hardware
 2671 121A  AF          	XOR	A,A
 2672 121B  C9          	RET				;Return Z
 2673 121C              GOTO_B_SIDE1:
 2674 121C  3E 02       	LD	A,02H
 2675 121E  FD 77 01    	LD	(IY+SIDE),A	
 2676 1221  CD 1227     	CALL	SET_SIDE		;Update the hardware	
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  47
VF      Z80

 2677 1224  AF          	XOR	A,A
 2678 1225  3D          	DEC	A
 2679 1226  C9          	RET				;Returns NZ
 2680                   ;
 2681                   ;
 2682                   ; SELECT DRIVE SIDE IN HARDWARE
 2683                   ; Set side for sector R/W if different than current side
 2684                   ; (SIDE) = 0 if A side, (SIDE)= 02H if B side.
 2685                   ; Note Hardware bit 7 of HW_BYTE is updated here!
 2686                   ;
 2687 1227              SET_SIDE:
 2688 1227  DD 7E 02    	LD	A,(IX+HW_BYTE)	;Get current side info
 2689 122A  CB 67       	BIT	4,A		;Is it a 1 or 2 sided disk
 2690 122C  C8          	RET	Z		;Return if single sided
 2691                   
 2692 122D  FD 7E 01    	LD	A,(IY+SIDE)	;Which side do we want. (0 for A, 02H for B)
 2693 1230  B7          	OR	A,A
 2694 1231  20 0C       	JR	NZ,SET_HW_B
 2695 1233  DB 63       	IN	A,(SELECT)	;get hardware selection
 2696 1235  CB E7       	SET	4,A		;Port hardware for side selection (1=A, 0=B)
 2697 1237  D3 63       	OUT	(SELECT),A	;Select side A in hardware (inverted)
 2698 1239  DD CB 02 BE 	RES	7,(IX+HW_BYTE)	;Set to side to A (Will show up in IOBYTE info)
 2699 123D  18 0A       	JR	DONE_SET_SIDES
 2700 123F              SET_HW_B:
 2701 123F  DB 63       	IN	A,(SELECT)	;get hardware selection
 2702 1241  CB A7       	RES	4,A		;Port hardware for side selection (1=A, 0=B)
 2703 1243  D3 63       	OUT	(SELECT),A	;Select side B in hardware
 2704 1245  DD CB 02 FE 	SET	7,(IX+HW_BYTE)	;Set to side to B (Will show up in IOBYTE info)
 2705                   ;
 2706 1249              DONE_SET_SIDES:
 2707 1249  C5          	PUSH	BC
 2708 124A  06 FF       	LD	B,0FFH		;Slight delay for hardware
 2709 124C  10 FE       DELYS:	DJNZ	DELYS
 2710 124E  C1          	POP	BC
 2711 124F  C9          	RET
 2712                   ;
 2713                   ;
 2714                   ;
 2715                   ;
 2716                   ; Turn on or off the hardware wait state generator. This hardware stops and starts the CPU
 2717                   ; as bytes are read/written to the 179x/Disk
 2718                   ;
 2719                   ;	DISABLE WAIT STATES
 2720 1250              WAIT_OFF:
 2721 1250  DB 63       	IN	A,(SELECT)
 2722 1252  F6 80       	OR	80H
 2723 1254  D3 63       	OUT	(SELECT),A
 2724 1256  C9          	RET
 2725                   ;
 2726                   ;	ENABLE WAIT STATES
 2727 1257              WAIT_ON:
 2728 1257  DB 63       	IN	A,(SELECT)
 2729 1259  E6 7F       	AND	7FH
 2730 125B  D3 63       	OUT	(SELECT),A
 2731 125D  C9          	RET
 2732                   ;
 2733                   ;
 2734                   ;	FORCE CHIP INTERUPT
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  48
VF      Z80

 2735 125E  3E D0       FRCINT:	LD	A,0D0H
 2736 1260  D3 64       	OUT	(CMD),A
 2737 1262  3E 0A       	LD	A,10
 2738 1264  3D          FRC1:	DEC	A
 2739 1265  20 FD       	JR	NZ,FRC1
 2740 1267  DB 64       	IN	A,(STATUS)
 2741 1269  C9          	RET
 2742                   ;
 2743                   ;
 2744                   ;
 2745                   ; General routine to show the current location of the active disk head.
 2746                   ; Will display track, sector and side if two sided drive/disk
 2747                   ; Format is 'At TRACK xxH, SCETOR yyH, SIDE A/B.' 
 2748                   ; Note: NO CR/LF at start of string
 2749                   ;
 2750 126A              SHOW_TSS_LOC:
 2751 126A  E5          	PUSH	HL
 2752 126B  21 2516     	LD	HL,ATTRK	;Announce current track position
 2753 126E  CD 192B     	CALL	PMSG
 2754 1271  DB 65       	IN	A,(TRACK)		
 2755 1273  CD 19B1     	CALL	PACC
 2756 1276  21 251E     	LD	HL,ATSEC	;and sector position
 2757 1279  CD 192B     	CALL	PMSG
 2758 127C  DB 66       	IN	A,(SECTOR)		
 2759 127E  CD 19B1     	CALL	PACC
 2760 1281              SHOW_SIDES:			;Announce head if 2 sided disk
 2761 1281  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 2762 1285  28 16       	JR	Z,RW_SKIP_SIDES	;If 1 sided then skip side swap
 2763 1287  DB 63       	IN	A,(SELECT)	;Get hardware selection
 2764 1289  CB 67       	BIT	4,A		;Port Hardware for side selection (1=A, 0=B)
 2765 128B  28 08       	JR	Z,RW_B_SIDE	
 2766 128D  21 2529     	LD	HL,HEAD0_MSG	;Announce side 0 (or A)
 2767 1290  CD 192B     	CALL	PMSG
 2768 1293  E1          	POP	HL
 2769 1294  C9          	RET
 2770 1295              RW_B_SIDE:
 2771 1295  21 2533     	LD	HL,HEAD1_MSG	;Announce side 1 (or B)
 2772 1298  CD 192B     	CALL	PMSG
 2773 129B  E1          	POP	HL
 2774 129C  C9          	RET
 2775 129D              RW_SKIP_SIDES:
 2776 129D  21 253D     	LD	HL,H_MSG	;If SS disk, no need for a HEAD# message
 2777 12A0  CD 192B     	CALL	PMSG
 2778 12A3  E1          	POP	HL
 2779 12A4  C9          	RET
 2780                   ;
 2781                   ;
 2782                   ;
 2783                   ; General routine to show the current TRACK location of the active disk head.
 2784                   ; Will display track only.  The format is 'At TRACK xxH.'
 2785                   ; Note: NO CR,LF at start of string
 2786                   ;
 2787 12A5              SHOW_T_LOC:
 2788 12A5  E5          	PUSH	HL
 2789 12A6  21 2516     	LD	HL,ATTRK
 2790 12A9  CD 192B     	CALL	PMSG
 2791 12AC  DB 65       	IN	A,(TRACK)	;Say what track we are now on.
 2792 12AE  CD 19B1     	CALL	PACC		;Display current track number 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  49
VF      Z80

 2793 12B1  21 253D     	LD	HL,H_MSG
 2794 12B4  CD 192B     	CALL	PMSG
 2795 12B7  E1          	POP	HL
 2796 12B8  C9          	RET
 2797                   ;
 2798                   ;
 2799                   ; General routine to show the current TRACK & SIDE location of the active 
 2800                   ; disk head. The format is 'At TRACK xxH Side A/B.'
 2801                   ; Note: NO CR,LF at start of string
 2802                   ;
 2803 12B9              SHOW_TS_LOC:
 2804 12B9  E5          	PUSH	HL
 2805 12BA  21 2516     	LD	HL,ATTRK
 2806 12BD  CD 192B     	CALL	PMSG
 2807 12C0  DB 65       	IN	A,(TRACK)	;Say what track we are now on.
 2808 12C2  CD 19B1     	CALL	PACC		;Display current track number 
 2809 12C5  C3 1281     	JP	SHOW_SIDES
 2810                   ;
 2811                   ;
 2812                   ; General routine to print out the error status returned by the 1791/5 chip
 2813                   ; after seeks, sector reads etc. 
 2814                   ; Note: will end with CRLF and error bits in [A]
 2815                   ;
 2816 12C8              SHOW_ERRORS:
 2817 12C8  3A 3926     	LD	A,(ERRORS_FLAG)
 2818 12CB  3C          	INC	A
 2819 12CC  32 3926     	LD	(ERRORS_FLAG),A	;Assuming we have less than 256 errors!
 2820                   
 2821 12CF  3A 3931     	LD	A,(CHIP_CMDSV)	;What was the last command to the chip
 2822 12D2  FE 80       	CP	A,RDCMD91	;Was it a read sector 1791 CMD?
 2823 12D4  20 05       	JR	NZ,NOT_RDCMD91
 2824 12D6  21 30D4     	LD	HL,SEC_READ_ERROR 
 2825 12D9  18 5D       	JR	DONE_ERRS
 2826 12DB              NOT_RDCMD91:
 2827 12DB  FE 88       	CP	A,RDCMD95	;Was it a read sector 1795 CMD?
 2828 12DD  20 05       	JR	NZ,NOT_RDCMD95
 2829 12DF  21 30D4     	LD	HL,SEC_READ_ERROR 
 2830 12E2  18 54       	JR	DONE_ERRS
 2831 12E4              NOT_RDCMD95:
 2832 12E4  FE 18       	CP	A,SKNCMD	;Was it a seek no verify cmd 
 2833 12E6  20 05       	JR	NZ,NOT_SKNCMD
 2834 12E8  21 3117     	LD	HL,SEEKNV_ERROR
 2835 12EB  18 4B       	JR	DONE_ERRS
 2836 12ED              NOT_SKNCMD:
 2837 12ED  FE 0C       	CP	A,RSCMD		;Was it a restore CMD 
 2838 12EF  20 05       	JR	NZ,NOT_RSCMD
 2839 12F1  21 3158     	LD	HL,RSCMD_ERROR
 2840 12F4  18 42       	JR	DONE_ERRS
 2841 12F6              NOT_RSCMD:
 2842 12F6  FE C4       	CP	A,RDACMD	;Was it a read track address command
 2843 12F8  20 05       	JR	NZ,NOT_RDACMD
 2844 12FA  21 3197     	LD	HL,SEC_ID_ERROR
 2845 12FD  18 39       	JR	DONE_ERRS
 2846 12FF              NOT_RDACMD:
 2847 12FF  FE 1C       	CP	A,SKCMD		;Was it seek cmd with verify
 2848 1301  20 05       	JR	NZ,NOT_SKCMD
 2849 1303  21 31CE     	LD	HL,SKCMD_ERROR
 2850 1306  18 30       	JR	DONE_ERRS
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  50
VF      Z80

 2851 1308              NOT_SKCMD:
 2852 1308  FE E4       	CP	A,RDTCMD	;Was it a read track command
 2853 130A  20 05       	JR	NZ,NOT_RDTCMD
 2854 130C  21 3249     	LD	HL,RDTCMD_ERROR
 2855 130F  18 27       	JR	DONE_ERRS
 2856 1311              NOT_RDTCMD:
 2857 1311  FE F4       	CP	A,WRTCMD	;Was it a write track cmd
 2858 1313  20 05       	JR	NZ,NOT_WRTCMD
 2859 1315  21 3280     	LD	HL,WRTCMD_ERROR
 2860 1318  18 1E       	JR	DONE_ERRS
 2861 131A              NOT_WRTCMD:
 2862 131A  FE A0       	CP	A,WRCMD91	;Was it a sector write cmd 1791
 2863 131C  20 05       	JR	NZ,NOT_WRCMD91
 2864 131E  21 32BA     	LD	HL,WRCMD_ERROR
 2865 1321  18 15       	JR	DONE_ERRS
 2866 1323              NOT_WRCMD91:
 2867 1323  FE A8       	CP	A,WRCMD95	;Was it a sector write cmd 1795
 2868 1325  20 05       	JR	NZ,NOT_WRCMD95
 2869 1327  21 32BA     	LD	HL,WRCMD_ERROR
 2870 132A  18 0C       	JR	DONE_ERRS
 2871 132C              NOT_WRCMD95:
 2872 132C  FE 5C       	CP	A,STEPIN	;Was it a step-in CMD
 2873 132E  20 05       	JR	NZ,NOT_STEPIN
 2874 1330  21 320A     	LD	HL,STEPIN_ERROR
 2875 1333  18 03       	JR	DONE_ERRS
 2876 1335              NOT_STEPIN:
 2877 1335  21 2DFA     	LD	HL,UNKNOWN_ERROR
 2878 1338              DONE_ERRS:
 2879 1338  CD 192B     	CALL	PMSG
 2880 133B  3A 3930     	LD	A,(ERSTAT)
 2881 133E  CD 19CF     	CALL	ZBITS		;Drop in bit pattern
 2882 1341  21 2DF8     	LD	HL,CLOSE_BRACKET
 2883 1344  CD 192B     	CALL	PMSG
 2884 1347  CD 1948     	CALL	ZCRLF		;Always end with CRLF
 2885 134A  3A 3930     	LD	A,(ERSTAT)	;Return with error in A
 2886 134D  C9          	RET
 2887                   ;
 2888                   ;
 2889                   ; This routine simply checks the written and re-read sectors in memory are the same.
 2890                   ; Z if all OK. NZ, if error(s)
 2891                   ;
 2892 134E              CMP_BUFFERS:
 2893 134E  21 5000     	LD	HL,FBUFFER
 2894 1351  11 6000     	LD	DE,FBUFFER2
 2895 1354  0E 00       	LD	C,0		;Will flag errors
 2896 1356  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2897 1359  06 80       	LD	B,NBYTES
 2898 135B  B7          	OR	A,A		;Block size count
 2899 135C  28 13       	JR	Z,C128256	;Do 128 byte compare
 2900 135E  06 00       	LD	B,0
 2901 1360  FE 01       	CP	A,1
 2902 1362  28 0D       	JR	Z,C128256	;Do 256 byte read
 2903 1364  FE 02       	CP	A,2
 2904 1366  28 06       	JR	Z,C512		;Do 512 byte read
 2905 1368  CD 1377     	CALL	CHECK_BLOCK	;Must be 1024 byte sectors so 4X256		
 2906 136B  CD 1377     	CALL	CHECK_BLOCK
 2907 136E  CD 1377     C512:	CALL	CHECK_BLOCK	;256X2 bytes
 2908 1371  CD 1377     C128256:CALL	CHECK_BLOCK
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  51
VF      Z80

 2909 1374  AF          	XOR	A,A
 2910 1375  B9          	CP	A,C
 2911 1376  C9          	RET	
 2912 1377              CHECK_BLOCK:
 2913 1377  1A          	LD	A,(DE)
 2914 1378  BE          	CP	A,(HL)		;Do they match
 2915 1379  C4 1381     	CALL	NZ,MIS_MATCH
 2916 137C  23          	INC	HL
 2917 137D  13          	INC	DE
 2918 137E  10 F7       	DJNZ	CHECK_BLOCK	;Decrease count
 2919 1380  C9          	RET
 2920 1381              MIS_MATCH:
 2921 1381  0E 01       	LD	C,1		;Flag for error
 2922 1383  C9          	RET	
 2923                   ;
 2924                   ; Fill memory buffer with a byte [C]. Is be used for sector write and CPM86
 2925                   ; disk initilization
 2926                   ; Return with [HL] pointing to end of sector buffer +1
 2927 1384              FILL_BUFFER:
 2928 1384  21 5000     	LD	HL,FBUFFER
 2929 1387  DD 7E 09    	LD	A,(IX+SIZE)	;128=0,256=1,512=2 or 1024=3 byte sector size
 2930 138A  06 80       	LD	B,NBYTES
 2931 138C  B7          	OR	A,A		;Block size count
 2932 138D  28 13       	JR	Z,B128256	;Do 128 byte compare
 2933 138F  06 00       	LD	B,0
 2934 1391  FE 01       	CP	A,1
 2935 1393  28 0D       	JR	Z,B128256	;Do 256 byte read
 2936 1395  FE 02       	CP	A,2
 2937 1397  28 06       	JR	Z,B512		;Do 512 byte read
 2938 1399  CD 13A6     	CALL	BUILD_BLOCK	;Must be 1024 byte sectors so 4X256		
 2939 139C  CD 13A6     	CALL	BUILD_BLOCK
 2940 139F  CD 13A6     B512:	CALL	BUILD_BLOCK	;256X2 bytes
 2941 13A2  CD 13A6     B128256:CALL	BUILD_BLOCK
 2942 13A5  C9          	RET
 2943                   
 2944 13A6              BUILD_BLOCK:
 2945 13A6  71          	LD	(HL),C		;Drop in the fill character	
 2946 13A7  23          	INC	HL
 2947 13A8  10 FC       	DJNZ	BUILD_BLOCK	;Decrease count
 2948 13AA  C9          	RET
 2949                   ;
 2950                   ;
 2951                   ;
 2952                   ;
 2953                   ;---------------- BUILD TRACK IMAGE IN RAM ------------------------
 2954                   ; Assumes	IX points to the table or relevent Disk paramaters and
 2955                   ;		(TADDR) points to the buffer in RAM to build the track.
 2956                   ;		Requires valid (TADDR),(TRK),(SCTR) & (SIDE)
 2957                   ;		For maximum flexibility I have used seperate routines 
 2958                   ;		for Single and Double density formats. This routine is 
 2959                   ;		a very sensitive. Don't change unless you know what
 2960                   ;		you are doing.
 2961                   ;
 2962                   ;	Build in memory (@5000H)a complete SD Track.
 2963                   ;
 2964 13AB              BUILD_TRACK:
 2965 13AB  FD E5       	PUSH	IY			;Save the "main" IY pointer to TRACK,SIDE,SECTOR
 2966 13AD  FD 7E 00    	LD	A,(IY+TRK)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  52
VF      Z80

 2967 13B0  32 393F     	LD	(F_TRK),A		;store trk & side numbers locally
 2968 13B3  FD 7E 01    	LD	A,(IY+SIDE)
 2969 13B6  32 3940     	LD	(F_SIDE),A
 2970                   
 2971 13B9  DD 66 10    	LD	H,(IX+SKEW1)		;IY Now points to the table containing the order of 
 2972 13BC  DD 6E 0F    	LD	L,(IX+SKEW)		;the sector numbers on a track (usually 1,2,3,4...
 2973 13BF  E5          	PUSH	HL			;but not always
 2974 13C0  FD E1       	POP	IY			;HL->IY
 2975                   
 2976 13C2  2A 0040     	LD	HL,(TADDR)		;This will be FBUFFER where track ins built in RAM
 2977 13C5  DD CB 02 76 	BIT	6,(IX+HW_BYTE)		;Will build a different track image for SD or DD disks
 2978 13C9  C2 14A3     	JP	NZ,DD_TRACKS		;Seperate sector image for DD tracks
 2979                   
 2980 13CC              SD_TRACKS:	
 2981 13CC  CD 13E6     	CALL	SD_TRK_HEADER		;Drop in header and Index mark BEFORE first sector
 2982                   					
 2983 13CF  FD 56 00    	LD	D,(IY+0)		;sector# in D, usually 1 at the start
 2984 13D2  DD 5E 00    	LD	E,(IX+NSCTRS)		;Total Sectors/side
 2985 13D5              NEXT_SEC:
 2986 13D5  CD 1405     	CALL	SD_BUILD_SEC		;<<< Build a sector >>>>>
 2987 13D8  FD 23       	INC	IY			;point to next sector number in sec skew table
 2988 13DA  FD 56 00    	LD	D,(IY+0)		;store sector # in D
 2989 13DD  1D          	DEC	E
 2990 13DE  20 F5       	JR	NZ,NEXT_SEC		;All sectors are in RAM
 2991                   	
 2992 13E0  CD 1488     	CALL	SD_TRK_END		;Now need to flush out track to end
 2993 13E3  FD E1       	POP	IY			;Get back the main IY pointer
 2994 13E5  C9          	RET
 2995                   ;
 2996                   ;	Build in memory (@5000H)a complete Single Density Track.
 2997                   ;
 2998 13E6              SD_TRK_HEADER:				;Lay down the track header before the 1st sector
 2999 13E6  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Do not alter [D]= Sec# or [E]= Sec/side
 3000 13E9  DD 46 03    	LD	B,(IX+HEADR)		;Header has 40 (FF's)
 3001 13EC  CD 149E     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3002 13EF  AF          	XOR	A,A			;Now 6 0's
 3003 13F0  06 06       	LD	B,6
 3004 13F2  CD 149E     	CALL	DROP
 3005 13F5  3E FC       	LD	A,0FCH			;Index ID mark
 3006 13F7  77          	LD	(HL),A			;drop into image
 3007 13F8  23          	INC	HL
 3008 13F9  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Now 26 (FF's)
 3009 13FC  06 1A       	LD	B,26			;Header has the count of fill characters required
 3010 13FE  CD 149E     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3011 1401  22 3941     	LD	(INDEX_MARK),HL		;pointer+1 to end of track header
 3012 1404  C9          	RET				;return with [HL] pointing to first sector byte
 3013                   ;
 3014 1405              SD_BUILD_SEC:				;Lay down a sector at current [HL]. Do not alter [D] or [E]
 3015 1405  AF          	XOR	A,A
 3016 1406  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 6,0's for IMB 3740, 8")
 3017 1409  CD 149E     	CALL	DROP
 3018 140C  3E FE       	LD	A,0FEH			;Sector ID Address mark
 3019 140E  77          	LD	(HL),A			;drop it in the growing image
 3020 140F  23          	INC	HL
 3021 1410  3A 393F     	LD	A,(F_TRK)		;Drop in the track #
 3022 1413  77          	LD	(HL),A
 3023 1414  23          	INC	HL
 3024 1415  3A 3940     	LD	A,(F_SIDE)		;Side#, 0 for A side, 02H for B side
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  53
VF      Z80

 3025 1418  B7          	OR	A,A
 3026 1419  3E 00       	LD	A,0
 3027 141B  28 02       	JR	Z,BLD_ASIDE
 3028 141D  3E 01       	LD	A,1			
 3029 141F              BLD_ASIDE:			
 3030 141F  77          	LD	(HL),A			;0 here for A side, 1 for B side
 3031 1420  23          	INC	HL
 3032 1421  72          	LD	(HL),D			;Drop in sector #
 3033 1422  23          	INC	HL
 3034 1423  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2, 1024=3
 3035 1426  77          	LD	(HL),A			;drop in sector length byte
 3036 1427  23          	INC	HL	
 3037 1428  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 179x 	
 3038 142A  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3039 142B  23          	INC	HL
 3040 142C  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3041 142F  DD 46 05    	LD	B,(IX+GAP2)		;<---- (eg. 11,FF's for IMB 3740, 8")
 3042 1432  CD 149E     	CALL	DROP
 3043 1435  AF          	XOR	A,A
 3044 1436  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 6,0's for IMB 3740, 8")
 3045 1439  CD 149E     	CALL	DROP
 3046 143C  3E FB       	LD	A,0FBH			;Data address mark for 1791/5 	
 3047 143E  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3048 143F  23          	INC	HL
 3049 1440  7A          	LD	A,D
 3050 1441  FE 01       	CP	A,1			;If first sector then store data marker
 3051 1443  20 03       	JR	NZ,SDATA_FIELD 
 3052 1445  22 3943     	LD	(S_DATA_MARK),HL	;Pointer to start of sector data area
 3053 1448              SDATA_FIELD:				;Now write in the sector data field itself
 3054 1448  DD 7E 09    	LD	A,(IX+SIZE)		;128,256,512 or 1024 byte sector size
 3055 144B  06 80       	LD	B,NBYTES
 3056 144D  0E 01       	LD	C,1			;1 loop of 128 bytes in WR_DATA_FIELD below
 3057 144F  B7          	OR	A,A
 3058 1450  28 10       	JR	Z,SD_DATA_FIELD		;Do 128 byte write (B=128)
 3059 1452  06 00       	LD	B,0			;Need 256 bytes for the rest of possible sectors
 3060 1454  0E 01       	LD	C,1			;One loop
 3061 1456  FE 01       	CP	A,1
 3062 1458  28 08       	JR	Z,SD_DATA_FIELD		;Do 256 byte write
 3063 145A  0E 02       	LD	C,2			;2 loops of 256 bytes in WRITE_DATA_FIELD
 3064 145C  FE 02       	CP	A,2
 3065 145E  28 02       	JR	Z,SD_DATA_FIELD		;Do 512 byte read
 3066 1460  0E 04       	LD	C,4			;(must be 3) so 1024 byte sector
 3067 1462              SD_DATA_FIELD:
 3068 1462  DD 7E 0B    	LD	A,(IX+DATA_FILL_CHAR)	;get the sector fill character (usually E5)
 3069 1465  CD 149E     SDF0:	CALL	DROP
 3070 1468  0D          	DEC	C
 3071 1469  20 FA       	JR	NZ,SDF0			;Decrese [C] to 0
 3072 146B  7A          	LD	A,D
 3073 146C  FE 01       	CP	A,1			;If first sector then store image mark 
 3074 146E  20 03       	JR	NZ,NOT_FIRST
 3075 1470  22 3945     	LD	(E_DATA_MARK),HL	;For first sector will  diaplay data late
 3076 1473              NOT_FIRST:
 3077 1473  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 1791/5 
 3078 1475  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3079 1476  23          	INC	HL
 3080 1477  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3081 147A  DD 46 06    	LD	B,(IX+GAP3)		;<---- (eg. 27,FF's for IMB 3740, 8")
 3082 147D  CD 149E     	CALL	DROP
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  54
VF      Z80

 3083 1480  7A          	LD	A,D
 3084 1481  FE 01       	CP	A,1			;If first sector then store image mark 
 3085 1483  C0          	RET	NZ
 3086 1484  22 3947     	LD	(E_SEC_MARK),HL		;For first sector will diaplay data later
 3087 1487  C9          	RET
 3088                   ;
 3089 1488              SD_TRK_END
 3090 1488  22 3949     	LD	(S_GAP4_MARK),HL	;Mark beginning of end of track field (GAP4)
 3091 148B  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3092 148E  DD 46 07    	LD	B,(IX+GAP4)		;<---- (eg 247,FF's  for IMB 3740, 8")
 3093 1491  DD 4E 08    	LD	C,(IX+GAP4R)		;Times to repeat DROP
 3094 1494  CD 149E     SD_TRK1:CALL	DROP
 3095 1497  0D          	DEC	C
 3096 1498  20 FA       	JR	NZ,SD_TRK1
 3097 149A  22 394B     	LD	(E_GAP4_MARK),HL	;Mark end of Track
 3098 149D  C9          	RET
 3099                   ;
 3100 149E  77          DROP:	LD	(HL),A			;DATA block loader
 3101 149F  23          	INC	HL			;B= byte count,HL pointer
 3102 14A0  10 FC       	DJNZ	DROP			;A = value to drop into image. Count in B
 3103 14A2  C9          	RET
 3104                   ;
 3105                   ;
 3106                   ;
 3107                   ;	Build in memory (@5000H)a complete Double Density Track.
 3108                   ;
 3109 14A3              DD_TRACKS:				;Same thing for DD Trdcks. Extra stuff req.
 3110 14A3  CD 14BD     	CALL	DD_TRK_HEADER		;Drop in header and Index mark BEFORE first sector
 3111                   	
 3112 14A6  FD 56 00    	LD	D,(IY+0)		;sector# in D, usually 1 at the start
 3113 14A9  DD 5E 00    	LD	E,(IX+NSCTRS)		;Total Sectors/side
 3114 14AC              DD_NEXT_SEC:
 3115 14AC  CD 14E3     	CALL	DD_BUILD_SEC		;<<< Build a DD sector >>>>>
 3116 14AF  FD 23       	INC	IY			;point to next sector number in sec skew table
 3117 14B1  FD 56 00    	LD	D,(IY+0)		;store sector # in D
 3118 14B4  1D          	DEC	E
 3119 14B5  20 F5       	JR	NZ,DD_NEXT_SEC		;All sectors are in RAM
 3120                   	
 3121 14B7  CD 1574     	CALL	DD_TRK_END		;Now need to flush out track to end
 3122 14BA  FD E1       	POP	IY			;get back the main IY pointer
 3123 14BC  C9          	RET
 3124                   ;
 3125                   ;
 3126 14BD              DD_TRK_HEADER:				;Lay down the track header before the 1st sector
 3127 14BD  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Do not alter [D]= Sec# or [E]= Sec/side
 3128 14C0  DD 46 03    	LD	B,(IX+HEADR)		;Header has 80 (4E's)
 3129 14C3  CD 149E     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3130 14C6  AF          	XOR	A,A			;Now 12 0's
 3131 14C7  06 0C       	LD	B,12
 3132 14C9  CD 149E     	CALL	DROP
 3133 14CC  3E F6       	LD	A,0F6H			;3 of F6's
 3134 14CE  06 03       	LD	B,3
 3135 14D0  CD 149E     	CALL	DROP
 3136 14D3  3E FC       	LD	A,0FCH			;Index ID mark (FC)
 3137 14D5  77          	LD	(HL),A			;drop into image
 3138 14D6  23          	INC	HL
 3139 14D7  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)	;Now 50 (4Es)
 3140 14DA  06 32       	LD	B,50			;Header has the count of fill characters required
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  55
VF      Z80

 3141 14DC  CD 149E     	CALL	DROP			;drop it at the end of the growing image (Count in B)
 3142 14DF  22 3941     	LD	(INDEX_MARK),HL		;pointer+1 to end of track header
 3143 14E2  C9          	RET				;return with [HL] pointing to first sector byte
 3144                   ;
 3145 14E3              DD_BUILD_SEC:				;Lay down a sector at current [HL]. Do not alter [D] or [E]
 3146 14E3  AF          	XOR	A,A
 3147 14E4  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg. 12,0's for IBM System 34 Format)
 3148 14E7  CD 149E     	CALL	DROP
 3149 14EA  3E F5       	LD	A,0F5H			;Special DD bytes
 3150 14EC  06 03       	LD	B,3
 3151 14EE  CD 149E     	CALL	DROP
 3152 14F1  3E FE       	LD	A,0FEH			;Sector ID Address mark
 3153 14F3  77          	LD	(HL),A			;drop it in the growing image
 3154 14F4  23          	INC	HL
 3155 14F5  3A 393F     	LD	A,(F_TRK)			;Drop in the track #
 3156 14F8  77          	LD	(HL),A
 3157 14F9  23          	INC	HL
 3158 14FA  3A 3940     	LD	A,(F_SIDE)		;Side#, 0 for A side, 02H for B side
 3159 14FD  B7          	OR	A,A
 3160 14FE  3E 00       	LD	A,0
 3161 1500  28 02       	JR	Z,DBLD_ASIDE
 3162 1502  3E 01       	LD	A,1			;1 for side B
 3163 1504              DBLD_ASIDE:			
 3164 1504  77          	LD	(HL),A			;0 here for A side, 1 for B side
 3165 1505  23          	INC	HL
 3166 1506  72          	LD	(HL),D			;Drop in sector #
 3167 1507  23          	INC	HL
 3168 1508  DD 7E 09    	LD	A,(IX+SIZE)		;128=0,256=1,512=2, 1024=3
 3169 150B  77          	LD	(HL),A			;drop in sector length byte
 3170 150C  23          	INC	HL	
 3171 150D  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 179x 	
 3172 150F  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3173 1510  23          	INC	HL
 3174 1511  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3175 1514  DD 46 05    	LD	B,(IX+GAP2)		;<----(eg 22,4E's for IBM System 34 Format)
 3176 1517  CD 149E     	CALL	DROP
 3177 151A  AF          	XOR	A,A
 3178 151B  DD 46 04    	LD	B,(IX+GAP1)		;<---- (eg 8,0's for IBM System 34 Format)
 3179 151E  CD 149E     	CALL	DROP
 3180 1521  3E F5       	LD	A,0F5H			;Special DD bytes
 3181 1523  06 03       	LD	B,3
 3182 1525  CD 149E     	CALL	DROP
 3183 1528  3E FB       	LD	A,0FBH			;Data address mark for 1791/5 	
 3184 152A  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3185 152B  23          	INC	HL
 3186 152C  7A          	LD	A,D			;Get sec #
 3187 152D  FE 01       	CP	A,1			;If first sector then store data marker
 3188 152F  20 03       	JR	NZ,DDATA_FIELD 
 3189 1531  22 3943     	LD	(S_DATA_MARK),HL	;Pointer to start of sector data area
 3190 1534              DDATA_FIELD:				;Now write in the sector data field itself
 3191 1534  DD 7E 09    	LD	A,(IX+SIZE)		;128,256,512 or 1024 byte sector size
 3192 1537  06 80       	LD	B,NBYTES
 3193 1539  0E 01       	LD	C,1			;1 loop of 128 bytes in WR_DATA_FIELD below
 3194 153B  B7          	OR	A,A
 3195 153C  28 10       	JR	Z,DD_DATA_FIELD		;Do 128 byte write (B=128)
 3196 153E  06 00       	LD	B,0			;Need 256 bytes for the rest of possible sectors
 3197 1540  0E 01       	LD	C,1			;One loop
 3198 1542  FE 01       	CP	A,1
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  56
VF      Z80

 3199 1544  28 08       	JR	Z,DD_DATA_FIELD		;Do 256 byte write
 3200 1546  0E 02       	LD	C,2			;2 loops of 256 bytes in WRITE_DATA_FIELD
 3201 1548  FE 02       	CP	A,2
 3202 154A  28 02       	JR	Z,DD_DATA_FIELD		;Do 512 byte read
 3203 154C  0E 04       	LD	C,4			;(must be 3) so 1024 byte sector
 3204 154E              DD_DATA_FIELD:
 3205 154E  DD 7E 0B    	LD	A,(IX+DATA_FILL_CHAR)	;get the sector fill character (usually E5)
 3206 1551  CD 149E     DDF0:	CALL	DROP
 3207 1554  0D          	DEC	C
 3208 1555  20 FA       	JR	NZ,DDF0			;Decrease [C] to 0
 3209 1557  7A          	LD	A,D			;Get back sec #
 3210 1558  FE 01       	CP	A,1			;If first sector then store image mark 
 3211 155A  20 03       	JR	NZ,DNOT_FIRST
 3212 155C  22 3945     	LD	(E_DATA_MARK),HL	;For first sector will  diaplay data late
 3213 155F              DNOT_FIRST:
 3214 155F  3E F7       	LD	A,0F7H			;Dropping in a 0F7 will cause the 1791/5 
 3215 1561  77          	LD	(HL),A			;to write in the 2 CRC bytes
 3216 1562  23          	INC	HL
 3217 1563  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3218 1566  DD 46 06    	LD	B,(IX+GAP3)		;<---- (54,4E's for IBM System 34 Format)
 3219 1569  CD 149E     	CALL	DROP
 3220 156C  7A          	LD	A,D
 3221 156D  FE 01       	CP	A,1			;If first sector then store image mark 
 3222 156F  C0          	RET	NZ
 3223 1570  22 3947     	LD	(E_SEC_MARK),HL		;For first sector will diaplay data later
 3224 1573  C9          	RET
 3225                   ;
 3226 1574              DD_TRK_END
 3227 1574  22 3949     	LD	(S_GAP4_MARK),HL	;Mark beginning of end of track field (GAP4)
 3228 1577  DD 7E 0A    	LD	A,(IX+GAP_FILL_CHAR)
 3229 157A  DD 46 07    	LD	B,(IX+GAP4)		;<---- (eg 598 4E's for IBM System 34 Format)
 3230 157D  DD 4E 08    	LD	C,(IX+GAP4R)		;Times to repeat DROP
 3231 1580  CD 149E     DD_TRK1:CALL	DROP
 3232 1583  0D          	DEC	C
 3233 1584  20 FA       	JR	NZ,DD_TRK1
 3234 1586  22 394B     	LD	(E_GAP4_MARK),HL	;Mark end of Double density Track
 3235 1589  C9          	RET
 3236                   ;
 3237                   ; This routine initilized the first sector of a CPM86 5" Disk. 
 3238                   ; For DDDS CPM86 disks the last byte of the first sector has to be a 01.
 3239                   ; (For a DDSS CPM86 disk BTW it has to be 00)
 3240                   ;
 3241 158A              INIT_CPM86:
 3242 158A  21 29E7     	LD	HL,INITCPM_MSG	;Say Initilizing disk for CPM86
 3243 158D  CD 192B     	CALL	PMSG
 3244 1590  AF          	XOR	A,A		;Setup for the BIOS below
 3245 1591  FD 77 00    	LD	(IY+TRK),A	;Track 0 
 3246 1594  FD 77 01    	LD	(IY+SIDE),A	;Side A 
 3247 1597  3C          	INC	A
 3248 1598  FD 77 02    	LD	(IY+SCTR),A	;Sector 1 
 3249 159B  CD 1227     	CALL	SET_SIDE	;Make sure IX+HW_BYTE is set for correct side
 3250 159E  CD 11D6     	CALL	START_DRIVE_1	;Select the drive in hardware
 3251 15A1  CD 0E2D     	CALL	HOME	
 3252 15A4  C4 12C8     	CALL	NZ,SHOW_ERRORS	;print out errors if any
 3253                   
 3254 15A7  21 5000     	LD	HL,FBUFFER	;Sector data to be written is here
 3255 15AA  22 0040     	LD	(TADDR),HL	;Setup DMA address for BIOS
 3256 15AD  0E E5       	LD	C,0E5H		;Data fill character (for CPM86 always 0E5H)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  57
VF      Z80

 3257 15AF  CD 1384     	CALL	FILL_BUFFER	;Fill buffer with character E5's 
 3258 15B2  2B          	DEC	HL		;Backup to last data byte
 3259 15B3  3E 01       	LD	A,01
 3260 15B5  77          	LD	(HL),A		;drop in the 01 flag at end.
 3261                   	
 3262 15B6  CD 103C     	CALL	WRITE_SECTOR	;Write sector back to disk
 3263 15B9  C4 12C8     	CALL	NZ,SHOW_ERRORS	;If any, show error flags
 3264 15BC  AF          	XOR	A,A		;Return Z so no further special commands will 
 3265 15BD  C9          	RET			;be picked up.
 3266                   
 3267                   ;
 3268                   ;
 3269                   ; Setup the "current drive" hardware selection bits for (A:,B:,C: or D:)
 3270                   ; Store bits in memory location (DRIVE_1)
 3271                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3272                   ;
 3273 15BE              SELECT_DR_1:
 3274 15BE  21 1A79     	LD	HL,GETDRV_MSG	;Ask which drive is the current drive
 3275 15C1  CD 192B     	CALL	PMSG
 3276 15C4  CD 1936     	CALL	GETCMD		;Get the input option
 3277 15C7  FE 1B       	CP	A,ESC		;Abort if ESC character
 3278 15C9  CA 15EF     	JP	Z,ABORT_CMD
 3279 15CC  FE 41       	CP	A,'A'
 3280 15CE  20 04       	JR	NZ,NOT_A1
 3281 15D0  3E 01       	LD	A,1
 3282 15D2  18 16       	JR	GOT_DRIVE1
 3283 15D4  FE 42       NOT_A1:	CP	A,'B'
 3284 15D6  20 04       	JR	NZ,NOT_B1
 3285 15D8  3E 02       	LD	A,2
 3286 15DA  18 0E       	JR	GOT_DRIVE1
 3287 15DC  FE 43       NOT_B1:	CP	A,'C'
 3288 15DE  20 04       	JR	NZ,NOT_C1
 3289 15E0  3E 04       	LD	A,4
 3290 15E2  18 06       	JR	GOT_DRIVE1
 3291 15E4  FE 44       NOT_C1:	CP	A,'D'
 3292 15E6  20 0C       	JR	NZ,INVALID_DR
 3293 15E8  3E 08       	LD	A,8
 3294 15EA              GOT_DRIVE1:
 3295 15EA  32 0046     	LD	(DRIVE_1),A
 3296 15ED  AF          	XOR	A,A
 3297 15EE  C9          	RET
 3298                   ;
 3299 15EF              ABORT_CMD:
 3300 15EF  AF          	XOR	A,A		;Abort with z flag but ESC in A
 3301 15F0  3D          	DEC	A		;Make NZ
 3302 15F1  3E 1B       	LD	A,ESC
 3303 15F3  C9          	RET
 3304                   ;
 3305 15F4              INVALID_DR:
 3306 15F4  AF          	XOR	A,A		;Abort with z flag but FF in A
 3307 15F5  3D          	DEC	A		;Make NZ
 3308 15F6  C9          	RET
 3309                   ;
 3310                   ;
 3311                   ; Setup the "second drive" hardware selection bits for (A:,B:,C: or D:)
 3312                   ; Store bits in memory location (DRIVE_21)
 3313                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3314                   ;
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  58
VF      Z80

 3315 15F7              SELECT_DR_2:
 3316 15F7  21 1A79     	LD	HL,GETDRV_MSG	;Ask which drive is the current drive
 3317 15FA  CD 192B     	CALL	PMSG
 3318 15FD  CD 1936     	CALL	GETCMD		;Get the input option
 3319 1600  FE 1B       	CP	A,ESC		;Abort if ESC character
 3320 1602  CA 15EF     	JP	Z,ABORT_CMD
 3321 1605  FE 41       	CP	A,'A'
 3322 1607  20 04       	JR	NZ,NOT_A2
 3323 1609  3E 01       	LD	A,1
 3324 160B  18 16       	JR	GOT_DRIVE2
 3325 160D  FE 42       NOT_A2:	CP	A,'B'
 3326 160F  20 04       	JR	NZ,NOT_B2
 3327 1611  3E 02       	LD	A,2
 3328 1613  18 0E       	JR	GOT_DRIVE2
 3329 1615  FE 43       NOT_B2:	CP	A,'C'
 3330 1617  20 04       	JR	NZ,NOT_C2
 3331 1619  3E 04       	LD	A,4
 3332 161B  18 06       	JR	GOT_DRIVE2
 3333 161D  FE 44       NOT_C2:	CP	A,'D'
 3334 161F  20 D3       	JR	NZ,INVALID_DR
 3335 1621  3E 08       	LD	A,8
 3336 1623              GOT_DRIVE2:
 3337 1623  32 0047     	LD	(DRIVE_2),A
 3338 1626  AF          	XOR	A,A
 3339 1627  C9          	RET
 3340                   
 3341                   
 3342                   ;------Select the appropiate disk parameter table ----------------------
 3343                   ; Return Z flag if OK, NZ & [A]= 0FFH if error, NZ and ESC if abort
 3344                   ; [IX] to Drive paramater table 
 3345                   ;
 3346 1628              SELECT_IX:
 3347 1628  CD 1948     	CALL	ZCRLF
 3348 162B              SELECT_IX1:
 3349 162B  21 1AC0     	LD	HL,GETSIZE_MSG	;Ask if 5" or 8"
 3350 162E  CD 192B     	CALL	PMSG
 3351 1631  CD 1936     	CALL	GETCMD		;get the input option
 3352 1634  FE 1B       	CP	A,ESC		;Abort if ESC character
 3353 1636  CA 15EF     	JP	Z,ABORT_CMD
 3354 1639  FE 35       	CP	A,'5'
 3355 163B  28 48       	JR	Z,GET_TABLE_5
 3356 163D  FE 38       	CP	A,'8'
 3357 163F  28 09       	JR	Z,GET_TABLE_8
 3358 1641  21 2582     BAD_CMD:LD	HL,BADCMD
 3359 1644  CD 192B     	CALL	PMSG
 3360 1647  AF          	XOR	A,A		;NZ Flag to indicate no selection
 3361 1648  3D          	DEC	A
 3362 1649  C9          	RET
 3363                   
 3364 164A              GET_TABLE_8:
 3365 164A  21 1AE3     	LD	HL,DISK_8_FORMATS	;Pointer for 8" disk table
 3366 164D  CD 192B     	CALL	PMSG		
 3367 1650  CD 1936     	CALL	GETCMD		;SELECT A DISK PARAMATER TABLE
 3368 1653  FE 1B       	CP	A,ESC		;Abort if ESC character
 3369 1655  CA 15EF     	JP	Z,ABORT_CMD
 3370 1658  FE 41       	CP	A,'A'		;128 bytes/sec
 3371 165A  DD 21 32F4  	LD	IX,STDSDT	;Set to 128 byte sectors 8" SD IBM Disk
 3372 165E  C8          	RET	Z
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  59
VF      Z80

 3373 165F  FE 42       	CP	A,'B'
 3374 1661  DD 21 3345  	LD	IX,STDDDT	;Set to 128 byte sectors 8" DD format
 3375 1665  C8          	RET	Z
 3376 1666  FE 43       	CP	A,'C'
 3377 1668  DD 21 33B0  	LD	IX,DDT256	;Set to 256 byte sectors IBM DDDS disk
 3378 166C  C8          	RET	Z		
 3379 166D  FE 44       	CP	A,'D'
 3380 166F  DD 21 340D  	LD	IX,DDT512	;Set for 512 byte sectors 8" DDDS disk
 3381 1673  C8          	RET	Z		
 3382 1674  FE 45       	CP	A,'E'
 3383 1676  DD 21 344A  	LD	IX,DDT1K	;Set for 1024 byte sectors 8" DDSS disk
 3384 167A  C8          	RET	Z
 3385 167B  FE 46       	CP	A,'F'
 3386 167D  DD 21 349A  	LD	IX,DDT1K2	;Set for 1024 byte sectors 8" DDDS disk
 3387 1681  C8          	RET	Z
 3388 1682  C3 1641     	JP	BAD_CMD
 3389                   
 3390 1685              GET_TABLE_5:
 3391 1685  21 1C6C     	LD	HL,DISK_5_FORMATS	;Pointer for 5" disk table
 3392 1688  CD 192B     	CALL	PMSG		
 3393 168B  CD 1936     	CALL	GETCMD		;SELECT A DISK PARAMATER TABLE
 3394 168E  FE 1B       	CP	A,ESC		;Abort if ESC character
 3395 1690  CA 15EF     	JP	Z,ABORT_CMD
 3396 1693  FE 41       	CP	A,'A'
 3397 1695  DD 21 3589  	LD	IX,MINCPM	;Set for 512 byte CPM-86 5" DD disk
 3398 1699  C8          	RET	Z
 3399 169A  FE 42       	CP	A,'B'
 3400 169C  DD 21 34EA  	LD	IX,MINSDT	;Set for 128 byte 5" SD disk
 3401 16A0  C8          	RET	Z
 3402 16A1  FE 43       	CP	A,'C'
 3403 16A3  DD 21 3534  	LD	IX,MINDDT	;Set for 128 byte 5" DD disk
 3404 16A7  C8          	RET	Z
 3405 16A8  FE 44       	CP	A,'D'
 3406 16AA  DD 21 35D6  	LD	IX,DEC		;Set for 512 byte 5" DEC-VT180 DD disk
 3407 16AE  C8          	RET	Z
 3408 16AF  FE 45       	CP	A,'E'
 3409 16B1  DD 21 3620  	LD	IX,TOSHIBA	;Set for TOSHIBA DD disk
 3410 16B5  C8          	RET	Z
 3411 16B6  FE 46       	CP	A,'F'
 3412 16B8  DD 21 3675  	LD	IX,CDOS		;Set for CDOS SD disk
 3413 16BC  C8          	RET	Z
 3414 16BD  FE 47       	CP	A,'G'
 3415 16BF  DD 21 36C2  	LD	IX,CDOSDD	;Set for CDOS DD disk
 3416 16C3  C8          	RET	Z
 3417 16C4  FE 48       	CP	A,'H'
 3418 16C6  DD 21 370C  	LD	IX,EPSON	;Set for EPSON QX-10 DD disk
 3419 16CA  C8          	RET	Z
 3420 16CB  FE 49       	CP	A,'I'
 3421 16CD  DD 21 3750  	LD	IX,MORROW	;Set for MORROW DD disk
 3422 16D1  C8          	RET	Z
 3423 16D2  FE 4A       	CP	A,'J'
 3424 16D4  DD 21 3798  	LD	IX,ZENITH	;Set for ZENITH Z-100 DD disk
 3425 16D8  C8          	RET	Z
 3426 16D9  FE 4B       	CP	A,'K'
 3427 16DB  DD 21 37E4  	LD	IX,SUPER	;Set for SUPERBRAIN DD disk
 3428 16DF  C8          	RET	Z
 3429 16E0  FE 4C       	CP	A,'L'
 3430 16E2  DD 21 3834  	LD	IX,MSDOS	;Set for MSDOS 1.1 DD disk
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  60
VF      Z80

 3431 16E6  C8          	RET	Z
 3432 16E7  FE 4D       	CP	A,'M'
 3433 16E9  DD 21 3883  	LD	IX,MSDOS2	;Set for MSDOS 2.2 DD disk
 3434 16ED  C8          	RET	Z
 3435 16EE  FE 4E       	CP	A,'N'
 3436 16F0  DD 21 38D3  	LD	IX,TRS80	;Set for TRS80 III DD disk
 3437 16F4  C8          	RET	Z
 3438 16F5  C3 1641     	JP	BAD_CMD
 3439                   ;
 3440                   ;
 3441                   ;-------------------------------------------------------------------------
 3442                   ; Describe on one line the type of disk format selected
 3443                   ; Assumes a valid IX pointer to relevent disk table
 3444                   ;
 3445 16F8              SHOW_HW_TITLE:
 3446 16F8  21 210C     	LD	HL,DISK_INFO		;CR,LF,'Current drive:-'
 3447 16FB  CD 192B     	CALL	PMSG
 3448 16FE  DD E5       	PUSH	IX			;IX->HL
 3449 1700  E1          	POP	HL
 3450 1701  11 0013     	LD	DE,TITLE		;add in offset
 3451 1704  19          	ADD	HL,DE			;HL now points to the title entry of the selected disk
 3452 1705  CD 192B     	CALL	PMSG			;Show the title line
 3453 1708  C9          	RET
 3454                   ;
 3455                   ;--------------------------------------------------------------------------
 3456                   ; Decode the IOBYTE byte and print out hardware disk parameters on one line
 3457                   ; Assumes a valid IX pointer to relevent disk table
 3458                   ;
 3459 1709              SHOW_HW_BYTE:
 3460 1709  21 211F     	LD	HL,DISK_INFO0		;CR,LF,'Drive '
 3461 170C  CD 192B     	CALL	PMSG
 3462 170F  3A 0048     	LD	A,(IOBYTE)		;Obtain the current drive letter (A;,B:....)
 3463 1712  E6 03       	AND	A,03H			
 3464 1714  FE 01       	CP	A,1			
 3465 1716  20 04       	JR	NZ,NOT_A_DR
 3466 1718  3E 41       	LD	A,'A'
 3467 171A  18 12       	JR	DRV_DONE
 3468 171C              NOT_A_DR:
 3469 171C  FE 02       	CP	A,2
 3470 171E  20 04       	JR	NZ,NOT_B_DR
 3471 1720  3E 42       	LD	A,'B'
 3472 1722  18 0A       	JR	DRV_DONE
 3473 1724              NOT_B_DR
 3474 1724  FE 04       	CP	A,4
 3475 1726  20 04       	JR	NZ,NOT_C_DR
 3476 1728  3E 43       	LD	A,'C'
 3477 172A  18 02       	JR	DRV_DONE
 3478 172C              NOT_C_DR
 3479 172C  3E 44       	LD	A,'D'
 3480 172E              DRV_DONE:
 3481 172E  4F          	LD	C,A			;Drop it on to the CRT/LCD
 3482 172F  CD 011B     	CALL	CO
 3483 1732  21 2128     	LD	HL,DISK_INFO1
 3484 1735  CD 192B     	CALL	PMSG
 3485 1738  3A 0048     	LD	A,(IOBYTE)
 3486 173B  CD 19CF     	CALL	ZBITS			;Print out bit pattern in IOBYTE for hardware
 3487 173E  21 2134     	LD	HL,DISK_INFO2
 3488 1741  CD 192B     	CALL	PMSG
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  61
VF      Z80

 3489 1744  DD CB 02 6E 	BIT	5,(IX+HW_BYTE)		;Say whether 8" or 5"
 3490 1748  28 04       	JR	Z,INCH8
 3491 174A  0E 35       	LD	C,'5'
 3492 174C  18 02       	JR	NEXT2
 3493 174E  0E 38       INCH8:	LD	C,'8'
 3494 1750  CD 011B     NEXT2:	CALL	CO
 3495 1753  DD CB 02 66 	BIT	4,(IX+HW_BYTE)		;Say whether Single or Double sided disk
 3496 1757  28 05       	JR	Z,S_SIDE
 3497 1759  21 213C     	LD	HL,DISK_INFO3
 3498 175C  18 03       	JR	NEXT3
 3499 175E  21 214F     S_SIDE:	LD	HL,DISK_INFO4
 3500 1761  CD 192B     NEXT3:	CALL	PMSG
 3501 1764  DD CB 02 76 	BIT	6,(IX+HW_BYTE)		;Say whether SD or DD disk
 3502 1768  28 05       	JR	Z,DD_DSK
 3503 176A  21 2162     	LD	HL,DISK_INFO5
 3504 176D  18 03       	JR	NEXT4
 3505 176F  21 2177     DD_DSK:	LD	HL,DISK_INFO6
 3506 1772  CD 192B     NEXT4:	CALL	PMSG
 3507 1775  C9          	RET
 3508                   ;
 3509                   ;
 3510                   ;----------------------------------------------------------
 3511                   ; Display the disk paramater table pointed to by IX
 3512                   ;
 3513 1776              SHOW_IX_TABLE:
 3514 1776  21 218C     	LD	HL,DISK_INFO7		;Print sectors/track
 3515 1779  CD 192B     	CALL	PMSG
 3516 177C  DD 7E 00    	LD	A,(IX+NSCTRS)
 3517 177F  CD 19B1     	CALL	PACC
 3518 1782  21 21B2     	LD	HL,DISK_INFO8		;Print tracks/side
 3519 1785  CD 192B     	CALL	PMSG
 3520 1788  DD 7E 01    	LD	A,(IX+NTRKS)
 3521 178B  CD 19B1     	CALL	PACC
 3522 178E  21 21C2     	LD	HL,DISK_INFO9		;Sector Size
 3523 1791  DD 7E 09    	LD	A,(IX+SIZE)
 3524 1794  B7          	OR	A,A
 3525 1795  20 05       	JR	NZ,NOT_128
 3526 1797  21 21CF     	LD	HL,DISK_INFO10		;128 Bytes/sector
 3527 179A  18 15       	JR	DONE_IX_TABLE
 3528 179C  FE 01       NOT_128:CP	1
 3529 179E  20 05       	JR	NZ,NOT_256
 3530 17A0  21 21E2     	LD	HL,DISK_INFO11		;256 Bytes/Sector
 3531 17A3  18 0C       	JR	DONE_IX_TABLE
 3532 17A5  FE 02       NOT_256:CP	2
 3533 17A7  20 05       	JR	NZ,NOT_512
 3534 17A9  21 21F5     	LD	HL,DISK_INFO12		;512 Bytes/sector
 3535 17AC  18 03       	JR	DONE_IX_TABLE
 3536 17AE  21 2208     NOT_512:LD	HL,DISK_INFO13		;1024 Bytes/Sector
 3537 17B1              DONE_IX_TABLE:
 3538 17B1  CD 192B     	CALL	PMSG
 3539 17B4  C9          	RET
 3540                   ;
 3541                   ;----------------------------------------------------------
 3542                   ; Display the current track ID Field.
 3543                   ; NOTE this is NOT the current sector read. It's whatever sector 
 3544                   ; the head happens to be over at the time.
 3545                   ;
 3546 17B5              SHOW_ID:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  62
VF      Z80

 3547 17B5  21 221B     	LD	HL,IDMSG0		;'Track/Side/Sec/Size/(CRC) TRACK ID field='
 3548 17B8  CD 192B     	CALL	PMSG
 3549 17BB  21 3928     	LD	HL,IDSV			;Point to where data was saved
 3550 17BE  06 04       	LD	B,4			;4+2 bytes in ID
 3551 17C0  7E          IDLOOP1:LD	A,(HL)
 3552 17C1  CD 19B1     	CALL	PACC			;Print [A] in ASCII
 3553 17C4  23          	INC	HL
 3554 17C5  05          	DEC	B
 3555 17C6  20 F8       	JR	NZ,IDLOOP1
 3556 17C8  0E 20       	LD	C,' '
 3557 17CA  CD 011B     	CALL	CO
 3558 17CD  0E 28       	LD	C,'('
 3559 17CF  CD 011B     	CALL	CO
 3560 17D2  06 02       	LD	B,2
 3561 17D4  7E          IDLOOP5:LD	A,(HL)
 3562 17D5  CD 19B1     	CALL	PACC			;Print CRC value
 3563 17D8  23          	INC	HL
 3564 17D9  05          	DEC	B
 3565 17DA  20 F8       	JR	NZ,IDLOOP5
 3566 17DC  0E 29       	LD	C,')'
 3567 17DE  CD 011B     	CALL	CO
 3568 17E1  C9          	RET
 3569                   ;
 3570                   ;
 3571                   ; Display Bits of Versafloppy II Status Port
 3572                   ; Return with bits in [A]
 3573                   ;
 3574 17E2              SHOW_STAT_BITS:
 3575 17E2  21 280E     	LD	HL,STATUS_179x
 3576 17E5  CD 192B     	CALL	PMSG
 3577 17E8  DB 64       	IN	A,(STATUS)
 3578 17EA  CD 19CF     	CALL	ZBITS			;display bit pattern of [A]
 3579 17ED  C9          	RET				;Will return with error in [A]
 3580                   ;
 3581                   ; Check to see if disk is write protected
 3582                   ; Z if not protected, NZ if write protected
 3583                   ;
 3584 17EE              CHECK_WP:
 3585 17EE  DB 64       	IN	A,(STATUS)		;Remember data is inverted
 3586 17F0  CB 77       	BIT	6,A
 3587 17F2  C8          	RET	Z
 3588 17F3  21 29BC     	LD	HL,DISK_WP_MSG		;This disk is currently write protected
 3589 17F6  CD 192B     	CALL	PMSG
 3590 17F9  AF          	XOR	A,A
 3591 17FA  3D          	DEC	A
 3592 17FB  C9          	RET				;Will return with error in [A]
 3593                   ;
 3594                   ;
 3595                   ;
 3596                   ;--------------------- DISPLAY SECTOR DATA CONTENTS -------------------------
 3597                   ;Display the Sector read from disk to RAM location at (TADDR)
 3598 17FC              SEC_DISPLAY:
 3599 17FC  3A 3927     	LD	A,(CRTDISP)	;Do we have the more detail display option on
 3600 17FF  B7          	OR	A,A
 3601 1800  C8          	RET	Z		;If not just return
 3602 1801  F5          	PUSH	AF
 3603 1802  C5          	PUSH	BC
 3604 1803  D5          	PUSH	DE
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  63
VF      Z80

 3605 1804  E5          	PUSH	HL
 3606 1805  21 2553     	LD	HL,SEC_MSG
 3607 1808  CD 192B     	CALL	PMSG
 3608 180B  2A 0040     	LD	HL,(TADDR)	;Move Transfer address into HL
 3609 180E  DD 7E 09    	LD	A,(IX+SIZE)	;Get sector size
 3610 1811  B7          	OR	A,A
 3611 1812  11 0080     	LD	DE,NBYTES	;128 byte sectors
 3612 1815  28 11       	JR	Z,DISP1
 3613 1817  FE 01       	CP	A,1
 3614 1819  11 0100     	LD	DE,NBYTES*2	;256 byte sectors
 3615 181C  28 0A       	JR	Z,DISP1
 3616 181E  FE 02       	CP	A,2
 3617 1820  11 0200     	LD	DE,NBYTES*4	;512 byte sectors
 3618 1823  28 03       	JR	Z,DISP1
 3619 1825  11 0400     	LD	DE,NBYTES*8	;Must be 1024 byte sectors
 3620                   
 3621 1828  7B          DISP1:	LD	A,E
 3622 1829  E6 3F       	AND	A,00111111B	;64 characters /line
 3623 182B  20 03       	JR	NZ,NOCR
 3624 182D  CD 1948     	CALL	ZCRLF
 3625 1830  7E          NOCR:	LD	A,(HL)
 3626 1831  E6 7F       	AND	A,7FH
 3627 1833  FE 20       	CP	' ' 		;FILTER OUT CONTROL CHARACTERS'
 3628 1835  30 02       	JR	NC,T33
 3629 1837  3E 2E       T22:	LD	A,'.'
 3630 1839  FE 7C       T33:	CP	A,07CH
 3631 183B  30 FA       	JR	NC,T22
 3632 183D  4F          	LD	C,A	
 3633 183E  CD 011B     	CALL	CO
 3634 1841  23          	INC	HL
 3635 1842  1B          	DEC	DE		;Decrease DE count by 1
 3636 1843  7B          	LD	A,E
 3637 1844  B7          	OR	A,A		;Not XX00 at least
 3638 1845  20 E1       	JR	NZ,DISP1
 3639 1847  B2          	OR	A,D		
 3640 1848  20 DE       	JR	NZ,DISP1	;Not 0000
 3641 184A  CD 1948     	CALL	ZCRLF
 3642 184D  E1          NODISP:	POP	HL
 3643 184E  D1          	POP	DE
 3644 184F  C1          	POP	BC
 3645 1850  F1          	POP	AF
 3646 1851  C9          	RET
 3647                   ;
 3648                   ;------------ SHOW DETAILS OF RAW SECTOR IMAGE FOR TRACK WRITE -------------
 3649 1852              FORMAT_INFO:
 3650 1852  F5          	PUSH	AF		;Save everything since track formating uses all
 3651 1853  C5          	PUSH	BC
 3652 1854  D5          	PUSH	DE
 3653 1855  E5          	PUSH	HL
 3654 1856  21 262C     	LD	HL,FORM_TRK	;Formatting track...
 3655 1859  CD 192B     	CALL	PMSG
 3656 185C  FD 7E 00    	LD	A,(IY+TRK)
 3657 185F  CD 19B1     	CALL	PACC
 3658                   ;
 3659 1862  DD CB 02 66 	BIT	4,(IX+HW_BYTE)	;Is it a 1 or 2 sided disk
 3660 1866  28 10       	JR	Z,NO_SIDESF	;If 1 sided then skip sides info
 3661 1868  FD 7E 01    	LD	A,(IY+SIDE)
 3662 186B  B7          	OR	A,A		;If 0 we have done A side now do B
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  64
VF      Z80

 3663 186C  20 05       	JR	NZ,B_SIDEF	;is B side
 3664 186E  21 2529     	LD	HL,HEAD0_MSG
 3665 1871  18 08       	JR	SEC_INFO1
 3666 1873  21 2533     B_SIDEF:LD	HL,HEAD1_MSG
 3667 1876  18 03       	JR	SEC_INFO1
 3668 1878              NO_SIDESF:
 3669 1878  21 253D     	LD	HL,H_MSG	;H.
 3670 187B              SEC_INFO1:
 3671 187B  CD 192B     	CALL	PMSG
 3672 187E  3A 3927     	LD	A,(CRTDISP)	;Do we have the more detail display option on
 3673 1881  B7          	OR	A,A
 3674 1882  CA 1926     	JP	Z,NO_TDISPLAY	;If Z do not list the sector contents.
 3675                   
 3676                   				;OK we are going to step along the image one
 3677                   				;section at a time. Key locations were stored 
 3678                   				;previously in the SCTRIM: routine.  
 3679 1885  21 2640     	LD	HL,TRACK_MSG	
 3680 1888  CD 192B     	CALL	PMSG
 3681 188B  11 5000     	LD	DE,FBUFFER	;Move Start of track image into DE
 3682 188E  D5          	PUSH	DE		;save it
 3683 188F  2A 3941     	LD	HL,(INDEX_MARK)	;End+1 of track header
 3684 1892  2B          	DEC	HL
 3685 1893  ED 52       	SBC	HL,DE
 3686 1895  EB          	EX	DE,HL		;Count now in DE
 3687 1896  E1          	POP	HL		;DE on stack to HL
 3688 1897  7E          HDRX:	LD	A,(HL)
 3689 1898  CD 19B1     	CALL	PACC		;Print out HEX values of HEADER Field
 3690 189B  23          	INC	HL		
 3691 189C  1B          	DEC	DE		;Decrease DE count by 1
 3692 189D  7B          	LD	A,E
 3693 189E  B7          	OR	A,A		;Not XX00 at least
 3694 189F  20 F6       	JR	NZ,HDRX
 3695 18A1  B2          	OR	A,D		
 3696 18A2  20 F3       	JR	NZ,HDRX		;Not 0000
 3697                   
 3698                   				;Now display the FIRST sector ID field area
 3699 18A4  21 2672     	LD	HL,SECTOR_MSG	
 3700 18A7  CD 192B     	CALL	PMSG
 3701 18AA  ED 5B 3941  	LD	DE,(INDEX_MARK)		;Move Start of sector image into DE
 3702 18AE  D5          	PUSH	DE			;save it
 3703 18AF  2A 3943     	LD	HL,(S_DATA_MARK)	;End+1 of sec ID field (allow the +1 to capture the FB byte)
 3704 18B2  ED 52       	SBC	HL,DE
 3705 18B4  EB          	EX	DE,HL		;Count now in DE
 3706 18B5  E1          	POP	HL		;DE on stack to HL
 3707 18B6  7E          HSECX:	LD	A,(HL)
 3708 18B7  CD 19B1     	CALL	PACC		;Print out HEX values of 1st Sector ID Field
 3709 18BA  23          	INC	HL		
 3710 18BB  1B          	DEC	DE		;Decrease DE count by 1
 3711 18BC  7B          	LD	A,E
 3712 18BD  B7          	OR	A,A		;Not XX00 at least
 3713 18BE  20 F6       	JR	NZ,HSECX
 3714 18C0  B2          	OR	A,D		
 3715 18C1  20 F3       	JR	NZ,HSECX	;Not 0000
 3716                   
 3717                   				;Now display the FIRST sector DATA field area
 3718 18C3  21 2687     	LD	HL,SEC_DATA_MSG	
 3719 18C6  CD 192B     	CALL	PMSG
 3720 18C9  ED 5B 3943  	LD	DE,(S_DATA_MARK)	;Move Start of sector image into DE
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  65
VF      Z80

 3721 18CD  D5          	PUSH	DE			;save it
 3722 18CE  2A 3945     	LD	HL,(E_DATA_MARK)	;End+1 of DATA field
 3723 18D1  2B          	DEC	HL
 3724 18D2  ED 52       	SBC	HL,DE
 3725 18D4  EB          	EX	DE,HL		;Count now in DE
 3726 18D5  E1          	POP	HL		;DE on stack to HL
 3727 18D6  7E          HDATAX:	LD	A,(HL)
 3728 18D7  CD 19B1     	CALL	PACC		;Print out HEX values of 1st Sector DATA Field
 3729 18DA  23          	INC	HL		
 3730 18DB  1B          	DEC	DE		;Decrease DE count by 1
 3731 18DC  7B          	LD	A,E
 3732 18DD  B7          	OR	A,A		;Not XX00 at least
 3733 18DE  20 F6       	JR	NZ,HDATAX
 3734 18E0  B2          	OR	A,D		
 3735 18E1  20 F3       	JR	NZ,HDATAX	;Not 0000
 3736                   
 3737                   				;Now display the FIRST sector GAP3 field area
 3738 18E3  21 269E     	LD	HL,SEC_GAP3_MSG	
 3739 18E6  CD 192B     	CALL	PMSG
 3740 18E9  ED 5B 3945  	LD	DE,(E_DATA_MARK)	;Move Start of sector image into DE
 3741 18ED  D5          	PUSH	DE			;save it
 3742 18EE  2A 3947     	LD	HL,(E_SEC_MARK)		;End+1 of GAP3 field
 3743 18F1  2B          	DEC	HL
 3744 18F2  ED 52       	SBC	HL,DE
 3745 18F4  EB          	EX	DE,HL		;Count now in DE
 3746 18F5  E1          	POP	HL		;DE on stack to HL
 3747 18F6  7E          HGAP3X:	LD	A,(HL)
 3748 18F7  CD 19B1     	CALL	PACC		;Print out HEX values of 1st Sector GAP3 Field
 3749 18FA  23          	INC	HL		
 3750 18FB  1B          	DEC	DE		;Decrease DE count by 1
 3751 18FC  7B          	LD	A,E
 3752 18FD  B7          	OR	A,A		;Not XX00 at least
 3753 18FE  20 F6       	JR	NZ,HGAP3X
 3754 1900  B2          	OR	A,D		
 3755 1901  20 F3       	JR	NZ,HGAP3X	;Not 0000
 3756                   
 3757                   				;Now display the Track GAP4 field area
 3758 1903  21 26B5     	LD	HL,SEC_GAP4_MSG	
 3759 1906  CD 192B     	CALL	PMSG
 3760 1909  ED 5B 3949  	LD	DE,(S_GAP4_MARK)	;Start of sector GAP4 into DE
 3761 190D  D5          	PUSH	DE		;save it
 3762 190E  2A 394B     	LD	HL,(E_GAP4_MARK)	;End+1 of GAP3 field
 3763 1911  2B          	DEC	HL
 3764 1912  ED 52       	SBC	HL,DE
 3765 1914  EB          	EX	DE,HL		;Count now in DE
 3766 1915  E1          	POP	HL		;DE on stack to HL
 3767 1916  7E          HGAP4X:	LD	A,(HL)
 3768 1917  CD 19B1     	CALL	PACC		;Print out HEX values of 1st Sector GAP3 Field
 3769 191A  23          	INC	HL		
 3770 191B  1B          	DEC	DE		;Decrease DE count by 1
 3771 191C  7B          	LD	A,E
 3772 191D  B7          	OR	A,A		;Not XX00 at least
 3773 191E  20 F6       	JR	NZ,HGAP4X
 3774 1920  B2          	OR	A,D
 3775 1921  20 F3       	JR	NZ,HGAP4X	;Not 0000
 3776 1923  CD 1948     	CALL	ZCRLF
 3777                   ;
 3778 1926              NO_TDISPLAY:
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  66
VF      Z80

 3779 1926  E1          	POP	HL
 3780 1927  D1          	POP	DE
 3781 1928  C1          	POP	BC
 3782 1929  F1          	POP	AF
 3783 192A  C9          	RET
 3784                   ;
 3785                   ;
 3786                   ;====================== SUPPORT ROUTINES ==================================
 3787                   ;
 3788 192B  7E          PMSG:	LD	A,(HL)		;PRINT MESSAGE STRING in [HL] up to 0
 3789 192C  B7          	OR	A
 3790 192D  C8          	RET	Z
 3791 192E  4F          	LD	C,A
 3792 192F  CD 011B     	CALL	CO
 3793 1932  23          	INC	HL
 3794 1933  C3 192B     	JP	PMSG
 3795                   ;
 3796 1936  CD 0112     GETCMD:	CALL	CI		;GET A CHARACTER, convert to UC, ECHO it
 3797 1939  CD 1957     	CALL	UCASE
 3798 193C  FE 1B       	CP	A,ESC
 3799 193E  C8          	RET	Z		;Don't echo an ESC
 3800 193F  F5          	PUSH	AF		;Save it
 3801 1940  C5          	PUSH	BC
 3802 1941  4F          	LD	C,A
 3803 1942  CD 011B     	CALL	CO		;Echo it
 3804 1945  C1          	POP	BC
 3805 1946  F1          	POP	AF		;get it back
 3806 1947  C9          	RET
 3807                   
 3808 1948  F5          ZCRLF:	PUSH	AF		;Send CR/LF to CRT
 3809 1949  C5          	PUSH	BC
 3810 194A  0E 0D       	LD	C,CR
 3811 194C  CD 011B     	CALL	CO
 3812 194F  0E 0A       	LD	C,LF
 3813 1951  CD 011B     	CALL	CO
 3814 1954  C1          	POP	BC
 3815 1955  F1          	POP	AF
 3816 1956  C9          	RET
 3817                   ;				;Convert LC to UC
 3818 1957  FE 61       UCASE:	CP	A,'a'		;must be >= lowercase a
 3819 1959  D8          	RET	C		; else go back...
 3820 195A  FE 7B       	CP	A,'z'+1		;must be <= lowercase z
 3821 195C  D0          	RET	NC		; else go back...
 3822 195D  D6 20       	SUB	A,'a'-'A'	;subtract lowercase bias
 3823 195F  C9          	RET
 3824                   ;
 3825                   ;
 3826                   ; Return with 2 HEX digits in [A]. If abort, Carry flag set + ESC in [A]
 3827 1960              GET_HEX:
 3828 1960  C5          	PUSH	BC			
 3829 1961  CD 1936     	CALL	GETCMD		;Get a character from keyboard & ECHO
 3830 1964  FE 1B       	CP	A,ESC
 3831 1966  28 2A       	JR	Z,HEX_ABORT
 3832 1968  FE 2F       	CP	'/'		;check 0-9, A-F
 3833 196A  38 26       	JR	C,HEX_ABORT
 3834 196C  FE 47       	CP	'F'+1
 3835 196E  30 22       	JR	NC,HEX_ABORT
 3836 1970  CD 19A9     	CALL	ASBIN		;Convert to binary
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  67
VF      Z80

 3837 1973  CB 27       	SLA	A
 3838 1975  CB 27       	SLA	A
 3839 1977  CB 27       	SLA	A
 3840 1979  CB 27       	SLA	A		;Shift to high nibble	
 3841 197B  47          	LD	B,A		;Store it
 3842 197C  CD 1936     	CALL	GETCMD		;Get 2nd character from keyboard & ECHO
 3843 197F  FE 1B       	CP	A,ESC
 3844 1981  28 0F       	JR	Z,HEX_ABORT
 3845 1983  FE 2F       	CP	'/'		;check 0-9, A-F
 3846 1985  38 0B       	JR	C,HEX_ABORT
 3847 1987  FE 47       	CP	'F'+1
 3848 1989  30 07       	JR	NC,HEX_ABORT
 3849 198B  CD 19A9     	CALL	ASBIN		;Convert to binary
 3850 198E  B0          	OR	A,B		;add in the first digit
 3851 198F  B7          	OR	A,A		;To return NC
 3852 1990  C1          	POP	BC
 3853 1991  C9          	RET
 3854 1992              HEX_ABORT:
 3855 1992  37          	SCF			;Set Carry flag 
 3856 1993  3E 1B       	LD	A,ESC
 3857 1995  C1          	POP	BC
 3858 1996  C9          	RET
 3859                   ;
 3860                   ;
 3861                   ; Put 4 HEX characters in [HL] (To set RAM location etc.)
 3862                   ;
 3863 1997              GET_HEX4:	
 3864 1997  26 00       	LD      H,0000H
 3865 1999  CD 1960     	CALL	GET_HEX		;get 2 HEX digits
 3866 199C  38 09       	JR	C,SCAN_ABORT
 3867 199E  67          	LD	H,A
 3868 199F  CD 1960     	CALL	GET_HEX		;get 2 more HEX digits
 3869 19A2  38 03       	JR	C,SCAN_ABORT
 3870 19A4  6F          	LD	L,A
 3871 19A5  B7          	OR	A,A		;To return NC
 3872 19A6  C9          	RET
 3873 19A7              SCAN_ABORT:
 3874 19A7  37          	SCF			;Set Carry flag 
 3875 19A8  C9          	RET
 3876                   
 3877                   ; ASCII TO BINARY CONVERSION ROUTINE
 3878 19A9  D6 30       ASBIN:	SUB	30H 
 3879 19AB  FE 0A       	CP	0AH 
 3880 19AD  F8          	RET	M
 3881 19AE  D6 07       	SUB	07H 
 3882 19B0  C9          	RET
 3883                   
 3884                   ;Print the acccumulator value on CRT in HEX-ASCII
 3885 19B1  F5          PACC:	PUSH	AF
 3886 19B2  C5          	PUSH	BC
 3887 19B3  F5          	PUSH	AF
 3888 19B4  0F          	RRCA
 3889 19B5  0F          	RRCA
 3890 19B6  0F          	RRCA
 3891 19B7  0F          	RRCA
 3892 19B8  CD 19C2     	CALL	ZCONV
 3893 19BB  F1          	POP	AF
 3894 19BC  CD 19C2     	CALL	ZCONV
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  68
VF      Z80

 3895 19BF  C1          	POP	BC
 3896 19C0  F1          	POP	AF
 3897 19C1  C9          	RET
 3898                   
 3899 19C2  E6 0F       ZCONV:	AND	A,0FH		;HEX to ASCII
 3900 19C4  C6 90       	ADD	90H
 3901 19C6  27          	DAA
 3902 19C7  CE 40       	ADC	40H
 3903 19C9  27          	DAA
 3904 19CA  4F          	LD	C,A
 3905 19CB  CD 011B     	CALL	CO
 3906 19CE  C9          	RET
 3907                   ;
 3908                   ;DISPLAY BIT PATTERN IN [A]
 3909                   ;
 3910 19CF  F5          ZBITS:	PUSH	AF
 3911 19D0  C5          	PUSH	BC
 3912 19D1  D5          	PUSH	DE
 3913 19D2  5F          	LD	E,A		
 3914 19D3  06 08       	LD	B,8
 3915 19D5  CB 23       BQ2:	SLA	E
 3916 19D7  3E 18       	LD	A,18H
 3917 19D9  8F          	ADC	A
 3918 19DA  4F          	LD	C,A
 3919 19DB  CD 011B     	CALL	CO
 3920 19DE  10 F5       	DJNZ	BQ2
 3921 19E0  D1          	POP	DE
 3922 19E1  C1          	POP	BC
 3923 19E2  F1          	POP	AF
 3924 19E3  C9          	RET
 3925                   ;
 3926                   ;
 3927                   ; CHECK IF AN ABORT (ESC) CHARACTER IS PRESENT AT THE CONSOL
 3928                   ; HOLD EVERYTHING IF SPACEBAR IS PRESSED
 3929                   ;
 3930 19E4              CHECKABORT:			;see if an abort is required
 3931 19E4  CD 010A     	CALL	CONST
 3932 19E7  C8          	RET	Z	
 3933 19E8  CD 0112     CHECK1:	CALL	CI
 3934 19EB  FE 1B       	CP	A,ESC		;ESC to abort
 3935 19ED  28 06       	JR	Z,CABORT
 3936 19EF  FE 20       	CP	A,' '		;If spacebar then freeze CRT display
 3937 19F1  28 F5       	JR	Z,CHECK1
 3938 19F3  AF          	XOR	A,A
 3939 19F4  C9          	RET
 3940 19F5  AF          CABORT:	XOR	A,A		;Was ESC, so return with NZ flag
 3941 19F6  3D          	DEC	A		;return NZ, & 0FFH in A if ESC there
 3942 19F7  C9          	RET
 3943                   ;
 3944                   ;
 3945                   ;
 3946                   ;---------- Debug Routines -----------------------------
 3947 19F8              DEBUG_A:			;Display contents of A of CRT
 3948 19F8  F5          	PUSH	AF
 3949 19F9  C5          	PUSH	BC
 3950 19FA  D5          	PUSH	DE
 3951 19FB  E5          	PUSH	HL
 3952 19FC  F5          	PUSH	AF
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  69
VF      Z80

 3953 19FD  0E 3E       	LD	C,'>'
 3954 19FF  CD 011B     	CALL	CO
 3955 1A02  F1          	POP	AF
 3956 1A03  CD 19B1     	CALL	PACC
 3957 1A06  0E 3C       	LD	C,'<'
 3958 1A08  CD 011B     	CALL	CO
 3959 1A0B  E1          	POP	HL
 3960 1A0C  D1          	POP	DE
 3961 1A0D  C1          	POP	BC
 3962 1A0E  F1          	POP	AF
 3963 1A0F  C9          	RET
 3964                   ;
 3965 1A10              DEBUG_B				;Display A on CRT wait for keyboard
 3966 1A10  CD 19F8     	CALL	DEBUG_A
 3967 1A13  F5          	PUSH	AF
 3968 1A14  CD 0112     	CALL	CI
 3969 1A17  F1          	POP	AF
 3970 1A18  C9          	RET
 3971                   ;
 3972 1A19              DEBUG_HL			;Display HL on CRT
 3973 1A19  F5          	PUSH	AF
 3974 1A1A  7C          	LD	A,H
 3975 1A1B  CD 19F8     	CALL	DEBUG_A
 3976 1A1E  7D          	LD	A,L
 3977 1A1F  CD 19F8     	CALL	DEBUG_A
 3978 1A22  F1          	POP	AF
 3979 1A23  C9          	RET 
 3980                   ;
 3981                   ;
 3982                   ;
 3983                   ;---------------------------------------------------------------------------
 3984                   ;
 3985 1A24  0D 0A 0A    SIGNON:		DB	CR,LF,LF
 3986         0001      	    if	CHIP_1795
 3987 1A27  56 65 72 73 		DB	'Versafloppy II (for 1795 chip) Diagnostic Program. '
 3988 1A5A  28 56 31 2E 		DB	'(V1.01 by John Monahan 2009)',CR,LF,0
 3989                   	     endif
 3990                   
 3991         0000      	    if	CHIP_1791
 3994                   	    endif
 3995                   
 3996 1A79  50 6C 65 61 GETDRV_MSG:	DB	'Please select a drive. (A,B,C or D): ',0
 3997                   	
 3998 1A9F  0D 0A 53 6F XXXDRV:		DB	CR,LF,	'Sorry that is an invalid drive',0
 3999 1AC0  0D 0A 49 73 GETSIZE_MSG:	DB	CR,LF,	'Is this a 5" or 8" Drive (5,8): ',0	
 4000 1AE3  0D 0A 0A 50 DISK_8_FORMATS:	DB	CR,LF,LF,'Possible 8" disk formats:-'
 4001 1B00  0D 0A 41 20 		DB	CR,LF,	'A = 128 Bytes/Sec, 26 Sec/Ttk. 8" SDSS. (IBM 3740 Format)'  
 4002 1B3B  0D 0A 42 20 		DB	CR,LF,	'B = 128 Bytes/Sec, 50 Sec/Ttk. 8" DDSS. (SD Systems 8" DD Format)'  
 4003 1B7E  0D 0A 43 20 		DB	CR,LF,	'C = 256 Bytes/Sec, 26 Sec/Ttk. 8" DDDS. (IBM System 34 Format)'  
 4004 1BBE  0D 0A 44 20 		DB	CR,LF,	'D = 512 Bytes/Sec, 15 Sec/Trk. 8" DDDS. '
 4005 1BE8  0D 0A 45 20 		DB	CR,LF,	'E = 1024 Bytes/Sec, 9 Sec/Trk. 8" DDSS. (For CPM3 System)'
 4006 1C23  0D 0A 46 20 		DB	CR,LF,	'F = 1024 Bytes/Sec, 9 Sec/Trk. 8" DDDS.'
 4007 1C4C  0D 0A 50 6C 		DB	CR,LF,	'Please select a disk format: ',0
 4008 1C6C  0D 0A 0A 50 DISK_5_FORMATS:	DB	CR,LF,LF,'Possible 5" disk formats:-'
 4009 1C89  0D 0A 41 20 		DB	CR,LF,	'A = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (CPM3 & IBM PC CPM-86 Format)'
 4010 1CCF  0D 0A 42 20 		DB	CR,LF,	'B = 128 Bytes/Sec, 18 Sec/Ttk. 5" SDSS. (SD Systems 5" SD Format)'  
 4011 1D12  0D 0A 43 20 		DB	CR,LF,	'C = 128 Bytes/Sec, 29 Sec/Ttk. 5" DDSS. (SD Systems 5" DD Format)'  
 4012 1D55  0D 0A 44 20 		DB	CR,LF,	'D = 512 Bytes/Sec, 9 Sec/Ttk. 5" DDDS. (DEC VT180 Format)'
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  70
VF      Z80

 4013 1D90  0D 0A 45 20 		DB	CR,LF,	'E = 256 Bytes/Sec, 16 Sec/Ttk. 5" DDDS. (TOSHIBA T-100 Format)'
 4014 1DD0  0D 0A 46 20 		DB	CR,LF,	'F = 128 Bytes/Sec, 18 Sec/Ttk. 5" SDDS. (CROMEMCO-SD CDOS Format)'
 4015 1E13  0D 0A 47 20 		DB	CR,LF,	'G = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDDS. (CROMEMCO-DD CDOS Format)'
 4016 1E56  0D 0A 48 20 		DB	CR,LF,	'H = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDDS. (EPSON QX-10 Format)'
 4017 1E94  0D 0A 49 20 		DB	CR,LF,	'I = 1024 Bytes/Sec, 5 Sec/Ttk. 5" DDDS. (MORROW MD3 Format)'
 4018 1ED1  0D 0A 4A 20 		DB	CR,LF,	'J = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (ZENITH Z-100 Format)'
 4019 1F0F  0D 0A 4B 20 		DB	CR,LF,	'K = 256 Bytes/Sec, 16 Sec/Ttk. 5" DDDS. (SUPERBRAIN QD Format)'
 4020 1F4F  0D 0A 4C 20 		DB	CR,LF,	'L = 512 Bytes/Sec, 8 Sec/Ttk. 5" DDDS. (IBM PC, MSDOS 1.1 Format)'
 4021 1F92  0D 0A 4D 20 		DB	CR,LF,	'M = 512 Bytes/Sec, 9 Sec/Ttk. 5" DDDS. (IBM PC, MSDOS 2.x Format)'
 4022 1FD5  0D 0A 4E 20 		DB	CR,LF,	'N = 512 Bytes/Sec, 10 Sec/Ttk. 5" DDSS. (TRS-80 MOD III Format)'
 4023 2016  0D 0A 50 6C 		DB	CR,LF,	'Please select a disk format: ',0
 4024 2036  0D 0A 53 6F OPTION_ERROR:	DB	CR,LF,	'Sorry invalid option',0
 4025 204D  0D 0A 53 65 SEC_COUNT_ERR	DB	CR,LF,	'Sector count error',0
 4026 2062  0D 0A 49 6E RAM_ERROR	DB	CR,LF,	'Invalid RAM location error',0
 4027                   
 4028 207F  0D 0A 0A 56 MAIN_MENU0:	DB	CR,LF,LF,'VERSAFLOPPY II DIAGNOSTICS ---- MAIN MENU ---- (Detail Display OFF)',0
 4029 20C6  0D 0A 0A 56 MAIN_MENU1:	DB	CR,LF,LF,'VERSAFLOPPY II DIAGNOSTICS ---- MAIN MENU ---- (Detail Display ON)',0
 4030 210C  0D 0A 43 75 DISK_INFO	DB	CR,LF,'Current drive:- ',0
 4031 211F  0D 0A 44 72 DISK_INFO0:	DB	CR,LF,'Drive ',0
 4032 2128  3A 20 28 49 DISK_INFO1:	DB		': (IOBYTE)=',0
 4033 2134  20 20 53 69 DISK_INFO2:	DB		'  Size=',0
 4034 213C  22 2C 20 44 DISK_INFO3:	DB		'", Double Sided,  ',0
 4035 214F  22 2C 20 53 DISK_INFO4:	DB		'", Single Sided,  ',0
 4036 2162  44 6F 75 62 DISK_INFO5:	DB		'Double Density disk.',0
 4037 2177  53 69 6E 67 DISK_INFO6:	DB		'Single Density disk.',0
 4038                   
 4039 218C  0D 0A 43 75 DISK_INFO7:	DB	CR,LF,	'Current Disk [IX] Table: Sec/Track=',0
 4040 21B2  48 2C 20 54 DISK_INFO8:	DB		'H, Tracks/Side=',0
 4041 21C2  48 2C 20 53 DISK_INFO9:	DB		'H, Sec Size=',0
 4042 21CF  48 2C 20 20 DISK_INFO10:	DB		'H,  128 Bytes/Sec.',0
 4043 21E2  48 2C 20 20 DISK_INFO11:	DB		'H,  256 Bytes/Sec.',0
 4044 21F5  48 2C 20 20 DISK_INFO12:	DB		'H,  512 Bytes/Sec.',0
 4045 2208  48 2C 20 31 DISK_INFO13:	DB		'H, 1024 Bytes/Sec.',0
 4046 221B  54 72 61 63 IDMSG0:		DB		'Track/Side/Sec/Size/(CRC) TRACK ID field= ',0
 4047                   
 4048 2246  0D 0A 0A 30 MENU_OPTIONS	DB	CR,LF,LF, '0 = Select a DRIVE/DISK to analyze'
 4049 226B  0D 0A 31 20 		DB	CR,LF,	'1 = Seek Test                    2 = Sequental Read Sector Test'
 4050 22AC  0D 0A 33 20 		DB	CR,LF,	'3 = Sequental Write Sector Test  4 = Sequental R/W Sector Test'
 4051 22EC  0D 0A 35 20 		DB	CR,LF,	'5 = Random Track/Sector R/W Test 6 = Continously Read sectors from a Track'
 4052 2338  0D 0A 37 20 		DB	CR,LF,	'7 = Examine one complet track    8 = Load disk sctors to RAM'
 4053 2376  0D 0A 39 20 		DB	CR,LF,	'9 = Write RAM to disk sectors    C = Copy current disk to another disk'
 4054 23BE  0D 0A 46 20 		DB	CR,LF,	'F = Format the current disk      S = Copy CPM system tracks from ' 
 4055 2401  61 6E 6F 74 		DB		'another disk.'
 4056 240E  0D 0A 56 20 		DB	CR,LF,	'V = Verify sectors disk to disk  I = Quick Format of 8" CPM SSSD Disk in B:',0
 4057                   
 4058 245C  0D 0A 44 20 MENU1_MSG:	DB	CR,LF,	'D = Turn ON detailed display.    ESC To return to CPM'
 4059 2493  0D 0A 50 6C 		DB	CR,LF,	'Please enter a command:- ',0
 4060                   
 4061 24AF  0D 0A 44 20 MENU2_MSG:	DB	CR,LF,	'D = Turn OFF detailed display.   ESC To return to CPM'
 4062 24E6  0D 0A 50 6C 		DB	CR,LF,	'Please enter a command:- ',0
 4063                   
 4064 2502  0D 0A 44 69 SEKMSG		DB	CR,LF,  'Disk seek test.',CR,LF,0
 4065 2516  20 54 52 41 ATTRK:		DB		' TRACK ',0
 4066 251E  48 2C 20 53 ATSEC:		DB		'H, SECTOR ',0
 4067 2529  48 2C 20 53 HEAD0_MSG	DB		'H, SIDE A',0
 4068 2533  48 2C 20 53 HEAD1_MSG	DB		'H, SIDE B',0
 4069 253D  48 2E 20 00 H_MSG		DB		'H. ',0
 4070 2541  20 53 49 44 ATHEAD0		DB		' SIDE A ',0 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  71
VF      Z80

 4071 254A  20 53 49 44 ATHEAD1		DB		' SIDE B ',0 
 4072 2553  0D 0A 53 65 SEC_MSG:	DB	CR,LF,	'Sector Contents=',0
 4073 2566  0D 0A 46 6F FORMATTING_MSG:	DB	CR,LF,	'Formating Disk.  Format= ',0
 4074 2582  0D 0A 07 49 BADCMD		DB	CR,LF,BELL, 'Invalid command selected.',0
 4075 259F  0D 0A 07 44 FORM_ERRMSG:	DB	CR,LF,BELL,'Disk formatting aborted or write error.',0
 4076 25CA  0D 0A 44 69 END_FORM_MSG:	DB	CR,LF,	'Disk has been formatted correctly. Each track is ',0
 4077 25FE  48 20 42 79 END_FORM1_MSG	DB	        'H Bytes long.',0
 4078 260C  0D 0A 53 6F CODE_NOT_DONE:	DB	CR,LF,	'Sorry Code not done yet. HALT',0
 4079 262C  0D 0A 46 6F FORM_TRK:	DB	CR,LF,	'Formatting TRACK ',0
 4080 2640  54 72 61 63 TRACK_MSG:	DB		'Track Image:- '
 4081 264E  0D 0A 49 6E 		DB	CR,LF,	'Index field up to First sector=',CR,LF,0
 4082 2672  0D 0A 53 65 SECTOR_MSG:	DB	CR,LF,	'Sector ID Field=',CR,LF,0
 4083 2687  0D 0A 53 65 SEC_DATA_MSG:	DB	CR,LF,	'Sector DATA Field=',CR,LF,0
 4084 269E  0D 0A 53 65 SEC_GAP3_MSG:	DB	CR,LF,	'Sector GAP3 Field=',CR,LF,0
 4085 26B5  0D 0A 45 6E SEC_GAP4_MSG:	DB	CR,LF,	'End of Track GAP4 Field=',CR,LF,0
 4086 26D2  0D 0A 50 6C GET_TRACK_MSG:	DB	CR,LF,	'Please enter track number. (Enter 2 HEX digits): ',0
 4087 2706  0D 0A 50 6C GET_SIDE_MSG:	DB	CR,LF,	'Please select Disk SIDE A or B (A,B): ',0
 4088 272F  0D 0A 07 49 SIDE_ERROR:	DB	CR,LF,BELL, 'Invalid SIDE selection',0
 4089 2749  0D 0A 50 6C GET_SEC_MSG:	DB	CR,LF,	'Please enter sector number. (Enter 2 HEX digits): ',0
 4090 277E  0D 0A 54 72 TRACK_CONTENTS:	DB	CR,LF,	'Track contents:-',CR,LF,0
 4091 2793  0D 0A 44 6F MORE_MSG:	DB	CR,LF,	'Do you wish to see more (Y/N): ',0
 4092 27B5  0D 0A 49 6E SEC_ERROR:	DB	CR,LF,	'Invalid sector number selection',0
 4093 27D7  0D 0A 47 41 GAP3_MSG:	DB	CR,LF,	'GAP3=',0
 4094 27DF  0D 0A 47 41 GAP1_MSG:	DB	CR,LF,	'GAP1=',0
 4095 27E7  0D 0A 53 65 ID_MSG:		DB	CR,LF,	'Sector ID Mark=',0
 4096 27F9  0D 0A 47 41 GAP2_MSG:	DB	CR,LF,	'GAP2=',0
 4097 2801  0D 0A 44 61 SYNC_MSG:	DB	CR,LF,	'Data Sync=',0
 4098 280E  0D 0A 53 74 STATUS_179x:	DB	CR,LF,	'Status Bits of 1791/5 Chip= ',0
 4099 282D  0D 0A 07 44 ENDMSG:		DB	CR,LF,BELL,'Disk has been formatted ',CR,LF,0
 4100 284B  0D 0A 07 53 ERRMSG:		DB	CR,LF,BELL,'SORRY COULD NOT SEEK NEXT TRACK',CR,LF,0
 4101 2870  0D 0A 07 54 TRACK_ERROR:	DB	CR,LF,BELL,'That track is out of range for this disk',0
 4102 289C  0D 0A 52 65 SEC_READ_RETRY:	DB	CR,LF,	'Re-reading SECTOR ',0
 4103 28B1  0D 0A 52 65 SEC_WR_RETRY:	DB	CR,LF,	'Re-writing SECTOR ',0
 4104 28C6  0D 0A 52 65 SEC_RH_RETRY	DB	CR,LF, 'Re-Seeking head for re-reading SECTOR ',0
 4105 28EF  0D 0A 52 65 SEC_WH_RETRY	DB	CR,LF, 'Re-Seeking head for re-writing SECTOR ',0
 4106 2918  0D 0A 07 53 SEC_V_ERROR	DB	CR,LF,BELL,'Sector Verify Error found -----',0
 4107 293B  0D 0A 53 65 RDTST_MSG	DB	CR,LF,	'Sequental Read Sectors Test',0
 4108 2959  0D 0A 53 65 WRTST_MSG	DB	CR,LF,	'Sequental Write Sectors Test',0
 4109 2978  0D 0A 53 65 RDWRTST_MSG	DB	CR,LF,	'Sequental R/W Sectors Test',0
 4110 2995  0D 0A 52 61 RAND_TST_MSG	DB	CR,LF,	'Random Track/Sector R/W Sectors Test',0
 4111 29BC  0D 0A 07 54 DISK_WP_MSG	DB	CR,LF,BELL, 'This disk is currently Write Protected.',0
 4112 29E7  0D 0A 53 70 INITCPM_MSG	DB	CR,LF,	'Special modification of first sector for CPM86 done.',0
 4113 2A1E  0D 0A 07 53 TRK_SIZE_ERR	DB	CR,LF,BELL, 'Size of track (TRK_SIZE) in the disk paramater table is invalid',0
 4114 2A61  0D 0A 4E 75 SEC_COUNT_MSG	DB	CR,LF,	'Number of sectors (Enter 2 HEX digits): ',0
 4115 2A8C  0D 0A 45 6E GET_DMA_MSG	DB	CR,LF,	'Enter RAM loaction to recieve the data (Enter 4 HEX digits): ',0
 4116 2ACC  0D 0A 45 6E GET_DMAD_MSG	DB	CR,LF,	'Enter RAM loaction of data to write (Enter 4 HEX digits): ',0
 4117 2B09  0D 0A 4C 6F LOADING_MSG:	DB	CR,LF,	'Loading data ',0
 4118 2B19  20 54 6F 20 LOADING1_MSG:	DB	' To RAM at ',0
 4119 2B25  0D 0A 07 45 ERR_TK_MSG:	DB	CR,LF,BELL, 'ERROR. Ran out of tracks!',0
 4120 2B42  0D 0A 44 61 LOAD_DONE_MSG:	DB	CR,LF,	'Data read correctly.',0
 4121 2B59  0D 0A 4C 6F TRK_DUMP_MSG	DB	CR,LF,	'Load a selected track from current disk into RAM',0
 4122 2B8C  0D 0A 4C 6F LOAD_MSG	DB	CR,LF,	'Load sector(s) from disk to RAM',0
 4123 2BAE  0D 0A 57 72 DUMP_MSG	DB	CR,LF,	'Write sector(s) to disk with data from RAM location.',0
 4124 2BE5  0D 0A 57 72 DUMPING_MSG:	DB	CR,LF,	'Writing data ',0
 4125 2BF5  20 46 72 6F DUMPING1_MSG:	DB	' From RAM at ',0
 4126 2C03  0D 0A 44 61 DUMP_DONE_MSG:	DB	CR,LF,	'Data written correctly.',0
 4127 2C1D  0D 0A 07 46 TIMEOUT_ERR:	DB	CR,LF,BELL,'Forced a 1791/5 chip RESET because the status port was hung up busy!'
 4128 2C64  0D 0A 43 68 		DB	CR,LF,	'Check hardware such as drive type, connections etc.',0
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  72
VF      Z80

 4129 2C9A  0D 0A 43 6F COPY_MSG:	DB	CR,LF,	'Copy current disk to another disk (Note: Disks MUST be same format).',0
 4130 2CE1  0D 0A 46 6F COPY2_MSG	DB	CR,LF,	'For the destination disk: ',0
 4131 2CFE  0D 0A 43 6F HOW_MANY_TRKS	DB	CR,LF,	'Copy just the System tracks or all tracks.  (S or A): ',0 
 4132 2D37  0D 0A 07 49 INVALID_TRK_CT	DB	CR,LF,BELL, 'Invalid track option.',0
 4133 2D50  0D 0A 44 69 COPYING_DONE	DB	CR,LF,	'Disk Copying done.',0
 4134 2D65  0D 0A 52 65 COPY_AT_TRK:	DB	CR,LF,	'Reading data from ',0
 4135 2D7A  20 57 72 69 WRITE_AT_TRK:	DB	' Writing data to ',0
 4136                   
 4137 2D8C  0D 0A 52 65 READ_AT_TRK:	DB	CR,LF,	'Reading ',0
 4138 2D97  20 56 65 72 VERIFY_AT_TRK:	DB		' Verify ',0
 4139 2DA0  0D 0A 44 69 VERIFY_DONE	DB	CR,LF,	'Disk verifying done',0
 4140 2DB6  0D 0A 53 65 VERIFY_MSG	DB	CR,LF,	'Sector by Sector verifying of two disks',0
 4141 2DE0  0D 0A 46 6F VERIFY2_MSG	DB	CR,LF,	'For the second disk: ',0
 4142 2DF8  29 00       CLOSE_BRACKET:	DB		')',0
 4143 2DFA  0D 0A 07 55 UNKNOWN_ERROR:	DB	CR,LF,BELL,'Unknown Error. Status Bits= (',0
 4144 2E1B  0D 0A 57 69 SYS_COPY_MSG:	DB	CR,LF,	'Will copy CPM system tracks FROM another disk and ' 
 4145 2E4F  77 72 69 74 		DB		'write it TO the current disk',0
 4146 2E6C  0D 0A 53 6F SYS_COPY_MSG1:	DB	CR,LF,	'Source disk for CPM system tracks:',0
 4147 2E91  0D 0A 43 6F COPY_SYS_TRK	DB	CR,LF,	'Copying CPM from ',0
 4148 2EA5  20 57 72 69 WRITE_SYS_TRK	DB		' Writing CPM to ',0
 4149 2EB6  0D 0A 43 50 DONE_SYS_MSG	DB	CR,LF,	'CPM System tracks copied OK.',0
 4150 2ED5  0D 0A 51 75 IBM_FORMAT	DB	CR,LF,	'Quick formatting of a blank SSSD 8" IBM disk in B: drive for CPM.',0
 4151 2F19  0D 0A 46 6F IBM_FORMAT1	DB	CR,LF,	'Formatting in progress',CR,LF,0
 4152 2F34  0D 0A 44 69 END_FORM_MSG1:	DB	CR,LF,	'Disk has been formatted as a SSSD 8" disk (IBM 3740 Format).',0
 4153 2F73  0D 0A 0A 07 ERRORS_SEEN:	DB	CR,LF,LF,BELL, 'Errors encountered. Format not reliable',0
 4154 2F9F  0D 0A 44 6F COPY_SYSTRKS	DB	CR,LF,	'Do you wish to copy CPM from the system tracks of drive A:'
 4155 2FDB  0D 0A 4E 6F 		DB	CR,LF,	'Note: It must be on an IBM 3740 formatted disk. (Y/N)',0
 4156 3013  0D 0A 43 6F COPYING_CPM	DB	CR,LF,	'Copying CPM from system tracks of Drive A:',0
 4157 3040  0D 0A 44 69 END_FORM_MSG2:	DB	CR,LF,	'Disk B: has been formatted and CPM system installed on it correctly.',0
 4158 3087  0D 41 74 20 FORM_TRK_MSG	DB	CR,	'At Track ',0
 4159 3092  0D 0A 0A 07 BAD_COPY_MSG	DB	CR,LF,LF,BELL, 'Errors encountered during disk copying. Copy may not be valid',0
 4160                   ;
 4161                   ;
 4162                   ;	
 4163 30D4  0D 0A 07 53 SEC_READ_ERROR: DB	CR,LF,BELL,'SEC READ Error.'
 4164 30E6  20 42 69 74 		DB	' Bits: DNR,0,Record Type,RNF,'
 4165 3103  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4166                   
 4167 3117  0D 0A 07 53 SEEKNV_ERROR:	DB	CR,LF,BELL,'SEEK (NV) Error.'
 4168 312A  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4169 3142  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4170                   
 4171 3158  0D 0A 07 52 RSCMD_ERROR:	DB	CR,LF,BELL,'RESTORE Error.'
 4172 3169  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4173 3181  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4174                   
 4175 3197  0D 0A 07 53 SEC_ID_ERROR:	DB	CR,LF,BELL,'SEC ID Error.'
 4176 31A7  20 42 69 74 		DB	' Bits: DNR,0,0,RNF,'
 4177 31BA  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4178                   
 4179 31CE  0D 0A 07 53 SKCMD_ERROR:	DB	CR,LF,BELL,'SEEK Error.'
 4180 31DC  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4181 31F4  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4182                   
 4183 320A  0D 0A 07 53 STEPIN_ERROR:	DB	CR,LF,BELL,'STEP-IN Error.'
 4184 321B  20 42 69 74 		DB	' Bits: DNR,WP,Head,Seek,'
 4185 3233  43 52 43 2C 		DB	'CRC,TRK0,INDEX,Busy (',0
 4186                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  73
VF      Z80

 4187 3249  0D 0A 07 54 RDTCMD_ERROR:	DB	CR,LF,BELL,'TRACK Read Error.'
 4188 325D  20 42 69 74 		DB	' Bits: DNR,0,0,0,'
 4189 326E  30 2C 44 41 		DB	'0,DATA,DRQ,Busy (',0
 4190                   
 4191 3280  0D 0A 07 54 WRTCMD_ERROR:	DB	CR,LF,BELL,'TRACK Write Error.'
 4192 3295  20 42 69 74 		DB	' Bits: DNR,WP,WF,0,'
 4193 32A8  30 2C 44 41 		DB	'0,DATA,DRQ,Busy (',0
 4194                   
 4195 32BA  0D 0A 07 53 WRCMD_ERROR:	DB	CR,LF,BELL,'SEC WRITE Error.'
 4196 32CD  20 42 69 74 		DB	' Bits: DNR,WP,WF,0,'
 4197 32E0  43 52 43 2C 		DB	'CRC,DATA,DRQ,Busy (',0
 4198                   ;
 4199                   ;
 4200                   ;---------------------------------------------------------------------------------------------------
 4201                   ;
 4202                   ;	LOOKUP TABLES OF DISK PARAMETERS
 4203                   ;
 4204                   ;	8" SINGLE DENSITY DRIVE VARIABLES (IBM 3740 Format)
 4205 32F4  1A          STDSDT:	DB	26		;SECTORS PER TRACK
 4206 32F5  4D          	DB	77		;TRACKS PER SIDE
 4207 32F6  00          	DB	00000000B	;Disk HW_BYTE (SDSS)
 4208 32F7  28          	DB	40		;HEADER GAP (SD-Systems has 100-27, IBM is 40!)
 4209 32F8  06          	DB	6		;GAP 1 (0's)
 4210 32F9  0B          	DB	11		;GAP 2 (FF's)
 4211 32FA  1B          	DB	27		;GAP 3 (FF's)
 4212 32FB  F7          	DB	247		;GAP 4 (FF's)
 4213 32FC  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4214 32FD  00          	DB	0		;128 Bytes/sec
 4215 32FE  FF          	DB	0FFH		;GAP Format fill character
 4216 32FF  E5          	DB	0E5H		;Data area fill character
 4217 3300  1423        	DW	1423H		;Size in bytes of 1 formatted track
 4218 3302  00          	DB     	0H     	       	;No special post format
 4219 3303  332B        	DW	SKEW_IBM	;Location of this disks sector skew table
 4220 3305  01          	DB	1H		;Each format will have a unique number. For disk to disk copy
 4221 3306  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4222 3307  38 22 20 53 	DB	'8" SINGLE DENSITY (IBM 3740 Format)',0
 4223 332B              SKEW_IBM:
 4224 332B  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4225 333A  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH
 4226                   
 4227                   
 4228                   ;	8" DOUBLE DENSITY (128 BYTE SECTORS)
 4229 3345  32          STDDDT:	DB	50		;SECTORS PER TRACK
 4230 3346  4D          	DB	77		;TRACKS PER SIDE
 4231 3347  40          	DB	01000000B	;Disk HW_BYTE  (DDSS)
 4232 3348  50          	DB	80		;HEADER GAP (SD-Systems has 100-16, IBM is 80!)
 4233 3349  08          	DB	8		;GAP 1 (4E's) 
 4234 334A  16          	DB	22		;GAP 2 (4E's)
 4235 334B  10          	DB	16		;GAP 3 (4E's)
 4236 334C  C7          	DB	199		;GAP 4 (4E's) (X3 = 597)
 4237 334D  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4238 334E  00          	DB	0		;128 Bytes/sec
 4239 334F  4E          	DB	4EH		;GAP Format fill character
 4240 3350  E5          	DB	0E5H		;Data area fill character
 4241 3351  29A0        	DW	29A0H		;Size in bytes of 1 formatted track
 4242 3353  00          	DB	0H		;No special post formating modifications of disk req
 4243 3354  337E        	DW	SKEW_SDT	;Location of this disks sector skew table
 4244 3356  02          	DB	2H		;Each format will have a unique number. For disk to disk copy
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  74
VF      Z80

 4245 3357  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4246 3358  38 22 20 44 	DB	'8" DOUBLE DENSITY (SD_Systems Format)',0
 4247 337E              SKEW_SDT:
 4248 337E  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4249 338D  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH,1BH,1CH,1DH,1EH,1FH
 4250 339D  20 21 22 23 	db	20H,21H,22H,23H,24H,25H,26H,27H,28H,29H,2AH,2BH,2CH,2DH,2EH,2FH
 4251 33AD  30 31 32    	db	30H,31H,32H
 4252                   
 4253                   ;
 4254                   ;	8" DOUBLE DENSITY (256 BYTE SECTORS) (IBM System 34 Format)
 4255 33B0  1A          DDT256:	DB	26		;NBR SECTORS PER TRACK
 4256 33B1  4D          	DB	77		;NBR TRACKS PER SIDE
 4257 33B2  50          	DB	01010000B	;Disk HW_BYTE (DDDS)
 4258 33B3  50          	DB	80		;HEADER GAP (SD-Systems has 100-54, IBM is 80!)
 4259 33B4  0C          	DB	12		;GAP 1
 4260 33B5  16          	DB	22		;GAP 2
 4261 33B6  36          	DB	54		;GAP 3
 4262 33B7  C7          	DB	199		;GAP 4 (4E's) (X3 = 597)
 4263 33B8  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4264 33B9  01          	DB	1		;256 Bytes/sec
 4265 33BA  4E          	DB	4EH		;GAP Format fill character
 4266 33BB  E5          	DB	0E5H		;Data area fill character
 4267 33BC  28EC        	DW	28ECH		;Size in bytes of 1 formatted track
 4268 33BE  00          	DB	0H		;No special post formating modifications of disk req
 4269 33BF  33F3        	DW	SKEW_256	;Location of this disks sector skew table
 4270 33C1  03          	DB	3H		;Each format will have a unique number. For disk to disk copy
 4271 33C2  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4272 33C3  38 22 20 44 	DB	'8" DD (256 BYTE SECTORS) (IBM System 34 Format)',0
 4273 33F3              SKEW_256:
 4274 33F3  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4275 3402  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH
 4276                   
 4277                   ;
 4278                   ;	8" DOUBLE DENSITY (512 BYTE SECTORS) 
 4279 340D  0F          DDT512:	DB	15		;NBR SECTORS PER TRACK
 4280 340E  4D          	DB	77		;NBR TRACKS PER SIDE
 4281 340F  50          	DB	01010000B	;Disk HW_BYTE (DDDS)
 4282 3410  50          	DB	80		;HEADER GAP (SD-Systems has 100-54, IBM is 80!)
 4283 3411  0C          	DB	12		;GAP 1
 4284 3412  16          	DB	22		;GAP 2
 4285 3413  54          	DB	84		;GAP 3
 4286 3414  C8          	DB	200		;GAP 4 (4E's) (X3 = 597)
 4287 3415  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4288 3416  02          	DB	2		;512 Bytes/sec
 4289 3417  4E          	DB	4EH		;GAP Format fill character
 4290 3418  E5          	DB	0E5H		;Data area fill character
 4291 3419  0000        	DW	0H		;Size in bytes of 1 formatted track
 4292 341B  00          	DB	0H		;No special post formating modifications of disk req
 4293 341C  343B        	DW	SKEW_512	;Location of this disks sector skew table
 4294 341E  04          	DB	4H		;Each format will have a unique number. For disk to disk copy
 4295 341F  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4296 3420  38 22 20 44 	DB	'8" DDDS (512 BYTE SECTORS)',0
 4297 343B              SKEW_512:
 4298 343B  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4299                   
 4300                   
 4301                   ;
 4302                   ;	8" DOUBLE DENSITY (1024 BYTE SECTORS - Single Sided) 
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  75
VF      Z80

 4303 344A  09          DDT1K:	DB	9		;NBR SECTORS PER TRACK
 4304 344B  4D          	DB	77		;NBR TRACKS PER SIDE
 4305 344C  40          	DB	01000000B	;Disk HW_BYTE (DDDS) ;
 4306 344D  50          	DB	80		;INDEX HEADER GAP
 4307 344E  0C          	DB	12		;NBR GAP 1
 4308 344F  16          	DB	22		;NBR GAP 2
 4309 3450  36          	DB	54		;NBR GAP 3
 4310 3451  C7          	DB	199		;GAP 4 
 4311 3452  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4312 3453  03          	DB	3		;1024 Bytes/sec
 4313 3454  4E          	DB	4EH		;GAP Format fill character
 4314 3455  E5          	DB	0E5H		;Data area fill character
 4315 3456  2B5A        	DW	2B5AH		;Size in bytes of 1 formatted track
 4316 3458  00          	DB	0H		;No special post formating modifications of disk req
 4317 3459  3491        	DW	SKEW_1K		;Location of this disks sector skew table
 4318 345B  05          	DB	5H		;Each format will have a unique number. For disk to disk copy
 4319 345C  01          	DB	1		;Tracks set aside for operating system (eg CPM 2)
 4320 345D  38 22 20 44 	DB	'8" DOUBLE DENSITY, SINGLE SIDED (1024 BYTE SECTORS)',0 
 4321 3491              SKEW_1K:
 4322 3491  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4323                   ;
 4324                   ;	8" DOUBLE DENSITY (1024 BYTE SECTORS - Double Sided)
 4325 349A  09          DDT1K2:	DB	9		;NBR SECTORS PER TRACK
 4326 349B  4D          	DB	77		;NBR TRACKS PER SIDE
 4327 349C  50          	DB	01010000B	;Disk HW_BYTE (DDDS) ;
 4328 349D  50          	DB	80		;INDEX HEADER GAP
 4329 349E  0C          	DB	12		;NBR GAP 1
 4330 349F  16          	DB	22		;NBR GAP 2
 4331 34A0  36          	DB	54		;NBR GAP 3
 4332 34A1  C7          	DB	199		;GAP 4 
 4333 34A2  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4334 34A3  03          	DB	3		;1024 Bytes/sec
 4335 34A4  4E          	DB	4EH		;GAP Format fill character
 4336 34A5  E5          	DB	0E5H		;Data area fill character
 4337 34A6  2B5A        	DW	2B5AH		;Size in bytes of 1 formatted track
 4338 34A8  00          	DB	0H		;No special post formating modifications of disk req
 4339 34A9  34E1        	DW	SKEW_1KDS	;Location of this disks sector skew table
 4340 34AB  06          	DB	6H		;Each format will have a unique number. For disk to disk copy
 4341 34AC  01          	DB	1		;Tracks set aside for operating system (eg CPM 2)
 4342 34AD  38 22 20 44 	DB	'8" DOUBLE DENSITY, DOUBLE SIDED (1024 BYTE SECTORS)',0 
 4343 34E1              SKEW_1KDS:
 4344 34E1  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4345                   
 4346                   ;
 4347                   ;	
 4348                   ; 5", 128 byte, SD SD-Systems Format
 4349 34EA  12          MINSDT: DB	18		;sectors per track
 4350 34EB  23          	DB	35		;tracks per side
 4351 34EC  20          	DB	00100000B	;Disk HW_BYTE (SDSS)
 4352 34ED  0C          	DB	20-8		;index header gap
 4353 34EE  06          	DB	6		;GAP 1
 4354 34EF  0B          	DB	11		;GAP 2
 4355 34F0  08          	DB	8		;GAP 3
 4356 34F1  DD          	DB	221		;GAP 4 (FF's)
 4357 34F2  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4358 34F3  00          	DB	0		;128 Bytes/sec
 4359 34F4  FF          	DB	0FFH		;GAP Format fill character
 4360 34F5  E5          	DB	0E5H		;Data area fill character
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  76
VF      Z80

 4361 34F6  0CC7        	DW	0CC7H		;Size in bytes of 1 formatted track
 4362 34F8  00          	DB	0H		;No special post formating modifications of disk req
 4363 34F9  3523        	DW	SKEW_MINSD	;Location of this disks sector skew table
 4364 34FB  07          	DB	7H		;Each format will have a unique number. For disk to disk copy
 4365 34FC  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4366 34FD  35 22 2C 20 	DB	'5", SDSS, 128 byte, SD-Systems Format',0
 4367 3523              SKEW_MINSD:
 4368 3523  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH,10H,11H
 4369                   
 4370                   ;
 4371                   ; 5", 128 byte, DD SD-Systems Format
 4372 3534  1D          MINDDT: DB	29		;sectors per track
 4373 3535  23          	DB	35		;tracks per side
 4374 3536  60          	DB	01100000B	;Disk HW_BYTE (DDSS)
 4375 3537  54          	DB	100-16		;index header gap
 4376 3538  08          	DB	8		;GAP 1
 4377 3539  16          	DB	22		;GAP 2
 4378 353A  10          	DB	16		;GAP 3
 4379 353B  F7          	DB	247		;GAP 4
 4380 353C  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4381 353D  00          	DB	0		;128 Bytes/sec
 4382 353E  4E          	DB	4EH		;GAP Format fill character
 4383 353F  E5          	DB	0E5H		;Data area fill character
 4384 3540  17C0        	DW	17C0H		;Size in bytes of 1 formatted track
 4385 3542  00          	DB	0H		;No special post formating modifications of disk req
 4386 3543  356D        	DW	SKEW_MINDD	;Location of this disks sector skew table
 4387 3545  08          	DB	8H		;Each format will have a unique number. For disk to disk copy
 4388 3546  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4389 3547  35 22 2C 20 	DB	'5", DDSS. 128 byte, SD-Systems Format',0
 4390 356D              SKEW_MINDD:
 4391 356D  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4392 357C  10 11 12 13 	db	10H,11H,12H,13H,14H,15H,16H,17H,18H,19H,1AH,1BH,1CH
 4393                   
 4394                   ;
 4395                   ; 5", 512 byte, DDDS, 8 sector IBM PC CPM-86 format
 4396 3589  08          MINCPM: DB	8		;sectors per track
 4397 358A  28          	DB	40		;tracks per side
 4398 358B  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4399 358C  50          	DB	80		;index header gap
 4400 358D  0C          	DB	12		;GAP 1
 4401 358E  16          	DB	22		;GAP 2
 4402 358F  50          	DB	80		;GAP 3
 4403 3590  CF          	DB	207		;GAP 4 (4E's) (1038)
 4404 3591  05          	DB	5		;GAPR (Flag for multiple repeats of GAP4)
 4405 3592  02          	DB	2		;512 Bytes/sec
 4406 3593  4E          	DB	04EH		;GAP Format fill character
 4407 3594  E5          	DB	0E5H		;Data area fill character (for CPM86)
 4408 3595  19C0        	DW	19C0H		;Size in bytes of 1 formatted track
 4409 3597  01          	DB	CPM86_FLAG	;Special post formating modifications of disk req
 4410 3598  35CE        	DW	SKEW_CPM86	;Location of this disks sector skew table
 4411 359A  09          	DB	9H		;Each format will have a unique number. For disk to disk copy
 4412 359B  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4413 359C  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector IBM PC CPM-86 format',0
 4414 35CE              SKEW_CPM86:
 4415 35CE  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4416                   ;
 4417                   ;
 4418                   ; 5", 512 byte, DDDS, 9 sector DEC VT180 format
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  77
VF      Z80

 4419 35D6  09          DEC:	DB	9		;sectors per track
 4420 35D7  28          	DB	40		;tracks per side
 4421 35D8  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4422 35D9  50          	DB	80		;index header gap
 4423 35DA  0C          	DB	12		;GAP 1
 4424 35DB  16          	DB	22		;GAP 2
 4425 35DC  1A          	DB	26		;GAP 3
 4426 35DD  DA          	DB	218		;GAP 4 (4E's) (872)
 4427 35DE  04          	DB	4		;GAPR (Flag for multiple repeats of GAP4)
 4428 35DF  02          	DB	2		;512 Bytes/sec
 4429 35E0  4E          	DB	04EH		;GAP Format fill character
 4430 35E1  E5          	DB	0E5H		;Data area fill character (for CPM)
 4431 35E2  1971        	DW	1971H		;Size in bytes of 1 formatted track
 4432 35E4  00          	DB	0		;No special post formating modifications of disk req
 4433 35E5  3617        	DW	SKEW_DEC	;Location of this disks sector skew table
 4434 35E7  0A          	DB	0AH		;Each format will have a unique number. For disk to disk copy
 4435 35E8  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4436 35E9  35 22 2C 20 	DB	'5", DDDS, 512 byte, 9 sector DEC VT180 format',0
 4437 3617              SKEW_DEC:
 4438 3617  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4439                   ;
 4440                   ;
 4441                   ; 5", 256 byte, DDDS, 16 sector TOSHIBA T-100 format
 4442 3620  10          TOSHIBA: DB	16		;sectors per track
 4443 3621  23          	DB	35		;tracks per side
 4444 3622  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4445 3623  50          	DB	80		;index header gap
 4446 3624  0C          	DB	12		;GAP 1
 4447 3625  16          	DB	22		;GAP 2
 4448 3626  32          	DB	50		;GAP 3
 4449 3627  B7          	DB	183		;GAP 4 (4E's) (366)
 4450 3628  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4451 3629  01          	DB	1		;256 Bytes/sec
 4452 362A  4E          	DB	04EH		;GAP Format fill character
 4453 362B  E5          	DB	0E5H		;Data area fill character (for CPM)
 4454 362C  1928        	DW	1928H		;Size in bytes of 1 formatted track
 4455 362E  00          	DB	0		;No special post formating modifications of disk req
 4456 362F  3666        	DW	SKEW_TOSH	;Location of this disks sector skew table
 4457 3631  0B          	DB	0BH		;Each format will have a unique number. For disk to disk copy
 4458 3632  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4459 3633  35 22 2C 20 	DB	'5", DDDS, 256 byte, 16 sector TOSHIBA T-100 format',0
 4460 3666              SKEW_TOSH:
 4461 3666  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH
 4462                   ;
 4463                   ;
 4464                   ; 5", 128 byte, CROMEMCO CDOS (SINGLE density) Format
 4465 3675  12          CDOS:	DB	18		;sectors per track
 4466 3676  28          	DB	40		;tracks per side
 4467 3677  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4468 3678  0C          	DB	20-8		;index header gap
 4469 3679  06          	DB	6		;GAP 1
 4470 367A  0B          	DB	11		;GAP 2
 4471 367B  08          	DB	8		;GAP 3
 4472 367C  B9          	DB	185		;GAP 4 (FF's)
 4473 367D  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4474 367E  00          	DB	0		;128 Bytes/sec
 4475 367F  FF          	DB	0FFH		;GAP Format fill character
 4476 3680  E5          	DB	0E5H		;Data area fill character
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  78
VF      Z80

 4477 3681  0CA3        	DW	0CA3H		;Size in bytes of 1 formatted track
 4478 3683  00          	DB	0H		;No special post formating modifications of disk req
 4479 3684  36B1        	DW	SKEW_CDOS	;Location of this disks sector skew table
 4480 3686  0C          	DB	0CH		;Each format will have a unique number. For disk to disk copy
 4481 3687  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4482 3688  35 22 2C 20 	DB	'5", SDDS, 128 byte, CROMEMCO CDOS Format',0
 4483 36B1              SKEW_CDOS:
 4484 36B1  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH,0BH,0CH,0DH,0EH,0FH,10H,11H
 4485                   ;
 4486                   ; 5", 512 byte, CROMEMCO CDOS w/INTL TERM. CP/M Format
 4487 36C2  0A          CDOSDD:	DB	10		;sectors per track
 4488 36C3  28          	DB	40		;tracks per side
 4489 36C4  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4490 36C5  50          	DB	80		;index header gap
 4491 36C6  0C          	DB	12		;GAP 1
 4492 36C7  16          	DB	22		;GAP 2
 4493 36C8  1E          	DB	30		;GAP 3
 4494 36C9  D6          	DB	214		;GAP 4 (FF's)
 4495 36CA  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4496 36CB  02          	DB	2		;512 Bytes/sec
 4497 36CC  FF          	DB	0FFH		;GAP Format fill character
 4498 36CD  E5          	DB	0E5H		;Data area fill character
 4499 36CE  188E        	DW	188EH		;Size in bytes of 1 formatted track
 4500 36D0  00          	DB	0H		;No special post formating modifications of disk req
 4501 36D1  3702        	DW	SKEW_CDOS2	;Location of this disks sector skew table
 4502 36D3  0D          	DB	0DH		;Each format will have a unique number. For disk to disk copy
 4503 36D4  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4504 36D5  35 22 2C 20 	DB	'5", DDDS, 512 byte, CROMEMCO CDOS/CPM Format',0
 4505 3702              SKEW_CDOS2:
 4506 3702  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4507                   
 4508                   ; 5", 512 byte, EPSON QX-10 Format
 4509 370C  0A          EPSON:	DB	10		;sectors per track
 4510 370D  28          	DB	40		;tracks per side
 4511 370E  30          	DB	00110000B	;Disk HW_BYTE (SDDS)
 4512 370F  50          	DB	80		;index header gap
 4513 3710  0C          	DB	12		;GAP 1
 4514 3711  16          	DB	22		;GAP 2
 4515 3712  1E          	DB	30		;GAP 3
 4516 3713  D6          	DB	214		;GAP 4 (FF's)
 4517 3714  01          	DB	1		;GAPR (Flag for multiple repeats of GAP4)
 4518 3715  02          	DB	2		;512 Bytes/sec
 4519 3716  FF          	DB	0FFH		;GAP Format fill character
 4520 3717  E5          	DB	0E5H		;Data area fill character
 4521 3718  188E        	DW	188EH		;Size in bytes of 1 formatted track
 4522 371A  00          	DB	0H		;No special post formating modifications of disk req
 4523 371B  3746        	DW	SKEW_EPSON	;Location of this disks sector skew table
 4524 371D  0E          	DB	0EH		;Each format will have a unique number. For disk to disk copy
 4525 371E  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4526 371F  35 22 2C 20 	DB	'5", DDDS, 512 byte, EPSON QX-10 Format',0
 4527 3746              SKEW_EPSON:
 4528 3746  01 03 05 07 	DB	1H,3H,5H,7H,9H,2H,4H,6H,8H,0AH		;<-- note skew table
 4529                   ;
 4530                   ;
 4531                   ; 5", 1K byte, DDDS, 5 sector MORROW MD3 format
 4532 3750  05          MORROW: DB	5		;sectors per track
 4533 3751  28          	DB	40		;tracks per side
 4534 3752  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  79
VF      Z80

 4535 3753  50          	DB	80		;index header gap
 4536 3754  0C          	DB	12		;GAP 1
 4537 3755  16          	DB	22		;GAP 2
 4538 3756  32          	DB	50		;GAP 3
 4539 3757  C0          	DB	192		;GAP 4 (4E's) (574)
 4540 3758  03          	DB	3		;GAPR (Flag for multiple repeats of GAP4)
 4541 3759  03          	DB	3		;1024 Bytes/sec
 4542 375A  4E          	DB	04EH		;GAP Format fill character
 4543 375B  E5          	DB	0E5H		;Data area fill character (for CPM)
 4544 375C  1977        	DW	1977H		;Size in bytes of 1 formatted track
 4545 375E  00          	DB	0		;No special post formating modifications of disk req
 4546 375F  3793        	DW	SKEW_MORROW	;Location of this disks sector skew table
 4547 3761  0F          	DB	0FH		;Each format will have a unique number. For disk to disk copy
 4548 3762  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4549 3763  35 22 2C 20 	DB	'5", DDDS, 1024 byte, 9 sector MORROW MD3 format',0
 4550 3793              SKEW_MORROW:
 4551 3793  01 02 03 04 	DB	1H,2H,3H,4H,5H
 4552                   ;
 4553                   ;
 4554                   ; 5", 512 byte, DDDS, 5 sector ZENITH Z-100 format
 4555 3798  08          ZENITH: DB	8		;sectors per track
 4556 3799  28          	DB	40		;tracks per side
 4557 379A  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4558 379B  50          	DB	80		;index header gap
 4559 379C  0C          	DB	12		;GAP 1
 4560 379D  16          	DB	22		;GAP 2
 4561 379E  1A          	DB	26		;GAP 3
 4562 379F  F2          	DB	242		;GAP 4 (4E's) (1454)
 4563 37A0  06          	DB	6		;GAPR (Flag for multiple repeats of GAP4)
 4564 37A1  02          	DB	2		;512 Bytes/sec
 4565 37A2  4E          	DB	04EH		;GAP Format fill character
 4566 37A3  E5          	DB	0E5H		;Data area fill character (for CPM)
 4567 37A4  1933        	DW	1933H		;Size in bytes of 1 formatted track
 4568 37A6  00          	DB	0		;No special post formating modifications of disk req
 4569 37A7  37DC        	DW	SKEW_ZENITH	;Location of this disks sector skew table
 4570 37A9  10          	DB	10H		;Each format will have a unique number. For disk to disk copy
 4571 37AA  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4572 37AB  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector ZENITH Z-100 format',0
 4573 37DC              SKEW_ZENITH:
 4574 37DC  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4575                   ;
 4576                   ;
 4577                   ; 5", 512 byte, DDDS, 10 sector SUPERBRAIN QD format
 4578 37E4  0A          SUPER: DB	10		;sectors per track
 4579 37E5  23          	DB	35		;tracks per side
 4580 37E6  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4581 37E7  50          	DB	80		;index header gap
 4582 37E8  0C          	DB	12		;GAP 1
 4583 37E9  16          	DB	22		;GAP 2
 4584 37EA  10          	DB	16		;GAP 3
 4585 37EB  B1          	DB	177		;GAP 4 (4E's) (354)
 4586 37EC  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4587 37ED  02          	DB	2		;512 Bytes/sec
 4588 37EE  4E          	DB	04EH		;GAP Format fill character
 4589 37EF  E5          	DB	0E5H		;Data area fill character (for CPM)
 4590 37F0  193A        	DW	193AH		;Size in bytes of 1 formatted track
 4591 37F2  00          	DB	0		;No special post formating modifications of disk req
 4592 37F3  382A        	DW	SKEW_SUPER	;Location of this disks sector skew table
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  80
VF      Z80

 4593 37F5  11          	DB	11H		;Each format will have a unique number. For disk to disk copy
 4594 37F6  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4595 37F7  35 22 2C 20 	DB	'5", DDDS, 512 byte, 10 sector SUPERBRAIN QD format',0
 4596 382A              SKEW_SUPER:
 4597 382A  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4598                   ;
 4599                   ;
 4600                   ; 5", IBM PC, MSDOS 1.1, 512 byte, DDDS, 8 sector format
 4601 3834  08          MSDOS:	DB	8		;sectors per track
 4602 3835  28          	DB	40		;tracks per side
 4603 3836  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4604 3837  50          	DB	80		;index header gap
 4605 3838  0C          	DB	12		;GAP 1
 4606 3839  16          	DB	22		;GAP 2
 4607 383A  50          	DB	80		;GAP 3
 4608 383B  C1          	DB	193		;GAP 4 (4E's)
 4609 383C  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4610 383D  02          	DB	2		;512 Bytes/sec
 4611 383E  4E          	DB	04EH		;GAP Format fill character
 4612 383F  E5          	DB	0E5H		;Data area fill character
 4613 3840  16B2        	DW	16B2H		;Size in bytes of 1 formatted track
 4614 3842  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4615 3843  387B        	DW	SKEW_DOS1	;Location of this disks sector skew table
 4616 3845  12          	DB	12H		;Each format will have a unique number. For disk to disk copy
 4617 3846  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4618 3847  35 22 2C 20 	DB	'5", DDDS, 512 byte, 8 sector IBMPC MSDOS 1.1 format',0
 4619 387B              SKEW_DOS1:
 4620 387B  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H
 4621                   ;
 4622                   ;
 4623                   ; 5", IBM PC, MSDOS 2.x, 512 byte, DDDS, 9 sector format
 4624 3883  09          MSDOS2:	DB	9		;sectors per track
 4625 3884  28          	DB	40		;tracks per side
 4626 3885  70          	DB	01110000B	;Disk HW_BYTE (DDDS)
 4627 3886  50          	DB	80		;index header gap
 4628 3887  0C          	DB	12		;GAP 1
 4629 3888  16          	DB	22		;GAP 2
 4630 3889  50          	DB	80		;GAP 3
 4631 388A  C1          	DB	193		;GAP 4 (4E's)
 4632 388B  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4633 388C  02          	DB	2		;512 Bytes/sec
 4634 388D  4E          	DB	04EH		;GAP Format fill character
 4635 388E  E5          	DB	0E5H		;Data area fill character
 4636 388F  193E        	DW	193EH		;Size in bytes of 1 formatted track
 4637 3891  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4638 3892  38CA        	DW	SKEW_DOS2	;Location of this disks sector skew table
 4639 3894  13          	DB	13H		;Each format will have a unique number. For disk to disk copy
 4640 3895  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4641 3896  35 22 2C 20 	DB	'5", DDDS, 512 byte, 9 sector IBMPC MSDOS 2.x format',0
 4642 38CA              SKEW_DOS2:
 4643 38CA  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H
 4644                   ;
 4645                   ;
 4646                   ; 5", TRS-80 MOD-III, 512 byte, DDDS, 10 sector format
 4647 38D3  0A          TRS80:	DB	10		;sectors per track
 4648 38D4  28          	DB	40		;tracks per side
 4649 38D5  60          	DB	01100000B	;Disk HW_BYTE (DDSS)
 4650 38D6  50          	DB	80		;index header gap
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  81
VF      Z80

 4651 38D7  0C          	DB	12		;GAP 1
 4652 38D8  16          	DB	22		;GAP 2
 4653 38D9  1A          	DB	26		;GAP 3
 4654 38DA  89          	DB	137		;GAP 4 (4E's)
 4655 38DB  02          	DB	2		;GAPR (Flag for multiple repeats of GAP4)
 4656 38DC  02          	DB	2		;512 Bytes/sec
 4657 38DD  4E          	DB	04EH		;GAP Format fill character
 4658 38DE  E5          	DB	0E5H		;Data area fill character
 4659 38DF  1976        	DW	1976H		;Size in bytes of 1 formatted track
 4660 38E1  00          	DB	0H		;Special formating modifications of disk req (+++ NOT DONE YET)
 4661 38E2  391A        	DW	SKEW_TRS	;Location of this disks sector skew table
 4662 38E4  14          	DB	14H		;Each format will have a unique number. For disk to disk copy
 4663 38E5  02          	DB	2		;Tracks set aside for operating system (eg CPM 2)
 4664 38E6  35 22 2C 20 	DB	'5", DDSS, 512 byte, 10 sector TRS-80 MOD-III format',0
 4665 391A              SKEW_TRS:
 4666 391A  01 02 03 04 	DB	1H,2H,3H,4H,5H,6H,7H,8H,9H,0AH
 4667                   ;
 4668                   ;
 4669                   ;----------------------------------------------------------------------------------------
 4670                   ;
 4671                   ;
 4672                   ; THE FOLLOWING RAM LOCATIONS ARE REQ
 4673                   ;
 4674 3924  0000        IX_OLD_STORE	DW	0000H
 4675 3926  00          ERRORS_FLAG	DB	0H	;Will keep tarck of errors during a routine
 4676 3927  00          CRTDISP		DB	0H
 4677 3928    0006      IDSV		DS	6H
 4678 392E  00          CMD_STORE	DB	0H	;Menu CMD Store (Note: NOT CHIP CMD,CHIP_CMDSV)
 4679 392F  00          ERMASK		DB	0H	;ERROR MASK
 4680 3930  00          ERSTAT		DB	0H	;PRESENT ERROR STORE
 4681 3931  00          CHIP_CMDSV	DB	0H	;COMMAND TO 1791/5 SAVE
 4682 3932  0000        SP_SAVE		DW	0000H	;SP SAVE
 4683 3934  00          SEC_RT_COUNT	DB	0H	;Number of sector reads before setting error flag
 4684 3935  00          SEEK_RT_COUNT	DB	0H	;Number of seek retrys
 4685 3936  00          TRK_RT_COUNT	DB	0H	;Number of track reads before setting error flag
 4686 3937  0000        TRACK_SIZE	DW	0000H	;Size in bytes of current formatted track
 4687 3939  00          SEC_COUNT	DB	0H	;number of sectors to load
 4688 393A  0000        DMA_NEXT	DW	0	;Store for next (TADDR) for multiple sec R/W's 
 4689 393C  00          COPY_TRK_COUNT:	DB	0H	;Used for disk to disk track copying
 4690 393D  00          COPY_TRK	DB	0H
 4691 393E  00          DRIVE_STORE	DB	0H	;For 8' quick formatting
 4692                   ;
 4693 393F  00          F_TRK		DB	0H	;for building format track image
 4694 3940  00          F_SIDE		DB	0H	;for building format track image
 4695 3941  0000        INDEX_MARK	DW	0000H	;End of Index field +1
 4696 3943  0000        S_DATA_MARK	DW	0000H	;Pointer to start of Data area
 4697 3945  0000        E_DATA_MARK	DW	0000H	;Pointer to end of Data area+1
 4698 3947  0000        E_SEC_MARK	DW	0000H	;End Sector image +1
 4699 3949  0000        S_GAP4_MARK	DW	0000H	;start GAP4 area
 4700 394B  0000        E_GAP4_MARK	DW	0000H	;End track +1
 4701                   	
 4702 394D    0100      		DS	100H
 4703         3A4D      STACK	EQU	$
 4704                   
 4705                   ;END
 4706                   
Z80ASM SuperFast Relocating Macro Assembler     	    Z80ASM 1.30 Page  82


 0 Error(s) Detected.
 14669 Absolute Bytes. 612 Symbols Detected.
